
AutonomousDriving.elf:     file format elf32-littlenios2
AutonomousDriving.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000ebc8 memsz 0x0000ebc8 flags r-x
    LOAD off    0x0000fbe8 vaddr 0x0000ebe8 paddr 0x00010714 align 2**12
         filesz 0x00001b2c memsz 0x00001b2c flags rw-
    LOAD off    0x00012240 vaddr 0x00012240 paddr 0x00012240 align 2**12
         filesz 0x00000000 memsz 0x000003ac flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000e664  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003d0  0000e818  0000e818  0000f818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b2c  0000ebe8  00010714  0000fbe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000003ac  00012240  00012240  00012240  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00011714  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e58  00000000  00000000  00011740  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001ac0  00000000  00000000  00012598  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00026f25  00000000  00000000  00014058  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008de1  00000000  00000000  0003af7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00015a57  00000000  00000000  00043d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001d78  00000000  00000000  000597b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002322  00000000  00000000  0005b530  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000ca20  00000000  00000000  0005d852  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0006a274  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ad8  00000000  00000000  0006a2a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006e5b6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0006e5b9  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0006e5bc  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000009  00000000  00000000  0006e5bd  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000009  00000000  00000000  0006e5c6  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000009  00000000  00000000  0006e5cf  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 0000000d  00000000  00000000  0006e5d8  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 0000001f  00000000  00000000  0006e5e5  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     000a7c45  00000000  00000000  0006e604  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
0000e818 l    d  .rodata	00000000 .rodata
0000ebe8 l    d  .rwdata	00000000 .rwdata
00012240 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 head.c
00000000 l    df *ABS*	00000000 smaro.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
000007d4 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000fac l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00001680 l     F .text	00000058 __sprint_r
0000ea12 l     O .rodata	00000010 blanks.3452
0000ea02 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000036e4 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000050e0 l     F .text	00000058 std
000051ec l     F .text	00000008 __fp_lock
000051f4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000ebe8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
000106d8 l     O .rwdata	00000004 charset
0000ea48 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000eb90 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00009380 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0000aabc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000ab1c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000ac1c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000ad3c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000ae1c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000af78 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000b1a4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000106fc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000b440 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000f5a4 l     O .rwdata	000000c8 epcs
0000f66c l     O .rwdata	00001060 jtag_uart
0000b538 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0000b5fc l     F .text	00000288 alt_epcs_flash_query
0000b5c4 l     F .text	00000038 alt_flash_device_register
0000b884 l     F .text	00000108 alt_epcs_flash_memcmp
0000bd0c l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000c15c l     F .text	00000228 altera_avalon_jtag_uart_irq
0000c384 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000ca00 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 epcs_commands.c
0000cc58 l     F .text	00000038 epcs_await_wip_released
0000cc90 l     F .text	00000038 epcs_test_wip
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000d420 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000d914 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000da50 l     F .text	000000dc alt_file_locked
0000dcb4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000e600 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000e7b4 l     F .text	00000040 alt_sim_halt
00006e9c g     F .text	00000094 _mprec_log10
00012240 g     O .bss	00000004 pI2CDataAvailable
0000bc0c g     F .text	00000090 alt_epcs_flash_get_info
00006f88 g     F .text	00000088 __any_on
00008694 g     F .text	00000070 _isatty_r
0000eb68 g     O .rodata	00000028 __mprec_tinytens
0000afd8 g     F .text	0000006c alt_main
00001558 g     F .text	000000a0 _puts_r
0001235c g     O .bss	00000100 alt_irq
00008704 g     F .text	00000078 _lseek_r
00010714 g       *ABS*	00000000 __flash_rwdata_start
00009ea0 g     F .text	00000088 __eqdf2
000125ec g       *ABS*	00000000 __alt_heap_start
000014e0 g     F .text	00000044 printf
00008160 g     F .text	00000068 __sseek
00005148 g     F .text	000000a4 __sinit
00005e20 g     F .text	00000084 _setlocale_r
00005248 g     F .text	00000068 __sfmoreglue
0000b064 g     F .text	00000020 __malloc_unlock
00000c6c g     F .text	00000174 __divsf3
00006918 g     F .text	000000e0 memmove
00005238 g     F .text	00000010 _cleanup
00012244 g     O .bss	00000004 pRearRightEncRead
00007010 g     F .text	000000bc _Balloc
00000e58 g     F .text	00000094 __fixsfsi
00009fb0 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0000cb60 g     F .text	000000f8 epcs_sector_erase
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00008620 g     F .text	00000074 _fstat_r
000122b4 g     O .bss	00000004 errno
00012248 g     O .bss	00000004 pFrontLeftEncRead
000122bc g     O .bss	00000004 alt_argv
000186cc g       *ABS*	00000000 _gp
000009b8 g     F .text	00000070 __subsf3
0000f424 g     O .rwdata	00000180 alt_fd_list
0001224c g     O .bss	00000004 pHc_sr04
000004ac g     F .text	000000ac I2CRead
0000ce64 g     F .text	00000064 epcs_write_status_register
0000e110 g     F .text	00000094 alt_find_dev
00006878 g     F .text	000000a0 memcpy
0000035c g     F .text	0000006c set_duty_cycle
0000522c g     F .text	0000000c _cleanup_r
0000a148 g     F .text	000000f8 __floatsidf
0000d9d8 g     F .text	00000078 alt_io_redirect
0000a0c0 g     F .text	00000088 __ltdf2
0000e818 g       *ABS*	00000000 __DTOR_END__
000015f8 g     F .text	00000014 puts
0000deb8 g     F .text	00000020 altera_nios2_irq_init
0000bda0 g     F .text	0000011c alt_epcs_flash_write_block
00006dec g     F .text	000000b0 __ratio
0000c59c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00001524 g     F .text	00000034 _printf_r
000010e8 g     F .text	00000008 __udivsi3
0000ac7c g     F .text	000000c0 isatty
0000ea78 g     O .rodata	000000c8 __mprec_tens
00005dfc g     F .text	00000008 __locale_charset
00012250 g     O .bss	00000004 pFrontRightDutySet
0000e37c g     F .text	00000090 alt_icache_flush
000122a8 g     O .bss	00000004 __malloc_top_pad
000106d4 g     O .rwdata	00000004 __mb_cur_max
00005e04 g     F .text	0000000c _localeconv_r
00007708 g     F .text	0000003c __i2b
000057e0 g     F .text	0000049c __sfvwrite_r
000080e8 g     F .text	00000070 _sbrk_r
0000877c g     F .text	00000078 _read_r
0000efe8 g     O .rwdata	0000000c __lc_ctype
000106f4 g     O .rwdata	00000004 alt_max_fd
0000a7c0 g     F .text	00000138 __unpack_d
000084fc g     F .text	00000110 _fclose_r
02005000 g       *ABS*	00000000 __alt_mem_state_cmd_memory
000050ac g     F .text	00000034 fflush
000122ac g     O .bss	00000004 __malloc_max_sbrked_mem
00009810 g     F .text	00000074 __adddf3
0000bc9c g     F .text	00000070 alt_epcs_flash_erase_block
00006ccc g     F .text	00000120 __b2d
00008dd0 g     F .text	000005b0 __umoddi3
0000ae88 g     F .text	000000f0 lseek
000106d0 g     O .rwdata	00000004 _global_impure_ptr
0000d17c g     F .text	00000058 epcs_exit_4_bytes_mode
00007a84 g     F .text	000005f4 _realloc_r
000125ec g       *ABS*	00000000 __bss_end
0000d81c g     F .text	000000f8 alt_iic_isr_register
0000ddac g     F .text	0000010c alt_tick
000087f4 g     F .text	000005dc __udivdi3
0000eb40 g     O .rodata	00000028 __mprec_bigtens
00007964 g     F .text	00000120 __s2b
0000a318 g     F .text	00000194 __floatunsidf
00006bec g     F .text	00000060 __mcmp
00005214 g     F .text	00000018 __fp_lock_all
0000d7d4 g     F .text	00000048 alt_ic_irq_enabled
0000dd14 g     F .text	00000098 alt_alarm_stop
000122c4 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
0000f3fc g     O .rwdata	00000028 alt_dev_null
00001370 g     F .text	000000c8 __unpack_f
0000d328 g     F .text	00000044 alt_dcache_flush_all
00006ab8 g     F .text	00000070 __hi0bits
0000a240 g     F .text	000000d8 __fixdfsi
00010714 g       *ABS*	00000000 __ram_rwdata_end
000106ec g     O .rwdata	00000008 alt_dev_list
0000b320 g     F .text	00000120 write
0000ebe8 g       *ABS*	00000000 __ram_rodata_end
0000ab48 g     F .text	000000d4 fstat
000003c8 g     F .text	00000080 MeasureDistance
00007844 g     F .text	00000120 __pow5mult
0001229c g     O .bss	00000004 __nlocale_changed
000010f0 g     F .text	00000008 __umodsi3
0000d038 g     F .text	0000006c epcs_read_electronic_signature
000125ec g       *ABS*	00000000 end
00001210 g     F .text	00000160 __pack_f
0000c09c g     F .text	000000c0 altera_avalon_jtag_uart_init
00012254 g     O .bss	00000004 pRearRightEncSet
0000e814 g       *ABS*	00000000 __CTOR_LIST__
01100000 g       *ABS*	00000000 __alt_stack_pointer
0000ca70 g     F .text	00000090 alt_avalon_timer_sc_init
00001190 g     F .text	00000080 __clzsi2
0000c7c0 g     F .text	00000240 altera_avalon_jtag_uart_write
00005138 g     F .text	00000004 __sfp_lock_acquire
00006794 g     F .text	000000e4 memchr
000016d8 g     F .text	00001eac ___vfprintf_internal_r
000054cc g     F .text	00000314 _free_r
00012258 g     O .bss	00000004 pI2CRegWriteData
0000e604 g     F .text	000001b0 __call_exitprocs
000122a0 g     O .bss	00000004 __mlocale_changed
000106e0 g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000004c _start
000122c8 g     O .bss	00000004 _alt_tick_rate
000073d4 g     F .text	0000014c __lshift
0000ded8 g     F .text	00000238 alt_avalon_spi_command
000122cc g     O .bss	00000004 _alt_nticks
0000b084 g     F .text	00000120 read
0000b4d4 g     F .text	00000064 alt_sys_init
0000e4cc g     F .text	00000134 __register_exitproc
00007520 g     F .text	000001e8 __multiply
0000c434 g     F .text	00000074 altera_avalon_jtag_uart_close
0000ebe8 g       *ABS*	00000000 __ram_rwdata_start
0000e818 g       *ABS*	00000000 __ram_rodata_start
000122d0 g     O .bss	00000028 __malloc_current_mallinfo
000070cc g     F .text	0000017c __d2b
0000cb00 g     F .text	00000060 epcs_read_status_register
0001225c g     O .bss	00000001 c
0000bf54 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000e2c4 g     F .text	000000b8 alt_get_fd
0000a8f8 g     F .text	000000c8 __fpcmp_parts_d
00012260 g     O .bss	00000004 pUltraSoundArray
0000848c g     F .text	00000070 _close_r
00012264 g     O .bss	00000004 pFrontLeftEncSet
0000d0a4 g     F .text	00000080 epcs_read_device_id
0000e458 g     F .text	00000074 memcmp
0000c004 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
000125ec g       *ABS*	00000000 __alt_stack_base
0000c04c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
000035a8 g     F .text	0000013c __swsetup_r
00000200 g     F .text	00000120 init
00009c48 g     F .text	00000258 __divdf3
000122f8 g     O .bss	00000064 versionName
000052b0 g     F .text	000000f0 __sfp
00006f30 g     F .text	00000058 __copybits
0000eff4 g     O .rwdata	00000408 __malloc_av_
00005144 g     F .text	00000004 __sinit_lock_release
00009884 g     F .text	000003c4 __muldf3
00008244 g     F .text	00000060 __sread
0000e890 g     O .rodata	00000010 __thenan_sf
0000e1a4 g     F .text	00000120 alt_find_file
0000d36c g     F .text	000000b4 alt_dev_llist_insert
0000b044 g     F .text	00000020 __malloc_lock
0000b264 g     F .text	000000bc sbrk
00004eb0 g     F .text	000001fc _fflush_r
000083d8 g     F .text	000000b4 _calloc_r
00010700 g     O .rwdata	00000008 alt_flash_dev_list
00012268 g     O .bss	00000004 pFrontRightEncRead
00012240 g       *ABS*	00000000 __bss_start
000069f8 g     F .text	00000098 memset
00000558 g     F .text	0000020c main
000122c0 g     O .bss	00000004 alt_envp
000122b0 g     O .bss	00000004 __malloc_max_total_mem
0000bfac g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00008158 g     F .text	00000008 __sclose
01100000 g       *ABS*	00000000 __alt_heap_limit
0000860c g     F .text	00000014 fclose
0001245c g     O .bss	00000190 _atexit0
000038fc g     F .text	000015b4 _dtoa_r
00006054 g     F .text	00000740 _malloc_r
000106f8 g     O .rwdata	00000004 alt_errno
0001226c g     O .bss	00000004 pI2CDataLen
02004000 g       *ABS*	00000000 __alt_mem_manuer_queue
00000448 g     F .text	00000064 I2CWrite
00005d44 g     F .text	000000b8 _fwalk
00001028 g     F .text	00000060 __divsi3
0000eb9c g     O .rodata	00000014 __thenan_df
000053a0 g     F .text	0000012c _malloc_trim_r
0000e818 g       *ABS*	00000000 __CTOR_END__
00000a8c g     F .text	000001e0 __mulsf3
0000b98c g     F .text	00000280 alt_epcs_flash_write
000082a4 g     F .text	000000bc strcmp
0000e818 g       *ABS*	00000000 __flash_rodata_start
0000e818 g       *ABS*	00000000 __DTOR_LIST__
00012270 g     O .bss	00000004 uPwmPeriod
00012274 g     O .bss	00000004 pFrontLeftDutySet
00000320 g     F .text	0000003c delay
00009f28 g     F .text	00000088 __nedf2
00012278 g     O .bss	00000004 pI2C
0000b4a0 g     F .text	00000034 alt_irq_init
0000b204 g     F .text	00000060 alt_release_fd
0000e8a0 g     O .rodata	00000100 __clz_tab
000122a4 g     O .bss	00000004 _PathLocale
0000e40c g     F .text	00000014 atexit
00000de0 g     F .text	00000078 __gesf2
00008360 g     F .text	00000078 _write_r
00005ea4 g     F .text	0000001c setlocale
000106cc g     O .rwdata	00000004 _impure_ptr
0001227c g     O .bss	00000004 pRearLeftEncSet
00012280 g     O .bss	00000004 pFrontRightEncSet
000122b8 g     O .bss	00000004 alt_argc
0000d4e4 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00012284 g     O .bss	00000004 pRearLeftEncRead
00006c4c g     F .text	00000080 __ulp
00008078 g     F .text	00000040 __isinfd
000051fc g     F .text	00000018 __fp_unlock_all
000106e4 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005e10 g     F .text	00000010 localeconv
0000ccc8 g     F .text	0000014c epcs_read_buffer
0000b570 g     F .text	00000054 alt_epcs_flash_init
0000d648 g     F .text	00000050 alt_ic_isr_register
00010714 g       *ABS*	00000000 _edata
000125ec g       *ABS*	00000000 _end
00012288 g     O .bss	00000004 pRearLeftDutySet
0000d548 g     F .text	0000007c alt_flash_open_dev
000001b4 g       *ABS*	00000000 __ram_exceptions_end
0000c4a8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000d734 g     F .text	000000a0 alt_ic_irq_disable
0000d124 g     F .text	00000058 epcs_enter_4_bytes_mode
000081c8 g     F .text	0000007c __swrite
000106dc g     O .rwdata	00000004 __malloc_trim_threshold
0000e420 g     F .text	00000038 exit
00005c7c g     F .text	000000c8 _fwalk_reent
00000eec g     F .text	000000c0 __floatunsisf
00007248 g     F .text	0000018c __mdiff
0000d5c4 g     F .text	00000054 alt_flash_close_dev
00001088 g     F .text	00000060 __modsi3
01100000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000513c g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
0001228c g     O .bss	00000004 pRearRightDutySet
00012290 g     O .bss	00000004 pwm_enable
00000764 g     F .text	00000070 __fixunssfsi
00001438 g     F .text	000000a8 __fpcmp_parts_f
0000e7f4 g     F .text	00000020 _exit
000080b8 g     F .text	00000030 __isnand
0000d1d4 g     F .text	00000154 alt_alarm_start
000010f8 g     F .text	00000098 __muldi3
00005ec0 g     F .text	00000194 __smakebuf_r
0000160c g     F .text	00000074 strlen
0000ce14 g     F .text	00000050 epcs_write_enable
0000db2c g     F .text	00000188 open
0000a038 g     F .text	00000088 __gedf2
0000d618 g     F .text	00000030 alt_icache_flush_all
00012294 g     O .bss	00000004 pI2CCmd
00010708 g     O .rwdata	00000004 alt_priority_mask
0000d698 g     F .text	0000009c alt_ic_irq_enable
00003584 g     F .text	00000024 __vfprintf_internal
02000000 g       *ABS*	00000000 __alt_mem_epcs
00009790 g     F .text	00000080 __subdf3
0000bebc g     F .text	00000098 alt_epcs_flash_read
00006b28 g     F .text	000000c4 __lo0bits
0001070c g     O .rwdata	00000008 alt_alarm_list
0000d480 g     F .text	00000064 _do_ctors
0000a9c0 g     F .text	000000fc close
00000a28 g     F .text	00000064 __addsf3
0000ad9c g     F .text	00000080 alt_load
0000a4ac g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00005140 g     F .text	00000004 __sinit_lock_acquire
0000cec8 g     F .text	00000170 epcs_write_buffer
00007744 g     F .text	00000100 __multadd
00006a90 g     F .text	00000028 _Bfree
00012298 g     O .bss	00000004 pI2CReg



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00810014 	movui	r2,1024
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18c8d704 	addi	r3,r3,9052
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18c8d704 	addi	r3,r3,9052
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     1b4:	00810014 	movui	r2,1024
#endif

0:
    initd 0(r2)
     1b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     1bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
     1c0:	00bffd16 	blt	zero,r2,1b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1c4:	06c04434 	movhi	sp,272
    ori sp, sp, %lo(__alt_stack_pointer)
     1c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1cc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1d0:	d6a1b314 	ori	gp,gp,34508
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1d4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1d8:	10889014 	ori	r2,r2,8768

    movhi r3, %hi(__bss_end)
     1dc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1e0:	18c97b14 	ori	r3,r3,9708

    beq r2, r3, 1f
     1e4:	10c00326 	beq	r2,r3,1f4 <_start+0x40>

0:
    stw zero, (r2)
     1e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1f0:	10fffd36 	bltu	r2,r3,1e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1f4:	000ad9c0 	call	ad9c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1f8:	000afd80 	call	afd8 <alt_main>

000001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1fc:	003fff06 	br	1fc <alt_after_alt_main>

00000200 <init>:

#include "head.h"

void init(void)
{
     200:	deffff04 	addi	sp,sp,-4
     204:	df000015 	stw	fp,0(sp)
     208:	d839883a 	mov	fp,sp
	//c = 33;
	//versionName[100] = "Nano Board Version 1.0\n";
	pwm_enable = (volatile unsigned int*)(0x80000000 | PWM_ENABLE);
     20c:	00a10034 	movhi	r2,33792
     210:	10841004 	addi	r2,r2,4160
     214:	d0a6f115 	stw	r2,-25660(gp)

	pFrontRightDutySet = (volatile unsigned int*)(0x80000000 | FRONT_RIGHT_DUTY_SET);
     218:	00a10034 	movhi	r2,33792
     21c:	10841104 	addi	r2,r2,4164
     220:	d0a6e115 	stw	r2,-25724(gp)
	pRearRightDutySet = (volatile unsigned int*)(0x80000000 | REAR_RIGHT_DUTY_SET);
     224:	00a10034 	movhi	r2,33792
     228:	10841204 	addi	r2,r2,4168
     22c:	d0a6f015 	stw	r2,-25664(gp)
	pRearLeftDutySet = (volatile unsigned int*)(0x80000000 | REAR_LEFT_DUTY_SET);
     230:	00a10034 	movhi	r2,33792
     234:	10841304 	addi	r2,r2,4172
     238:	d0a6ef15 	stw	r2,-25668(gp)
	pFrontLeftDutySet = (volatile unsigned int*)(0x80000000 | FRONT_LEFT_DUTY_SET);
     23c:	00a10034 	movhi	r2,33792
     240:	10841404 	addi	r2,r2,4176
     244:	d0a6ea15 	stw	r2,-25688(gp)

	pFrontRightEncSet = (volatile unsigned int*)(0x80000000 |FRONT_RIGHT_ENC_SET);
     248:	00a10034 	movhi	r2,33792
     24c:	10841504 	addi	r2,r2,4180
     250:	d0a6ed15 	stw	r2,-25676(gp)
	pRearRightEncSet = (volatile unsigned int*)(0x80000000 | REAR_RIGHT_ENC_SET);
     254:	00a10034 	movhi	r2,33792
     258:	10841604 	addi	r2,r2,4184
     25c:	d0a6e215 	stw	r2,-25720(gp)
	pRearLeftEncSet = (volatile unsigned int*)(0x80000000 | REAR_LEFT_ENC_SET);
     260:	00a10034 	movhi	r2,33792
     264:	10841704 	addi	r2,r2,4188
     268:	d0a6ec15 	stw	r2,-25680(gp)
	pFrontLeftEncSet = (volatile unsigned int*)(0x80000000 | FRONT_LEFT_ENC_SET);
     26c:	00a10034 	movhi	r2,33792
     270:	10841804 	addi	r2,r2,4192
     274:	d0a6e615 	stw	r2,-25704(gp)

	pFrontRightEncRead = (volatile unsigned int*)(0x80000000 |FRONT_RIGHT_ENC_READ);
     278:	00a10034 	movhi	r2,33792
     27c:	10841904 	addi	r2,r2,4196
     280:	d0a6e715 	stw	r2,-25700(gp)
	pRearRightEncRead = (volatile unsigned int*)(0x80000000 |REAR_RIGHT_ENC_READ);
     284:	00a10034 	movhi	r2,33792
     288:	10841a04 	addi	r2,r2,4200
     28c:	d0a6de15 	stw	r2,-25736(gp)
	pRearLeftEncRead = (volatile unsigned int*)(0x80000000 |REAR_LEFT_ENC_READ);
     290:	00a10034 	movhi	r2,33792
     294:	10841b04 	addi	r2,r2,4204
     298:	d0a6ee15 	stw	r2,-25672(gp)
	pFrontLeftEncRead = (volatile unsigned int*)(0x80000000 | FRONT_LEFT_ENC_READ);
     29c:	00a10034 	movhi	r2,33792
     2a0:	10841c04 	addi	r2,r2,4208
     2a4:	d0a6df15 	stw	r2,-25732(gp)

	uPwmPeriod = NIOS2_CPU_FREQ/PWM_RESOLUTION;
     2a8:	0089c404 	movi	r2,10000
     2ac:	d0a6e915 	stw	r2,-25692(gp)

	pHc_sr04 = (volatile unsigned int*)(HC_SR04_0_BASE | 0x80000000);
     2b0:	00a10034 	movhi	r2,33792
     2b4:	10840004 	addi	r2,r2,4096
     2b8:	d0a6e015 	stw	r2,-25728(gp)
	pUltraSoundArray = (volatile unsigned int*)(ULTRA_SOUND_0_READING_ADDR | 0x80000000);
     2bc:	00a10034 	movhi	r2,33792
     2c0:	10840104 	addi	r2,r2,4100
     2c4:	d0a6e515 	stw	r2,-25708(gp)

    pI2C = (volatile unsigned char*)(I2C_SLAVE_ADDR);
     2c8:	00a10034 	movhi	r2,33792
     2cc:	10842004 	addi	r2,r2,4224
     2d0:	d0a6eb15 	stw	r2,-25684(gp)
    pI2CReg = (volatile unsigned char*)(I2C_REG_ADDR);
     2d4:	00a10034 	movhi	r2,33792
     2d8:	10842044 	addi	r2,r2,4225
     2dc:	d0a6f315 	stw	r2,-25652(gp)
    pI2CRegWriteData = (volatile unsigned char*)(I2C_REG_WRITE_DATA);
     2e0:	00a10034 	movhi	r2,33792
     2e4:	10842084 	addi	r2,r2,4226
     2e8:	d0a6e315 	stw	r2,-25716(gp)
    pI2CDataLen = (volatile unsigned char*)(I2C_DATALENGTH_ADDR);
     2ec:	00a10034 	movhi	r2,33792
     2f0:	108420c4 	addi	r2,r2,4227
     2f4:	d0a6e815 	stw	r2,-25696(gp)
    pI2CCmd = (volatile unsigned char*)(I2C_CMD_ADDR);
     2f8:	00a10034 	movhi	r2,33792
     2fc:	10842104 	addi	r2,r2,4228
     300:	d0a6f215 	stw	r2,-25656(gp)
    pI2CDataAvailable = (volatile unsigned char*)(I2C_DATA_AVAILABLE_ADDR);
     304:	00a10034 	movhi	r2,33792
     308:	10842204 	addi	r2,r2,4232
     30c:	d0a6dd15 	stw	r2,-25740(gp)
}
     310:	e037883a 	mov	sp,fp
     314:	df000017 	ldw	fp,0(sp)
     318:	dec00104 	addi	sp,sp,4
     31c:	f800283a 	ret

00000320 <delay>:


void delay (volatile unsigned int del)
{
     320:	defffe04 	addi	sp,sp,-8
     324:	df000115 	stw	fp,4(sp)
     328:	df000104 	addi	fp,sp,4
     32c:	e13fff15 	stw	r4,-4(fp)
	while (del != 0)
     330:	00000306 	br	340 <delay+0x20>
	{
		del --;
     334:	e0bfff17 	ldw	r2,-4(fp)
     338:	10bfffc4 	addi	r2,r2,-1
     33c:	e0bfff15 	stw	r2,-4(fp)
}


void delay (volatile unsigned int del)
{
	while (del != 0)
     340:	e0bfff17 	ldw	r2,-4(fp)
     344:	1004c03a 	cmpne	r2,r2,zero
     348:	103ffa1e 	bne	r2,zero,334 <delay+0x14>
	{
		del --;
	}
}
     34c:	e037883a 	mov	sp,fp
     350:	df000017 	ldw	fp,0(sp)
     354:	dec00104 	addi	sp,sp,4
     358:	f800283a 	ret

0000035c <set_duty_cycle>:

unsigned int set_duty_cycle(volatile unsigned int *pTargetedWheel, unsigned int duty)
{
     35c:	defffb04 	addi	sp,sp,-20
     360:	dfc00415 	stw	ra,16(sp)
     364:	df000315 	stw	fp,12(sp)
     368:	df000304 	addi	fp,sp,12
     36c:	e13ffd15 	stw	r4,-12(fp)
     370:	e17ffe15 	stw	r5,-8(fp)
	if (duty > 100 || duty < 0) return(0);
     374:	e0bffe17 	ldw	r2,-8(fp)
     378:	10801970 	cmpltui	r2,r2,101
     37c:	1000031e 	bne	r2,zero,38c <set_duty_cycle+0x30>
     380:	0005883a 	mov	r2,zero
     384:	e0bfff15 	stw	r2,-4(fp)
     388:	00000906 	br	3b0 <set_duty_cycle+0x54>

	*pTargetedWheel = (uPwmPeriod/100) * duty; // duty is a positive number. Divide by 100 to consider percentage
     38c:	d126e917 	ldw	r4,-25692(gp)
     390:	01401904 	movi	r5,100
     394:	00010e80 	call	10e8 <__udivsi3>
     398:	1007883a 	mov	r3,r2
     39c:	e0bffe17 	ldw	r2,-8(fp)
     3a0:	1887383a 	mul	r3,r3,r2
     3a4:	e0bffd17 	ldw	r2,-12(fp)
     3a8:	10c00015 	stw	r3,0(r2)
}
     3ac:	00000106 	br	3b4 <set_duty_cycle+0x58>
     3b0:	e0bfff17 	ldw	r2,-4(fp)
     3b4:	e037883a 	mov	sp,fp
     3b8:	dfc00117 	ldw	ra,4(sp)
     3bc:	df000017 	ldw	fp,0(sp)
     3c0:	dec00204 	addi	sp,sp,8
     3c4:	f800283a 	ret

000003c8 <MeasureDistance>:

unsigned int MeasureDistance(unsigned int ch)
{
     3c8:	defffc04 	addi	sp,sp,-16
     3cc:	dfc00315 	stw	ra,12(sp)
     3d0:	df000215 	stw	fp,8(sp)
     3d4:	df000204 	addi	fp,sp,8
     3d8:	e13fff15 	stw	r4,-4(fp)
	float x = (float)pUltraSoundArray[ch] * 330000/ALT_CPU_FREQ;
     3dc:	e0bfff17 	ldw	r2,-4(fp)
     3e0:	1085883a 	add	r2,r2,r2
     3e4:	1085883a 	add	r2,r2,r2
     3e8:	1007883a 	mov	r3,r2
     3ec:	d0a6e517 	ldw	r2,-25708(gp)
     3f0:	1885883a 	add	r2,r3,r2
     3f4:	11000017 	ldw	r4,0(r2)
     3f8:	0000eec0 	call	eec <__floatunsisf>
     3fc:	1009883a 	mov	r4,r2
     400:	01522874 	movhi	r5,18593
     404:	29488004 	addi	r5,r5,8704
     408:	0000a8c0 	call	a8c <__mulsf3>
     40c:	1009883a 	mov	r4,r2
     410:	01532ff4 	movhi	r5,19647
     414:	296f0804 	addi	r5,r5,-17376
     418:	0000c6c0 	call	c6c <__divsf3>
     41c:	e0bffe15 	stw	r2,-8(fp)
	return( (unsigned int)(x/2) );
     420:	e13ffe17 	ldw	r4,-8(fp)
     424:	01500034 	movhi	r5,16384
     428:	0000c6c0 	call	c6c <__divsf3>
     42c:	1009883a 	mov	r4,r2
     430:	00007640 	call	764 <__fixunssfsi>
}
     434:	e037883a 	mov	sp,fp
     438:	dfc00117 	ldw	ra,4(sp)
     43c:	df000017 	ldw	fp,0(sp)
     440:	dec00204 	addi	sp,sp,8
     444:	f800283a 	ret

00000448 <I2CWrite>:

void I2CWrite(unsigned char I2CAddr, unsigned char RegAddr, unsigned char data)
{
     448:	defffc04 	addi	sp,sp,-16
     44c:	df000315 	stw	fp,12(sp)
     450:	df000304 	addi	fp,sp,12
     454:	e13ffd05 	stb	r4,-12(fp)
     458:	e17ffe05 	stb	r5,-8(fp)
     45c:	e1bfff05 	stb	r6,-4(fp)
	*pI2C = I2CAddr; // FIrst write which I2C module is being addressed. MPU or HMC
     460:	d0e6eb17 	ldw	r3,-25684(gp)
     464:	e0bffd03 	ldbu	r2,-12(fp)
     468:	18800005 	stb	r2,0(r3)
	*pI2CReg = RegAddr; // write the address of register to which you want to write
     46c:	d0e6f317 	ldw	r3,-25652(gp)
     470:	e0bffe03 	ldbu	r2,-8(fp)
     474:	18800005 	stb	r2,0(r3)
	*pI2CRegWriteData = data; // write the data
     478:	d0e6e317 	ldw	r3,-25716(gp)
     47c:	e0bfff03 	ldbu	r2,-4(fp)
     480:	18800005 	stb	r2,0(r3)
	*pI2CDataLen = 1; // currently only 1 is supported for write access
     484:	d0e6e817 	ldw	r3,-25696(gp)
     488:	00800044 	movi	r2,1
     48c:	18800005 	stb	r2,0(r3)
	*pI2CCmd = (I2C_WRITE_CMD_MASK | I2C_START_CMD_MASK); // give write+start command
     490:	d0e6f217 	ldw	r3,-25656(gp)
     494:	00800084 	movi	r2,2
     498:	18800005 	stb	r2,0(r3)
}
     49c:	e037883a 	mov	sp,fp
     4a0:	df000017 	ldw	fp,0(sp)
     4a4:	dec00104 	addi	sp,sp,4
     4a8:	f800283a 	ret

000004ac <I2CRead>:

void I2CRead(unsigned char I2CAddr, unsigned char RegAddr, unsigned int len, char* cBuff)
{
     4ac:	defffa04 	addi	sp,sp,-24
     4b0:	df000515 	stw	fp,20(sp)
     4b4:	df000504 	addi	fp,sp,20
     4b8:	e1bffe15 	stw	r6,-8(fp)
     4bc:	e1ffff15 	stw	r7,-4(fp)
     4c0:	e13ffc05 	stb	r4,-16(fp)
     4c4:	e17ffd05 	stb	r5,-12(fp)
	unsigned int i = 0;
     4c8:	e03ffb15 	stw	zero,-20(fp)

	*pI2C = I2CAddr; //FIrst write which I2C module is being addressed. MPU or HMC
     4cc:	d0e6eb17 	ldw	r3,-25684(gp)
     4d0:	e0bffc03 	ldbu	r2,-16(fp)
     4d4:	18800005 	stb	r2,0(r3)
	*pI2CReg = RegAddr; // give the address of register from which you want to read in burst fashion
     4d8:	d0e6f317 	ldw	r3,-25652(gp)
     4dc:	e0bffd03 	ldbu	r2,-12(fp)
     4e0:	18800005 	stb	r2,0(r3)
	*pI2CDataLen = len; // number of bytes you want to read
     4e4:	d0e6e817 	ldw	r3,-25696(gp)
     4e8:	e0bffe17 	ldw	r2,-8(fp)
     4ec:	18800005 	stb	r2,0(r3)
	*pI2CCmd = (I2C_READ_CMD_MASK | I2C_START_CMD_MASK); // give read+start command
     4f0:	d0e6f217 	ldw	r3,-25656(gp)
     4f4:	008000c4 	movi	r2,3
     4f8:	18800005 	stb	r2,0(r3)

	/*The CPU is free to do its work until the following flag is set. The HW module will do a burst access and read the number of requested bytes
	 * from the slow I2C slave and keep it onchip in a FIFO. Once the flag is set, the data can be read from the FIFO rapidly*/
	while((*pI2CDataAvailable != 0x1));
     4fc:	d0a6dd17 	ldw	r2,-25740(gp)
     500:	10800003 	ldbu	r2,0(r2)
     504:	10803fcc 	andi	r2,r2,255
     508:	10800058 	cmpnei	r2,r2,1
     50c:	103ffb1e 	bne	r2,zero,4fc <I2CRead+0x50>

	for (i = 0; i < len; i++)
     510:	e03ffb15 	stw	zero,-20(fp)
     514:	00000906 	br	53c <I2CRead+0x90>
	{
		cBuff[i] = *pI2C;
     518:	e0fffb17 	ldw	r3,-20(fp)
     51c:	e0bfff17 	ldw	r2,-4(fp)
     520:	1887883a 	add	r3,r3,r2
     524:	d0a6eb17 	ldw	r2,-25684(gp)
     528:	10800003 	ldbu	r2,0(r2)
     52c:	18800005 	stb	r2,0(r3)

	/*The CPU is free to do its work until the following flag is set. The HW module will do a burst access and read the number of requested bytes
	 * from the slow I2C slave and keep it onchip in a FIFO. Once the flag is set, the data can be read from the FIFO rapidly*/
	while((*pI2CDataAvailable != 0x1));

	for (i = 0; i < len; i++)
     530:	e0bffb17 	ldw	r2,-20(fp)
     534:	10800044 	addi	r2,r2,1
     538:	e0bffb15 	stw	r2,-20(fp)
     53c:	e0fffb17 	ldw	r3,-20(fp)
     540:	e0bffe17 	ldw	r2,-8(fp)
     544:	18bff436 	bltu	r3,r2,518 <I2CRead+0x6c>
	{
		cBuff[i] = *pI2C;
	}

	return;
}
     548:	e037883a 	mov	sp,fp
     54c:	df000017 	ldw	fp,0(sp)
     550:	dec00104 	addi	sp,sp,4
     554:	f800283a 	ret

00000558 <main>:
	true,
	false
} bool_t;

int main()
{
     558:	deffe804 	addi	sp,sp,-96
     55c:	dfc01715 	stw	ra,92(sp)
     560:	df001615 	stw	fp,88(sp)
     564:	df001604 	addi	fp,sp,88
	init();
     568:	00002000 	call	200 <init>
	unsigned int i = 0;
     56c:	e03ff315 	stw	zero,-52(fp)
	unsigned int uiGapStartEnc = 0;
     570:	e03ff215 	stw	zero,-56(fp)
	unsigned int uiSouthEastDis = 0;
     574:	e03ff115 	stw	zero,-60(fp)
	short AcX, AcY, AcZ, Tmp, GyX, GyY, GyZ, x, y, z;
	char cBuff[32];
	bool_t bGapStarted = false;
     578:	00800044 	movi	r2,1
     57c:	e0bfeb15 	stw	r2,-84(fp)
	ParkingStateType_t cs = Ready;
     580:	e03fea15 	stw	zero,-88(fp)
	*pwm_enable = 0;
     584:	d0a6f117 	ldw	r2,-25660(gp)
     588:	10000015 	stw	zero,0(r2)

	printf("s\n");
     58c:	01000074 	movhi	r4,1
     590:	213a0604 	addi	r4,r4,-6120
     594:	00015f80 	call	15f8 <puts>
	
#ifdef MOTOR_TEST
	volatile unsigned int fr, rr, rl, fl;
	set_duty_cycle(pFrontRightDutySet, 50);
     598:	d126e117 	ldw	r4,-25724(gp)
     59c:	01400c84 	movi	r5,50
     5a0:	000035c0 	call	35c <set_duty_cycle>
	set_duty_cycle(pRearRightDutySet, 50);
     5a4:	d126f017 	ldw	r4,-25664(gp)
     5a8:	01400c84 	movi	r5,50
     5ac:	000035c0 	call	35c <set_duty_cycle>
	set_duty_cycle(pRearLeftDutySet, 50);
     5b0:	d126ef17 	ldw	r4,-25668(gp)
     5b4:	01400c84 	movi	r5,50
     5b8:	000035c0 	call	35c <set_duty_cycle>
	set_duty_cycle(pFrontLeftDutySet, 50);
     5bc:	d126ea17 	ldw	r4,-25688(gp)
     5c0:	01400c84 	movi	r5,50
     5c4:	000035c0 	call	35c <set_duty_cycle>

	*pwm_enable = (ALL_WHEEL_FWD_MASK | ENABLE_ENC_MASK );
     5c8:	d0e6f117 	ldw	r3,-25660(gp)
     5cc:	00800074 	movhi	r2,1
     5d0:	10801544 	addi	r2,r2,85
     5d4:	18800015 	stw	r2,0(r3)
	delay(10000000);
     5d8:	01002674 	movhi	r4,153
     5dc:	2125a004 	addi	r4,r4,-27008
     5e0:	00003200 	call	320 <delay>
    *pwm_enable = PAUSE_ENC_MASK;
     5e4:	d0e6f117 	ldw	r3,-25660(gp)
     5e8:	008000b4 	movhi	r2,2
     5ec:	18800015 	stw	r2,0(r3)

	fr = *pFrontRightEncRead;
     5f0:	d0a6e717 	ldw	r2,-25700(gp)
     5f4:	10800017 	ldw	r2,0(r2)
     5f8:	e0bffc15 	stw	r2,-16(fp)
	rr = *pRearRightEncRead;
     5fc:	d0a6de17 	ldw	r2,-25736(gp)
     600:	10800017 	ldw	r2,0(r2)
     604:	e0bffd15 	stw	r2,-12(fp)
	rl = *pRearLeftEncRead;
     608:	d0a6ee17 	ldw	r2,-25672(gp)
     60c:	10800017 	ldw	r2,0(r2)
     610:	e0bffe15 	stw	r2,-8(fp)
	fl = *pFrontLeftEncRead;
     614:	d0a6df17 	ldw	r2,-25732(gp)
     618:	10800017 	ldw	r2,0(r2)
     61c:	e0bfff15 	stw	r2,-4(fp)
	*pwm_enable = 0;
     620:	d0a6f117 	ldw	r2,-25660(gp)
     624:	10000015 	stw	zero,0(r2)

	printf("Front right = %u\n", fr);
     628:	e17ffc17 	ldw	r5,-16(fp)
     62c:	01000074 	movhi	r4,1
     630:	213a0704 	addi	r4,r4,-6116
     634:	00014e00 	call	14e0 <printf>
	printf("rear right = %u\n", rr);
     638:	e17ffd17 	ldw	r5,-12(fp)
     63c:	01000074 	movhi	r4,1
     640:	213a0c04 	addi	r4,r4,-6096
     644:	00014e00 	call	14e0 <printf>
	printf("rear left = %u\n", rl);
     648:	e17ffe17 	ldw	r5,-8(fp)
     64c:	01000074 	movhi	r4,1
     650:	213a1104 	addi	r4,r4,-6076
     654:	00014e00 	call	14e0 <printf>
	printf("Front left = %u\n", fl);
     658:	e17fff17 	ldw	r5,-4(fp)
     65c:	01000074 	movhi	r4,1
     660:	213a1504 	addi	r4,r4,-6060
     664:	00014e00 	call	14e0 <printf>

	printf("Restarting the same number of rotations\n");
     668:	01000074 	movhi	r4,1
     66c:	213a1a04 	addi	r4,r4,-6040
     670:	00015f80 	call	15f8 <puts>

	delay(100000);
     674:	010000b4 	movhi	r4,2
     678:	2121a804 	addi	r4,r4,-31072
     67c:	00003200 	call	320 <delay>


	*pFrontRightEncSet = fr;
     680:	d0e6ed17 	ldw	r3,-25676(gp)
     684:	e0bffc17 	ldw	r2,-16(fp)
     688:	18800015 	stw	r2,0(r3)
	*pRearRightEncSet = rr;
     68c:	d0e6e217 	ldw	r3,-25720(gp)
     690:	e0bffd17 	ldw	r2,-12(fp)
     694:	18800015 	stw	r2,0(r3)
	*pRearLeftEncSet = rl;
     698:	d0e6ec17 	ldw	r3,-25680(gp)
     69c:	e0bffe17 	ldw	r2,-8(fp)
     6a0:	18800015 	stw	r2,0(r3)
	*pFrontLeftEncSet = fl;
     6a4:	d0e6e617 	ldw	r3,-25704(gp)
     6a8:	e0bfff17 	ldw	r2,-4(fp)
     6ac:	18800015 	stw	r2,0(r3)

	*pwm_enable = (ALL_WHEEL_FWD_MASK | PLAY_BACK_MASK | ENABLE_ENC_MASK );
     6b0:	d0e6f117 	ldw	r3,-25660(gp)
     6b4:	00800074 	movhi	r2,1
     6b8:	10805544 	addi	r2,r2,341
     6bc:	18800015 	stw	r2,0(r3)

	while (!(*pwm_enable & WHEEL_READY_MASK));
     6c0:	d0a6f117 	ldw	r2,-25660(gp)
     6c4:	10800017 	ldw	r2,0(r2)
     6c8:	10a0000c 	andi	r2,r2,32768
     6cc:	1005003a 	cmpeq	r2,r2,zero
     6d0:	103ffb1e 	bne	r2,zero,6c0 <main+0x168>
	fr = *pFrontRightEncRead;
     6d4:	d0a6e717 	ldw	r2,-25700(gp)
     6d8:	10800017 	ldw	r2,0(r2)
     6dc:	e0bffc15 	stw	r2,-16(fp)
	rr = *pRearRightEncRead;
     6e0:	d0a6de17 	ldw	r2,-25736(gp)
     6e4:	10800017 	ldw	r2,0(r2)
     6e8:	e0bffd15 	stw	r2,-12(fp)
	rl = *pRearLeftEncRead;
     6ec:	d0a6ee17 	ldw	r2,-25672(gp)
     6f0:	10800017 	ldw	r2,0(r2)
     6f4:	e0bffe15 	stw	r2,-8(fp)
	fl = *pFrontLeftEncRead;
     6f8:	d0a6df17 	ldw	r2,-25732(gp)
     6fc:	10800017 	ldw	r2,0(r2)
     700:	e0bfff15 	stw	r2,-4(fp)
	*pwm_enable = 0;
     704:	d0a6f117 	ldw	r2,-25660(gp)
     708:	10000015 	stw	zero,0(r2)

	printf("Front right = %u\n", fr);
     70c:	e17ffc17 	ldw	r5,-16(fp)
     710:	01000074 	movhi	r4,1
     714:	213a0704 	addi	r4,r4,-6116
     718:	00014e00 	call	14e0 <printf>
	printf("rear right = %u\n", rr);
     71c:	e17ffd17 	ldw	r5,-12(fp)
     720:	01000074 	movhi	r4,1
     724:	213a0c04 	addi	r4,r4,-6096
     728:	00014e00 	call	14e0 <printf>
	printf("rear left = %u\n", rl);
     72c:	e17ffe17 	ldw	r5,-8(fp)
     730:	01000074 	movhi	r4,1
     734:	213a1104 	addi	r4,r4,-6076
     738:	00014e00 	call	14e0 <printf>
	printf("Front left = %u\n", fl);
     73c:	e17fff17 	ldw	r5,-4(fp)
     740:	01000074 	movhi	r4,1
     744:	213a1504 	addi	r4,r4,-6060
     748:	00014e00 	call	14e0 <printf>
		delay(10000000);
	}

#endif

	return 0;
     74c:	0005883a 	mov	r2,zero
}
     750:	e037883a 	mov	sp,fp
     754:	dfc00117 	ldw	ra,4(sp)
     758:	df000017 	ldw	fp,0(sp)
     75c:	dec00204 	addi	sp,sp,8
     760:	f800283a 	ret

00000764 <__fixunssfsi>:
     764:	defffd04 	addi	sp,sp,-12
     768:	dc000015 	stw	r16,0(sp)
     76c:	0413c034 	movhi	r16,20224
     770:	800b883a 	mov	r5,r16
     774:	dc400115 	stw	r17,4(sp)
     778:	dfc00215 	stw	ra,8(sp)
     77c:	2023883a 	mov	r17,r4
     780:	0000de00 	call	de0 <__gesf2>
     784:	800b883a 	mov	r5,r16
     788:	8809883a 	mov	r4,r17
     78c:	10000a16 	blt	r2,zero,7b8 <__fixunssfsi+0x54>
     790:	00009b80 	call	9b8 <__subsf3>
     794:	1009883a 	mov	r4,r2
     798:	0000e580 	call	e58 <__fixsfsi>
     79c:	00e00034 	movhi	r3,32768
     7a0:	10c5883a 	add	r2,r2,r3
     7a4:	dfc00217 	ldw	ra,8(sp)
     7a8:	dc400117 	ldw	r17,4(sp)
     7ac:	dc000017 	ldw	r16,0(sp)
     7b0:	dec00304 	addi	sp,sp,12
     7b4:	f800283a 	ret
     7b8:	8809883a 	mov	r4,r17
     7bc:	0000e580 	call	e58 <__fixsfsi>
     7c0:	dfc00217 	ldw	ra,8(sp)
     7c4:	dc400117 	ldw	r17,4(sp)
     7c8:	dc000017 	ldw	r16,0(sp)
     7cc:	dec00304 	addi	sp,sp,12
     7d0:	f800283a 	ret

000007d4 <_fpadd_parts>:
     7d4:	21c00017 	ldw	r7,0(r4)
     7d8:	02000044 	movi	r8,1
     7dc:	41c0332e 	bgeu	r8,r7,8ac <_fpadd_parts+0xd8>
     7e0:	28800017 	ldw	r2,0(r5)
     7e4:	4080462e 	bgeu	r8,r2,900 <_fpadd_parts+0x12c>
     7e8:	00c00104 	movi	r3,4
     7ec:	38c06b26 	beq	r7,r3,99c <_fpadd_parts+0x1c8>
     7f0:	10c04326 	beq	r2,r3,900 <_fpadd_parts+0x12c>
     7f4:	00c00084 	movi	r3,2
     7f8:	10c02e26 	beq	r2,r3,8b4 <_fpadd_parts+0xe0>
     7fc:	38c04026 	beq	r7,r3,900 <_fpadd_parts+0x12c>
     800:	22800217 	ldw	r10,8(r4)
     804:	28c00217 	ldw	r3,8(r5)
     808:	23000317 	ldw	r12,12(r4)
     80c:	2a400317 	ldw	r9,12(r5)
     810:	50cfc83a 	sub	r7,r10,r3
     814:	3817883a 	mov	r11,r7
     818:	38004f16 	blt	r7,zero,958 <_fpadd_parts+0x184>
     81c:	008007c4 	movi	r2,31
     820:	11c03316 	blt	r2,r7,8f0 <_fpadd_parts+0x11c>
     824:	02c0540e 	bge	zero,r11,978 <_fpadd_parts+0x1a4>
     828:	41c4983a 	sll	r2,r8,r7
     82c:	49c6d83a 	srl	r3,r9,r7
     830:	10bfffc4 	addi	r2,r2,-1
     834:	4884703a 	and	r2,r9,r2
     838:	1004c03a 	cmpne	r2,r2,zero
     83c:	1892b03a 	or	r9,r3,r2
     840:	20c00117 	ldw	r3,4(r4)
     844:	28800117 	ldw	r2,4(r5)
     848:	18803c26 	beq	r3,r2,93c <_fpadd_parts+0x168>
     84c:	18002f26 	beq	r3,zero,90c <_fpadd_parts+0x138>
     850:	4b05c83a 	sub	r2,r9,r12
     854:	10004216 	blt	r2,zero,960 <_fpadd_parts+0x18c>
     858:	32800215 	stw	r10,8(r6)
     85c:	30800315 	stw	r2,12(r6)
     860:	30000115 	stw	zero,4(r6)
     864:	31000317 	ldw	r4,12(r6)
     868:	01d00034 	movhi	r7,16384
     86c:	39ffff84 	addi	r7,r7,-2
     870:	20bfffc4 	addi	r2,r4,-1
     874:	2007883a 	mov	r3,r4
     878:	38800836 	bltu	r7,r2,89c <_fpadd_parts+0xc8>
     87c:	31400217 	ldw	r5,8(r6)
     880:	18c9883a 	add	r4,r3,r3
     884:	20bfffc4 	addi	r2,r4,-1
     888:	297fffc4 	addi	r5,r5,-1
     88c:	2007883a 	mov	r3,r4
     890:	38bffb2e 	bgeu	r7,r2,880 <_fpadd_parts+0xac>
     894:	31400215 	stw	r5,8(r6)
     898:	31000315 	stw	r4,12(r6)
     89c:	008000c4 	movi	r2,3
     8a0:	30800015 	stw	r2,0(r6)
     8a4:	20001b16 	blt	r4,zero,914 <_fpadd_parts+0x140>
     8a8:	3009883a 	mov	r4,r6
     8ac:	2005883a 	mov	r2,r4
     8b0:	f800283a 	ret
     8b4:	38fffd1e 	bne	r7,r3,8ac <_fpadd_parts+0xd8>
     8b8:	31c00015 	stw	r7,0(r6)
     8bc:	20800117 	ldw	r2,4(r4)
     8c0:	30800115 	stw	r2,4(r6)
     8c4:	20c00217 	ldw	r3,8(r4)
     8c8:	30c00215 	stw	r3,8(r6)
     8cc:	20800317 	ldw	r2,12(r4)
     8d0:	30800315 	stw	r2,12(r6)
     8d4:	20c00117 	ldw	r3,4(r4)
     8d8:	28800117 	ldw	r2,4(r5)
     8dc:	3009883a 	mov	r4,r6
     8e0:	1886703a 	and	r3,r3,r2
     8e4:	2005883a 	mov	r2,r4
     8e8:	30c00115 	stw	r3,4(r6)
     8ec:	f800283a 	ret
     8f0:	1a801716 	blt	r3,r10,950 <_fpadd_parts+0x17c>
     8f4:	1815883a 	mov	r10,r3
     8f8:	0019883a 	mov	r12,zero
     8fc:	003fd006 	br	840 <_fpadd_parts+0x6c>
     900:	2809883a 	mov	r4,r5
     904:	2005883a 	mov	r2,r4
     908:	f800283a 	ret
     90c:	6245c83a 	sub	r2,r12,r9
     910:	003fd006 	br	854 <_fpadd_parts+0x80>
     914:	30800217 	ldw	r2,8(r6)
     918:	2006d07a 	srli	r3,r4,1
     91c:	2100004c 	andi	r4,r4,1
     920:	10800044 	addi	r2,r2,1
     924:	1906b03a 	or	r3,r3,r4
     928:	3009883a 	mov	r4,r6
     92c:	30800215 	stw	r2,8(r6)
     930:	2005883a 	mov	r2,r4
     934:	30c00315 	stw	r3,12(r6)
     938:	f800283a 	ret
     93c:	4b09883a 	add	r4,r9,r12
     940:	30c00115 	stw	r3,4(r6)
     944:	32800215 	stw	r10,8(r6)
     948:	31000315 	stw	r4,12(r6)
     94c:	003fd306 	br	89c <_fpadd_parts+0xc8>
     950:	0013883a 	mov	r9,zero
     954:	003fba06 	br	840 <_fpadd_parts+0x6c>
     958:	01cfc83a 	sub	r7,zero,r7
     95c:	003faf06 	br	81c <_fpadd_parts+0x48>
     960:	0089c83a 	sub	r4,zero,r2
     964:	00800044 	movi	r2,1
     968:	30800115 	stw	r2,4(r6)
     96c:	32800215 	stw	r10,8(r6)
     970:	31000315 	stw	r4,12(r6)
     974:	003fbb06 	br	864 <_fpadd_parts+0x90>
     978:	583fb126 	beq	r11,zero,840 <_fpadd_parts+0x6c>
     97c:	41c4983a 	sll	r2,r8,r7
     980:	61c6d83a 	srl	r3,r12,r7
     984:	51d5883a 	add	r10,r10,r7
     988:	10bfffc4 	addi	r2,r2,-1
     98c:	6084703a 	and	r2,r12,r2
     990:	1004c03a 	cmpne	r2,r2,zero
     994:	1898b03a 	or	r12,r3,r2
     998:	003fa906 	br	840 <_fpadd_parts+0x6c>
     99c:	11ffc31e 	bne	r2,r7,8ac <_fpadd_parts+0xd8>
     9a0:	28c00117 	ldw	r3,4(r5)
     9a4:	20800117 	ldw	r2,4(r4)
     9a8:	10ffc026 	beq	r2,r3,8ac <_fpadd_parts+0xd8>
     9ac:	01000074 	movhi	r4,1
     9b0:	213a2404 	addi	r4,r4,-6000
     9b4:	003fbd06 	br	8ac <_fpadd_parts+0xd8>

000009b8 <__subsf3>:
     9b8:	deffef04 	addi	sp,sp,-68
     9bc:	dcc00f15 	stw	r19,60(sp)
     9c0:	dcc00204 	addi	r19,sp,8
     9c4:	dc400e15 	stw	r17,56(sp)
     9c8:	d9000015 	stw	r4,0(sp)
     9cc:	d9400115 	stw	r5,4(sp)
     9d0:	d809883a 	mov	r4,sp
     9d4:	980b883a 	mov	r5,r19
     9d8:	dc400604 	addi	r17,sp,24
     9dc:	dfc01015 	stw	ra,64(sp)
     9e0:	00013700 	call	1370 <__unpack_f>
     9e4:	d9000104 	addi	r4,sp,4
     9e8:	880b883a 	mov	r5,r17
     9ec:	00013700 	call	1370 <__unpack_f>
     9f0:	d8800717 	ldw	r2,28(sp)
     9f4:	9809883a 	mov	r4,r19
     9f8:	880b883a 	mov	r5,r17
     9fc:	d9800a04 	addi	r6,sp,40
     a00:	1080005c 	xori	r2,r2,1
     a04:	d8800715 	stw	r2,28(sp)
     a08:	00007d40 	call	7d4 <_fpadd_parts>
     a0c:	1009883a 	mov	r4,r2
     a10:	00012100 	call	1210 <__pack_f>
     a14:	dfc01017 	ldw	ra,64(sp)
     a18:	dcc00f17 	ldw	r19,60(sp)
     a1c:	dc400e17 	ldw	r17,56(sp)
     a20:	dec01104 	addi	sp,sp,68
     a24:	f800283a 	ret

00000a28 <__addsf3>:
     a28:	deffef04 	addi	sp,sp,-68
     a2c:	dcc00f15 	stw	r19,60(sp)
     a30:	dcc00204 	addi	r19,sp,8
     a34:	dc400e15 	stw	r17,56(sp)
     a38:	d9000015 	stw	r4,0(sp)
     a3c:	d9400115 	stw	r5,4(sp)
     a40:	d809883a 	mov	r4,sp
     a44:	980b883a 	mov	r5,r19
     a48:	dc400604 	addi	r17,sp,24
     a4c:	dfc01015 	stw	ra,64(sp)
     a50:	00013700 	call	1370 <__unpack_f>
     a54:	d9000104 	addi	r4,sp,4
     a58:	880b883a 	mov	r5,r17
     a5c:	00013700 	call	1370 <__unpack_f>
     a60:	d9800a04 	addi	r6,sp,40
     a64:	9809883a 	mov	r4,r19
     a68:	880b883a 	mov	r5,r17
     a6c:	00007d40 	call	7d4 <_fpadd_parts>
     a70:	1009883a 	mov	r4,r2
     a74:	00012100 	call	1210 <__pack_f>
     a78:	dfc01017 	ldw	ra,64(sp)
     a7c:	dcc00f17 	ldw	r19,60(sp)
     a80:	dc400e17 	ldw	r17,56(sp)
     a84:	dec01104 	addi	sp,sp,68
     a88:	f800283a 	ret

00000a8c <__mulsf3>:
     a8c:	deffef04 	addi	sp,sp,-68
     a90:	dc400f15 	stw	r17,60(sp)
     a94:	dc400204 	addi	r17,sp,8
     a98:	dc000e15 	stw	r16,56(sp)
     a9c:	d9000015 	stw	r4,0(sp)
     aa0:	d9400115 	stw	r5,4(sp)
     aa4:	d809883a 	mov	r4,sp
     aa8:	880b883a 	mov	r5,r17
     aac:	dc000604 	addi	r16,sp,24
     ab0:	dfc01015 	stw	ra,64(sp)
     ab4:	00013700 	call	1370 <__unpack_f>
     ab8:	d9000104 	addi	r4,sp,4
     abc:	800b883a 	mov	r5,r16
     ac0:	00013700 	call	1370 <__unpack_f>
     ac4:	d9000217 	ldw	r4,8(sp)
     ac8:	00800044 	movi	r2,1
     acc:	01400104 	movi	r5,4
     ad0:	1100142e 	bgeu	r2,r4,b24 <__mulsf3+0x98>
     ad4:	d8c00617 	ldw	r3,24(sp)
     ad8:	10c0052e 	bgeu	r2,r3,af0 <__mulsf3+0x64>
     adc:	21400f26 	beq	r4,r5,b1c <__mulsf3+0x90>
     ae0:	19405d26 	beq	r3,r5,c58 <__mulsf3+0x1cc>
     ae4:	00800084 	movi	r2,2
     ae8:	20800e26 	beq	r4,r2,b24 <__mulsf3+0x98>
     aec:	1880181e 	bne	r3,r2,b50 <__mulsf3+0xc4>
     af0:	d8c00717 	ldw	r3,28(sp)
     af4:	d8800317 	ldw	r2,12(sp)
     af8:	8009883a 	mov	r4,r16
     afc:	10c4c03a 	cmpne	r2,r2,r3
     b00:	d8800715 	stw	r2,28(sp)
     b04:	00012100 	call	1210 <__pack_f>
     b08:	dfc01017 	ldw	ra,64(sp)
     b0c:	dc400f17 	ldw	r17,60(sp)
     b10:	dc000e17 	ldw	r16,56(sp)
     b14:	dec01104 	addi	sp,sp,68
     b18:	f800283a 	ret
     b1c:	00800084 	movi	r2,2
     b20:	18804f26 	beq	r3,r2,c60 <__mulsf3+0x1d4>
     b24:	d8800317 	ldw	r2,12(sp)
     b28:	d8c00717 	ldw	r3,28(sp)
     b2c:	8809883a 	mov	r4,r17
     b30:	10c4c03a 	cmpne	r2,r2,r3
     b34:	d8800315 	stw	r2,12(sp)
     b38:	00012100 	call	1210 <__pack_f>
     b3c:	dfc01017 	ldw	ra,64(sp)
     b40:	dc400f17 	ldw	r17,60(sp)
     b44:	dc000e17 	ldw	r16,56(sp)
     b48:	dec01104 	addi	sp,sp,68
     b4c:	f800283a 	ret
     b50:	d8800517 	ldw	r2,20(sp)
     b54:	da000917 	ldw	r8,36(sp)
     b58:	0013883a 	mov	r9,zero
     b5c:	0007883a 	mov	r3,zero
     b60:	480f883a 	mov	r7,r9
     b64:	180b883a 	mov	r5,r3
     b68:	400d883a 	mov	r6,r8
     b6c:	1009883a 	mov	r4,r2
     b70:	00010f80 	call	10f8 <__muldi3>
     b74:	da800417 	ldw	r10,16(sp)
     b78:	d9800817 	ldw	r6,32(sp)
     b7c:	da400317 	ldw	r9,12(sp)
     b80:	52800084 	addi	r10,r10,2
     b84:	3295883a 	add	r10,r6,r10
     b88:	d9800717 	ldw	r6,28(sp)
     b8c:	180b883a 	mov	r5,r3
     b90:	180f883a 	mov	r7,r3
     b94:	4992c03a 	cmpne	r9,r9,r6
     b98:	da400b15 	stw	r9,44(sp)
     b9c:	1007883a 	mov	r3,r2
     ba0:	da800c15 	stw	r10,48(sp)
     ba4:	2800070e 	bge	r5,zero,bc4 <__mulsf3+0x138>
     ba8:	2880004c 	andi	r2,r5,1
     bac:	1005003a 	cmpeq	r2,r2,zero
     bb0:	500d883a 	mov	r6,r10
     bb4:	10001e26 	beq	r2,zero,c30 <__mulsf3+0x1a4>
     bb8:	380ed07a 	srli	r7,r7,1
     bbc:	31800044 	addi	r6,r6,1
     bc0:	d9800c15 	stw	r6,48(sp)
     bc4:	01100034 	movhi	r4,16384
     bc8:	213fffc4 	addi	r4,r4,-1
     bcc:	21c00b36 	bltu	r4,r7,bfc <__mulsf3+0x170>
     bd0:	d8800c17 	ldw	r2,48(sp)
     bd4:	00000206 	br	be0 <__mulsf3+0x154>
     bd8:	18c7883a 	add	r3,r3,r3
     bdc:	21c00636 	bltu	r4,r7,bf8 <__mulsf3+0x16c>
     be0:	10bfffc4 	addi	r2,r2,-1
     be4:	39cf883a 	add	r7,r7,r7
     be8:	183ffb0e 	bge	r3,zero,bd8 <__mulsf3+0x14c>
     bec:	39c00054 	ori	r7,r7,1
     bf0:	18c7883a 	add	r3,r3,r3
     bf4:	21fffa2e 	bgeu	r4,r7,be0 <__mulsf3+0x154>
     bf8:	d8800c15 	stw	r2,48(sp)
     bfc:	39001fcc 	andi	r4,r7,127
     c00:	00801004 	movi	r2,64
     c04:	20800d26 	beq	r4,r2,c3c <__mulsf3+0x1b0>
     c08:	008000c4 	movi	r2,3
     c0c:	d9000a04 	addi	r4,sp,40
     c10:	d9c00d15 	stw	r7,52(sp)
     c14:	d8800a15 	stw	r2,40(sp)
     c18:	00012100 	call	1210 <__pack_f>
     c1c:	dfc01017 	ldw	ra,64(sp)
     c20:	dc400f17 	ldw	r17,60(sp)
     c24:	dc000e17 	ldw	r16,56(sp)
     c28:	dec01104 	addi	sp,sp,68
     c2c:	f800283a 	ret
     c30:	1804d07a 	srli	r2,r3,1
     c34:	10e00034 	orhi	r3,r2,32768
     c38:	003fdf06 	br	bb8 <__mulsf3+0x12c>
     c3c:	3880200c 	andi	r2,r7,128
     c40:	103ff11e 	bne	r2,zero,c08 <__mulsf3+0x17c>
     c44:	183ff026 	beq	r3,zero,c08 <__mulsf3+0x17c>
     c48:	3907883a 	add	r3,r7,r4
     c4c:	00bfe004 	movi	r2,-128
     c50:	188e703a 	and	r7,r3,r2
     c54:	003fec06 	br	c08 <__mulsf3+0x17c>
     c58:	00800084 	movi	r2,2
     c5c:	20bfa41e 	bne	r4,r2,af0 <__mulsf3+0x64>
     c60:	01000074 	movhi	r4,1
     c64:	213a2404 	addi	r4,r4,-6000
     c68:	003fb306 	br	b38 <__mulsf3+0xac>

00000c6c <__divsf3>:
     c6c:	defff304 	addi	sp,sp,-52
     c70:	dc400b15 	stw	r17,44(sp)
     c74:	dc400204 	addi	r17,sp,8
     c78:	dc000a15 	stw	r16,40(sp)
     c7c:	d9000015 	stw	r4,0(sp)
     c80:	d9400115 	stw	r5,4(sp)
     c84:	d809883a 	mov	r4,sp
     c88:	880b883a 	mov	r5,r17
     c8c:	dc000604 	addi	r16,sp,24
     c90:	dfc00c15 	stw	ra,48(sp)
     c94:	00013700 	call	1370 <__unpack_f>
     c98:	d9000104 	addi	r4,sp,4
     c9c:	800b883a 	mov	r5,r16
     ca0:	00013700 	call	1370 <__unpack_f>
     ca4:	d9000217 	ldw	r4,8(sp)
     ca8:	00800044 	movi	r2,1
     cac:	01800104 	movi	r6,4
     cb0:	11000a2e 	bgeu	r2,r4,cdc <__divsf3+0x70>
     cb4:	d9400617 	ldw	r5,24(sp)
     cb8:	1140432e 	bgeu	r2,r5,dc8 <__divsf3+0x15c>
     cbc:	d8800317 	ldw	r2,12(sp)
     cc0:	d8c00717 	ldw	r3,28(sp)
     cc4:	10c4f03a 	xor	r2,r2,r3
     cc8:	d8800315 	stw	r2,12(sp)
     ccc:	21800226 	beq	r4,r6,cd8 <__divsf3+0x6c>
     cd0:	00800084 	movi	r2,2
     cd4:	2080101e 	bne	r4,r2,d18 <__divsf3+0xac>
     cd8:	29000726 	beq	r5,r4,cf8 <__divsf3+0x8c>
     cdc:	8809883a 	mov	r4,r17
     ce0:	00012100 	call	1210 <__pack_f>
     ce4:	dfc00c17 	ldw	ra,48(sp)
     ce8:	dc400b17 	ldw	r17,44(sp)
     cec:	dc000a17 	ldw	r16,40(sp)
     cf0:	dec00d04 	addi	sp,sp,52
     cf4:	f800283a 	ret
     cf8:	01000074 	movhi	r4,1
     cfc:	213a2404 	addi	r4,r4,-6000
     d00:	00012100 	call	1210 <__pack_f>
     d04:	dfc00c17 	ldw	ra,48(sp)
     d08:	dc400b17 	ldw	r17,44(sp)
     d0c:	dc000a17 	ldw	r16,40(sp)
     d10:	dec00d04 	addi	sp,sp,52
     d14:	f800283a 	ret
     d18:	29802d26 	beq	r5,r6,dd0 <__divsf3+0x164>
     d1c:	28801a26 	beq	r5,r2,d88 <__divsf3+0x11c>
     d20:	d8c00417 	ldw	r3,16(sp)
     d24:	d8800817 	ldw	r2,32(sp)
     d28:	d9000517 	ldw	r4,20(sp)
     d2c:	d9800917 	ldw	r6,36(sp)
     d30:	1885c83a 	sub	r2,r3,r2
     d34:	d8800415 	stw	r2,16(sp)
     d38:	2180032e 	bgeu	r4,r6,d48 <__divsf3+0xdc>
     d3c:	10bfffc4 	addi	r2,r2,-1
     d40:	d8800415 	stw	r2,16(sp)
     d44:	2109883a 	add	r4,r4,r4
     d48:	01500034 	movhi	r5,16384
     d4c:	0007883a 	mov	r3,zero
     d50:	0005883a 	mov	r2,zero
     d54:	01c007c4 	movi	r7,31
     d58:	10800044 	addi	r2,r2,1
     d5c:	21800236 	bltu	r4,r6,d68 <__divsf3+0xfc>
     d60:	1946b03a 	or	r3,r3,r5
     d64:	2189c83a 	sub	r4,r4,r6
     d68:	280ad07a 	srli	r5,r5,1
     d6c:	2109883a 	add	r4,r4,r4
     d70:	11fff91e 	bne	r2,r7,d58 <__divsf3+0xec>
     d74:	19401fcc 	andi	r5,r3,127
     d78:	00801004 	movi	r2,64
     d7c:	28800a26 	beq	r5,r2,da8 <__divsf3+0x13c>
     d80:	d8c00515 	stw	r3,20(sp)
     d84:	003fd506 	br	cdc <__divsf3+0x70>
     d88:	8809883a 	mov	r4,r17
     d8c:	d9800215 	stw	r6,8(sp)
     d90:	00012100 	call	1210 <__pack_f>
     d94:	dfc00c17 	ldw	ra,48(sp)
     d98:	dc400b17 	ldw	r17,44(sp)
     d9c:	dc000a17 	ldw	r16,40(sp)
     da0:	dec00d04 	addi	sp,sp,52
     da4:	f800283a 	ret
     da8:	1880200c 	andi	r2,r3,128
     dac:	103ff41e 	bne	r2,zero,d80 <__divsf3+0x114>
     db0:	203ff326 	beq	r4,zero,d80 <__divsf3+0x114>
     db4:	1947883a 	add	r3,r3,r5
     db8:	00bfe004 	movi	r2,-128
     dbc:	1886703a 	and	r3,r3,r2
     dc0:	d8c00515 	stw	r3,20(sp)
     dc4:	003fc506 	br	cdc <__divsf3+0x70>
     dc8:	8009883a 	mov	r4,r16
     dcc:	003fc406 	br	ce0 <__divsf3+0x74>
     dd0:	8809883a 	mov	r4,r17
     dd4:	d8000515 	stw	zero,20(sp)
     dd8:	d8000415 	stw	zero,16(sp)
     ddc:	003fc006 	br	ce0 <__divsf3+0x74>

00000de0 <__gesf2>:
     de0:	defff304 	addi	sp,sp,-52
     de4:	dc400b15 	stw	r17,44(sp)
     de8:	dc400204 	addi	r17,sp,8
     dec:	dc000a15 	stw	r16,40(sp)
     df0:	d9000015 	stw	r4,0(sp)
     df4:	d9400115 	stw	r5,4(sp)
     df8:	d809883a 	mov	r4,sp
     dfc:	880b883a 	mov	r5,r17
     e00:	dc000604 	addi	r16,sp,24
     e04:	dfc00c15 	stw	ra,48(sp)
     e08:	00013700 	call	1370 <__unpack_f>
     e0c:	d9000104 	addi	r4,sp,4
     e10:	800b883a 	mov	r5,r16
     e14:	00013700 	call	1370 <__unpack_f>
     e18:	d8800217 	ldw	r2,8(sp)
     e1c:	00c00044 	movi	r3,1
     e20:	01bfffc4 	movi	r6,-1
     e24:	1880062e 	bgeu	r3,r2,e40 <__gesf2+0x60>
     e28:	d8800617 	ldw	r2,24(sp)
     e2c:	8809883a 	mov	r4,r17
     e30:	800b883a 	mov	r5,r16
     e34:	1880022e 	bgeu	r3,r2,e40 <__gesf2+0x60>
     e38:	00014380 	call	1438 <__fpcmp_parts_f>
     e3c:	100d883a 	mov	r6,r2
     e40:	3005883a 	mov	r2,r6
     e44:	dfc00c17 	ldw	ra,48(sp)
     e48:	dc400b17 	ldw	r17,44(sp)
     e4c:	dc000a17 	ldw	r16,40(sp)
     e50:	dec00d04 	addi	sp,sp,52
     e54:	f800283a 	ret

00000e58 <__fixsfsi>:
     e58:	defffa04 	addi	sp,sp,-24
     e5c:	d9000015 	stw	r4,0(sp)
     e60:	d9400104 	addi	r5,sp,4
     e64:	d809883a 	mov	r4,sp
     e68:	dfc00515 	stw	ra,20(sp)
     e6c:	00013700 	call	1370 <__unpack_f>
     e70:	d8c00117 	ldw	r3,4(sp)
     e74:	00800084 	movi	r2,2
     e78:	1880041e 	bne	r3,r2,e8c <__fixsfsi+0x34>
     e7c:	0005883a 	mov	r2,zero
     e80:	dfc00517 	ldw	ra,20(sp)
     e84:	dec00604 	addi	sp,sp,24
     e88:	f800283a 	ret
     e8c:	00800044 	movi	r2,1
     e90:	10fffa2e 	bgeu	r2,r3,e7c <__fixsfsi+0x24>
     e94:	00800104 	movi	r2,4
     e98:	18800426 	beq	r3,r2,eac <__fixsfsi+0x54>
     e9c:	d8800317 	ldw	r2,12(sp)
     ea0:	103ff616 	blt	r2,zero,e7c <__fixsfsi+0x24>
     ea4:	00c00784 	movi	r3,30
     ea8:	1880070e 	bge	r3,r2,ec8 <__fixsfsi+0x70>
     eac:	d8800217 	ldw	r2,8(sp)
     eb0:	10000c1e 	bne	r2,zero,ee4 <__fixsfsi+0x8c>
     eb4:	00a00034 	movhi	r2,32768
     eb8:	10bfffc4 	addi	r2,r2,-1
     ebc:	dfc00517 	ldw	ra,20(sp)
     ec0:	dec00604 	addi	sp,sp,24
     ec4:	f800283a 	ret
     ec8:	1885c83a 	sub	r2,r3,r2
     ecc:	d9000217 	ldw	r4,8(sp)
     ed0:	d8c00417 	ldw	r3,16(sp)
     ed4:	1884d83a 	srl	r2,r3,r2
     ed8:	203fe926 	beq	r4,zero,e80 <__fixsfsi+0x28>
     edc:	0085c83a 	sub	r2,zero,r2
     ee0:	003fe706 	br	e80 <__fixsfsi+0x28>
     ee4:	00a00034 	movhi	r2,32768
     ee8:	003fe506 	br	e80 <__fixsfsi+0x28>

00000eec <__floatunsisf>:
     eec:	defff904 	addi	sp,sp,-28
     ef0:	dc400515 	stw	r17,20(sp)
     ef4:	dc000415 	stw	r16,16(sp)
     ef8:	dfc00615 	stw	ra,24(sp)
     efc:	04400784 	movi	r17,30
     f00:	2021883a 	mov	r16,r4
     f04:	d8000115 	stw	zero,4(sp)
     f08:	2000091e 	bne	r4,zero,f30 <__floatunsisf+0x44>
     f0c:	00800084 	movi	r2,2
     f10:	d8800015 	stw	r2,0(sp)
     f14:	d809883a 	mov	r4,sp
     f18:	00012100 	call	1210 <__pack_f>
     f1c:	dfc00617 	ldw	ra,24(sp)
     f20:	dc400517 	ldw	r17,20(sp)
     f24:	dc000417 	ldw	r16,16(sp)
     f28:	dec00704 	addi	sp,sp,28
     f2c:	f800283a 	ret
     f30:	008000c4 	movi	r2,3
     f34:	d9000315 	stw	r4,12(sp)
     f38:	d8800015 	stw	r2,0(sp)
     f3c:	dc400215 	stw	r17,8(sp)
     f40:	00011900 	call	1190 <__clzsi2>
     f44:	117fffc4 	addi	r5,r2,-1
     f48:	0147c83a 	sub	r3,zero,r5
     f4c:	00800044 	movi	r2,1
     f50:	10c4983a 	sll	r2,r2,r3
     f54:	80c6d83a 	srl	r3,r16,r3
     f58:	8949c83a 	sub	r4,r17,r5
     f5c:	10bfffc4 	addi	r2,r2,-1
     f60:	8084703a 	and	r2,r16,r2
     f64:	1004c03a 	cmpne	r2,r2,zero
     f68:	1886b03a 	or	r3,r3,r2
     f6c:	28000c16 	blt	r5,zero,fa0 <__floatunsisf+0xb4>
     f70:	8144983a 	sll	r2,r16,r5
     f74:	8947c83a 	sub	r3,r17,r5
     f78:	283fe626 	beq	r5,zero,f14 <__floatunsisf+0x28>
     f7c:	d809883a 	mov	r4,sp
     f80:	d8800315 	stw	r2,12(sp)
     f84:	d8c00215 	stw	r3,8(sp)
     f88:	00012100 	call	1210 <__pack_f>
     f8c:	dfc00617 	ldw	ra,24(sp)
     f90:	dc400517 	ldw	r17,20(sp)
     f94:	dc000417 	ldw	r16,16(sp)
     f98:	dec00704 	addi	sp,sp,28
     f9c:	f800283a 	ret
     fa0:	d8c00315 	stw	r3,12(sp)
     fa4:	d9000215 	stw	r4,8(sp)
     fa8:	003fda06 	br	f14 <__floatunsisf+0x28>

00000fac <udivmodsi4>:
     fac:	29001b2e 	bgeu	r5,r4,101c <udivmodsi4+0x70>
     fb0:	28001a16 	blt	r5,zero,101c <udivmodsi4+0x70>
     fb4:	00800044 	movi	r2,1
     fb8:	0007883a 	mov	r3,zero
     fbc:	01c007c4 	movi	r7,31
     fc0:	00000306 	br	fd0 <udivmodsi4+0x24>
     fc4:	19c01326 	beq	r3,r7,1014 <udivmodsi4+0x68>
     fc8:	18c00044 	addi	r3,r3,1
     fcc:	28000416 	blt	r5,zero,fe0 <udivmodsi4+0x34>
     fd0:	294b883a 	add	r5,r5,r5
     fd4:	1085883a 	add	r2,r2,r2
     fd8:	293ffa36 	bltu	r5,r4,fc4 <udivmodsi4+0x18>
     fdc:	10000d26 	beq	r2,zero,1014 <udivmodsi4+0x68>
     fe0:	0007883a 	mov	r3,zero
     fe4:	21400236 	bltu	r4,r5,ff0 <udivmodsi4+0x44>
     fe8:	2149c83a 	sub	r4,r4,r5
     fec:	1886b03a 	or	r3,r3,r2
     ff0:	1004d07a 	srli	r2,r2,1
     ff4:	280ad07a 	srli	r5,r5,1
     ff8:	103ffa1e 	bne	r2,zero,fe4 <udivmodsi4+0x38>
     ffc:	30000226 	beq	r6,zero,1008 <udivmodsi4+0x5c>
    1000:	2005883a 	mov	r2,r4
    1004:	f800283a 	ret
    1008:	1809883a 	mov	r4,r3
    100c:	2005883a 	mov	r2,r4
    1010:	f800283a 	ret
    1014:	0007883a 	mov	r3,zero
    1018:	003ff806 	br	ffc <udivmodsi4+0x50>
    101c:	00800044 	movi	r2,1
    1020:	0007883a 	mov	r3,zero
    1024:	003fef06 	br	fe4 <udivmodsi4+0x38>

00001028 <__divsi3>:
    1028:	defffe04 	addi	sp,sp,-8
    102c:	dc000015 	stw	r16,0(sp)
    1030:	dfc00115 	stw	ra,4(sp)
    1034:	0021883a 	mov	r16,zero
    1038:	20000c16 	blt	r4,zero,106c <__divsi3+0x44>
    103c:	000d883a 	mov	r6,zero
    1040:	28000e16 	blt	r5,zero,107c <__divsi3+0x54>
    1044:	0000fac0 	call	fac <udivmodsi4>
    1048:	1007883a 	mov	r3,r2
    104c:	8005003a 	cmpeq	r2,r16,zero
    1050:	1000011e 	bne	r2,zero,1058 <__divsi3+0x30>
    1054:	00c7c83a 	sub	r3,zero,r3
    1058:	1805883a 	mov	r2,r3
    105c:	dfc00117 	ldw	ra,4(sp)
    1060:	dc000017 	ldw	r16,0(sp)
    1064:	dec00204 	addi	sp,sp,8
    1068:	f800283a 	ret
    106c:	0109c83a 	sub	r4,zero,r4
    1070:	04000044 	movi	r16,1
    1074:	000d883a 	mov	r6,zero
    1078:	283ff20e 	bge	r5,zero,1044 <__divsi3+0x1c>
    107c:	014bc83a 	sub	r5,zero,r5
    1080:	8021003a 	cmpeq	r16,r16,zero
    1084:	003fef06 	br	1044 <__divsi3+0x1c>

00001088 <__modsi3>:
    1088:	deffff04 	addi	sp,sp,-4
    108c:	dfc00015 	stw	ra,0(sp)
    1090:	01800044 	movi	r6,1
    1094:	2807883a 	mov	r3,r5
    1098:	20000416 	blt	r4,zero,10ac <__modsi3+0x24>
    109c:	28000c16 	blt	r5,zero,10d0 <__modsi3+0x48>
    10a0:	dfc00017 	ldw	ra,0(sp)
    10a4:	dec00104 	addi	sp,sp,4
    10a8:	0000fac1 	jmpi	fac <udivmodsi4>
    10ac:	0109c83a 	sub	r4,zero,r4
    10b0:	28000b16 	blt	r5,zero,10e0 <__modsi3+0x58>
    10b4:	180b883a 	mov	r5,r3
    10b8:	01800044 	movi	r6,1
    10bc:	0000fac0 	call	fac <udivmodsi4>
    10c0:	0085c83a 	sub	r2,zero,r2
    10c4:	dfc00017 	ldw	ra,0(sp)
    10c8:	dec00104 	addi	sp,sp,4
    10cc:	f800283a 	ret
    10d0:	014bc83a 	sub	r5,zero,r5
    10d4:	dfc00017 	ldw	ra,0(sp)
    10d8:	dec00104 	addi	sp,sp,4
    10dc:	0000fac1 	jmpi	fac <udivmodsi4>
    10e0:	0147c83a 	sub	r3,zero,r5
    10e4:	003ff306 	br	10b4 <__modsi3+0x2c>

000010e8 <__udivsi3>:
    10e8:	000d883a 	mov	r6,zero
    10ec:	0000fac1 	jmpi	fac <udivmodsi4>

000010f0 <__umodsi3>:
    10f0:	01800044 	movi	r6,1
    10f4:	0000fac1 	jmpi	fac <udivmodsi4>

000010f8 <__muldi3>:
    10f8:	2011883a 	mov	r8,r4
    10fc:	427fffcc 	andi	r9,r8,65535
    1100:	4018d43a 	srli	r12,r8,16
    1104:	32bfffcc 	andi	r10,r6,65535
    1108:	3016d43a 	srli	r11,r6,16
    110c:	4a85383a 	mul	r2,r9,r10
    1110:	6295383a 	mul	r10,r12,r10
    1114:	4ad3383a 	mul	r9,r9,r11
    1118:	113fffcc 	andi	r4,r2,65535
    111c:	1004d43a 	srli	r2,r2,16
    1120:	4a93883a 	add	r9,r9,r10
    1124:	3807883a 	mov	r3,r7
    1128:	1245883a 	add	r2,r2,r9
    112c:	280f883a 	mov	r7,r5
    1130:	180b883a 	mov	r5,r3
    1134:	1006943a 	slli	r3,r2,16
    1138:	defffd04 	addi	sp,sp,-12
    113c:	dc800215 	stw	r18,8(sp)
    1140:	1907883a 	add	r3,r3,r4
    1144:	dc400115 	stw	r17,4(sp)
    1148:	dc000015 	stw	r16,0(sp)
    114c:	4165383a 	mul	r18,r8,r5
    1150:	31e3383a 	mul	r17,r6,r7
    1154:	1012d43a 	srli	r9,r2,16
    1158:	62d9383a 	mul	r12,r12,r11
    115c:	181f883a 	mov	r15,r3
    1160:	1280022e 	bgeu	r2,r10,116c <__muldi3+0x74>
    1164:	00800074 	movhi	r2,1
    1168:	6099883a 	add	r12,r12,r2
    116c:	624d883a 	add	r6,r12,r9
    1170:	9187883a 	add	r3,r18,r6
    1174:	88c7883a 	add	r3,r17,r3
    1178:	7805883a 	mov	r2,r15
    117c:	dc800217 	ldw	r18,8(sp)
    1180:	dc400117 	ldw	r17,4(sp)
    1184:	dc000017 	ldw	r16,0(sp)
    1188:	dec00304 	addi	sp,sp,12
    118c:	f800283a 	ret

00001190 <__clzsi2>:
    1190:	00bfffd4 	movui	r2,65535
    1194:	11000e36 	bltu	r2,r4,11d0 <__clzsi2+0x40>
    1198:	00803fc4 	movi	r2,255
    119c:	01400204 	movi	r5,8
    11a0:	0007883a 	mov	r3,zero
    11a4:	11001036 	bltu	r2,r4,11e8 <__clzsi2+0x58>
    11a8:	000b883a 	mov	r5,zero
    11ac:	20c6d83a 	srl	r3,r4,r3
    11b0:	00800074 	movhi	r2,1
    11b4:	10ba2804 	addi	r2,r2,-5984
    11b8:	1887883a 	add	r3,r3,r2
    11bc:	18800003 	ldbu	r2,0(r3)
    11c0:	00c00804 	movi	r3,32
    11c4:	2885883a 	add	r2,r5,r2
    11c8:	1885c83a 	sub	r2,r3,r2
    11cc:	f800283a 	ret
    11d0:	01400404 	movi	r5,16
    11d4:	00804034 	movhi	r2,256
    11d8:	10bfffc4 	addi	r2,r2,-1
    11dc:	2807883a 	mov	r3,r5
    11e0:	113ff22e 	bgeu	r2,r4,11ac <__clzsi2+0x1c>
    11e4:	01400604 	movi	r5,24
    11e8:	2807883a 	mov	r3,r5
    11ec:	20c6d83a 	srl	r3,r4,r3
    11f0:	00800074 	movhi	r2,1
    11f4:	10ba2804 	addi	r2,r2,-5984
    11f8:	1887883a 	add	r3,r3,r2
    11fc:	18800003 	ldbu	r2,0(r3)
    1200:	00c00804 	movi	r3,32
    1204:	2885883a 	add	r2,r5,r2
    1208:	1885c83a 	sub	r2,r3,r2
    120c:	f800283a 	ret

00001210 <__pack_f>:
    1210:	20c00017 	ldw	r3,0(r4)
    1214:	01c00044 	movi	r7,1
    1218:	21800317 	ldw	r6,12(r4)
    121c:	21400117 	ldw	r5,4(r4)
    1220:	38c02d2e 	bgeu	r7,r3,12d8 <__pack_f+0xc8>
    1224:	00800104 	movi	r2,4
    1228:	18802826 	beq	r3,r2,12cc <__pack_f+0xbc>
    122c:	00800084 	movi	r2,2
    1230:	18800126 	beq	r3,r2,1238 <__pack_f+0x28>
    1234:	3000101e 	bne	r6,zero,1278 <__pack_f+0x68>
    1238:	000d883a 	mov	r6,zero
    123c:	0007883a 	mov	r3,zero
    1240:	19003fcc 	andi	r4,r3,255
    1244:	200895fa 	slli	r4,r4,23
    1248:	00c02034 	movhi	r3,128
    124c:	18ffffc4 	addi	r3,r3,-1
    1250:	30c6703a 	and	r3,r6,r3
    1254:	10a0002c 	andhi	r2,r2,32768
    1258:	10c4b03a 	or	r2,r2,r3
    125c:	280a97fa 	slli	r5,r5,31
    1260:	1104b03a 	or	r2,r2,r4
    1264:	00e00034 	movhi	r3,32768
    1268:	18ffffc4 	addi	r3,r3,-1
    126c:	10c4703a 	and	r2,r2,r3
    1270:	1144b03a 	or	r2,r2,r5
    1274:	f800283a 	ret
    1278:	21000217 	ldw	r4,8(r4)
    127c:	00bfe084 	movi	r2,-126
    1280:	20801b16 	blt	r4,r2,12f0 <__pack_f+0xe0>
    1284:	00801fc4 	movi	r2,127
    1288:	11001016 	blt	r2,r4,12cc <__pack_f+0xbc>
    128c:	308e703a 	and	r7,r6,r2
    1290:	2087883a 	add	r3,r4,r2
    1294:	00801004 	movi	r2,64
    1298:	38800526 	beq	r7,r2,12b0 <__pack_f+0xa0>
    129c:	31800fc4 	addi	r6,r6,63
    12a0:	30000716 	blt	r6,zero,12c0 <__pack_f+0xb0>
    12a4:	300490ba 	slli	r2,r6,2
    12a8:	100cd27a 	srli	r6,r2,9
    12ac:	003fe406 	br	1240 <__pack_f+0x30>
    12b0:	3080200c 	andi	r2,r6,128
    12b4:	103ffa26 	beq	r2,zero,12a0 <__pack_f+0x90>
    12b8:	31cd883a 	add	r6,r6,r7
    12bc:	003ff806 	br	12a0 <__pack_f+0x90>
    12c0:	300cd07a 	srli	r6,r6,1
    12c4:	18c00044 	addi	r3,r3,1
    12c8:	003ff606 	br	12a4 <__pack_f+0x94>
    12cc:	000d883a 	mov	r6,zero
    12d0:	00ffffc4 	movi	r3,-1
    12d4:	003fda06 	br	1240 <__pack_f+0x30>
    12d8:	31800434 	orhi	r6,r6,16
    12dc:	00802034 	movhi	r2,128
    12e0:	10bfffc4 	addi	r2,r2,-1
    12e4:	308c703a 	and	r6,r6,r2
    12e8:	00ffffc4 	movi	r3,-1
    12ec:	003fd406 	br	1240 <__pack_f+0x30>
    12f0:	1109c83a 	sub	r4,r2,r4
    12f4:	00800644 	movi	r2,25
    12f8:	11001216 	blt	r2,r4,1344 <__pack_f+0x134>
    12fc:	3904983a 	sll	r2,r7,r4
    1300:	3106d83a 	srl	r3,r6,r4
    1304:	10bfffc4 	addi	r2,r2,-1
    1308:	3084703a 	and	r2,r6,r2
    130c:	1004c03a 	cmpne	r2,r2,zero
    1310:	1886b03a 	or	r3,r3,r2
    1314:	19001fcc 	andi	r4,r3,127
    1318:	00801004 	movi	r2,64
    131c:	20800c26 	beq	r4,r2,1350 <__pack_f+0x140>
    1320:	18c00fc4 	addi	r3,r3,63
    1324:	00900034 	movhi	r2,16384
    1328:	10bfffc4 	addi	r2,r2,-1
    132c:	180cd1fa 	srli	r6,r3,7
    1330:	10c7803a 	cmpltu	r3,r2,r3
    1334:	00802034 	movhi	r2,128
    1338:	10bfffc4 	addi	r2,r2,-1
    133c:	308c703a 	and	r6,r6,r2
    1340:	003fbf06 	br	1240 <__pack_f+0x30>
    1344:	0007883a 	mov	r3,zero
    1348:	000d883a 	mov	r6,zero
    134c:	003ff906 	br	1334 <__pack_f+0x124>
    1350:	1880200c 	andi	r2,r3,128
    1354:	10000126 	beq	r2,zero,135c <__pack_f+0x14c>
    1358:	1907883a 	add	r3,r3,r4
    135c:	180cd1fa 	srli	r6,r3,7
    1360:	00900034 	movhi	r2,16384
    1364:	10bfffc4 	addi	r2,r2,-1
    1368:	10c7803a 	cmpltu	r3,r2,r3
    136c:	003ff106 	br	1334 <__pack_f+0x124>

00001370 <__unpack_f>:
    1370:	21800017 	ldw	r6,0(r4)
    1374:	00c02034 	movhi	r3,128
    1378:	18ffffc4 	addi	r3,r3,-1
    137c:	3004d5fa 	srli	r2,r6,23
    1380:	3008d7fa 	srli	r4,r6,31
    1384:	30ce703a 	and	r7,r6,r3
    1388:	10c03fcc 	andi	r3,r2,255
    138c:	29000115 	stw	r4,4(r5)
    1390:	1800131e 	bne	r3,zero,13e0 <__unpack_f+0x70>
    1394:	38000f26 	beq	r7,zero,13d4 <__unpack_f+0x64>
    1398:	380691fa 	slli	r3,r7,7
    139c:	01bfe084 	movi	r6,-126
    13a0:	008000c4 	movi	r2,3
    13a4:	01100034 	movhi	r4,16384
    13a8:	213fffc4 	addi	r4,r4,-1
    13ac:	28800015 	stw	r2,0(r5)
    13b0:	29800215 	stw	r6,8(r5)
    13b4:	20c00536 	bltu	r4,r3,13cc <__unpack_f+0x5c>
    13b8:	3005883a 	mov	r2,r6
    13bc:	18c7883a 	add	r3,r3,r3
    13c0:	10bfffc4 	addi	r2,r2,-1
    13c4:	20fffd2e 	bgeu	r4,r3,13bc <__unpack_f+0x4c>
    13c8:	28800215 	stw	r2,8(r5)
    13cc:	28c00315 	stw	r3,12(r5)
    13d0:	f800283a 	ret
    13d4:	00800084 	movi	r2,2
    13d8:	28800015 	stw	r2,0(r5)
    13dc:	f800283a 	ret
    13e0:	00803fc4 	movi	r2,255
    13e4:	18800826 	beq	r3,r2,1408 <__unpack_f+0x98>
    13e8:	380491fa 	slli	r2,r7,7
    13ec:	18ffe044 	addi	r3,r3,-127
    13f0:	28c00215 	stw	r3,8(r5)
    13f4:	10900034 	orhi	r2,r2,16384
    13f8:	28800315 	stw	r2,12(r5)
    13fc:	008000c4 	movi	r2,3
    1400:	28800015 	stw	r2,0(r5)
    1404:	f800283a 	ret
    1408:	3800031e 	bne	r7,zero,1418 <__unpack_f+0xa8>
    140c:	00800104 	movi	r2,4
    1410:	28800015 	stw	r2,0(r5)
    1414:	f800283a 	ret
    1418:	3080042c 	andhi	r2,r6,16
    141c:	10000426 	beq	r2,zero,1430 <__unpack_f+0xc0>
    1420:	00800044 	movi	r2,1
    1424:	28800015 	stw	r2,0(r5)
    1428:	29c00315 	stw	r7,12(r5)
    142c:	f800283a 	ret
    1430:	28000015 	stw	zero,0(r5)
    1434:	003ffc06 	br	1428 <__unpack_f+0xb8>

00001438 <__fpcmp_parts_f>:
    1438:	21800017 	ldw	r6,0(r4)
    143c:	00c00044 	movi	r3,1
    1440:	19800a2e 	bgeu	r3,r6,146c <__fpcmp_parts_f+0x34>
    1444:	28800017 	ldw	r2,0(r5)
    1448:	1880082e 	bgeu	r3,r2,146c <__fpcmp_parts_f+0x34>
    144c:	00c00104 	movi	r3,4
    1450:	30c01e26 	beq	r6,r3,14cc <__fpcmp_parts_f+0x94>
    1454:	10c01a26 	beq	r2,r3,14c0 <__fpcmp_parts_f+0x88>
    1458:	00c00084 	movi	r3,2
    145c:	30c00526 	beq	r6,r3,1474 <__fpcmp_parts_f+0x3c>
    1460:	10c0071e 	bne	r2,r3,1480 <__fpcmp_parts_f+0x48>
    1464:	20800117 	ldw	r2,4(r4)
    1468:	1000091e 	bne	r2,zero,1490 <__fpcmp_parts_f+0x58>
    146c:	00800044 	movi	r2,1
    1470:	f800283a 	ret
    1474:	10c0121e 	bne	r2,r3,14c0 <__fpcmp_parts_f+0x88>
    1478:	0005883a 	mov	r2,zero
    147c:	f800283a 	ret
    1480:	20c00117 	ldw	r3,4(r4)
    1484:	28800117 	ldw	r2,4(r5)
    1488:	18800326 	beq	r3,r2,1498 <__fpcmp_parts_f+0x60>
    148c:	183ff726 	beq	r3,zero,146c <__fpcmp_parts_f+0x34>
    1490:	00bfffc4 	movi	r2,-1
    1494:	f800283a 	ret
    1498:	21800217 	ldw	r6,8(r4)
    149c:	28800217 	ldw	r2,8(r5)
    14a0:	11bffa16 	blt	r2,r6,148c <__fpcmp_parts_f+0x54>
    14a4:	30800416 	blt	r6,r2,14b8 <__fpcmp_parts_f+0x80>
    14a8:	21000317 	ldw	r4,12(r4)
    14ac:	29400317 	ldw	r5,12(r5)
    14b0:	293ff636 	bltu	r5,r4,148c <__fpcmp_parts_f+0x54>
    14b4:	217ff02e 	bgeu	r4,r5,1478 <__fpcmp_parts_f+0x40>
    14b8:	183fec1e 	bne	r3,zero,146c <__fpcmp_parts_f+0x34>
    14bc:	003ff406 	br	1490 <__fpcmp_parts_f+0x58>
    14c0:	28800117 	ldw	r2,4(r5)
    14c4:	103fe91e 	bne	r2,zero,146c <__fpcmp_parts_f+0x34>
    14c8:	003ff106 	br	1490 <__fpcmp_parts_f+0x58>
    14cc:	11bfe51e 	bne	r2,r6,1464 <__fpcmp_parts_f+0x2c>
    14d0:	28c00117 	ldw	r3,4(r5)
    14d4:	20800117 	ldw	r2,4(r4)
    14d8:	1885c83a 	sub	r2,r3,r2
    14dc:	f800283a 	ret

000014e0 <printf>:
    14e0:	defffb04 	addi	sp,sp,-20
    14e4:	dfc00115 	stw	ra,4(sp)
    14e8:	d9400215 	stw	r5,8(sp)
    14ec:	d9800315 	stw	r6,12(sp)
    14f0:	d9c00415 	stw	r7,16(sp)
    14f4:	00800074 	movhi	r2,1
    14f8:	1081b304 	addi	r2,r2,1740
    14fc:	10c00017 	ldw	r3,0(r2)
    1500:	200b883a 	mov	r5,r4
    1504:	d8800204 	addi	r2,sp,8
    1508:	19000217 	ldw	r4,8(r3)
    150c:	100d883a 	mov	r6,r2
    1510:	d8800015 	stw	r2,0(sp)
    1514:	00035840 	call	3584 <__vfprintf_internal>
    1518:	dfc00117 	ldw	ra,4(sp)
    151c:	dec00504 	addi	sp,sp,20
    1520:	f800283a 	ret

00001524 <_printf_r>:
    1524:	defffc04 	addi	sp,sp,-16
    1528:	dfc00115 	stw	ra,4(sp)
    152c:	d9800215 	stw	r6,8(sp)
    1530:	d9c00315 	stw	r7,12(sp)
    1534:	280d883a 	mov	r6,r5
    1538:	21400217 	ldw	r5,8(r4)
    153c:	d8c00204 	addi	r3,sp,8
    1540:	180f883a 	mov	r7,r3
    1544:	d8c00015 	stw	r3,0(sp)
    1548:	00016d80 	call	16d8 <___vfprintf_internal_r>
    154c:	dfc00117 	ldw	ra,4(sp)
    1550:	dec00404 	addi	sp,sp,16
    1554:	f800283a 	ret

00001558 <_puts_r>:
    1558:	defff604 	addi	sp,sp,-40
    155c:	dc400715 	stw	r17,28(sp)
    1560:	2023883a 	mov	r17,r4
    1564:	2809883a 	mov	r4,r5
    1568:	dfc00915 	stw	ra,36(sp)
    156c:	dcc00815 	stw	r19,32(sp)
    1570:	2827883a 	mov	r19,r5
    1574:	000160c0 	call	160c <strlen>
    1578:	89400217 	ldw	r5,8(r17)
    157c:	00c00074 	movhi	r3,1
    1580:	18fa6804 	addi	r3,r3,-5728
    1584:	01c00044 	movi	r7,1
    1588:	12000044 	addi	r8,r2,1
    158c:	d8c00515 	stw	r3,20(sp)
    1590:	d9c00615 	stw	r7,24(sp)
    1594:	d8c00304 	addi	r3,sp,12
    1598:	01c00084 	movi	r7,2
    159c:	8809883a 	mov	r4,r17
    15a0:	d80d883a 	mov	r6,sp
    15a4:	d8c00015 	stw	r3,0(sp)
    15a8:	dcc00315 	stw	r19,12(sp)
    15ac:	da000215 	stw	r8,8(sp)
    15b0:	d9c00115 	stw	r7,4(sp)
    15b4:	d8800415 	stw	r2,16(sp)
    15b8:	00057e00 	call	57e0 <__sfvwrite_r>
    15bc:	00ffffc4 	movi	r3,-1
    15c0:	10000626 	beq	r2,zero,15dc <_puts_r+0x84>
    15c4:	1805883a 	mov	r2,r3
    15c8:	dfc00917 	ldw	ra,36(sp)
    15cc:	dcc00817 	ldw	r19,32(sp)
    15d0:	dc400717 	ldw	r17,28(sp)
    15d4:	dec00a04 	addi	sp,sp,40
    15d8:	f800283a 	ret
    15dc:	00c00284 	movi	r3,10
    15e0:	1805883a 	mov	r2,r3
    15e4:	dfc00917 	ldw	ra,36(sp)
    15e8:	dcc00817 	ldw	r19,32(sp)
    15ec:	dc400717 	ldw	r17,28(sp)
    15f0:	dec00a04 	addi	sp,sp,40
    15f4:	f800283a 	ret

000015f8 <puts>:
    15f8:	00800074 	movhi	r2,1
    15fc:	1081b304 	addi	r2,r2,1740
    1600:	200b883a 	mov	r5,r4
    1604:	11000017 	ldw	r4,0(r2)
    1608:	00015581 	jmpi	1558 <_puts_r>

0000160c <strlen>:
    160c:	208000cc 	andi	r2,r4,3
    1610:	2011883a 	mov	r8,r4
    1614:	1000161e 	bne	r2,zero,1670 <strlen+0x64>
    1618:	20c00017 	ldw	r3,0(r4)
    161c:	017fbff4 	movhi	r5,65279
    1620:	297fbfc4 	addi	r5,r5,-257
    1624:	01e02074 	movhi	r7,32897
    1628:	39e02004 	addi	r7,r7,-32640
    162c:	1945883a 	add	r2,r3,r5
    1630:	11c4703a 	and	r2,r2,r7
    1634:	00c6303a 	nor	r3,zero,r3
    1638:	1886703a 	and	r3,r3,r2
    163c:	18000c1e 	bne	r3,zero,1670 <strlen+0x64>
    1640:	280d883a 	mov	r6,r5
    1644:	380b883a 	mov	r5,r7
    1648:	21000104 	addi	r4,r4,4
    164c:	20800017 	ldw	r2,0(r4)
    1650:	1187883a 	add	r3,r2,r6
    1654:	1946703a 	and	r3,r3,r5
    1658:	0084303a 	nor	r2,zero,r2
    165c:	10c4703a 	and	r2,r2,r3
    1660:	103ff926 	beq	r2,zero,1648 <strlen+0x3c>
    1664:	20800007 	ldb	r2,0(r4)
    1668:	10000326 	beq	r2,zero,1678 <strlen+0x6c>
    166c:	21000044 	addi	r4,r4,1
    1670:	20800007 	ldb	r2,0(r4)
    1674:	103ffd1e 	bne	r2,zero,166c <strlen+0x60>
    1678:	2205c83a 	sub	r2,r4,r8
    167c:	f800283a 	ret

00001680 <__sprint_r>:
    1680:	30800217 	ldw	r2,8(r6)
    1684:	defffe04 	addi	sp,sp,-8
    1688:	dc000015 	stw	r16,0(sp)
    168c:	dfc00115 	stw	ra,4(sp)
    1690:	3021883a 	mov	r16,r6
    1694:	0007883a 	mov	r3,zero
    1698:	1000061e 	bne	r2,zero,16b4 <__sprint_r+0x34>
    169c:	1805883a 	mov	r2,r3
    16a0:	30000115 	stw	zero,4(r6)
    16a4:	dfc00117 	ldw	ra,4(sp)
    16a8:	dc000017 	ldw	r16,0(sp)
    16ac:	dec00204 	addi	sp,sp,8
    16b0:	f800283a 	ret
    16b4:	00057e00 	call	57e0 <__sfvwrite_r>
    16b8:	1007883a 	mov	r3,r2
    16bc:	1805883a 	mov	r2,r3
    16c0:	80000115 	stw	zero,4(r16)
    16c4:	80000215 	stw	zero,8(r16)
    16c8:	dfc00117 	ldw	ra,4(sp)
    16cc:	dc000017 	ldw	r16,0(sp)
    16d0:	dec00204 	addi	sp,sp,8
    16d4:	f800283a 	ret

000016d8 <___vfprintf_internal_r>:
    16d8:	defea404 	addi	sp,sp,-1392
    16dc:	dd815815 	stw	r22,1376(sp)
    16e0:	dc015215 	stw	r16,1352(sp)
    16e4:	d9c15115 	stw	r7,1348(sp)
    16e8:	dfc15b15 	stw	ra,1388(sp)
    16ec:	df015a15 	stw	fp,1384(sp)
    16f0:	ddc15915 	stw	r23,1380(sp)
    16f4:	dd415715 	stw	r21,1372(sp)
    16f8:	dd015615 	stw	r20,1368(sp)
    16fc:	dcc15515 	stw	r19,1364(sp)
    1700:	dc815415 	stw	r18,1360(sp)
    1704:	dc415315 	stw	r17,1356(sp)
    1708:	282d883a 	mov	r22,r5
    170c:	3021883a 	mov	r16,r6
    1710:	d9014f15 	stw	r4,1340(sp)
    1714:	0005e040 	call	5e04 <_localeconv_r>
    1718:	10800017 	ldw	r2,0(r2)
    171c:	d9c15117 	ldw	r7,1348(sp)
    1720:	d8814915 	stw	r2,1316(sp)
    1724:	d8814f17 	ldw	r2,1340(sp)
    1728:	10000226 	beq	r2,zero,1734 <___vfprintf_internal_r+0x5c>
    172c:	10800e17 	ldw	r2,56(r2)
    1730:	10020d26 	beq	r2,zero,1f68 <___vfprintf_internal_r+0x890>
    1734:	b080030b 	ldhu	r2,12(r22)
    1738:	1080020c 	andi	r2,r2,8
    173c:	10020e26 	beq	r2,zero,1f78 <___vfprintf_internal_r+0x8a0>
    1740:	b0800417 	ldw	r2,16(r22)
    1744:	10020c26 	beq	r2,zero,1f78 <___vfprintf_internal_r+0x8a0>
    1748:	b200030b 	ldhu	r8,12(r22)
    174c:	00800284 	movi	r2,10
    1750:	40c0068c 	andi	r3,r8,26
    1754:	18802f1e 	bne	r3,r2,1814 <___vfprintf_internal_r+0x13c>
    1758:	b080038f 	ldh	r2,14(r22)
    175c:	10002d16 	blt	r2,zero,1814 <___vfprintf_internal_r+0x13c>
    1760:	b240038b 	ldhu	r9,14(r22)
    1764:	b2800717 	ldw	r10,28(r22)
    1768:	b2c00917 	ldw	r11,36(r22)
    176c:	d9014f17 	ldw	r4,1340(sp)
    1770:	dc402904 	addi	r17,sp,164
    1774:	d8804004 	addi	r2,sp,256
    1778:	00c10004 	movi	r3,1024
    177c:	423fff4c 	andi	r8,r8,65533
    1780:	800d883a 	mov	r6,r16
    1784:	880b883a 	mov	r5,r17
    1788:	da002c0d 	sth	r8,176(sp)
    178c:	da402c8d 	sth	r9,178(sp)
    1790:	da803015 	stw	r10,192(sp)
    1794:	dac03215 	stw	r11,200(sp)
    1798:	d8802d15 	stw	r2,180(sp)
    179c:	d8c02e15 	stw	r3,184(sp)
    17a0:	d8802915 	stw	r2,164(sp)
    17a4:	d8c02b15 	stw	r3,172(sp)
    17a8:	d8002f15 	stw	zero,188(sp)
    17ac:	00016d80 	call	16d8 <___vfprintf_internal_r>
    17b0:	d8814b15 	stw	r2,1324(sp)
    17b4:	10000416 	blt	r2,zero,17c8 <___vfprintf_internal_r+0xf0>
    17b8:	d9014f17 	ldw	r4,1340(sp)
    17bc:	880b883a 	mov	r5,r17
    17c0:	0004eb00 	call	4eb0 <_fflush_r>
    17c4:	1002321e 	bne	r2,zero,2090 <___vfprintf_internal_r+0x9b8>
    17c8:	d8802c0b 	ldhu	r2,176(sp)
    17cc:	1080100c 	andi	r2,r2,64
    17d0:	10000326 	beq	r2,zero,17e0 <___vfprintf_internal_r+0x108>
    17d4:	b080030b 	ldhu	r2,12(r22)
    17d8:	10801014 	ori	r2,r2,64
    17dc:	b080030d 	sth	r2,12(r22)
    17e0:	d8814b17 	ldw	r2,1324(sp)
    17e4:	dfc15b17 	ldw	ra,1388(sp)
    17e8:	df015a17 	ldw	fp,1384(sp)
    17ec:	ddc15917 	ldw	r23,1380(sp)
    17f0:	dd815817 	ldw	r22,1376(sp)
    17f4:	dd415717 	ldw	r21,1372(sp)
    17f8:	dd015617 	ldw	r20,1368(sp)
    17fc:	dcc15517 	ldw	r19,1364(sp)
    1800:	dc815417 	ldw	r18,1360(sp)
    1804:	dc415317 	ldw	r17,1356(sp)
    1808:	dc015217 	ldw	r16,1352(sp)
    180c:	dec15c04 	addi	sp,sp,1392
    1810:	f800283a 	ret
    1814:	0005883a 	mov	r2,zero
    1818:	0007883a 	mov	r3,zero
    181c:	dd401904 	addi	r21,sp,100
    1820:	d8814215 	stw	r2,1288(sp)
    1824:	802f883a 	mov	r23,r16
    1828:	d8c14315 	stw	r3,1292(sp)
    182c:	d8014b15 	stw	zero,1324(sp)
    1830:	d8014815 	stw	zero,1312(sp)
    1834:	d8014415 	stw	zero,1296(sp)
    1838:	d8014715 	stw	zero,1308(sp)
    183c:	dd400c15 	stw	r21,48(sp)
    1840:	d8000e15 	stw	zero,56(sp)
    1844:	d8000d15 	stw	zero,52(sp)
    1848:	b8800007 	ldb	r2,0(r23)
    184c:	10001926 	beq	r2,zero,18b4 <___vfprintf_internal_r+0x1dc>
    1850:	00c00944 	movi	r3,37
    1854:	10c01726 	beq	r2,r3,18b4 <___vfprintf_internal_r+0x1dc>
    1858:	b821883a 	mov	r16,r23
    185c:	00000106 	br	1864 <___vfprintf_internal_r+0x18c>
    1860:	10c00326 	beq	r2,r3,1870 <___vfprintf_internal_r+0x198>
    1864:	84000044 	addi	r16,r16,1
    1868:	80800007 	ldb	r2,0(r16)
    186c:	103ffc1e 	bne	r2,zero,1860 <___vfprintf_internal_r+0x188>
    1870:	85e7c83a 	sub	r19,r16,r23
    1874:	98000e26 	beq	r19,zero,18b0 <___vfprintf_internal_r+0x1d8>
    1878:	dc800e17 	ldw	r18,56(sp)
    187c:	dc400d17 	ldw	r17,52(sp)
    1880:	008001c4 	movi	r2,7
    1884:	94e5883a 	add	r18,r18,r19
    1888:	8c400044 	addi	r17,r17,1
    188c:	adc00015 	stw	r23,0(r21)
    1890:	dc800e15 	stw	r18,56(sp)
    1894:	acc00115 	stw	r19,4(r21)
    1898:	dc400d15 	stw	r17,52(sp)
    189c:	14428b16 	blt	r2,r17,22cc <___vfprintf_internal_r+0xbf4>
    18a0:	ad400204 	addi	r21,r21,8
    18a4:	d9014b17 	ldw	r4,1324(sp)
    18a8:	24c9883a 	add	r4,r4,r19
    18ac:	d9014b15 	stw	r4,1324(sp)
    18b0:	802f883a 	mov	r23,r16
    18b4:	b8800007 	ldb	r2,0(r23)
    18b8:	10013c26 	beq	r2,zero,1dac <___vfprintf_internal_r+0x6d4>
    18bc:	bdc00044 	addi	r23,r23,1
    18c0:	d8000405 	stb	zero,16(sp)
    18c4:	b8c00007 	ldb	r3,0(r23)
    18c8:	04ffffc4 	movi	r19,-1
    18cc:	d8014c15 	stw	zero,1328(sp)
    18d0:	d8014a15 	stw	zero,1320(sp)
    18d4:	d8c14d15 	stw	r3,1332(sp)
    18d8:	bdc00044 	addi	r23,r23,1
    18dc:	d9414d17 	ldw	r5,1332(sp)
    18e0:	00801604 	movi	r2,88
    18e4:	28fff804 	addi	r3,r5,-32
    18e8:	10c06036 	bltu	r2,r3,1a6c <___vfprintf_internal_r+0x394>
    18ec:	18c5883a 	add	r2,r3,r3
    18f0:	1085883a 	add	r2,r2,r2
    18f4:	00c00034 	movhi	r3,0
    18f8:	18c64204 	addi	r3,r3,6408
    18fc:	10c5883a 	add	r2,r2,r3
    1900:	11000017 	ldw	r4,0(r2)
    1904:	2000683a 	jmp	r4
    1908:	0000287c 	xorhi	zero,zero,161
    190c:	00001a6c 	andhi	zero,zero,105
    1910:	00001a6c 	andhi	zero,zero,105
    1914:	00002868 	cmpgeui	zero,zero,161
    1918:	00001a6c 	andhi	zero,zero,105
    191c:	00001a6c 	andhi	zero,zero,105
    1920:	00001a6c 	andhi	zero,zero,105
    1924:	00001a6c 	andhi	zero,zero,105
    1928:	00001a6c 	andhi	zero,zero,105
    192c:	00001a6c 	andhi	zero,zero,105
    1930:	00002648 	cmpgei	zero,zero,153
    1934:	00002858 	cmpnei	zero,zero,161
    1938:	00001a6c 	andhi	zero,zero,105
    193c:	00002660 	cmpeqi	zero,zero,153
    1940:	000028f4 	movhi	zero,163
    1944:	00001a6c 	andhi	zero,zero,105
    1948:	000028e0 	cmpeqi	zero,zero,163
    194c:	000028a8 	cmpgeui	zero,zero,162
    1950:	000028a8 	cmpgeui	zero,zero,162
    1954:	000028a8 	cmpgeui	zero,zero,162
    1958:	000028a8 	cmpgeui	zero,zero,162
    195c:	000028a8 	cmpgeui	zero,zero,162
    1960:	000028a8 	cmpgeui	zero,zero,162
    1964:	000028a8 	cmpgeui	zero,zero,162
    1968:	000028a8 	cmpgeui	zero,zero,162
    196c:	000028a8 	cmpgeui	zero,zero,162
    1970:	00001a6c 	andhi	zero,zero,105
    1974:	00001a6c 	andhi	zero,zero,105
    1978:	00001a6c 	andhi	zero,zero,105
    197c:	00001a6c 	andhi	zero,zero,105
    1980:	00001a6c 	andhi	zero,zero,105
    1984:	00001a6c 	andhi	zero,zero,105
    1988:	00001a6c 	andhi	zero,zero,105
    198c:	00001a6c 	andhi	zero,zero,105
    1990:	00001a6c 	andhi	zero,zero,105
    1994:	00001a6c 	andhi	zero,zero,105
    1998:	000020c4 	movi	zero,131
    199c:	00002730 	cmpltui	zero,zero,156
    19a0:	00001a6c 	andhi	zero,zero,105
    19a4:	00002730 	cmpltui	zero,zero,156
    19a8:	00001a6c 	andhi	zero,zero,105
    19ac:	00001a6c 	andhi	zero,zero,105
    19b0:	00001a6c 	andhi	zero,zero,105
    19b4:	00001a6c 	andhi	zero,zero,105
    19b8:	00002894 	movui	zero,162
    19bc:	00001a6c 	andhi	zero,zero,105
    19c0:	00001a6c 	andhi	zero,zero,105
    19c4:	00002178 	rdprs	zero,zero,133
    19c8:	00001a6c 	andhi	zero,zero,105
    19cc:	00001a6c 	andhi	zero,zero,105
    19d0:	00001a6c 	andhi	zero,zero,105
    19d4:	00001a6c 	andhi	zero,zero,105
    19d8:	00001a6c 	andhi	zero,zero,105
    19dc:	000021c4 	movi	zero,135
    19e0:	00001a6c 	andhi	zero,zero,105
    19e4:	00001a6c 	andhi	zero,zero,105
    19e8:	000027e4 	muli	zero,zero,159
    19ec:	00001a6c 	andhi	zero,zero,105
    19f0:	00001a6c 	andhi	zero,zero,105
    19f4:	00001a6c 	andhi	zero,zero,105
    19f8:	00001a6c 	andhi	zero,zero,105
    19fc:	00001a6c 	andhi	zero,zero,105
    1a00:	00001a6c 	andhi	zero,zero,105
    1a04:	00001a6c 	andhi	zero,zero,105
    1a08:	00001a6c 	andhi	zero,zero,105
    1a0c:	00001a6c 	andhi	zero,zero,105
    1a10:	00001a6c 	andhi	zero,zero,105
    1a14:	000027b8 	rdprs	zero,zero,158
    1a18:	000020d0 	cmplti	zero,zero,131
    1a1c:	00002730 	cmpltui	zero,zero,156
    1a20:	00002730 	cmpltui	zero,zero,156
    1a24:	00002730 	cmpltui	zero,zero,156
    1a28:	0000271c 	xori	zero,zero,156
    1a2c:	000020d0 	cmplti	zero,zero,131
    1a30:	00001a6c 	andhi	zero,zero,105
    1a34:	00001a6c 	andhi	zero,zero,105
    1a38:	000026a4 	muli	zero,zero,154
    1a3c:	00001a6c 	andhi	zero,zero,105
    1a40:	00002674 	movhi	zero,153
    1a44:	00002184 	movi	zero,134
    1a48:	000026d4 	movui	zero,155
    1a4c:	000026c0 	call	26c <init+0x6c>
    1a50:	00001a6c 	andhi	zero,zero,105
    1a54:	00002950 	cmplti	zero,zero,165
    1a58:	00001a6c 	andhi	zero,zero,105
    1a5c:	000021d0 	cmplti	zero,zero,135
    1a60:	00001a6c 	andhi	zero,zero,105
    1a64:	00001a6c 	andhi	zero,zero,105
    1a68:	00002848 	cmpgei	zero,zero,161
    1a6c:	d9014d17 	ldw	r4,1332(sp)
    1a70:	2000ce26 	beq	r4,zero,1dac <___vfprintf_internal_r+0x6d4>
    1a74:	01400044 	movi	r5,1
    1a78:	d9800f04 	addi	r6,sp,60
    1a7c:	d9c14015 	stw	r7,1280(sp)
    1a80:	d9414515 	stw	r5,1300(sp)
    1a84:	d9814115 	stw	r6,1284(sp)
    1a88:	280f883a 	mov	r7,r5
    1a8c:	d9000f05 	stb	r4,60(sp)
    1a90:	d8000405 	stb	zero,16(sp)
    1a94:	d8014615 	stw	zero,1304(sp)
    1a98:	d8c14c17 	ldw	r3,1328(sp)
    1a9c:	1880008c 	andi	r2,r3,2
    1aa0:	1005003a 	cmpeq	r2,r2,zero
    1aa4:	d8815015 	stw	r2,1344(sp)
    1aa8:	1000031e 	bne	r2,zero,1ab8 <___vfprintf_internal_r+0x3e0>
    1aac:	d9014517 	ldw	r4,1300(sp)
    1ab0:	21000084 	addi	r4,r4,2
    1ab4:	d9014515 	stw	r4,1300(sp)
    1ab8:	d9414c17 	ldw	r5,1328(sp)
    1abc:	2940210c 	andi	r5,r5,132
    1ac0:	d9414e15 	stw	r5,1336(sp)
    1ac4:	28002d1e 	bne	r5,zero,1b7c <___vfprintf_internal_r+0x4a4>
    1ac8:	d9814a17 	ldw	r6,1320(sp)
    1acc:	d8814517 	ldw	r2,1300(sp)
    1ad0:	30a1c83a 	sub	r16,r6,r2
    1ad4:	0400290e 	bge	zero,r16,1b7c <___vfprintf_internal_r+0x4a4>
    1ad8:	00800404 	movi	r2,16
    1adc:	1404580e 	bge	r2,r16,2c40 <___vfprintf_internal_r+0x1568>
    1ae0:	dc800e17 	ldw	r18,56(sp)
    1ae4:	dc400d17 	ldw	r17,52(sp)
    1ae8:	1027883a 	mov	r19,r2
    1aec:	07000074 	movhi	fp,1
    1af0:	e73a8484 	addi	fp,fp,-5614
    1af4:	050001c4 	movi	r20,7
    1af8:	00000306 	br	1b08 <___vfprintf_internal_r+0x430>
    1afc:	843ffc04 	addi	r16,r16,-16
    1b00:	ad400204 	addi	r21,r21,8
    1b04:	9c00130e 	bge	r19,r16,1b54 <___vfprintf_internal_r+0x47c>
    1b08:	94800404 	addi	r18,r18,16
    1b0c:	8c400044 	addi	r17,r17,1
    1b10:	af000015 	stw	fp,0(r21)
    1b14:	acc00115 	stw	r19,4(r21)
    1b18:	dc800e15 	stw	r18,56(sp)
    1b1c:	dc400d15 	stw	r17,52(sp)
    1b20:	a47ff60e 	bge	r20,r17,1afc <___vfprintf_internal_r+0x424>
    1b24:	d9014f17 	ldw	r4,1340(sp)
    1b28:	b00b883a 	mov	r5,r22
    1b2c:	d9800c04 	addi	r6,sp,48
    1b30:	d9c15115 	stw	r7,1348(sp)
    1b34:	00016800 	call	1680 <__sprint_r>
    1b38:	d9c15117 	ldw	r7,1348(sp)
    1b3c:	10009e1e 	bne	r2,zero,1db8 <___vfprintf_internal_r+0x6e0>
    1b40:	843ffc04 	addi	r16,r16,-16
    1b44:	dc800e17 	ldw	r18,56(sp)
    1b48:	dc400d17 	ldw	r17,52(sp)
    1b4c:	dd401904 	addi	r21,sp,100
    1b50:	9c3fed16 	blt	r19,r16,1b08 <___vfprintf_internal_r+0x430>
    1b54:	9425883a 	add	r18,r18,r16
    1b58:	8c400044 	addi	r17,r17,1
    1b5c:	008001c4 	movi	r2,7
    1b60:	af000015 	stw	fp,0(r21)
    1b64:	ac000115 	stw	r16,4(r21)
    1b68:	dc800e15 	stw	r18,56(sp)
    1b6c:	dc400d15 	stw	r17,52(sp)
    1b70:	1441f516 	blt	r2,r17,2348 <___vfprintf_internal_r+0xc70>
    1b74:	ad400204 	addi	r21,r21,8
    1b78:	00000206 	br	1b84 <___vfprintf_internal_r+0x4ac>
    1b7c:	dc800e17 	ldw	r18,56(sp)
    1b80:	dc400d17 	ldw	r17,52(sp)
    1b84:	d8800407 	ldb	r2,16(sp)
    1b88:	10000b26 	beq	r2,zero,1bb8 <___vfprintf_internal_r+0x4e0>
    1b8c:	00800044 	movi	r2,1
    1b90:	94800044 	addi	r18,r18,1
    1b94:	8c400044 	addi	r17,r17,1
    1b98:	a8800115 	stw	r2,4(r21)
    1b9c:	d8c00404 	addi	r3,sp,16
    1ba0:	008001c4 	movi	r2,7
    1ba4:	a8c00015 	stw	r3,0(r21)
    1ba8:	dc800e15 	stw	r18,56(sp)
    1bac:	dc400d15 	stw	r17,52(sp)
    1bb0:	1441da16 	blt	r2,r17,231c <___vfprintf_internal_r+0xc44>
    1bb4:	ad400204 	addi	r21,r21,8
    1bb8:	d9015017 	ldw	r4,1344(sp)
    1bbc:	20000b1e 	bne	r4,zero,1bec <___vfprintf_internal_r+0x514>
    1bc0:	d8800444 	addi	r2,sp,17
    1bc4:	94800084 	addi	r18,r18,2
    1bc8:	8c400044 	addi	r17,r17,1
    1bcc:	a8800015 	stw	r2,0(r21)
    1bd0:	00c00084 	movi	r3,2
    1bd4:	008001c4 	movi	r2,7
    1bd8:	a8c00115 	stw	r3,4(r21)
    1bdc:	dc800e15 	stw	r18,56(sp)
    1be0:	dc400d15 	stw	r17,52(sp)
    1be4:	1441c216 	blt	r2,r17,22f0 <___vfprintf_internal_r+0xc18>
    1be8:	ad400204 	addi	r21,r21,8
    1bec:	d9414e17 	ldw	r5,1336(sp)
    1bf0:	00802004 	movi	r2,128
    1bf4:	2880b126 	beq	r5,r2,1ebc <___vfprintf_internal_r+0x7e4>
    1bf8:	d8c14617 	ldw	r3,1304(sp)
    1bfc:	19e1c83a 	sub	r16,r3,r7
    1c00:	0400260e 	bge	zero,r16,1c9c <___vfprintf_internal_r+0x5c4>
    1c04:	00800404 	movi	r2,16
    1c08:	1403c90e 	bge	r2,r16,2b30 <___vfprintf_internal_r+0x1458>
    1c0c:	1027883a 	mov	r19,r2
    1c10:	07000074 	movhi	fp,1
    1c14:	e73a8084 	addi	fp,fp,-5630
    1c18:	050001c4 	movi	r20,7
    1c1c:	00000306 	br	1c2c <___vfprintf_internal_r+0x554>
    1c20:	843ffc04 	addi	r16,r16,-16
    1c24:	ad400204 	addi	r21,r21,8
    1c28:	9c00130e 	bge	r19,r16,1c78 <___vfprintf_internal_r+0x5a0>
    1c2c:	94800404 	addi	r18,r18,16
    1c30:	8c400044 	addi	r17,r17,1
    1c34:	af000015 	stw	fp,0(r21)
    1c38:	acc00115 	stw	r19,4(r21)
    1c3c:	dc800e15 	stw	r18,56(sp)
    1c40:	dc400d15 	stw	r17,52(sp)
    1c44:	a47ff60e 	bge	r20,r17,1c20 <___vfprintf_internal_r+0x548>
    1c48:	d9014f17 	ldw	r4,1340(sp)
    1c4c:	b00b883a 	mov	r5,r22
    1c50:	d9800c04 	addi	r6,sp,48
    1c54:	d9c15115 	stw	r7,1348(sp)
    1c58:	00016800 	call	1680 <__sprint_r>
    1c5c:	d9c15117 	ldw	r7,1348(sp)
    1c60:	1000551e 	bne	r2,zero,1db8 <___vfprintf_internal_r+0x6e0>
    1c64:	843ffc04 	addi	r16,r16,-16
    1c68:	dc800e17 	ldw	r18,56(sp)
    1c6c:	dc400d17 	ldw	r17,52(sp)
    1c70:	dd401904 	addi	r21,sp,100
    1c74:	9c3fed16 	blt	r19,r16,1c2c <___vfprintf_internal_r+0x554>
    1c78:	9425883a 	add	r18,r18,r16
    1c7c:	8c400044 	addi	r17,r17,1
    1c80:	008001c4 	movi	r2,7
    1c84:	af000015 	stw	fp,0(r21)
    1c88:	ac000115 	stw	r16,4(r21)
    1c8c:	dc800e15 	stw	r18,56(sp)
    1c90:	dc400d15 	stw	r17,52(sp)
    1c94:	14418216 	blt	r2,r17,22a0 <___vfprintf_internal_r+0xbc8>
    1c98:	ad400204 	addi	r21,r21,8
    1c9c:	d9014c17 	ldw	r4,1328(sp)
    1ca0:	2080400c 	andi	r2,r4,256
    1ca4:	10004a1e 	bne	r2,zero,1dd0 <___vfprintf_internal_r+0x6f8>
    1ca8:	d9414117 	ldw	r5,1284(sp)
    1cac:	91e5883a 	add	r18,r18,r7
    1cb0:	8c400044 	addi	r17,r17,1
    1cb4:	008001c4 	movi	r2,7
    1cb8:	a9400015 	stw	r5,0(r21)
    1cbc:	a9c00115 	stw	r7,4(r21)
    1cc0:	dc800e15 	stw	r18,56(sp)
    1cc4:	dc400d15 	stw	r17,52(sp)
    1cc8:	14416716 	blt	r2,r17,2268 <___vfprintf_internal_r+0xb90>
    1ccc:	a8c00204 	addi	r3,r21,8
    1cd0:	d9814c17 	ldw	r6,1328(sp)
    1cd4:	3080010c 	andi	r2,r6,4
    1cd8:	10002826 	beq	r2,zero,1d7c <___vfprintf_internal_r+0x6a4>
    1cdc:	d8814a17 	ldw	r2,1320(sp)
    1ce0:	d9014517 	ldw	r4,1300(sp)
    1ce4:	1121c83a 	sub	r16,r2,r4
    1ce8:	0400240e 	bge	zero,r16,1d7c <___vfprintf_internal_r+0x6a4>
    1cec:	00800404 	movi	r2,16
    1cf0:	14044f0e 	bge	r2,r16,2e30 <___vfprintf_internal_r+0x1758>
    1cf4:	dc400d17 	ldw	r17,52(sp)
    1cf8:	1027883a 	mov	r19,r2
    1cfc:	07000074 	movhi	fp,1
    1d00:	e73a8484 	addi	fp,fp,-5614
    1d04:	050001c4 	movi	r20,7
    1d08:	00000306 	br	1d18 <___vfprintf_internal_r+0x640>
    1d0c:	843ffc04 	addi	r16,r16,-16
    1d10:	18c00204 	addi	r3,r3,8
    1d14:	9c00110e 	bge	r19,r16,1d5c <___vfprintf_internal_r+0x684>
    1d18:	94800404 	addi	r18,r18,16
    1d1c:	8c400044 	addi	r17,r17,1
    1d20:	1f000015 	stw	fp,0(r3)
    1d24:	1cc00115 	stw	r19,4(r3)
    1d28:	dc800e15 	stw	r18,56(sp)
    1d2c:	dc400d15 	stw	r17,52(sp)
    1d30:	a47ff60e 	bge	r20,r17,1d0c <___vfprintf_internal_r+0x634>
    1d34:	d9014f17 	ldw	r4,1340(sp)
    1d38:	b00b883a 	mov	r5,r22
    1d3c:	d9800c04 	addi	r6,sp,48
    1d40:	00016800 	call	1680 <__sprint_r>
    1d44:	10001c1e 	bne	r2,zero,1db8 <___vfprintf_internal_r+0x6e0>
    1d48:	843ffc04 	addi	r16,r16,-16
    1d4c:	dc800e17 	ldw	r18,56(sp)
    1d50:	dc400d17 	ldw	r17,52(sp)
    1d54:	d8c01904 	addi	r3,sp,100
    1d58:	9c3fef16 	blt	r19,r16,1d18 <___vfprintf_internal_r+0x640>
    1d5c:	9425883a 	add	r18,r18,r16
    1d60:	8c400044 	addi	r17,r17,1
    1d64:	008001c4 	movi	r2,7
    1d68:	1f000015 	stw	fp,0(r3)
    1d6c:	1c000115 	stw	r16,4(r3)
    1d70:	dc800e15 	stw	r18,56(sp)
    1d74:	dc400d15 	stw	r17,52(sp)
    1d78:	1440cb16 	blt	r2,r17,20a8 <___vfprintf_internal_r+0x9d0>
    1d7c:	d8814a17 	ldw	r2,1320(sp)
    1d80:	d9414517 	ldw	r5,1300(sp)
    1d84:	1140010e 	bge	r2,r5,1d8c <___vfprintf_internal_r+0x6b4>
    1d88:	2805883a 	mov	r2,r5
    1d8c:	d9814b17 	ldw	r6,1324(sp)
    1d90:	308d883a 	add	r6,r6,r2
    1d94:	d9814b15 	stw	r6,1324(sp)
    1d98:	90013b1e 	bne	r18,zero,2288 <___vfprintf_internal_r+0xbb0>
    1d9c:	d9c14017 	ldw	r7,1280(sp)
    1da0:	dd401904 	addi	r21,sp,100
    1da4:	d8000d15 	stw	zero,52(sp)
    1da8:	003ea706 	br	1848 <___vfprintf_internal_r+0x170>
    1dac:	d8800e17 	ldw	r2,56(sp)
    1db0:	10053f1e 	bne	r2,zero,32b0 <___vfprintf_internal_r+0x1bd8>
    1db4:	d8000d15 	stw	zero,52(sp)
    1db8:	b080030b 	ldhu	r2,12(r22)
    1dbc:	1080100c 	andi	r2,r2,64
    1dc0:	103e8726 	beq	r2,zero,17e0 <___vfprintf_internal_r+0x108>
    1dc4:	00bfffc4 	movi	r2,-1
    1dc8:	d8814b15 	stw	r2,1324(sp)
    1dcc:	003e8406 	br	17e0 <___vfprintf_internal_r+0x108>
    1dd0:	d9814d17 	ldw	r6,1332(sp)
    1dd4:	00801944 	movi	r2,101
    1dd8:	11806e16 	blt	r2,r6,1f94 <___vfprintf_internal_r+0x8bc>
    1ddc:	d9414717 	ldw	r5,1308(sp)
    1de0:	00c00044 	movi	r3,1
    1de4:	1943430e 	bge	r3,r5,2af4 <___vfprintf_internal_r+0x141c>
    1de8:	d8814117 	ldw	r2,1284(sp)
    1dec:	94800044 	addi	r18,r18,1
    1df0:	8c400044 	addi	r17,r17,1
    1df4:	a8800015 	stw	r2,0(r21)
    1df8:	008001c4 	movi	r2,7
    1dfc:	a8c00115 	stw	r3,4(r21)
    1e00:	dc800e15 	stw	r18,56(sp)
    1e04:	dc400d15 	stw	r17,52(sp)
    1e08:	1441ca16 	blt	r2,r17,2534 <___vfprintf_internal_r+0xe5c>
    1e0c:	a8c00204 	addi	r3,r21,8
    1e10:	d9014917 	ldw	r4,1316(sp)
    1e14:	00800044 	movi	r2,1
    1e18:	94800044 	addi	r18,r18,1
    1e1c:	8c400044 	addi	r17,r17,1
    1e20:	18800115 	stw	r2,4(r3)
    1e24:	008001c4 	movi	r2,7
    1e28:	19000015 	stw	r4,0(r3)
    1e2c:	dc800e15 	stw	r18,56(sp)
    1e30:	dc400d15 	stw	r17,52(sp)
    1e34:	1441b616 	blt	r2,r17,2510 <___vfprintf_internal_r+0xe38>
    1e38:	1cc00204 	addi	r19,r3,8
    1e3c:	d9014217 	ldw	r4,1288(sp)
    1e40:	d9414317 	ldw	r5,1292(sp)
    1e44:	000d883a 	mov	r6,zero
    1e48:	000f883a 	mov	r7,zero
    1e4c:	0009f280 	call	9f28 <__nedf2>
    1e50:	10017426 	beq	r2,zero,2424 <___vfprintf_internal_r+0xd4c>
    1e54:	d9414717 	ldw	r5,1308(sp)
    1e58:	d9814117 	ldw	r6,1284(sp)
    1e5c:	8c400044 	addi	r17,r17,1
    1e60:	2c85883a 	add	r2,r5,r18
    1e64:	14bfffc4 	addi	r18,r2,-1
    1e68:	28bfffc4 	addi	r2,r5,-1
    1e6c:	30c00044 	addi	r3,r6,1
    1e70:	98800115 	stw	r2,4(r19)
    1e74:	008001c4 	movi	r2,7
    1e78:	98c00015 	stw	r3,0(r19)
    1e7c:	dc800e15 	stw	r18,56(sp)
    1e80:	dc400d15 	stw	r17,52(sp)
    1e84:	14418e16 	blt	r2,r17,24c0 <___vfprintf_internal_r+0xde8>
    1e88:	9cc00204 	addi	r19,r19,8
    1e8c:	d9414817 	ldw	r5,1312(sp)
    1e90:	d8800804 	addi	r2,sp,32
    1e94:	8c400044 	addi	r17,r17,1
    1e98:	9165883a 	add	r18,r18,r5
    1e9c:	98800015 	stw	r2,0(r19)
    1ea0:	008001c4 	movi	r2,7
    1ea4:	99400115 	stw	r5,4(r19)
    1ea8:	dc800e15 	stw	r18,56(sp)
    1eac:	dc400d15 	stw	r17,52(sp)
    1eb0:	1440ed16 	blt	r2,r17,2268 <___vfprintf_internal_r+0xb90>
    1eb4:	98c00204 	addi	r3,r19,8
    1eb8:	003f8506 	br	1cd0 <___vfprintf_internal_r+0x5f8>
    1ebc:	d9814a17 	ldw	r6,1320(sp)
    1ec0:	d8814517 	ldw	r2,1300(sp)
    1ec4:	30a1c83a 	sub	r16,r6,r2
    1ec8:	043f4b0e 	bge	zero,r16,1bf8 <___vfprintf_internal_r+0x520>
    1ecc:	00800404 	movi	r2,16
    1ed0:	1404340e 	bge	r2,r16,2fa4 <___vfprintf_internal_r+0x18cc>
    1ed4:	1027883a 	mov	r19,r2
    1ed8:	07000074 	movhi	fp,1
    1edc:	e73a8084 	addi	fp,fp,-5630
    1ee0:	050001c4 	movi	r20,7
    1ee4:	00000306 	br	1ef4 <___vfprintf_internal_r+0x81c>
    1ee8:	843ffc04 	addi	r16,r16,-16
    1eec:	ad400204 	addi	r21,r21,8
    1ef0:	9c00130e 	bge	r19,r16,1f40 <___vfprintf_internal_r+0x868>
    1ef4:	94800404 	addi	r18,r18,16
    1ef8:	8c400044 	addi	r17,r17,1
    1efc:	af000015 	stw	fp,0(r21)
    1f00:	acc00115 	stw	r19,4(r21)
    1f04:	dc800e15 	stw	r18,56(sp)
    1f08:	dc400d15 	stw	r17,52(sp)
    1f0c:	a47ff60e 	bge	r20,r17,1ee8 <___vfprintf_internal_r+0x810>
    1f10:	d9014f17 	ldw	r4,1340(sp)
    1f14:	b00b883a 	mov	r5,r22
    1f18:	d9800c04 	addi	r6,sp,48
    1f1c:	d9c15115 	stw	r7,1348(sp)
    1f20:	00016800 	call	1680 <__sprint_r>
    1f24:	d9c15117 	ldw	r7,1348(sp)
    1f28:	103fa31e 	bne	r2,zero,1db8 <___vfprintf_internal_r+0x6e0>
    1f2c:	843ffc04 	addi	r16,r16,-16
    1f30:	dc800e17 	ldw	r18,56(sp)
    1f34:	dc400d17 	ldw	r17,52(sp)
    1f38:	dd401904 	addi	r21,sp,100
    1f3c:	9c3fed16 	blt	r19,r16,1ef4 <___vfprintf_internal_r+0x81c>
    1f40:	9425883a 	add	r18,r18,r16
    1f44:	8c400044 	addi	r17,r17,1
    1f48:	008001c4 	movi	r2,7
    1f4c:	af000015 	stw	fp,0(r21)
    1f50:	ac000115 	stw	r16,4(r21)
    1f54:	dc800e15 	stw	r18,56(sp)
    1f58:	dc400d15 	stw	r17,52(sp)
    1f5c:	14416116 	blt	r2,r17,24e4 <___vfprintf_internal_r+0xe0c>
    1f60:	ad400204 	addi	r21,r21,8
    1f64:	003f2406 	br	1bf8 <___vfprintf_internal_r+0x520>
    1f68:	d9014f17 	ldw	r4,1340(sp)
    1f6c:	00051480 	call	5148 <__sinit>
    1f70:	d9c15117 	ldw	r7,1348(sp)
    1f74:	003def06 	br	1734 <___vfprintf_internal_r+0x5c>
    1f78:	d9014f17 	ldw	r4,1340(sp)
    1f7c:	b00b883a 	mov	r5,r22
    1f80:	d9c15115 	stw	r7,1348(sp)
    1f84:	00035a80 	call	35a8 <__swsetup_r>
    1f88:	d9c15117 	ldw	r7,1348(sp)
    1f8c:	103dee26 	beq	r2,zero,1748 <___vfprintf_internal_r+0x70>
    1f90:	003f8c06 	br	1dc4 <___vfprintf_internal_r+0x6ec>
    1f94:	d9014217 	ldw	r4,1288(sp)
    1f98:	d9414317 	ldw	r5,1292(sp)
    1f9c:	000d883a 	mov	r6,zero
    1fa0:	000f883a 	mov	r7,zero
    1fa4:	0009ea00 	call	9ea0 <__eqdf2>
    1fa8:	1000f21e 	bne	r2,zero,2374 <___vfprintf_internal_r+0xc9c>
    1fac:	00800074 	movhi	r2,1
    1fb0:	10ba8004 	addi	r2,r2,-5632
    1fb4:	94800044 	addi	r18,r18,1
    1fb8:	8c400044 	addi	r17,r17,1
    1fbc:	a8800015 	stw	r2,0(r21)
    1fc0:	00c00044 	movi	r3,1
    1fc4:	008001c4 	movi	r2,7
    1fc8:	a8c00115 	stw	r3,4(r21)
    1fcc:	dc800e15 	stw	r18,56(sp)
    1fd0:	dc400d15 	stw	r17,52(sp)
    1fd4:	1442fa16 	blt	r2,r17,2bc0 <___vfprintf_internal_r+0x14e8>
    1fd8:	a8c00204 	addi	r3,r21,8
    1fdc:	d8800517 	ldw	r2,20(sp)
    1fe0:	d9014717 	ldw	r4,1308(sp)
    1fe4:	11015c0e 	bge	r2,r4,2558 <___vfprintf_internal_r+0xe80>
    1fe8:	dc400d17 	ldw	r17,52(sp)
    1fec:	d9814917 	ldw	r6,1316(sp)
    1ff0:	00800044 	movi	r2,1
    1ff4:	94800044 	addi	r18,r18,1
    1ff8:	8c400044 	addi	r17,r17,1
    1ffc:	18800115 	stw	r2,4(r3)
    2000:	008001c4 	movi	r2,7
    2004:	19800015 	stw	r6,0(r3)
    2008:	dc800e15 	stw	r18,56(sp)
    200c:	dc400d15 	stw	r17,52(sp)
    2010:	14431016 	blt	r2,r17,2c54 <___vfprintf_internal_r+0x157c>
    2014:	18c00204 	addi	r3,r3,8
    2018:	d8814717 	ldw	r2,1308(sp)
    201c:	143fffc4 	addi	r16,r2,-1
    2020:	043f2b0e 	bge	zero,r16,1cd0 <___vfprintf_internal_r+0x5f8>
    2024:	00800404 	movi	r2,16
    2028:	1402a20e 	bge	r2,r16,2ab4 <___vfprintf_internal_r+0x13dc>
    202c:	dc400d17 	ldw	r17,52(sp)
    2030:	1027883a 	mov	r19,r2
    2034:	07000074 	movhi	fp,1
    2038:	e73a8084 	addi	fp,fp,-5630
    203c:	050001c4 	movi	r20,7
    2040:	00000306 	br	2050 <___vfprintf_internal_r+0x978>
    2044:	18c00204 	addi	r3,r3,8
    2048:	843ffc04 	addi	r16,r16,-16
    204c:	9c029c0e 	bge	r19,r16,2ac0 <___vfprintf_internal_r+0x13e8>
    2050:	94800404 	addi	r18,r18,16
    2054:	8c400044 	addi	r17,r17,1
    2058:	1f000015 	stw	fp,0(r3)
    205c:	1cc00115 	stw	r19,4(r3)
    2060:	dc800e15 	stw	r18,56(sp)
    2064:	dc400d15 	stw	r17,52(sp)
    2068:	a47ff60e 	bge	r20,r17,2044 <___vfprintf_internal_r+0x96c>
    206c:	d9014f17 	ldw	r4,1340(sp)
    2070:	b00b883a 	mov	r5,r22
    2074:	d9800c04 	addi	r6,sp,48
    2078:	00016800 	call	1680 <__sprint_r>
    207c:	103f4e1e 	bne	r2,zero,1db8 <___vfprintf_internal_r+0x6e0>
    2080:	dc800e17 	ldw	r18,56(sp)
    2084:	dc400d17 	ldw	r17,52(sp)
    2088:	d8c01904 	addi	r3,sp,100
    208c:	003fee06 	br	2048 <___vfprintf_internal_r+0x970>
    2090:	d8802c0b 	ldhu	r2,176(sp)
    2094:	00ffffc4 	movi	r3,-1
    2098:	d8c14b15 	stw	r3,1324(sp)
    209c:	1080100c 	andi	r2,r2,64
    20a0:	103dcc1e 	bne	r2,zero,17d4 <___vfprintf_internal_r+0xfc>
    20a4:	003dce06 	br	17e0 <___vfprintf_internal_r+0x108>
    20a8:	d9014f17 	ldw	r4,1340(sp)
    20ac:	b00b883a 	mov	r5,r22
    20b0:	d9800c04 	addi	r6,sp,48
    20b4:	00016800 	call	1680 <__sprint_r>
    20b8:	103f3f1e 	bne	r2,zero,1db8 <___vfprintf_internal_r+0x6e0>
    20bc:	dc800e17 	ldw	r18,56(sp)
    20c0:	003f2e06 	br	1d7c <___vfprintf_internal_r+0x6a4>
    20c4:	d9414c17 	ldw	r5,1328(sp)
    20c8:	29400414 	ori	r5,r5,16
    20cc:	d9414c15 	stw	r5,1328(sp)
    20d0:	d9814c17 	ldw	r6,1328(sp)
    20d4:	3080080c 	andi	r2,r6,32
    20d8:	10014f1e 	bne	r2,zero,2618 <___vfprintf_internal_r+0xf40>
    20dc:	d8c14c17 	ldw	r3,1328(sp)
    20e0:	1880040c 	andi	r2,r3,16
    20e4:	1002ea1e 	bne	r2,zero,2c90 <___vfprintf_internal_r+0x15b8>
    20e8:	d9014c17 	ldw	r4,1328(sp)
    20ec:	2080100c 	andi	r2,r4,64
    20f0:	1002e726 	beq	r2,zero,2c90 <___vfprintf_internal_r+0x15b8>
    20f4:	3880000f 	ldh	r2,0(r7)
    20f8:	39c00104 	addi	r7,r7,4
    20fc:	d9c14015 	stw	r7,1280(sp)
    2100:	1023d7fa 	srai	r17,r2,31
    2104:	1021883a 	mov	r16,r2
    2108:	88037216 	blt	r17,zero,2ed4 <___vfprintf_internal_r+0x17fc>
    210c:	01000044 	movi	r4,1
    2110:	98000416 	blt	r19,zero,2124 <___vfprintf_internal_r+0xa4c>
    2114:	d8c14c17 	ldw	r3,1328(sp)
    2118:	00bfdfc4 	movi	r2,-129
    211c:	1886703a 	and	r3,r3,r2
    2120:	d8c14c15 	stw	r3,1328(sp)
    2124:	8444b03a 	or	r2,r16,r17
    2128:	1002261e 	bne	r2,zero,29c4 <___vfprintf_internal_r+0x12ec>
    212c:	9802251e 	bne	r19,zero,29c4 <___vfprintf_internal_r+0x12ec>
    2130:	20803fcc 	andi	r2,r4,255
    2134:	10029b26 	beq	r2,zero,2ba4 <___vfprintf_internal_r+0x14cc>
    2138:	d8c01904 	addi	r3,sp,100
    213c:	dd000f04 	addi	r20,sp,60
    2140:	d8c14115 	stw	r3,1284(sp)
    2144:	d8c14117 	ldw	r3,1284(sp)
    2148:	dcc14515 	stw	r19,1300(sp)
    214c:	a0c5c83a 	sub	r2,r20,r3
    2150:	11c00a04 	addi	r7,r2,40
    2154:	99c0010e 	bge	r19,r7,215c <___vfprintf_internal_r+0xa84>
    2158:	d9c14515 	stw	r7,1300(sp)
    215c:	dcc14615 	stw	r19,1304(sp)
    2160:	d8800407 	ldb	r2,16(sp)
    2164:	103e4c26 	beq	r2,zero,1a98 <___vfprintf_internal_r+0x3c0>
    2168:	d8814517 	ldw	r2,1300(sp)
    216c:	10800044 	addi	r2,r2,1
    2170:	d8814515 	stw	r2,1300(sp)
    2174:	003e4806 	br	1a98 <___vfprintf_internal_r+0x3c0>
    2178:	d9814c17 	ldw	r6,1328(sp)
    217c:	31800414 	ori	r6,r6,16
    2180:	d9814c15 	stw	r6,1328(sp)
    2184:	d8c14c17 	ldw	r3,1328(sp)
    2188:	1880080c 	andi	r2,r3,32
    218c:	1001271e 	bne	r2,zero,262c <___vfprintf_internal_r+0xf54>
    2190:	d9414c17 	ldw	r5,1328(sp)
    2194:	2880040c 	andi	r2,r5,16
    2198:	1002b61e 	bne	r2,zero,2c74 <___vfprintf_internal_r+0x159c>
    219c:	d9814c17 	ldw	r6,1328(sp)
    21a0:	3080100c 	andi	r2,r6,64
    21a4:	1002b326 	beq	r2,zero,2c74 <___vfprintf_internal_r+0x159c>
    21a8:	3c00000b 	ldhu	r16,0(r7)
    21ac:	0009883a 	mov	r4,zero
    21b0:	39c00104 	addi	r7,r7,4
    21b4:	0023883a 	mov	r17,zero
    21b8:	d9c14015 	stw	r7,1280(sp)
    21bc:	d8000405 	stb	zero,16(sp)
    21c0:	003fd306 	br	2110 <___vfprintf_internal_r+0xa38>
    21c4:	d9014c17 	ldw	r4,1328(sp)
    21c8:	21000414 	ori	r4,r4,16
    21cc:	d9014c15 	stw	r4,1328(sp)
    21d0:	d9414c17 	ldw	r5,1328(sp)
    21d4:	2880080c 	andi	r2,r5,32
    21d8:	1001081e 	bne	r2,zero,25fc <___vfprintf_internal_r+0xf24>
    21dc:	d8c14c17 	ldw	r3,1328(sp)
    21e0:	1880040c 	andi	r2,r3,16
    21e4:	1002b01e 	bne	r2,zero,2ca8 <___vfprintf_internal_r+0x15d0>
    21e8:	d9014c17 	ldw	r4,1328(sp)
    21ec:	2080100c 	andi	r2,r4,64
    21f0:	1002ad26 	beq	r2,zero,2ca8 <___vfprintf_internal_r+0x15d0>
    21f4:	3c00000b 	ldhu	r16,0(r7)
    21f8:	01000044 	movi	r4,1
    21fc:	39c00104 	addi	r7,r7,4
    2200:	0023883a 	mov	r17,zero
    2204:	d9c14015 	stw	r7,1280(sp)
    2208:	d8000405 	stb	zero,16(sp)
    220c:	003fc006 	br	2110 <___vfprintf_internal_r+0xa38>
    2210:	d9014f17 	ldw	r4,1340(sp)
    2214:	b00b883a 	mov	r5,r22
    2218:	d9800c04 	addi	r6,sp,48
    221c:	00016800 	call	1680 <__sprint_r>
    2220:	103ee51e 	bne	r2,zero,1db8 <___vfprintf_internal_r+0x6e0>
    2224:	dc800e17 	ldw	r18,56(sp)
    2228:	d8c01904 	addi	r3,sp,100
    222c:	d9814c17 	ldw	r6,1328(sp)
    2230:	3080004c 	andi	r2,r6,1
    2234:	1005003a 	cmpeq	r2,r2,zero
    2238:	103ea51e 	bne	r2,zero,1cd0 <___vfprintf_internal_r+0x5f8>
    223c:	00800044 	movi	r2,1
    2240:	dc400d17 	ldw	r17,52(sp)
    2244:	18800115 	stw	r2,4(r3)
    2248:	d8814917 	ldw	r2,1316(sp)
    224c:	94800044 	addi	r18,r18,1
    2250:	8c400044 	addi	r17,r17,1
    2254:	18800015 	stw	r2,0(r3)
    2258:	008001c4 	movi	r2,7
    225c:	dc800e15 	stw	r18,56(sp)
    2260:	dc400d15 	stw	r17,52(sp)
    2264:	14421e0e 	bge	r2,r17,2ae0 <___vfprintf_internal_r+0x1408>
    2268:	d9014f17 	ldw	r4,1340(sp)
    226c:	b00b883a 	mov	r5,r22
    2270:	d9800c04 	addi	r6,sp,48
    2274:	00016800 	call	1680 <__sprint_r>
    2278:	103ecf1e 	bne	r2,zero,1db8 <___vfprintf_internal_r+0x6e0>
    227c:	dc800e17 	ldw	r18,56(sp)
    2280:	d8c01904 	addi	r3,sp,100
    2284:	003e9206 	br	1cd0 <___vfprintf_internal_r+0x5f8>
    2288:	d9014f17 	ldw	r4,1340(sp)
    228c:	b00b883a 	mov	r5,r22
    2290:	d9800c04 	addi	r6,sp,48
    2294:	00016800 	call	1680 <__sprint_r>
    2298:	103ec026 	beq	r2,zero,1d9c <___vfprintf_internal_r+0x6c4>
    229c:	003ec606 	br	1db8 <___vfprintf_internal_r+0x6e0>
    22a0:	d9014f17 	ldw	r4,1340(sp)
    22a4:	b00b883a 	mov	r5,r22
    22a8:	d9800c04 	addi	r6,sp,48
    22ac:	d9c15115 	stw	r7,1348(sp)
    22b0:	00016800 	call	1680 <__sprint_r>
    22b4:	d9c15117 	ldw	r7,1348(sp)
    22b8:	103ebf1e 	bne	r2,zero,1db8 <___vfprintf_internal_r+0x6e0>
    22bc:	dc800e17 	ldw	r18,56(sp)
    22c0:	dc400d17 	ldw	r17,52(sp)
    22c4:	dd401904 	addi	r21,sp,100
    22c8:	003e7406 	br	1c9c <___vfprintf_internal_r+0x5c4>
    22cc:	d9014f17 	ldw	r4,1340(sp)
    22d0:	b00b883a 	mov	r5,r22
    22d4:	d9800c04 	addi	r6,sp,48
    22d8:	d9c15115 	stw	r7,1348(sp)
    22dc:	00016800 	call	1680 <__sprint_r>
    22e0:	d9c15117 	ldw	r7,1348(sp)
    22e4:	103eb41e 	bne	r2,zero,1db8 <___vfprintf_internal_r+0x6e0>
    22e8:	dd401904 	addi	r21,sp,100
    22ec:	003d6d06 	br	18a4 <___vfprintf_internal_r+0x1cc>
    22f0:	d9014f17 	ldw	r4,1340(sp)
    22f4:	b00b883a 	mov	r5,r22
    22f8:	d9800c04 	addi	r6,sp,48
    22fc:	d9c15115 	stw	r7,1348(sp)
    2300:	00016800 	call	1680 <__sprint_r>
    2304:	d9c15117 	ldw	r7,1348(sp)
    2308:	103eab1e 	bne	r2,zero,1db8 <___vfprintf_internal_r+0x6e0>
    230c:	dc800e17 	ldw	r18,56(sp)
    2310:	dc400d17 	ldw	r17,52(sp)
    2314:	dd401904 	addi	r21,sp,100
    2318:	003e3406 	br	1bec <___vfprintf_internal_r+0x514>
    231c:	d9014f17 	ldw	r4,1340(sp)
    2320:	b00b883a 	mov	r5,r22
    2324:	d9800c04 	addi	r6,sp,48
    2328:	d9c15115 	stw	r7,1348(sp)
    232c:	00016800 	call	1680 <__sprint_r>
    2330:	d9c15117 	ldw	r7,1348(sp)
    2334:	103ea01e 	bne	r2,zero,1db8 <___vfprintf_internal_r+0x6e0>
    2338:	dc800e17 	ldw	r18,56(sp)
    233c:	dc400d17 	ldw	r17,52(sp)
    2340:	dd401904 	addi	r21,sp,100
    2344:	003e1c06 	br	1bb8 <___vfprintf_internal_r+0x4e0>
    2348:	d9014f17 	ldw	r4,1340(sp)
    234c:	b00b883a 	mov	r5,r22
    2350:	d9800c04 	addi	r6,sp,48
    2354:	d9c15115 	stw	r7,1348(sp)
    2358:	00016800 	call	1680 <__sprint_r>
    235c:	d9c15117 	ldw	r7,1348(sp)
    2360:	103e951e 	bne	r2,zero,1db8 <___vfprintf_internal_r+0x6e0>
    2364:	dc800e17 	ldw	r18,56(sp)
    2368:	dc400d17 	ldw	r17,52(sp)
    236c:	dd401904 	addi	r21,sp,100
    2370:	003e0406 	br	1b84 <___vfprintf_internal_r+0x4ac>
    2374:	d9000517 	ldw	r4,20(sp)
    2378:	0102520e 	bge	zero,r4,2cc4 <___vfprintf_internal_r+0x15ec>
    237c:	d9814717 	ldw	r6,1308(sp)
    2380:	21807a16 	blt	r4,r6,256c <___vfprintf_internal_r+0xe94>
    2384:	d8814117 	ldw	r2,1284(sp)
    2388:	91a5883a 	add	r18,r18,r6
    238c:	8c400044 	addi	r17,r17,1
    2390:	a8800015 	stw	r2,0(r21)
    2394:	008001c4 	movi	r2,7
    2398:	a9800115 	stw	r6,4(r21)
    239c:	dc800e15 	stw	r18,56(sp)
    23a0:	dc400d15 	stw	r17,52(sp)
    23a4:	1442f616 	blt	r2,r17,2f80 <___vfprintf_internal_r+0x18a8>
    23a8:	a8c00204 	addi	r3,r21,8
    23ac:	d9414717 	ldw	r5,1308(sp)
    23b0:	2161c83a 	sub	r16,r4,r5
    23b4:	043f9d0e 	bge	zero,r16,222c <___vfprintf_internal_r+0xb54>
    23b8:	00800404 	movi	r2,16
    23bc:	1402130e 	bge	r2,r16,2c0c <___vfprintf_internal_r+0x1534>
    23c0:	dc400d17 	ldw	r17,52(sp)
    23c4:	1027883a 	mov	r19,r2
    23c8:	07000074 	movhi	fp,1
    23cc:	e73a8084 	addi	fp,fp,-5630
    23d0:	050001c4 	movi	r20,7
    23d4:	00000306 	br	23e4 <___vfprintf_internal_r+0xd0c>
    23d8:	18c00204 	addi	r3,r3,8
    23dc:	843ffc04 	addi	r16,r16,-16
    23e0:	9c020d0e 	bge	r19,r16,2c18 <___vfprintf_internal_r+0x1540>
    23e4:	94800404 	addi	r18,r18,16
    23e8:	8c400044 	addi	r17,r17,1
    23ec:	1f000015 	stw	fp,0(r3)
    23f0:	1cc00115 	stw	r19,4(r3)
    23f4:	dc800e15 	stw	r18,56(sp)
    23f8:	dc400d15 	stw	r17,52(sp)
    23fc:	a47ff60e 	bge	r20,r17,23d8 <___vfprintf_internal_r+0xd00>
    2400:	d9014f17 	ldw	r4,1340(sp)
    2404:	b00b883a 	mov	r5,r22
    2408:	d9800c04 	addi	r6,sp,48
    240c:	00016800 	call	1680 <__sprint_r>
    2410:	103e691e 	bne	r2,zero,1db8 <___vfprintf_internal_r+0x6e0>
    2414:	dc800e17 	ldw	r18,56(sp)
    2418:	dc400d17 	ldw	r17,52(sp)
    241c:	d8c01904 	addi	r3,sp,100
    2420:	003fee06 	br	23dc <___vfprintf_internal_r+0xd04>
    2424:	d8814717 	ldw	r2,1308(sp)
    2428:	143fffc4 	addi	r16,r2,-1
    242c:	043e970e 	bge	zero,r16,1e8c <___vfprintf_internal_r+0x7b4>
    2430:	00800404 	movi	r2,16
    2434:	1400180e 	bge	r2,r16,2498 <___vfprintf_internal_r+0xdc0>
    2438:	1029883a 	mov	r20,r2
    243c:	07000074 	movhi	fp,1
    2440:	e73a8084 	addi	fp,fp,-5630
    2444:	054001c4 	movi	r21,7
    2448:	00000306 	br	2458 <___vfprintf_internal_r+0xd80>
    244c:	9cc00204 	addi	r19,r19,8
    2450:	843ffc04 	addi	r16,r16,-16
    2454:	a400120e 	bge	r20,r16,24a0 <___vfprintf_internal_r+0xdc8>
    2458:	94800404 	addi	r18,r18,16
    245c:	8c400044 	addi	r17,r17,1
    2460:	9f000015 	stw	fp,0(r19)
    2464:	9d000115 	stw	r20,4(r19)
    2468:	dc800e15 	stw	r18,56(sp)
    246c:	dc400d15 	stw	r17,52(sp)
    2470:	ac7ff60e 	bge	r21,r17,244c <___vfprintf_internal_r+0xd74>
    2474:	d9014f17 	ldw	r4,1340(sp)
    2478:	b00b883a 	mov	r5,r22
    247c:	d9800c04 	addi	r6,sp,48
    2480:	00016800 	call	1680 <__sprint_r>
    2484:	103e4c1e 	bne	r2,zero,1db8 <___vfprintf_internal_r+0x6e0>
    2488:	dc800e17 	ldw	r18,56(sp)
    248c:	dc400d17 	ldw	r17,52(sp)
    2490:	dcc01904 	addi	r19,sp,100
    2494:	003fee06 	br	2450 <___vfprintf_internal_r+0xd78>
    2498:	07000074 	movhi	fp,1
    249c:	e73a8084 	addi	fp,fp,-5630
    24a0:	9425883a 	add	r18,r18,r16
    24a4:	8c400044 	addi	r17,r17,1
    24a8:	008001c4 	movi	r2,7
    24ac:	9f000015 	stw	fp,0(r19)
    24b0:	9c000115 	stw	r16,4(r19)
    24b4:	dc800e15 	stw	r18,56(sp)
    24b8:	dc400d15 	stw	r17,52(sp)
    24bc:	147e720e 	bge	r2,r17,1e88 <___vfprintf_internal_r+0x7b0>
    24c0:	d9014f17 	ldw	r4,1340(sp)
    24c4:	b00b883a 	mov	r5,r22
    24c8:	d9800c04 	addi	r6,sp,48
    24cc:	00016800 	call	1680 <__sprint_r>
    24d0:	103e391e 	bne	r2,zero,1db8 <___vfprintf_internal_r+0x6e0>
    24d4:	dc800e17 	ldw	r18,56(sp)
    24d8:	dc400d17 	ldw	r17,52(sp)
    24dc:	dcc01904 	addi	r19,sp,100
    24e0:	003e6a06 	br	1e8c <___vfprintf_internal_r+0x7b4>
    24e4:	d9014f17 	ldw	r4,1340(sp)
    24e8:	b00b883a 	mov	r5,r22
    24ec:	d9800c04 	addi	r6,sp,48
    24f0:	d9c15115 	stw	r7,1348(sp)
    24f4:	00016800 	call	1680 <__sprint_r>
    24f8:	d9c15117 	ldw	r7,1348(sp)
    24fc:	103e2e1e 	bne	r2,zero,1db8 <___vfprintf_internal_r+0x6e0>
    2500:	dc800e17 	ldw	r18,56(sp)
    2504:	dc400d17 	ldw	r17,52(sp)
    2508:	dd401904 	addi	r21,sp,100
    250c:	003dba06 	br	1bf8 <___vfprintf_internal_r+0x520>
    2510:	d9014f17 	ldw	r4,1340(sp)
    2514:	b00b883a 	mov	r5,r22
    2518:	d9800c04 	addi	r6,sp,48
    251c:	00016800 	call	1680 <__sprint_r>
    2520:	103e251e 	bne	r2,zero,1db8 <___vfprintf_internal_r+0x6e0>
    2524:	dc800e17 	ldw	r18,56(sp)
    2528:	dc400d17 	ldw	r17,52(sp)
    252c:	dcc01904 	addi	r19,sp,100
    2530:	003e4206 	br	1e3c <___vfprintf_internal_r+0x764>
    2534:	d9014f17 	ldw	r4,1340(sp)
    2538:	b00b883a 	mov	r5,r22
    253c:	d9800c04 	addi	r6,sp,48
    2540:	00016800 	call	1680 <__sprint_r>
    2544:	103e1c1e 	bne	r2,zero,1db8 <___vfprintf_internal_r+0x6e0>
    2548:	dc800e17 	ldw	r18,56(sp)
    254c:	dc400d17 	ldw	r17,52(sp)
    2550:	d8c01904 	addi	r3,sp,100
    2554:	003e2e06 	br	1e10 <___vfprintf_internal_r+0x738>
    2558:	d9414c17 	ldw	r5,1328(sp)
    255c:	2880004c 	andi	r2,r5,1
    2560:	1005003a 	cmpeq	r2,r2,zero
    2564:	103dda1e 	bne	r2,zero,1cd0 <___vfprintf_internal_r+0x5f8>
    2568:	003e9f06 	br	1fe8 <___vfprintf_internal_r+0x910>
    256c:	d8c14117 	ldw	r3,1284(sp)
    2570:	9125883a 	add	r18,r18,r4
    2574:	8c400044 	addi	r17,r17,1
    2578:	008001c4 	movi	r2,7
    257c:	a8c00015 	stw	r3,0(r21)
    2580:	a9000115 	stw	r4,4(r21)
    2584:	dc800e15 	stw	r18,56(sp)
    2588:	dc400d15 	stw	r17,52(sp)
    258c:	14426616 	blt	r2,r17,2f28 <___vfprintf_internal_r+0x1850>
    2590:	a8c00204 	addi	r3,r21,8
    2594:	d9414917 	ldw	r5,1316(sp)
    2598:	00800044 	movi	r2,1
    259c:	94800044 	addi	r18,r18,1
    25a0:	8c400044 	addi	r17,r17,1
    25a4:	18800115 	stw	r2,4(r3)
    25a8:	008001c4 	movi	r2,7
    25ac:	19400015 	stw	r5,0(r3)
    25b0:	dc800e15 	stw	r18,56(sp)
    25b4:	dc400d15 	stw	r17,52(sp)
    25b8:	2021883a 	mov	r16,r4
    25bc:	14425016 	blt	r2,r17,2f00 <___vfprintf_internal_r+0x1828>
    25c0:	19400204 	addi	r5,r3,8
    25c4:	d9814717 	ldw	r6,1308(sp)
    25c8:	8c400044 	addi	r17,r17,1
    25cc:	dc400d15 	stw	r17,52(sp)
    25d0:	3107c83a 	sub	r3,r6,r4
    25d4:	d9014117 	ldw	r4,1284(sp)
    25d8:	90e5883a 	add	r18,r18,r3
    25dc:	28c00115 	stw	r3,4(r5)
    25e0:	8105883a 	add	r2,r16,r4
    25e4:	28800015 	stw	r2,0(r5)
    25e8:	008001c4 	movi	r2,7
    25ec:	dc800e15 	stw	r18,56(sp)
    25f0:	147f1d16 	blt	r2,r17,2268 <___vfprintf_internal_r+0xb90>
    25f4:	28c00204 	addi	r3,r5,8
    25f8:	003db506 	br	1cd0 <___vfprintf_internal_r+0x5f8>
    25fc:	3c000017 	ldw	r16,0(r7)
    2600:	3c400117 	ldw	r17,4(r7)
    2604:	39800204 	addi	r6,r7,8
    2608:	01000044 	movi	r4,1
    260c:	d9814015 	stw	r6,1280(sp)
    2610:	d8000405 	stb	zero,16(sp)
    2614:	003ebe06 	br	2110 <___vfprintf_internal_r+0xa38>
    2618:	3c000017 	ldw	r16,0(r7)
    261c:	3c400117 	ldw	r17,4(r7)
    2620:	38800204 	addi	r2,r7,8
    2624:	d8814015 	stw	r2,1280(sp)
    2628:	003eb706 	br	2108 <___vfprintf_internal_r+0xa30>
    262c:	3c000017 	ldw	r16,0(r7)
    2630:	3c400117 	ldw	r17,4(r7)
    2634:	39000204 	addi	r4,r7,8
    2638:	d9014015 	stw	r4,1280(sp)
    263c:	0009883a 	mov	r4,zero
    2640:	d8000405 	stb	zero,16(sp)
    2644:	003eb206 	br	2110 <___vfprintf_internal_r+0xa38>
    2648:	38c00017 	ldw	r3,0(r7)
    264c:	39c00104 	addi	r7,r7,4
    2650:	d8c14a15 	stw	r3,1320(sp)
    2654:	1800d10e 	bge	r3,zero,299c <___vfprintf_internal_r+0x12c4>
    2658:	00c7c83a 	sub	r3,zero,r3
    265c:	d8c14a15 	stw	r3,1320(sp)
    2660:	d9014c17 	ldw	r4,1328(sp)
    2664:	b8c00007 	ldb	r3,0(r23)
    2668:	21000114 	ori	r4,r4,4
    266c:	d9014c15 	stw	r4,1328(sp)
    2670:	003c9806 	br	18d4 <___vfprintf_internal_r+0x1fc>
    2674:	d9814c17 	ldw	r6,1328(sp)
    2678:	3080080c 	andi	r2,r6,32
    267c:	1001f026 	beq	r2,zero,2e40 <___vfprintf_internal_r+0x1768>
    2680:	d9014b17 	ldw	r4,1324(sp)
    2684:	38800017 	ldw	r2,0(r7)
    2688:	39c00104 	addi	r7,r7,4
    268c:	d9c14015 	stw	r7,1280(sp)
    2690:	2007d7fa 	srai	r3,r4,31
    2694:	d9c14017 	ldw	r7,1280(sp)
    2698:	11000015 	stw	r4,0(r2)
    269c:	10c00115 	stw	r3,4(r2)
    26a0:	003c6906 	br	1848 <___vfprintf_internal_r+0x170>
    26a4:	b8c00007 	ldb	r3,0(r23)
    26a8:	00801b04 	movi	r2,108
    26ac:	18824f26 	beq	r3,r2,2fec <___vfprintf_internal_r+0x1914>
    26b0:	d9414c17 	ldw	r5,1328(sp)
    26b4:	29400414 	ori	r5,r5,16
    26b8:	d9414c15 	stw	r5,1328(sp)
    26bc:	003c8506 	br	18d4 <___vfprintf_internal_r+0x1fc>
    26c0:	d9814c17 	ldw	r6,1328(sp)
    26c4:	b8c00007 	ldb	r3,0(r23)
    26c8:	31800814 	ori	r6,r6,32
    26cc:	d9814c15 	stw	r6,1328(sp)
    26d0:	003c8006 	br	18d4 <___vfprintf_internal_r+0x1fc>
    26d4:	d8814c17 	ldw	r2,1328(sp)
    26d8:	3c000017 	ldw	r16,0(r7)
    26dc:	00c01e04 	movi	r3,120
    26e0:	10800094 	ori	r2,r2,2
    26e4:	d8814c15 	stw	r2,1328(sp)
    26e8:	39c00104 	addi	r7,r7,4
    26ec:	01400074 	movhi	r5,1
    26f0:	297a6904 	addi	r5,r5,-5724
    26f4:	00800c04 	movi	r2,48
    26f8:	0023883a 	mov	r17,zero
    26fc:	01000084 	movi	r4,2
    2700:	d9c14015 	stw	r7,1280(sp)
    2704:	d8c14d15 	stw	r3,1332(sp)
    2708:	d9414415 	stw	r5,1296(sp)
    270c:	d8800445 	stb	r2,17(sp)
    2710:	d8c00485 	stb	r3,18(sp)
    2714:	d8000405 	stb	zero,16(sp)
    2718:	003e7d06 	br	2110 <___vfprintf_internal_r+0xa38>
    271c:	d8814c17 	ldw	r2,1328(sp)
    2720:	b8c00007 	ldb	r3,0(r23)
    2724:	10801014 	ori	r2,r2,64
    2728:	d8814c15 	stw	r2,1328(sp)
    272c:	003c6906 	br	18d4 <___vfprintf_internal_r+0x1fc>
    2730:	d9414c17 	ldw	r5,1328(sp)
    2734:	2880020c 	andi	r2,r5,8
    2738:	1001df26 	beq	r2,zero,2eb8 <___vfprintf_internal_r+0x17e0>
    273c:	39800017 	ldw	r6,0(r7)
    2740:	38800204 	addi	r2,r7,8
    2744:	d8814015 	stw	r2,1280(sp)
    2748:	d9814215 	stw	r6,1288(sp)
    274c:	39c00117 	ldw	r7,4(r7)
    2750:	d9c14315 	stw	r7,1292(sp)
    2754:	d9014217 	ldw	r4,1288(sp)
    2758:	d9414317 	ldw	r5,1292(sp)
    275c:	00080780 	call	8078 <__isinfd>
    2760:	10021726 	beq	r2,zero,2fc0 <___vfprintf_internal_r+0x18e8>
    2764:	d9014217 	ldw	r4,1288(sp)
    2768:	d9414317 	ldw	r5,1292(sp)
    276c:	000d883a 	mov	r6,zero
    2770:	000f883a 	mov	r7,zero
    2774:	000a0c00 	call	a0c0 <__ltdf2>
    2778:	1002ca16 	blt	r2,zero,32a4 <___vfprintf_internal_r+0x1bcc>
    277c:	d9414d17 	ldw	r5,1332(sp)
    2780:	008011c4 	movi	r2,71
    2784:	11420a16 	blt	r2,r5,2fb0 <___vfprintf_internal_r+0x18d8>
    2788:	01800074 	movhi	r6,1
    278c:	31ba6e04 	addi	r6,r6,-5704
    2790:	d9814115 	stw	r6,1284(sp)
    2794:	d9014c17 	ldw	r4,1328(sp)
    2798:	00c000c4 	movi	r3,3
    279c:	00bfdfc4 	movi	r2,-129
    27a0:	2088703a 	and	r4,r4,r2
    27a4:	180f883a 	mov	r7,r3
    27a8:	d8c14515 	stw	r3,1300(sp)
    27ac:	d9014c15 	stw	r4,1328(sp)
    27b0:	d8014615 	stw	zero,1304(sp)
    27b4:	003e6a06 	br	2160 <___vfprintf_internal_r+0xa88>
    27b8:	38800017 	ldw	r2,0(r7)
    27bc:	00c00044 	movi	r3,1
    27c0:	39c00104 	addi	r7,r7,4
    27c4:	d9c14015 	stw	r7,1280(sp)
    27c8:	d9000f04 	addi	r4,sp,60
    27cc:	180f883a 	mov	r7,r3
    27d0:	d8c14515 	stw	r3,1300(sp)
    27d4:	d9014115 	stw	r4,1284(sp)
    27d8:	d8800f05 	stb	r2,60(sp)
    27dc:	d8000405 	stb	zero,16(sp)
    27e0:	003cac06 	br	1a94 <___vfprintf_internal_r+0x3bc>
    27e4:	01400074 	movhi	r5,1
    27e8:	297a7404 	addi	r5,r5,-5680
    27ec:	d9414415 	stw	r5,1296(sp)
    27f0:	d9814c17 	ldw	r6,1328(sp)
    27f4:	3080080c 	andi	r2,r6,32
    27f8:	1000f926 	beq	r2,zero,2be0 <___vfprintf_internal_r+0x1508>
    27fc:	3c000017 	ldw	r16,0(r7)
    2800:	3c400117 	ldw	r17,4(r7)
    2804:	38800204 	addi	r2,r7,8
    2808:	d8814015 	stw	r2,1280(sp)
    280c:	d9414c17 	ldw	r5,1328(sp)
    2810:	2880004c 	andi	r2,r5,1
    2814:	1005003a 	cmpeq	r2,r2,zero
    2818:	1000b31e 	bne	r2,zero,2ae8 <___vfprintf_internal_r+0x1410>
    281c:	8444b03a 	or	r2,r16,r17
    2820:	1000b126 	beq	r2,zero,2ae8 <___vfprintf_internal_r+0x1410>
    2824:	d9814d17 	ldw	r6,1332(sp)
    2828:	29400094 	ori	r5,r5,2
    282c:	00800c04 	movi	r2,48
    2830:	01000084 	movi	r4,2
    2834:	d9414c15 	stw	r5,1328(sp)
    2838:	d8800445 	stb	r2,17(sp)
    283c:	d9800485 	stb	r6,18(sp)
    2840:	d8000405 	stb	zero,16(sp)
    2844:	003e3206 	br	2110 <___vfprintf_internal_r+0xa38>
    2848:	01800074 	movhi	r6,1
    284c:	31ba6904 	addi	r6,r6,-5724
    2850:	d9814415 	stw	r6,1296(sp)
    2854:	003fe606 	br	27f0 <___vfprintf_internal_r+0x1118>
    2858:	00800ac4 	movi	r2,43
    285c:	d8800405 	stb	r2,16(sp)
    2860:	b8c00007 	ldb	r3,0(r23)
    2864:	003c1b06 	br	18d4 <___vfprintf_internal_r+0x1fc>
    2868:	d8814c17 	ldw	r2,1328(sp)
    286c:	b8c00007 	ldb	r3,0(r23)
    2870:	10800054 	ori	r2,r2,1
    2874:	d8814c15 	stw	r2,1328(sp)
    2878:	003c1606 	br	18d4 <___vfprintf_internal_r+0x1fc>
    287c:	d8800407 	ldb	r2,16(sp)
    2880:	1000461e 	bne	r2,zero,299c <___vfprintf_internal_r+0x12c4>
    2884:	00800804 	movi	r2,32
    2888:	d8800405 	stb	r2,16(sp)
    288c:	b8c00007 	ldb	r3,0(r23)
    2890:	003c1006 	br	18d4 <___vfprintf_internal_r+0x1fc>
    2894:	d9814c17 	ldw	r6,1328(sp)
    2898:	b8c00007 	ldb	r3,0(r23)
    289c:	31800214 	ori	r6,r6,8
    28a0:	d9814c15 	stw	r6,1328(sp)
    28a4:	003c0b06 	br	18d4 <___vfprintf_internal_r+0x1fc>
    28a8:	0007883a 	mov	r3,zero
    28ac:	01000244 	movi	r4,9
    28b0:	188002a4 	muli	r2,r3,10
    28b4:	b8c00007 	ldb	r3,0(r23)
    28b8:	d9814d17 	ldw	r6,1332(sp)
    28bc:	bdc00044 	addi	r23,r23,1
    28c0:	d8c14d15 	stw	r3,1332(sp)
    28c4:	d9414d17 	ldw	r5,1332(sp)
    28c8:	3085883a 	add	r2,r6,r2
    28cc:	10fff404 	addi	r3,r2,-48
    28d0:	28bff404 	addi	r2,r5,-48
    28d4:	20bff62e 	bgeu	r4,r2,28b0 <___vfprintf_internal_r+0x11d8>
    28d8:	d8c14a15 	stw	r3,1320(sp)
    28dc:	003bff06 	br	18dc <___vfprintf_internal_r+0x204>
    28e0:	d9414c17 	ldw	r5,1328(sp)
    28e4:	b8c00007 	ldb	r3,0(r23)
    28e8:	29402014 	ori	r5,r5,128
    28ec:	d9414c15 	stw	r5,1328(sp)
    28f0:	003bf806 	br	18d4 <___vfprintf_internal_r+0x1fc>
    28f4:	b8c00007 	ldb	r3,0(r23)
    28f8:	00800a84 	movi	r2,42
    28fc:	bdc00044 	addi	r23,r23,1
    2900:	18831526 	beq	r3,r2,3558 <___vfprintf_internal_r+0x1e80>
    2904:	d8c14d15 	stw	r3,1332(sp)
    2908:	18bff404 	addi	r2,r3,-48
    290c:	00c00244 	movi	r3,9
    2910:	18827836 	bltu	r3,r2,32f4 <___vfprintf_internal_r+0x1c1c>
    2914:	000d883a 	mov	r6,zero
    2918:	308002a4 	muli	r2,r6,10
    291c:	b9800007 	ldb	r6,0(r23)
    2920:	d9414d17 	ldw	r5,1332(sp)
    2924:	bdc00044 	addi	r23,r23,1
    2928:	d9814d15 	stw	r6,1332(sp)
    292c:	d9014d17 	ldw	r4,1332(sp)
    2930:	1145883a 	add	r2,r2,r5
    2934:	11bff404 	addi	r6,r2,-48
    2938:	20bff404 	addi	r2,r4,-48
    293c:	18bff62e 	bgeu	r3,r2,2918 <___vfprintf_internal_r+0x1240>
    2940:	3027883a 	mov	r19,r6
    2944:	303be50e 	bge	r6,zero,18dc <___vfprintf_internal_r+0x204>
    2948:	04ffffc4 	movi	r19,-1
    294c:	003be306 	br	18dc <___vfprintf_internal_r+0x204>
    2950:	d8000405 	stb	zero,16(sp)
    2954:	39800017 	ldw	r6,0(r7)
    2958:	39c00104 	addi	r7,r7,4
    295c:	d9c14015 	stw	r7,1280(sp)
    2960:	d9814115 	stw	r6,1284(sp)
    2964:	3001c926 	beq	r6,zero,308c <___vfprintf_internal_r+0x19b4>
    2968:	98000e16 	blt	r19,zero,29a4 <___vfprintf_internal_r+0x12cc>
    296c:	d9014117 	ldw	r4,1284(sp)
    2970:	000b883a 	mov	r5,zero
    2974:	980d883a 	mov	r6,r19
    2978:	00067940 	call	6794 <memchr>
    297c:	10025926 	beq	r2,zero,32e4 <___vfprintf_internal_r+0x1c0c>
    2980:	d8c14117 	ldw	r3,1284(sp)
    2984:	10cfc83a 	sub	r7,r2,r3
    2988:	99c19e16 	blt	r19,r7,3004 <___vfprintf_internal_r+0x192c>
    298c:	d9c14515 	stw	r7,1300(sp)
    2990:	38000916 	blt	r7,zero,29b8 <___vfprintf_internal_r+0x12e0>
    2994:	d8014615 	stw	zero,1304(sp)
    2998:	003df106 	br	2160 <___vfprintf_internal_r+0xa88>
    299c:	b8c00007 	ldb	r3,0(r23)
    29a0:	003bcc06 	br	18d4 <___vfprintf_internal_r+0x1fc>
    29a4:	d9014117 	ldw	r4,1284(sp)
    29a8:	000160c0 	call	160c <strlen>
    29ac:	d8814515 	stw	r2,1300(sp)
    29b0:	100f883a 	mov	r7,r2
    29b4:	103ff70e 	bge	r2,zero,2994 <___vfprintf_internal_r+0x12bc>
    29b8:	d8014515 	stw	zero,1300(sp)
    29bc:	d8014615 	stw	zero,1304(sp)
    29c0:	003de706 	br	2160 <___vfprintf_internal_r+0xa88>
    29c4:	20c03fcc 	andi	r3,r4,255
    29c8:	00800044 	movi	r2,1
    29cc:	18802d26 	beq	r3,r2,2a84 <___vfprintf_internal_r+0x13ac>
    29d0:	18800e36 	bltu	r3,r2,2a0c <___vfprintf_internal_r+0x1334>
    29d4:	00800084 	movi	r2,2
    29d8:	1880fa26 	beq	r3,r2,2dc4 <___vfprintf_internal_r+0x16ec>
    29dc:	01000074 	movhi	r4,1
    29e0:	213a7904 	addi	r4,r4,-5660
    29e4:	000160c0 	call	160c <strlen>
    29e8:	100f883a 	mov	r7,r2
    29ec:	dcc14515 	stw	r19,1300(sp)
    29f0:	9880010e 	bge	r19,r2,29f8 <___vfprintf_internal_r+0x1320>
    29f4:	d8814515 	stw	r2,1300(sp)
    29f8:	00800074 	movhi	r2,1
    29fc:	10ba7904 	addi	r2,r2,-5660
    2a00:	dcc14615 	stw	r19,1304(sp)
    2a04:	d8814115 	stw	r2,1284(sp)
    2a08:	003dd506 	br	2160 <___vfprintf_internal_r+0xa88>
    2a0c:	d9401904 	addi	r5,sp,100
    2a10:	dd000f04 	addi	r20,sp,60
    2a14:	d9414115 	stw	r5,1284(sp)
    2a18:	880a977a 	slli	r5,r17,29
    2a1c:	d9814117 	ldw	r6,1284(sp)
    2a20:	8004d0fa 	srli	r2,r16,3
    2a24:	8806d0fa 	srli	r3,r17,3
    2a28:	810001cc 	andi	r4,r16,7
    2a2c:	2884b03a 	or	r2,r5,r2
    2a30:	31bfffc4 	addi	r6,r6,-1
    2a34:	21000c04 	addi	r4,r4,48
    2a38:	d9814115 	stw	r6,1284(sp)
    2a3c:	10cab03a 	or	r5,r2,r3
    2a40:	31000005 	stb	r4,0(r6)
    2a44:	1021883a 	mov	r16,r2
    2a48:	1823883a 	mov	r17,r3
    2a4c:	283ff21e 	bne	r5,zero,2a18 <___vfprintf_internal_r+0x1340>
    2a50:	d8c14c17 	ldw	r3,1328(sp)
    2a54:	1880004c 	andi	r2,r3,1
    2a58:	1005003a 	cmpeq	r2,r2,zero
    2a5c:	103db91e 	bne	r2,zero,2144 <___vfprintf_internal_r+0xa6c>
    2a60:	20803fcc 	andi	r2,r4,255
    2a64:	1080201c 	xori	r2,r2,128
    2a68:	10bfe004 	addi	r2,r2,-128
    2a6c:	00c00c04 	movi	r3,48
    2a70:	10fdb426 	beq	r2,r3,2144 <___vfprintf_internal_r+0xa6c>
    2a74:	31bfffc4 	addi	r6,r6,-1
    2a78:	d9814115 	stw	r6,1284(sp)
    2a7c:	30c00005 	stb	r3,0(r6)
    2a80:	003db006 	br	2144 <___vfprintf_internal_r+0xa6c>
    2a84:	88800068 	cmpgeui	r2,r17,1
    2a88:	10002c1e 	bne	r2,zero,2b3c <___vfprintf_internal_r+0x1464>
    2a8c:	8800021e 	bne	r17,zero,2a98 <___vfprintf_internal_r+0x13c0>
    2a90:	00800244 	movi	r2,9
    2a94:	14002936 	bltu	r2,r16,2b3c <___vfprintf_internal_r+0x1464>
    2a98:	d90018c4 	addi	r4,sp,99
    2a9c:	dd000f04 	addi	r20,sp,60
    2aa0:	d9014115 	stw	r4,1284(sp)
    2aa4:	d9014117 	ldw	r4,1284(sp)
    2aa8:	80800c04 	addi	r2,r16,48
    2aac:	20800005 	stb	r2,0(r4)
    2ab0:	003da406 	br	2144 <___vfprintf_internal_r+0xa6c>
    2ab4:	dc400d17 	ldw	r17,52(sp)
    2ab8:	07000074 	movhi	fp,1
    2abc:	e73a8084 	addi	fp,fp,-5630
    2ac0:	9425883a 	add	r18,r18,r16
    2ac4:	8c400044 	addi	r17,r17,1
    2ac8:	008001c4 	movi	r2,7
    2acc:	1f000015 	stw	fp,0(r3)
    2ad0:	1c000115 	stw	r16,4(r3)
    2ad4:	dc800e15 	stw	r18,56(sp)
    2ad8:	dc400d15 	stw	r17,52(sp)
    2adc:	147de216 	blt	r2,r17,2268 <___vfprintf_internal_r+0xb90>
    2ae0:	18c00204 	addi	r3,r3,8
    2ae4:	003c7a06 	br	1cd0 <___vfprintf_internal_r+0x5f8>
    2ae8:	01000084 	movi	r4,2
    2aec:	d8000405 	stb	zero,16(sp)
    2af0:	003d8706 	br	2110 <___vfprintf_internal_r+0xa38>
    2af4:	d9814c17 	ldw	r6,1328(sp)
    2af8:	30c4703a 	and	r2,r6,r3
    2afc:	1005003a 	cmpeq	r2,r2,zero
    2b00:	103cb926 	beq	r2,zero,1de8 <___vfprintf_internal_r+0x710>
    2b04:	d9014117 	ldw	r4,1284(sp)
    2b08:	94800044 	addi	r18,r18,1
    2b0c:	8c400044 	addi	r17,r17,1
    2b10:	008001c4 	movi	r2,7
    2b14:	a9000015 	stw	r4,0(r21)
    2b18:	a8c00115 	stw	r3,4(r21)
    2b1c:	dc800e15 	stw	r18,56(sp)
    2b20:	dc400d15 	stw	r17,52(sp)
    2b24:	147e6616 	blt	r2,r17,24c0 <___vfprintf_internal_r+0xde8>
    2b28:	acc00204 	addi	r19,r21,8
    2b2c:	003cd706 	br	1e8c <___vfprintf_internal_r+0x7b4>
    2b30:	07000074 	movhi	fp,1
    2b34:	e73a8084 	addi	fp,fp,-5630
    2b38:	003c4f06 	br	1c78 <___vfprintf_internal_r+0x5a0>
    2b3c:	dd000f04 	addi	r20,sp,60
    2b40:	dc801904 	addi	r18,sp,100
    2b44:	8009883a 	mov	r4,r16
    2b48:	880b883a 	mov	r5,r17
    2b4c:	01800284 	movi	r6,10
    2b50:	000f883a 	mov	r7,zero
    2b54:	0008dd00 	call	8dd0 <__umoddi3>
    2b58:	12000c04 	addi	r8,r2,48
    2b5c:	94bfffc4 	addi	r18,r18,-1
    2b60:	8009883a 	mov	r4,r16
    2b64:	880b883a 	mov	r5,r17
    2b68:	01800284 	movi	r6,10
    2b6c:	000f883a 	mov	r7,zero
    2b70:	92000005 	stb	r8,0(r18)
    2b74:	00087f40 	call	87f4 <__udivdi3>
    2b78:	1009883a 	mov	r4,r2
    2b7c:	1021883a 	mov	r16,r2
    2b80:	18800068 	cmpgeui	r2,r3,1
    2b84:	1823883a 	mov	r17,r3
    2b88:	103fee1e 	bne	r2,zero,2b44 <___vfprintf_internal_r+0x146c>
    2b8c:	1800021e 	bne	r3,zero,2b98 <___vfprintf_internal_r+0x14c0>
    2b90:	00800244 	movi	r2,9
    2b94:	113feb36 	bltu	r2,r4,2b44 <___vfprintf_internal_r+0x146c>
    2b98:	94bfffc4 	addi	r18,r18,-1
    2b9c:	dc814115 	stw	r18,1284(sp)
    2ba0:	003fc006 	br	2aa4 <___vfprintf_internal_r+0x13cc>
    2ba4:	d9014c17 	ldw	r4,1328(sp)
    2ba8:	2080004c 	andi	r2,r4,1
    2bac:	10009a1e 	bne	r2,zero,2e18 <___vfprintf_internal_r+0x1740>
    2bb0:	d9401904 	addi	r5,sp,100
    2bb4:	dd000f04 	addi	r20,sp,60
    2bb8:	d9414115 	stw	r5,1284(sp)
    2bbc:	003d6106 	br	2144 <___vfprintf_internal_r+0xa6c>
    2bc0:	d9014f17 	ldw	r4,1340(sp)
    2bc4:	b00b883a 	mov	r5,r22
    2bc8:	d9800c04 	addi	r6,sp,48
    2bcc:	00016800 	call	1680 <__sprint_r>
    2bd0:	103c791e 	bne	r2,zero,1db8 <___vfprintf_internal_r+0x6e0>
    2bd4:	dc800e17 	ldw	r18,56(sp)
    2bd8:	d8c01904 	addi	r3,sp,100
    2bdc:	003cff06 	br	1fdc <___vfprintf_internal_r+0x904>
    2be0:	d8c14c17 	ldw	r3,1328(sp)
    2be4:	1880040c 	andi	r2,r3,16
    2be8:	1000711e 	bne	r2,zero,2db0 <___vfprintf_internal_r+0x16d8>
    2bec:	d9014c17 	ldw	r4,1328(sp)
    2bf0:	2080100c 	andi	r2,r4,64
    2bf4:	10006e26 	beq	r2,zero,2db0 <___vfprintf_internal_r+0x16d8>
    2bf8:	3c00000b 	ldhu	r16,0(r7)
    2bfc:	0023883a 	mov	r17,zero
    2c00:	39c00104 	addi	r7,r7,4
    2c04:	d9c14015 	stw	r7,1280(sp)
    2c08:	003f0006 	br	280c <___vfprintf_internal_r+0x1134>
    2c0c:	dc400d17 	ldw	r17,52(sp)
    2c10:	07000074 	movhi	fp,1
    2c14:	e73a8084 	addi	fp,fp,-5630
    2c18:	9425883a 	add	r18,r18,r16
    2c1c:	8c400044 	addi	r17,r17,1
    2c20:	008001c4 	movi	r2,7
    2c24:	1f000015 	stw	fp,0(r3)
    2c28:	1c000115 	stw	r16,4(r3)
    2c2c:	dc800e15 	stw	r18,56(sp)
    2c30:	dc400d15 	stw	r17,52(sp)
    2c34:	147d7616 	blt	r2,r17,2210 <___vfprintf_internal_r+0xb38>
    2c38:	18c00204 	addi	r3,r3,8
    2c3c:	003d7b06 	br	222c <___vfprintf_internal_r+0xb54>
    2c40:	dc800e17 	ldw	r18,56(sp)
    2c44:	dc400d17 	ldw	r17,52(sp)
    2c48:	07000074 	movhi	fp,1
    2c4c:	e73a8484 	addi	fp,fp,-5614
    2c50:	003bc006 	br	1b54 <___vfprintf_internal_r+0x47c>
    2c54:	d9014f17 	ldw	r4,1340(sp)
    2c58:	b00b883a 	mov	r5,r22
    2c5c:	d9800c04 	addi	r6,sp,48
    2c60:	00016800 	call	1680 <__sprint_r>
    2c64:	103c541e 	bne	r2,zero,1db8 <___vfprintf_internal_r+0x6e0>
    2c68:	dc800e17 	ldw	r18,56(sp)
    2c6c:	d8c01904 	addi	r3,sp,100
    2c70:	003ce906 	br	2018 <___vfprintf_internal_r+0x940>
    2c74:	3c000017 	ldw	r16,0(r7)
    2c78:	0009883a 	mov	r4,zero
    2c7c:	39c00104 	addi	r7,r7,4
    2c80:	0023883a 	mov	r17,zero
    2c84:	d9c14015 	stw	r7,1280(sp)
    2c88:	d8000405 	stb	zero,16(sp)
    2c8c:	003d2006 	br	2110 <___vfprintf_internal_r+0xa38>
    2c90:	38800017 	ldw	r2,0(r7)
    2c94:	39c00104 	addi	r7,r7,4
    2c98:	d9c14015 	stw	r7,1280(sp)
    2c9c:	1023d7fa 	srai	r17,r2,31
    2ca0:	1021883a 	mov	r16,r2
    2ca4:	003d1806 	br	2108 <___vfprintf_internal_r+0xa30>
    2ca8:	3c000017 	ldw	r16,0(r7)
    2cac:	01000044 	movi	r4,1
    2cb0:	39c00104 	addi	r7,r7,4
    2cb4:	0023883a 	mov	r17,zero
    2cb8:	d9c14015 	stw	r7,1280(sp)
    2cbc:	d8000405 	stb	zero,16(sp)
    2cc0:	003d1306 	br	2110 <___vfprintf_internal_r+0xa38>
    2cc4:	00800074 	movhi	r2,1
    2cc8:	10ba8004 	addi	r2,r2,-5632
    2ccc:	94800044 	addi	r18,r18,1
    2cd0:	8c400044 	addi	r17,r17,1
    2cd4:	a8800015 	stw	r2,0(r21)
    2cd8:	00c00044 	movi	r3,1
    2cdc:	008001c4 	movi	r2,7
    2ce0:	a8c00115 	stw	r3,4(r21)
    2ce4:	dc800e15 	stw	r18,56(sp)
    2ce8:	dc400d15 	stw	r17,52(sp)
    2cec:	1440ca16 	blt	r2,r17,3018 <___vfprintf_internal_r+0x1940>
    2cf0:	a8c00204 	addi	r3,r21,8
    2cf4:	2000061e 	bne	r4,zero,2d10 <___vfprintf_internal_r+0x1638>
    2cf8:	d9414717 	ldw	r5,1308(sp)
    2cfc:	2800041e 	bne	r5,zero,2d10 <___vfprintf_internal_r+0x1638>
    2d00:	d9814c17 	ldw	r6,1328(sp)
    2d04:	3080004c 	andi	r2,r6,1
    2d08:	1005003a 	cmpeq	r2,r2,zero
    2d0c:	103bf01e 	bne	r2,zero,1cd0 <___vfprintf_internal_r+0x5f8>
    2d10:	00800044 	movi	r2,1
    2d14:	dc400d17 	ldw	r17,52(sp)
    2d18:	18800115 	stw	r2,4(r3)
    2d1c:	d8814917 	ldw	r2,1316(sp)
    2d20:	94800044 	addi	r18,r18,1
    2d24:	8c400044 	addi	r17,r17,1
    2d28:	18800015 	stw	r2,0(r3)
    2d2c:	008001c4 	movi	r2,7
    2d30:	dc800e15 	stw	r18,56(sp)
    2d34:	dc400d15 	stw	r17,52(sp)
    2d38:	1440ca16 	blt	r2,r17,3064 <___vfprintf_internal_r+0x198c>
    2d3c:	18c00204 	addi	r3,r3,8
    2d40:	0121c83a 	sub	r16,zero,r4
    2d44:	0400500e 	bge	zero,r16,2e88 <___vfprintf_internal_r+0x17b0>
    2d48:	00800404 	movi	r2,16
    2d4c:	1400800e 	bge	r2,r16,2f50 <___vfprintf_internal_r+0x1878>
    2d50:	1027883a 	mov	r19,r2
    2d54:	07000074 	movhi	fp,1
    2d58:	e73a8084 	addi	fp,fp,-5630
    2d5c:	050001c4 	movi	r20,7
    2d60:	00000306 	br	2d70 <___vfprintf_internal_r+0x1698>
    2d64:	18c00204 	addi	r3,r3,8
    2d68:	843ffc04 	addi	r16,r16,-16
    2d6c:	9c007a0e 	bge	r19,r16,2f58 <___vfprintf_internal_r+0x1880>
    2d70:	94800404 	addi	r18,r18,16
    2d74:	8c400044 	addi	r17,r17,1
    2d78:	1f000015 	stw	fp,0(r3)
    2d7c:	1cc00115 	stw	r19,4(r3)
    2d80:	dc800e15 	stw	r18,56(sp)
    2d84:	dc400d15 	stw	r17,52(sp)
    2d88:	a47ff60e 	bge	r20,r17,2d64 <___vfprintf_internal_r+0x168c>
    2d8c:	d9014f17 	ldw	r4,1340(sp)
    2d90:	b00b883a 	mov	r5,r22
    2d94:	d9800c04 	addi	r6,sp,48
    2d98:	00016800 	call	1680 <__sprint_r>
    2d9c:	103c061e 	bne	r2,zero,1db8 <___vfprintf_internal_r+0x6e0>
    2da0:	dc800e17 	ldw	r18,56(sp)
    2da4:	dc400d17 	ldw	r17,52(sp)
    2da8:	d8c01904 	addi	r3,sp,100
    2dac:	003fee06 	br	2d68 <___vfprintf_internal_r+0x1690>
    2db0:	3c000017 	ldw	r16,0(r7)
    2db4:	0023883a 	mov	r17,zero
    2db8:	39c00104 	addi	r7,r7,4
    2dbc:	d9c14015 	stw	r7,1280(sp)
    2dc0:	003e9206 	br	280c <___vfprintf_internal_r+0x1134>
    2dc4:	d9401904 	addi	r5,sp,100
    2dc8:	dd000f04 	addi	r20,sp,60
    2dcc:	d9414115 	stw	r5,1284(sp)
    2dd0:	d9814417 	ldw	r6,1296(sp)
    2dd4:	880a973a 	slli	r5,r17,28
    2dd8:	8004d13a 	srli	r2,r16,4
    2ddc:	810003cc 	andi	r4,r16,15
    2de0:	3109883a 	add	r4,r6,r4
    2de4:	2884b03a 	or	r2,r5,r2
    2de8:	21400003 	ldbu	r5,0(r4)
    2dec:	d9014117 	ldw	r4,1284(sp)
    2df0:	8806d13a 	srli	r3,r17,4
    2df4:	1021883a 	mov	r16,r2
    2df8:	213fffc4 	addi	r4,r4,-1
    2dfc:	d9014115 	stw	r4,1284(sp)
    2e00:	d9814117 	ldw	r6,1284(sp)
    2e04:	10c8b03a 	or	r4,r2,r3
    2e08:	1823883a 	mov	r17,r3
    2e0c:	31400005 	stb	r5,0(r6)
    2e10:	203fef1e 	bne	r4,zero,2dd0 <___vfprintf_internal_r+0x16f8>
    2e14:	003ccb06 	br	2144 <___vfprintf_internal_r+0xa6c>
    2e18:	00800c04 	movi	r2,48
    2e1c:	d98018c4 	addi	r6,sp,99
    2e20:	dd000f04 	addi	r20,sp,60
    2e24:	d88018c5 	stb	r2,99(sp)
    2e28:	d9814115 	stw	r6,1284(sp)
    2e2c:	003cc506 	br	2144 <___vfprintf_internal_r+0xa6c>
    2e30:	dc400d17 	ldw	r17,52(sp)
    2e34:	07000074 	movhi	fp,1
    2e38:	e73a8484 	addi	fp,fp,-5614
    2e3c:	003bc706 	br	1d5c <___vfprintf_internal_r+0x684>
    2e40:	d9414c17 	ldw	r5,1328(sp)
    2e44:	2880040c 	andi	r2,r5,16
    2e48:	10007c26 	beq	r2,zero,303c <___vfprintf_internal_r+0x1964>
    2e4c:	38800017 	ldw	r2,0(r7)
    2e50:	39c00104 	addi	r7,r7,4
    2e54:	d9c14015 	stw	r7,1280(sp)
    2e58:	d9814b17 	ldw	r6,1324(sp)
    2e5c:	d9c14017 	ldw	r7,1280(sp)
    2e60:	11800015 	stw	r6,0(r2)
    2e64:	003a7806 	br	1848 <___vfprintf_internal_r+0x170>
    2e68:	d9014f17 	ldw	r4,1340(sp)
    2e6c:	b00b883a 	mov	r5,r22
    2e70:	d9800c04 	addi	r6,sp,48
    2e74:	00016800 	call	1680 <__sprint_r>
    2e78:	103bcf1e 	bne	r2,zero,1db8 <___vfprintf_internal_r+0x6e0>
    2e7c:	dc800e17 	ldw	r18,56(sp)
    2e80:	dc400d17 	ldw	r17,52(sp)
    2e84:	d8c01904 	addi	r3,sp,100
    2e88:	d9014717 	ldw	r4,1308(sp)
    2e8c:	d9414117 	ldw	r5,1284(sp)
    2e90:	8c400044 	addi	r17,r17,1
    2e94:	9125883a 	add	r18,r18,r4
    2e98:	008001c4 	movi	r2,7
    2e9c:	19400015 	stw	r5,0(r3)
    2ea0:	19000115 	stw	r4,4(r3)
    2ea4:	dc800e15 	stw	r18,56(sp)
    2ea8:	dc400d15 	stw	r17,52(sp)
    2eac:	147cee16 	blt	r2,r17,2268 <___vfprintf_internal_r+0xb90>
    2eb0:	18c00204 	addi	r3,r3,8
    2eb4:	003b8606 	br	1cd0 <___vfprintf_internal_r+0x5f8>
    2eb8:	38c00017 	ldw	r3,0(r7)
    2ebc:	39000204 	addi	r4,r7,8
    2ec0:	d9014015 	stw	r4,1280(sp)
    2ec4:	d8c14215 	stw	r3,1288(sp)
    2ec8:	39c00117 	ldw	r7,4(r7)
    2ecc:	d9c14315 	stw	r7,1292(sp)
    2ed0:	003e2006 	br	2754 <___vfprintf_internal_r+0x107c>
    2ed4:	0005883a 	mov	r2,zero
    2ed8:	1409c83a 	sub	r4,r2,r16
    2edc:	1105803a 	cmpltu	r2,r2,r4
    2ee0:	044bc83a 	sub	r5,zero,r17
    2ee4:	2885c83a 	sub	r2,r5,r2
    2ee8:	2021883a 	mov	r16,r4
    2eec:	1023883a 	mov	r17,r2
    2ef0:	01000044 	movi	r4,1
    2ef4:	00800b44 	movi	r2,45
    2ef8:	d8800405 	stb	r2,16(sp)
    2efc:	003c8406 	br	2110 <___vfprintf_internal_r+0xa38>
    2f00:	d9014f17 	ldw	r4,1340(sp)
    2f04:	b00b883a 	mov	r5,r22
    2f08:	d9800c04 	addi	r6,sp,48
    2f0c:	00016800 	call	1680 <__sprint_r>
    2f10:	103ba91e 	bne	r2,zero,1db8 <___vfprintf_internal_r+0x6e0>
    2f14:	dc800e17 	ldw	r18,56(sp)
    2f18:	dc400d17 	ldw	r17,52(sp)
    2f1c:	d9000517 	ldw	r4,20(sp)
    2f20:	d9401904 	addi	r5,sp,100
    2f24:	003da706 	br	25c4 <___vfprintf_internal_r+0xeec>
    2f28:	d9014f17 	ldw	r4,1340(sp)
    2f2c:	b00b883a 	mov	r5,r22
    2f30:	d9800c04 	addi	r6,sp,48
    2f34:	00016800 	call	1680 <__sprint_r>
    2f38:	103b9f1e 	bne	r2,zero,1db8 <___vfprintf_internal_r+0x6e0>
    2f3c:	dc800e17 	ldw	r18,56(sp)
    2f40:	dc400d17 	ldw	r17,52(sp)
    2f44:	d9000517 	ldw	r4,20(sp)
    2f48:	d8c01904 	addi	r3,sp,100
    2f4c:	003d9106 	br	2594 <___vfprintf_internal_r+0xebc>
    2f50:	07000074 	movhi	fp,1
    2f54:	e73a8084 	addi	fp,fp,-5630
    2f58:	9425883a 	add	r18,r18,r16
    2f5c:	8c400044 	addi	r17,r17,1
    2f60:	008001c4 	movi	r2,7
    2f64:	1f000015 	stw	fp,0(r3)
    2f68:	1c000115 	stw	r16,4(r3)
    2f6c:	dc800e15 	stw	r18,56(sp)
    2f70:	dc400d15 	stw	r17,52(sp)
    2f74:	147fbc16 	blt	r2,r17,2e68 <___vfprintf_internal_r+0x1790>
    2f78:	18c00204 	addi	r3,r3,8
    2f7c:	003fc206 	br	2e88 <___vfprintf_internal_r+0x17b0>
    2f80:	d9014f17 	ldw	r4,1340(sp)
    2f84:	b00b883a 	mov	r5,r22
    2f88:	d9800c04 	addi	r6,sp,48
    2f8c:	00016800 	call	1680 <__sprint_r>
    2f90:	103b891e 	bne	r2,zero,1db8 <___vfprintf_internal_r+0x6e0>
    2f94:	dc800e17 	ldw	r18,56(sp)
    2f98:	d9000517 	ldw	r4,20(sp)
    2f9c:	d8c01904 	addi	r3,sp,100
    2fa0:	003d0206 	br	23ac <___vfprintf_internal_r+0xcd4>
    2fa4:	07000074 	movhi	fp,1
    2fa8:	e73a8084 	addi	fp,fp,-5630
    2fac:	003be406 	br	1f40 <___vfprintf_internal_r+0x868>
    2fb0:	00800074 	movhi	r2,1
    2fb4:	10ba6f04 	addi	r2,r2,-5700
    2fb8:	d8814115 	stw	r2,1284(sp)
    2fbc:	003df506 	br	2794 <___vfprintf_internal_r+0x10bc>
    2fc0:	d9014217 	ldw	r4,1288(sp)
    2fc4:	d9414317 	ldw	r5,1292(sp)
    2fc8:	00080b80 	call	80b8 <__isnand>
    2fcc:	10003926 	beq	r2,zero,30b4 <___vfprintf_internal_r+0x19dc>
    2fd0:	d9414d17 	ldw	r5,1332(sp)
    2fd4:	008011c4 	movi	r2,71
    2fd8:	1140ce16 	blt	r2,r5,3314 <___vfprintf_internal_r+0x1c3c>
    2fdc:	01800074 	movhi	r6,1
    2fe0:	31ba7004 	addi	r6,r6,-5696
    2fe4:	d9814115 	stw	r6,1284(sp)
    2fe8:	003dea06 	br	2794 <___vfprintf_internal_r+0x10bc>
    2fec:	d9014c17 	ldw	r4,1328(sp)
    2ff0:	bdc00044 	addi	r23,r23,1
    2ff4:	b8c00007 	ldb	r3,0(r23)
    2ff8:	21000814 	ori	r4,r4,32
    2ffc:	d9014c15 	stw	r4,1328(sp)
    3000:	003a3406 	br	18d4 <___vfprintf_internal_r+0x1fc>
    3004:	dcc14515 	stw	r19,1300(sp)
    3008:	98011016 	blt	r19,zero,344c <___vfprintf_internal_r+0x1d74>
    300c:	980f883a 	mov	r7,r19
    3010:	d8014615 	stw	zero,1304(sp)
    3014:	003c5206 	br	2160 <___vfprintf_internal_r+0xa88>
    3018:	d9014f17 	ldw	r4,1340(sp)
    301c:	b00b883a 	mov	r5,r22
    3020:	d9800c04 	addi	r6,sp,48
    3024:	00016800 	call	1680 <__sprint_r>
    3028:	103b631e 	bne	r2,zero,1db8 <___vfprintf_internal_r+0x6e0>
    302c:	dc800e17 	ldw	r18,56(sp)
    3030:	d9000517 	ldw	r4,20(sp)
    3034:	d8c01904 	addi	r3,sp,100
    3038:	003f2e06 	br	2cf4 <___vfprintf_internal_r+0x161c>
    303c:	d8c14c17 	ldw	r3,1328(sp)
    3040:	1880100c 	andi	r2,r3,64
    3044:	1000a026 	beq	r2,zero,32c8 <___vfprintf_internal_r+0x1bf0>
    3048:	38800017 	ldw	r2,0(r7)
    304c:	39c00104 	addi	r7,r7,4
    3050:	d9c14015 	stw	r7,1280(sp)
    3054:	d9014b17 	ldw	r4,1324(sp)
    3058:	d9c14017 	ldw	r7,1280(sp)
    305c:	1100000d 	sth	r4,0(r2)
    3060:	0039f906 	br	1848 <___vfprintf_internal_r+0x170>
    3064:	d9014f17 	ldw	r4,1340(sp)
    3068:	b00b883a 	mov	r5,r22
    306c:	d9800c04 	addi	r6,sp,48
    3070:	00016800 	call	1680 <__sprint_r>
    3074:	103b501e 	bne	r2,zero,1db8 <___vfprintf_internal_r+0x6e0>
    3078:	dc800e17 	ldw	r18,56(sp)
    307c:	dc400d17 	ldw	r17,52(sp)
    3080:	d9000517 	ldw	r4,20(sp)
    3084:	d8c01904 	addi	r3,sp,100
    3088:	003f2d06 	br	2d40 <___vfprintf_internal_r+0x1668>
    308c:	00800184 	movi	r2,6
    3090:	14c09a36 	bltu	r2,r19,32fc <___vfprintf_internal_r+0x1c24>
    3094:	dcc14515 	stw	r19,1300(sp)
    3098:	9800010e 	bge	r19,zero,30a0 <___vfprintf_internal_r+0x19c8>
    309c:	d8014515 	stw	zero,1300(sp)
    30a0:	00800074 	movhi	r2,1
    30a4:	10ba7204 	addi	r2,r2,-5688
    30a8:	980f883a 	mov	r7,r19
    30ac:	d8814115 	stw	r2,1284(sp)
    30b0:	003a7806 	br	1a94 <___vfprintf_internal_r+0x3bc>
    30b4:	00bfffc4 	movi	r2,-1
    30b8:	9880e226 	beq	r19,r2,3444 <___vfprintf_internal_r+0x1d6c>
    30bc:	d9414d17 	ldw	r5,1332(sp)
    30c0:	008019c4 	movi	r2,103
    30c4:	2880dc26 	beq	r5,r2,3438 <___vfprintf_internal_r+0x1d60>
    30c8:	008011c4 	movi	r2,71
    30cc:	2880da26 	beq	r5,r2,3438 <___vfprintf_internal_r+0x1d60>
    30d0:	d9414c17 	ldw	r5,1328(sp)
    30d4:	d9014317 	ldw	r4,1292(sp)
    30d8:	d9814217 	ldw	r6,1288(sp)
    30dc:	29404014 	ori	r5,r5,256
    30e0:	d9414c15 	stw	r5,1328(sp)
    30e4:	2000cc16 	blt	r4,zero,3418 <___vfprintf_internal_r+0x1d40>
    30e8:	3021883a 	mov	r16,r6
    30ec:	2023883a 	mov	r17,r4
    30f0:	0039883a 	mov	fp,zero
    30f4:	d9414d17 	ldw	r5,1332(sp)
    30f8:	00801984 	movi	r2,102
    30fc:	2880b726 	beq	r5,r2,33dc <___vfprintf_internal_r+0x1d04>
    3100:	00801184 	movi	r2,70
    3104:	2880b526 	beq	r5,r2,33dc <___vfprintf_internal_r+0x1d04>
    3108:	00801944 	movi	r2,101
    310c:	2880c826 	beq	r5,r2,3430 <___vfprintf_internal_r+0x1d58>
    3110:	00801144 	movi	r2,69
    3114:	2880c626 	beq	r5,r2,3430 <___vfprintf_internal_r+0x1d58>
    3118:	9829883a 	mov	r20,r19
    311c:	d9014f17 	ldw	r4,1340(sp)
    3120:	d8800504 	addi	r2,sp,20
    3124:	880d883a 	mov	r6,r17
    3128:	d8800115 	stw	r2,4(sp)
    312c:	d8c00604 	addi	r3,sp,24
    3130:	d8800704 	addi	r2,sp,28
    3134:	800b883a 	mov	r5,r16
    3138:	01c00084 	movi	r7,2
    313c:	d8c00215 	stw	r3,8(sp)
    3140:	d8800315 	stw	r2,12(sp)
    3144:	dd000015 	stw	r20,0(sp)
    3148:	00038fc0 	call	38fc <_dtoa_r>
    314c:	d9814d17 	ldw	r6,1332(sp)
    3150:	d8814115 	stw	r2,1284(sp)
    3154:	008019c4 	movi	r2,103
    3158:	30809526 	beq	r6,r2,33b0 <___vfprintf_internal_r+0x1cd8>
    315c:	d8c14d17 	ldw	r3,1332(sp)
    3160:	008011c4 	movi	r2,71
    3164:	18809226 	beq	r3,r2,33b0 <___vfprintf_internal_r+0x1cd8>
    3168:	d9414117 	ldw	r5,1284(sp)
    316c:	d9814d17 	ldw	r6,1332(sp)
    3170:	00801984 	movi	r2,102
    3174:	2d25883a 	add	r18,r5,r20
    3178:	30808626 	beq	r6,r2,3394 <___vfprintf_internal_r+0x1cbc>
    317c:	00801184 	movi	r2,70
    3180:	30808426 	beq	r6,r2,3394 <___vfprintf_internal_r+0x1cbc>
    3184:	000d883a 	mov	r6,zero
    3188:	000f883a 	mov	r7,zero
    318c:	880b883a 	mov	r5,r17
    3190:	8009883a 	mov	r4,r16
    3194:	0009ea00 	call	9ea0 <__eqdf2>
    3198:	1000751e 	bne	r2,zero,3370 <___vfprintf_internal_r+0x1c98>
    319c:	9005883a 	mov	r2,r18
    31a0:	dc800715 	stw	r18,28(sp)
    31a4:	d9014117 	ldw	r4,1284(sp)
    31a8:	d9414d17 	ldw	r5,1332(sp)
    31ac:	00c019c4 	movi	r3,103
    31b0:	1125c83a 	sub	r18,r2,r4
    31b4:	28c06826 	beq	r5,r3,3358 <___vfprintf_internal_r+0x1c80>
    31b8:	008011c4 	movi	r2,71
    31bc:	28806626 	beq	r5,r2,3358 <___vfprintf_internal_r+0x1c80>
    31c0:	d9000517 	ldw	r4,20(sp)
    31c4:	d8c14d17 	ldw	r3,1332(sp)
    31c8:	00801944 	movi	r2,101
    31cc:	10c05516 	blt	r2,r3,3324 <___vfprintf_internal_r+0x1c4c>
    31d0:	213fffc4 	addi	r4,r4,-1
    31d4:	d9000515 	stw	r4,20(sp)
    31d8:	d8c00805 	stb	r3,32(sp)
    31dc:	2021883a 	mov	r16,r4
    31e0:	2000c116 	blt	r4,zero,34e8 <___vfprintf_internal_r+0x1e10>
    31e4:	00800ac4 	movi	r2,43
    31e8:	d8800845 	stb	r2,33(sp)
    31ec:	00800244 	movi	r2,9
    31f0:	1400af0e 	bge	r2,r16,34b0 <___vfprintf_internal_r+0x1dd8>
    31f4:	1027883a 	mov	r19,r2
    31f8:	dc400b84 	addi	r17,sp,46
    31fc:	8009883a 	mov	r4,r16
    3200:	01400284 	movi	r5,10
    3204:	00010880 	call	1088 <__modsi3>
    3208:	10800c04 	addi	r2,r2,48
    320c:	8c7fffc4 	addi	r17,r17,-1
    3210:	8009883a 	mov	r4,r16
    3214:	01400284 	movi	r5,10
    3218:	88800005 	stb	r2,0(r17)
    321c:	00010280 	call	1028 <__divsi3>
    3220:	1021883a 	mov	r16,r2
    3224:	98bff516 	blt	r19,r2,31fc <___vfprintf_internal_r+0x1b24>
    3228:	10c00c04 	addi	r3,r2,48
    322c:	d88009c4 	addi	r2,sp,39
    3230:	108001c4 	addi	r2,r2,7
    3234:	897fffc4 	addi	r5,r17,-1
    3238:	88ffffc5 	stb	r3,-1(r17)
    323c:	2880a72e 	bgeu	r5,r2,34dc <___vfprintf_internal_r+0x1e04>
    3240:	1009883a 	mov	r4,r2
    3244:	d9800804 	addi	r6,sp,32
    3248:	d8c00884 	addi	r3,sp,34
    324c:	28800003 	ldbu	r2,0(r5)
    3250:	29400044 	addi	r5,r5,1
    3254:	18800005 	stb	r2,0(r3)
    3258:	18c00044 	addi	r3,r3,1
    325c:	293ffb36 	bltu	r5,r4,324c <___vfprintf_internal_r+0x1b74>
    3260:	1987c83a 	sub	r3,r3,r6
    3264:	00800044 	movi	r2,1
    3268:	d8c14815 	stw	r3,1312(sp)
    326c:	90cf883a 	add	r7,r18,r3
    3270:	1480960e 	bge	r2,r18,34cc <___vfprintf_internal_r+0x1df4>
    3274:	39c00044 	addi	r7,r7,1
    3278:	d9c14515 	stw	r7,1300(sp)
    327c:	38003416 	blt	r7,zero,3350 <___vfprintf_internal_r+0x1c78>
    3280:	e0803fcc 	andi	r2,fp,255
    3284:	1080201c 	xori	r2,r2,128
    3288:	10bfe004 	addi	r2,r2,-128
    328c:	10004e26 	beq	r2,zero,33c8 <___vfprintf_internal_r+0x1cf0>
    3290:	00800b44 	movi	r2,45
    3294:	dc814715 	stw	r18,1308(sp)
    3298:	d8014615 	stw	zero,1304(sp)
    329c:	d8800405 	stb	r2,16(sp)
    32a0:	003bb106 	br	2168 <___vfprintf_internal_r+0xa90>
    32a4:	00800b44 	movi	r2,45
    32a8:	d8800405 	stb	r2,16(sp)
    32ac:	003d3306 	br	277c <___vfprintf_internal_r+0x10a4>
    32b0:	d9014f17 	ldw	r4,1340(sp)
    32b4:	b00b883a 	mov	r5,r22
    32b8:	d9800c04 	addi	r6,sp,48
    32bc:	00016800 	call	1680 <__sprint_r>
    32c0:	103abd1e 	bne	r2,zero,1db8 <___vfprintf_internal_r+0x6e0>
    32c4:	003abb06 	br	1db4 <___vfprintf_internal_r+0x6dc>
    32c8:	38800017 	ldw	r2,0(r7)
    32cc:	39c00104 	addi	r7,r7,4
    32d0:	d9c14015 	stw	r7,1280(sp)
    32d4:	d9414b17 	ldw	r5,1324(sp)
    32d8:	d9c14017 	ldw	r7,1280(sp)
    32dc:	11400015 	stw	r5,0(r2)
    32e0:	00395906 	br	1848 <___vfprintf_internal_r+0x170>
    32e4:	980f883a 	mov	r7,r19
    32e8:	dcc14515 	stw	r19,1300(sp)
    32ec:	d8014615 	stw	zero,1304(sp)
    32f0:	003b9b06 	br	2160 <___vfprintf_internal_r+0xa88>
    32f4:	0027883a 	mov	r19,zero
    32f8:	00397806 	br	18dc <___vfprintf_internal_r+0x204>
    32fc:	00c00074 	movhi	r3,1
    3300:	18fa7204 	addi	r3,r3,-5688
    3304:	100f883a 	mov	r7,r2
    3308:	d8814515 	stw	r2,1300(sp)
    330c:	d8c14115 	stw	r3,1284(sp)
    3310:	0039e006 	br	1a94 <___vfprintf_internal_r+0x3bc>
    3314:	00800074 	movhi	r2,1
    3318:	10ba7104 	addi	r2,r2,-5692
    331c:	d8814115 	stw	r2,1284(sp)
    3320:	003d1c06 	br	2794 <___vfprintf_internal_r+0x10bc>
    3324:	d9414d17 	ldw	r5,1332(sp)
    3328:	00801984 	movi	r2,102
    332c:	28804926 	beq	r5,r2,3454 <___vfprintf_internal_r+0x1d7c>
    3330:	200f883a 	mov	r7,r4
    3334:	24805716 	blt	r4,r18,3494 <___vfprintf_internal_r+0x1dbc>
    3338:	d9414c17 	ldw	r5,1328(sp)
    333c:	2880004c 	andi	r2,r5,1
    3340:	10000126 	beq	r2,zero,3348 <___vfprintf_internal_r+0x1c70>
    3344:	21c00044 	addi	r7,r4,1
    3348:	d9c14515 	stw	r7,1300(sp)
    334c:	383fcc0e 	bge	r7,zero,3280 <___vfprintf_internal_r+0x1ba8>
    3350:	d8014515 	stw	zero,1300(sp)
    3354:	003fca06 	br	3280 <___vfprintf_internal_r+0x1ba8>
    3358:	d9000517 	ldw	r4,20(sp)
    335c:	00bfff04 	movi	r2,-4
    3360:	1100480e 	bge	r2,r4,3484 <___vfprintf_internal_r+0x1dac>
    3364:	99004716 	blt	r19,r4,3484 <___vfprintf_internal_r+0x1dac>
    3368:	d8c14d15 	stw	r3,1332(sp)
    336c:	003ff006 	br	3330 <___vfprintf_internal_r+0x1c58>
    3370:	d8800717 	ldw	r2,28(sp)
    3374:	14bf8b2e 	bgeu	r2,r18,31a4 <___vfprintf_internal_r+0x1acc>
    3378:	9007883a 	mov	r3,r18
    337c:	01000c04 	movi	r4,48
    3380:	11000005 	stb	r4,0(r2)
    3384:	10800044 	addi	r2,r2,1
    3388:	d8800715 	stw	r2,28(sp)
    338c:	18bffc1e 	bne	r3,r2,3380 <___vfprintf_internal_r+0x1ca8>
    3390:	003f8406 	br	31a4 <___vfprintf_internal_r+0x1acc>
    3394:	d8814117 	ldw	r2,1284(sp)
    3398:	10c00007 	ldb	r3,0(r2)
    339c:	00800c04 	movi	r2,48
    33a0:	18805b26 	beq	r3,r2,3510 <___vfprintf_internal_r+0x1e38>
    33a4:	d9000517 	ldw	r4,20(sp)
    33a8:	9125883a 	add	r18,r18,r4
    33ac:	003f7506 	br	3184 <___vfprintf_internal_r+0x1aac>
    33b0:	d9014c17 	ldw	r4,1328(sp)
    33b4:	2080004c 	andi	r2,r4,1
    33b8:	1005003a 	cmpeq	r2,r2,zero
    33bc:	103f6a26 	beq	r2,zero,3168 <___vfprintf_internal_r+0x1a90>
    33c0:	d8800717 	ldw	r2,28(sp)
    33c4:	003f7706 	br	31a4 <___vfprintf_internal_r+0x1acc>
    33c8:	d9c14515 	stw	r7,1300(sp)
    33cc:	38004d16 	blt	r7,zero,3504 <___vfprintf_internal_r+0x1e2c>
    33d0:	dc814715 	stw	r18,1308(sp)
    33d4:	d8014615 	stw	zero,1304(sp)
    33d8:	003b6106 	br	2160 <___vfprintf_internal_r+0xa88>
    33dc:	d9014f17 	ldw	r4,1340(sp)
    33e0:	d8800504 	addi	r2,sp,20
    33e4:	d8800115 	stw	r2,4(sp)
    33e8:	d8c00604 	addi	r3,sp,24
    33ec:	d8800704 	addi	r2,sp,28
    33f0:	800b883a 	mov	r5,r16
    33f4:	880d883a 	mov	r6,r17
    33f8:	01c000c4 	movi	r7,3
    33fc:	d8c00215 	stw	r3,8(sp)
    3400:	d8800315 	stw	r2,12(sp)
    3404:	dcc00015 	stw	r19,0(sp)
    3408:	9829883a 	mov	r20,r19
    340c:	00038fc0 	call	38fc <_dtoa_r>
    3410:	d8814115 	stw	r2,1284(sp)
    3414:	003f5106 	br	315c <___vfprintf_internal_r+0x1a84>
    3418:	d8c14217 	ldw	r3,1288(sp)
    341c:	d9014317 	ldw	r4,1292(sp)
    3420:	07000b44 	movi	fp,45
    3424:	1821883a 	mov	r16,r3
    3428:	2460003c 	xorhi	r17,r4,32768
    342c:	003f3106 	br	30f4 <___vfprintf_internal_r+0x1a1c>
    3430:	9d000044 	addi	r20,r19,1
    3434:	003f3906 	br	311c <___vfprintf_internal_r+0x1a44>
    3438:	983f251e 	bne	r19,zero,30d0 <___vfprintf_internal_r+0x19f8>
    343c:	04c00044 	movi	r19,1
    3440:	003f2306 	br	30d0 <___vfprintf_internal_r+0x19f8>
    3444:	04c00184 	movi	r19,6
    3448:	003f2106 	br	30d0 <___vfprintf_internal_r+0x19f8>
    344c:	d8014515 	stw	zero,1300(sp)
    3450:	003eee06 	br	300c <___vfprintf_internal_r+0x1934>
    3454:	200f883a 	mov	r7,r4
    3458:	0100370e 	bge	zero,r4,3538 <___vfprintf_internal_r+0x1e60>
    345c:	9800031e 	bne	r19,zero,346c <___vfprintf_internal_r+0x1d94>
    3460:	d9814c17 	ldw	r6,1328(sp)
    3464:	3080004c 	andi	r2,r6,1
    3468:	103fb726 	beq	r2,zero,3348 <___vfprintf_internal_r+0x1c70>
    346c:	20800044 	addi	r2,r4,1
    3470:	98a7883a 	add	r19,r19,r2
    3474:	dcc14515 	stw	r19,1300(sp)
    3478:	980f883a 	mov	r7,r19
    347c:	983f800e 	bge	r19,zero,3280 <___vfprintf_internal_r+0x1ba8>
    3480:	003fb306 	br	3350 <___vfprintf_internal_r+0x1c78>
    3484:	d9814d17 	ldw	r6,1332(sp)
    3488:	31bfff84 	addi	r6,r6,-2
    348c:	d9814d15 	stw	r6,1332(sp)
    3490:	003f4c06 	br	31c4 <___vfprintf_internal_r+0x1aec>
    3494:	0100180e 	bge	zero,r4,34f8 <___vfprintf_internal_r+0x1e20>
    3498:	00800044 	movi	r2,1
    349c:	1485883a 	add	r2,r2,r18
    34a0:	d8814515 	stw	r2,1300(sp)
    34a4:	100f883a 	mov	r7,r2
    34a8:	103f750e 	bge	r2,zero,3280 <___vfprintf_internal_r+0x1ba8>
    34ac:	003fa806 	br	3350 <___vfprintf_internal_r+0x1c78>
    34b0:	80c00c04 	addi	r3,r16,48
    34b4:	00800c04 	movi	r2,48
    34b8:	d8c008c5 	stb	r3,35(sp)
    34bc:	d9800804 	addi	r6,sp,32
    34c0:	d8c00904 	addi	r3,sp,36
    34c4:	d8800885 	stb	r2,34(sp)
    34c8:	003f6506 	br	3260 <___vfprintf_internal_r+0x1b88>
    34cc:	d9014c17 	ldw	r4,1328(sp)
    34d0:	2084703a 	and	r2,r4,r2
    34d4:	103f9c26 	beq	r2,zero,3348 <___vfprintf_internal_r+0x1c70>
    34d8:	003f6606 	br	3274 <___vfprintf_internal_r+0x1b9c>
    34dc:	d9800804 	addi	r6,sp,32
    34e0:	d8c00884 	addi	r3,sp,34
    34e4:	003f5e06 	br	3260 <___vfprintf_internal_r+0x1b88>
    34e8:	00800b44 	movi	r2,45
    34ec:	0121c83a 	sub	r16,zero,r4
    34f0:	d8800845 	stb	r2,33(sp)
    34f4:	003f3d06 	br	31ec <___vfprintf_internal_r+0x1b14>
    34f8:	00800084 	movi	r2,2
    34fc:	1105c83a 	sub	r2,r2,r4
    3500:	003fe606 	br	349c <___vfprintf_internal_r+0x1dc4>
    3504:	d8014515 	stw	zero,1300(sp)
    3508:	dc814715 	stw	r18,1308(sp)
    350c:	003fb106 	br	33d4 <___vfprintf_internal_r+0x1cfc>
    3510:	000d883a 	mov	r6,zero
    3514:	000f883a 	mov	r7,zero
    3518:	8009883a 	mov	r4,r16
    351c:	880b883a 	mov	r5,r17
    3520:	0009f280 	call	9f28 <__nedf2>
    3524:	103f9f26 	beq	r2,zero,33a4 <___vfprintf_internal_r+0x1ccc>
    3528:	00800044 	movi	r2,1
    352c:	1509c83a 	sub	r4,r2,r20
    3530:	d9000515 	stw	r4,20(sp)
    3534:	003f9b06 	br	33a4 <___vfprintf_internal_r+0x1ccc>
    3538:	98000d1e 	bne	r19,zero,3570 <___vfprintf_internal_r+0x1e98>
    353c:	d8c14c17 	ldw	r3,1328(sp)
    3540:	1880004c 	andi	r2,r3,1
    3544:	10000a1e 	bne	r2,zero,3570 <___vfprintf_internal_r+0x1e98>
    3548:	01000044 	movi	r4,1
    354c:	200f883a 	mov	r7,r4
    3550:	d9014515 	stw	r4,1300(sp)
    3554:	003f4a06 	br	3280 <___vfprintf_internal_r+0x1ba8>
    3558:	3cc00017 	ldw	r19,0(r7)
    355c:	39c00104 	addi	r7,r7,4
    3560:	983d0e0e 	bge	r19,zero,299c <___vfprintf_internal_r+0x12c4>
    3564:	b8c00007 	ldb	r3,0(r23)
    3568:	04ffffc4 	movi	r19,-1
    356c:	0038d906 	br	18d4 <___vfprintf_internal_r+0x1fc>
    3570:	9cc00084 	addi	r19,r19,2
    3574:	dcc14515 	stw	r19,1300(sp)
    3578:	980f883a 	mov	r7,r19
    357c:	983f400e 	bge	r19,zero,3280 <___vfprintf_internal_r+0x1ba8>
    3580:	003f7306 	br	3350 <___vfprintf_internal_r+0x1c78>

00003584 <__vfprintf_internal>:
    3584:	00800074 	movhi	r2,1
    3588:	1081b304 	addi	r2,r2,1740
    358c:	2013883a 	mov	r9,r4
    3590:	11000017 	ldw	r4,0(r2)
    3594:	2805883a 	mov	r2,r5
    3598:	300f883a 	mov	r7,r6
    359c:	480b883a 	mov	r5,r9
    35a0:	100d883a 	mov	r6,r2
    35a4:	00016d81 	jmpi	16d8 <___vfprintf_internal_r>

000035a8 <__swsetup_r>:
    35a8:	00800074 	movhi	r2,1
    35ac:	1081b304 	addi	r2,r2,1740
    35b0:	10c00017 	ldw	r3,0(r2)
    35b4:	defffd04 	addi	sp,sp,-12
    35b8:	dc400115 	stw	r17,4(sp)
    35bc:	dc000015 	stw	r16,0(sp)
    35c0:	dfc00215 	stw	ra,8(sp)
    35c4:	2023883a 	mov	r17,r4
    35c8:	2821883a 	mov	r16,r5
    35cc:	18000226 	beq	r3,zero,35d8 <__swsetup_r+0x30>
    35d0:	18800e17 	ldw	r2,56(r3)
    35d4:	10001f26 	beq	r2,zero,3654 <__swsetup_r+0xac>
    35d8:	8100030b 	ldhu	r4,12(r16)
    35dc:	2080020c 	andi	r2,r4,8
    35e0:	10002826 	beq	r2,zero,3684 <__swsetup_r+0xdc>
    35e4:	81400417 	ldw	r5,16(r16)
    35e8:	28001d26 	beq	r5,zero,3660 <__swsetup_r+0xb8>
    35ec:	2080004c 	andi	r2,r4,1
    35f0:	1005003a 	cmpeq	r2,r2,zero
    35f4:	10000b26 	beq	r2,zero,3624 <__swsetup_r+0x7c>
    35f8:	2080008c 	andi	r2,r4,2
    35fc:	10001226 	beq	r2,zero,3648 <__swsetup_r+0xa0>
    3600:	0005883a 	mov	r2,zero
    3604:	80800215 	stw	r2,8(r16)
    3608:	28000b26 	beq	r5,zero,3638 <__swsetup_r+0x90>
    360c:	0005883a 	mov	r2,zero
    3610:	dfc00217 	ldw	ra,8(sp)
    3614:	dc400117 	ldw	r17,4(sp)
    3618:	dc000017 	ldw	r16,0(sp)
    361c:	dec00304 	addi	sp,sp,12
    3620:	f800283a 	ret
    3624:	80800517 	ldw	r2,20(r16)
    3628:	80000215 	stw	zero,8(r16)
    362c:	0085c83a 	sub	r2,zero,r2
    3630:	80800615 	stw	r2,24(r16)
    3634:	283ff51e 	bne	r5,zero,360c <__swsetup_r+0x64>
    3638:	2080200c 	andi	r2,r4,128
    363c:	103ff326 	beq	r2,zero,360c <__swsetup_r+0x64>
    3640:	00bfffc4 	movi	r2,-1
    3644:	003ff206 	br	3610 <__swsetup_r+0x68>
    3648:	80800517 	ldw	r2,20(r16)
    364c:	80800215 	stw	r2,8(r16)
    3650:	003fed06 	br	3608 <__swsetup_r+0x60>
    3654:	1809883a 	mov	r4,r3
    3658:	00051480 	call	5148 <__sinit>
    365c:	003fde06 	br	35d8 <__swsetup_r+0x30>
    3660:	20c0a00c 	andi	r3,r4,640
    3664:	00808004 	movi	r2,512
    3668:	18bfe026 	beq	r3,r2,35ec <__swsetup_r+0x44>
    366c:	8809883a 	mov	r4,r17
    3670:	800b883a 	mov	r5,r16
    3674:	0005ec00 	call	5ec0 <__smakebuf_r>
    3678:	8100030b 	ldhu	r4,12(r16)
    367c:	81400417 	ldw	r5,16(r16)
    3680:	003fda06 	br	35ec <__swsetup_r+0x44>
    3684:	2080040c 	andi	r2,r4,16
    3688:	103fed26 	beq	r2,zero,3640 <__swsetup_r+0x98>
    368c:	2080010c 	andi	r2,r4,4
    3690:	10001226 	beq	r2,zero,36dc <__swsetup_r+0x134>
    3694:	81400c17 	ldw	r5,48(r16)
    3698:	28000526 	beq	r5,zero,36b0 <__swsetup_r+0x108>
    369c:	80801004 	addi	r2,r16,64
    36a0:	28800226 	beq	r5,r2,36ac <__swsetup_r+0x104>
    36a4:	8809883a 	mov	r4,r17
    36a8:	00054cc0 	call	54cc <_free_r>
    36ac:	80000c15 	stw	zero,48(r16)
    36b0:	8080030b 	ldhu	r2,12(r16)
    36b4:	81400417 	ldw	r5,16(r16)
    36b8:	80000115 	stw	zero,4(r16)
    36bc:	10bff6cc 	andi	r2,r2,65499
    36c0:	8080030d 	sth	r2,12(r16)
    36c4:	81400015 	stw	r5,0(r16)
    36c8:	8080030b 	ldhu	r2,12(r16)
    36cc:	10800214 	ori	r2,r2,8
    36d0:	113fffcc 	andi	r4,r2,65535
    36d4:	8080030d 	sth	r2,12(r16)
    36d8:	003fc306 	br	35e8 <__swsetup_r+0x40>
    36dc:	81400417 	ldw	r5,16(r16)
    36e0:	003ff906 	br	36c8 <__swsetup_r+0x120>

000036e4 <quorem>:
    36e4:	28c00417 	ldw	r3,16(r5)
    36e8:	20800417 	ldw	r2,16(r4)
    36ec:	defff604 	addi	sp,sp,-40
    36f0:	ddc00715 	stw	r23,28(sp)
    36f4:	dd400515 	stw	r21,20(sp)
    36f8:	dfc00915 	stw	ra,36(sp)
    36fc:	df000815 	stw	fp,32(sp)
    3700:	dd800615 	stw	r22,24(sp)
    3704:	dd000415 	stw	r20,16(sp)
    3708:	dcc00315 	stw	r19,12(sp)
    370c:	dc800215 	stw	r18,8(sp)
    3710:	dc400115 	stw	r17,4(sp)
    3714:	dc000015 	stw	r16,0(sp)
    3718:	202f883a 	mov	r23,r4
    371c:	282b883a 	mov	r21,r5
    3720:	10c07416 	blt	r2,r3,38f4 <quorem+0x210>
    3724:	1c7fffc4 	addi	r17,r3,-1
    3728:	8c45883a 	add	r2,r17,r17
    372c:	1085883a 	add	r2,r2,r2
    3730:	2c000504 	addi	r16,r5,20
    3734:	24c00504 	addi	r19,r4,20
    3738:	14ed883a 	add	r22,r2,r19
    373c:	80a5883a 	add	r18,r16,r2
    3740:	b7000017 	ldw	fp,0(r22)
    3744:	91400017 	ldw	r5,0(r18)
    3748:	e009883a 	mov	r4,fp
    374c:	29400044 	addi	r5,r5,1
    3750:	00010e80 	call	10e8 <__udivsi3>
    3754:	1029883a 	mov	r20,r2
    3758:	10003c1e 	bne	r2,zero,384c <quorem+0x168>
    375c:	a80b883a 	mov	r5,r21
    3760:	b809883a 	mov	r4,r23
    3764:	0006bec0 	call	6bec <__mcmp>
    3768:	10002b16 	blt	r2,zero,3818 <quorem+0x134>
    376c:	a5000044 	addi	r20,r20,1
    3770:	980f883a 	mov	r7,r19
    3774:	0011883a 	mov	r8,zero
    3778:	0009883a 	mov	r4,zero
    377c:	81400017 	ldw	r5,0(r16)
    3780:	38c00017 	ldw	r3,0(r7)
    3784:	84000104 	addi	r16,r16,4
    3788:	28bfffcc 	andi	r2,r5,65535
    378c:	2085883a 	add	r2,r4,r2
    3790:	11bfffcc 	andi	r6,r2,65535
    3794:	193fffcc 	andi	r4,r3,65535
    3798:	1004d43a 	srli	r2,r2,16
    379c:	280ad43a 	srli	r5,r5,16
    37a0:	2189c83a 	sub	r4,r4,r6
    37a4:	2209883a 	add	r4,r4,r8
    37a8:	1806d43a 	srli	r3,r3,16
    37ac:	288b883a 	add	r5,r5,r2
    37b0:	200dd43a 	srai	r6,r4,16
    37b4:	28bfffcc 	andi	r2,r5,65535
    37b8:	1887c83a 	sub	r3,r3,r2
    37bc:	1987883a 	add	r3,r3,r6
    37c0:	3900000d 	sth	r4,0(r7)
    37c4:	38c0008d 	sth	r3,2(r7)
    37c8:	2808d43a 	srli	r4,r5,16
    37cc:	39c00104 	addi	r7,r7,4
    37d0:	1811d43a 	srai	r8,r3,16
    37d4:	943fe92e 	bgeu	r18,r16,377c <quorem+0x98>
    37d8:	8c45883a 	add	r2,r17,r17
    37dc:	1085883a 	add	r2,r2,r2
    37e0:	9885883a 	add	r2,r19,r2
    37e4:	10c00017 	ldw	r3,0(r2)
    37e8:	18000b1e 	bne	r3,zero,3818 <quorem+0x134>
    37ec:	113fff04 	addi	r4,r2,-4
    37f0:	9900082e 	bgeu	r19,r4,3814 <quorem+0x130>
    37f4:	10bfff17 	ldw	r2,-4(r2)
    37f8:	10000326 	beq	r2,zero,3808 <quorem+0x124>
    37fc:	00000506 	br	3814 <quorem+0x130>
    3800:	20800017 	ldw	r2,0(r4)
    3804:	1000031e 	bne	r2,zero,3814 <quorem+0x130>
    3808:	213fff04 	addi	r4,r4,-4
    380c:	8c7fffc4 	addi	r17,r17,-1
    3810:	993ffb36 	bltu	r19,r4,3800 <quorem+0x11c>
    3814:	bc400415 	stw	r17,16(r23)
    3818:	a005883a 	mov	r2,r20
    381c:	dfc00917 	ldw	ra,36(sp)
    3820:	df000817 	ldw	fp,32(sp)
    3824:	ddc00717 	ldw	r23,28(sp)
    3828:	dd800617 	ldw	r22,24(sp)
    382c:	dd400517 	ldw	r21,20(sp)
    3830:	dd000417 	ldw	r20,16(sp)
    3834:	dcc00317 	ldw	r19,12(sp)
    3838:	dc800217 	ldw	r18,8(sp)
    383c:	dc400117 	ldw	r17,4(sp)
    3840:	dc000017 	ldw	r16,0(sp)
    3844:	dec00a04 	addi	sp,sp,40
    3848:	f800283a 	ret
    384c:	980f883a 	mov	r7,r19
    3850:	8011883a 	mov	r8,r16
    3854:	0013883a 	mov	r9,zero
    3858:	000d883a 	mov	r6,zero
    385c:	40c00017 	ldw	r3,0(r8)
    3860:	39000017 	ldw	r4,0(r7)
    3864:	42000104 	addi	r8,r8,4
    3868:	18bfffcc 	andi	r2,r3,65535
    386c:	a085383a 	mul	r2,r20,r2
    3870:	1806d43a 	srli	r3,r3,16
    3874:	217fffcc 	andi	r5,r4,65535
    3878:	3085883a 	add	r2,r6,r2
    387c:	11bfffcc 	andi	r6,r2,65535
    3880:	a0c7383a 	mul	r3,r20,r3
    3884:	1004d43a 	srli	r2,r2,16
    3888:	298bc83a 	sub	r5,r5,r6
    388c:	2a4b883a 	add	r5,r5,r9
    3890:	2008d43a 	srli	r4,r4,16
    3894:	1887883a 	add	r3,r3,r2
    3898:	280dd43a 	srai	r6,r5,16
    389c:	18bfffcc 	andi	r2,r3,65535
    38a0:	2089c83a 	sub	r4,r4,r2
    38a4:	2189883a 	add	r4,r4,r6
    38a8:	3900008d 	sth	r4,2(r7)
    38ac:	3940000d 	sth	r5,0(r7)
    38b0:	180cd43a 	srli	r6,r3,16
    38b4:	39c00104 	addi	r7,r7,4
    38b8:	2013d43a 	srai	r9,r4,16
    38bc:	923fe72e 	bgeu	r18,r8,385c <quorem+0x178>
    38c0:	e03fa61e 	bne	fp,zero,375c <quorem+0x78>
    38c4:	b0ffff04 	addi	r3,r22,-4
    38c8:	98c0082e 	bgeu	r19,r3,38ec <quorem+0x208>
    38cc:	b0bfff17 	ldw	r2,-4(r22)
    38d0:	10000326 	beq	r2,zero,38e0 <quorem+0x1fc>
    38d4:	00000506 	br	38ec <quorem+0x208>
    38d8:	18800017 	ldw	r2,0(r3)
    38dc:	1000031e 	bne	r2,zero,38ec <quorem+0x208>
    38e0:	18ffff04 	addi	r3,r3,-4
    38e4:	8c7fffc4 	addi	r17,r17,-1
    38e8:	98fffb36 	bltu	r19,r3,38d8 <quorem+0x1f4>
    38ec:	bc400415 	stw	r17,16(r23)
    38f0:	003f9a06 	br	375c <quorem+0x78>
    38f4:	0005883a 	mov	r2,zero
    38f8:	003fc806 	br	381c <quorem+0x138>

000038fc <_dtoa_r>:
    38fc:	22001017 	ldw	r8,64(r4)
    3900:	deffda04 	addi	sp,sp,-152
    3904:	dd402115 	stw	r21,132(sp)
    3908:	dd002015 	stw	r20,128(sp)
    390c:	dc801e15 	stw	r18,120(sp)
    3910:	dc401d15 	stw	r17,116(sp)
    3914:	dfc02515 	stw	ra,148(sp)
    3918:	df002415 	stw	fp,144(sp)
    391c:	ddc02315 	stw	r23,140(sp)
    3920:	dd802215 	stw	r22,136(sp)
    3924:	dcc01f15 	stw	r19,124(sp)
    3928:	dc001c15 	stw	r16,112(sp)
    392c:	d9001615 	stw	r4,88(sp)
    3930:	3023883a 	mov	r17,r6
    3934:	2829883a 	mov	r20,r5
    3938:	d9c01715 	stw	r7,92(sp)
    393c:	dc802817 	ldw	r18,160(sp)
    3940:	302b883a 	mov	r21,r6
    3944:	40000a26 	beq	r8,zero,3970 <_dtoa_r+0x74>
    3948:	20801117 	ldw	r2,68(r4)
    394c:	400b883a 	mov	r5,r8
    3950:	40800115 	stw	r2,4(r8)
    3954:	20c01117 	ldw	r3,68(r4)
    3958:	00800044 	movi	r2,1
    395c:	10c4983a 	sll	r2,r2,r3
    3960:	40800215 	stw	r2,8(r8)
    3964:	0006a900 	call	6a90 <_Bfree>
    3968:	d8c01617 	ldw	r3,88(sp)
    396c:	18001015 	stw	zero,64(r3)
    3970:	8800a316 	blt	r17,zero,3c00 <_dtoa_r+0x304>
    3974:	90000015 	stw	zero,0(r18)
    3978:	a8dffc2c 	andhi	r3,r21,32752
    397c:	009ffc34 	movhi	r2,32752
    3980:	18809126 	beq	r3,r2,3bc8 <_dtoa_r+0x2cc>
    3984:	000d883a 	mov	r6,zero
    3988:	000f883a 	mov	r7,zero
    398c:	a009883a 	mov	r4,r20
    3990:	a80b883a 	mov	r5,r21
    3994:	dd001215 	stw	r20,72(sp)
    3998:	dd401315 	stw	r21,76(sp)
    399c:	0009f280 	call	9f28 <__nedf2>
    39a0:	1000171e 	bne	r2,zero,3a00 <_dtoa_r+0x104>
    39a4:	d9802717 	ldw	r6,156(sp)
    39a8:	00800044 	movi	r2,1
    39ac:	30800015 	stw	r2,0(r6)
    39b0:	d8802917 	ldw	r2,164(sp)
    39b4:	10029b26 	beq	r2,zero,4424 <_dtoa_r+0xb28>
    39b8:	d9002917 	ldw	r4,164(sp)
    39bc:	00800074 	movhi	r2,1
    39c0:	10ba8044 	addi	r2,r2,-5631
    39c4:	10ffffc4 	addi	r3,r2,-1
    39c8:	20800015 	stw	r2,0(r4)
    39cc:	1805883a 	mov	r2,r3
    39d0:	dfc02517 	ldw	ra,148(sp)
    39d4:	df002417 	ldw	fp,144(sp)
    39d8:	ddc02317 	ldw	r23,140(sp)
    39dc:	dd802217 	ldw	r22,136(sp)
    39e0:	dd402117 	ldw	r21,132(sp)
    39e4:	dd002017 	ldw	r20,128(sp)
    39e8:	dcc01f17 	ldw	r19,124(sp)
    39ec:	dc801e17 	ldw	r18,120(sp)
    39f0:	dc401d17 	ldw	r17,116(sp)
    39f4:	dc001c17 	ldw	r16,112(sp)
    39f8:	dec02604 	addi	sp,sp,152
    39fc:	f800283a 	ret
    3a00:	d9001617 	ldw	r4,88(sp)
    3a04:	d9401217 	ldw	r5,72(sp)
    3a08:	d8800104 	addi	r2,sp,4
    3a0c:	a80d883a 	mov	r6,r21
    3a10:	d9c00204 	addi	r7,sp,8
    3a14:	d8800015 	stw	r2,0(sp)
    3a18:	00070cc0 	call	70cc <__d2b>
    3a1c:	d8800715 	stw	r2,28(sp)
    3a20:	a804d53a 	srli	r2,r21,20
    3a24:	1101ffcc 	andi	r4,r2,2047
    3a28:	20008626 	beq	r4,zero,3c44 <_dtoa_r+0x348>
    3a2c:	d8c01217 	ldw	r3,72(sp)
    3a30:	00800434 	movhi	r2,16
    3a34:	10bfffc4 	addi	r2,r2,-1
    3a38:	ddc00117 	ldw	r23,4(sp)
    3a3c:	a884703a 	and	r2,r21,r2
    3a40:	1811883a 	mov	r8,r3
    3a44:	124ffc34 	orhi	r9,r2,16368
    3a48:	25bf0044 	addi	r22,r4,-1023
    3a4c:	d8000815 	stw	zero,32(sp)
    3a50:	0005883a 	mov	r2,zero
    3a54:	00cffe34 	movhi	r3,16376
    3a58:	480b883a 	mov	r5,r9
    3a5c:	4009883a 	mov	r4,r8
    3a60:	180f883a 	mov	r7,r3
    3a64:	100d883a 	mov	r6,r2
    3a68:	00097900 	call	9790 <__subdf3>
    3a6c:	0218dbf4 	movhi	r8,25455
    3a70:	4210d844 	addi	r8,r8,17249
    3a74:	024ff4f4 	movhi	r9,16339
    3a78:	4a61e9c4 	addi	r9,r9,-30809
    3a7c:	480f883a 	mov	r7,r9
    3a80:	400d883a 	mov	r6,r8
    3a84:	180b883a 	mov	r5,r3
    3a88:	1009883a 	mov	r4,r2
    3a8c:	00098840 	call	9884 <__muldf3>
    3a90:	0222d874 	movhi	r8,35681
    3a94:	42322cc4 	addi	r8,r8,-14157
    3a98:	024ff1f4 	movhi	r9,16327
    3a9c:	4a628a04 	addi	r9,r9,-30168
    3aa0:	480f883a 	mov	r7,r9
    3aa4:	400d883a 	mov	r6,r8
    3aa8:	180b883a 	mov	r5,r3
    3aac:	1009883a 	mov	r4,r2
    3ab0:	00098100 	call	9810 <__adddf3>
    3ab4:	b009883a 	mov	r4,r22
    3ab8:	1021883a 	mov	r16,r2
    3abc:	1823883a 	mov	r17,r3
    3ac0:	000a1480 	call	a148 <__floatsidf>
    3ac4:	021427f4 	movhi	r8,20639
    3ac8:	421e7ec4 	addi	r8,r8,31227
    3acc:	024ff4f4 	movhi	r9,16339
    3ad0:	4a5104c4 	addi	r9,r9,17427
    3ad4:	480f883a 	mov	r7,r9
    3ad8:	400d883a 	mov	r6,r8
    3adc:	180b883a 	mov	r5,r3
    3ae0:	1009883a 	mov	r4,r2
    3ae4:	00098840 	call	9884 <__muldf3>
    3ae8:	180f883a 	mov	r7,r3
    3aec:	880b883a 	mov	r5,r17
    3af0:	100d883a 	mov	r6,r2
    3af4:	8009883a 	mov	r4,r16
    3af8:	00098100 	call	9810 <__adddf3>
    3afc:	1009883a 	mov	r4,r2
    3b00:	180b883a 	mov	r5,r3
    3b04:	1021883a 	mov	r16,r2
    3b08:	1823883a 	mov	r17,r3
    3b0c:	000a2400 	call	a240 <__fixdfsi>
    3b10:	000d883a 	mov	r6,zero
    3b14:	000f883a 	mov	r7,zero
    3b18:	8009883a 	mov	r4,r16
    3b1c:	880b883a 	mov	r5,r17
    3b20:	d8800d15 	stw	r2,52(sp)
    3b24:	000a0c00 	call	a0c0 <__ltdf2>
    3b28:	10031716 	blt	r2,zero,4788 <_dtoa_r+0xe8c>
    3b2c:	d8c00d17 	ldw	r3,52(sp)
    3b30:	00800584 	movi	r2,22
    3b34:	10c1482e 	bgeu	r2,r3,4058 <_dtoa_r+0x75c>
    3b38:	01000044 	movi	r4,1
    3b3c:	d9000c15 	stw	r4,48(sp)
    3b40:	bd85c83a 	sub	r2,r23,r22
    3b44:	11bfffc4 	addi	r6,r2,-1
    3b48:	30030b16 	blt	r6,zero,4778 <_dtoa_r+0xe7c>
    3b4c:	d9800a15 	stw	r6,40(sp)
    3b50:	d8001115 	stw	zero,68(sp)
    3b54:	d8c00d17 	ldw	r3,52(sp)
    3b58:	1802ff16 	blt	r3,zero,4758 <_dtoa_r+0xe5c>
    3b5c:	d9000a17 	ldw	r4,40(sp)
    3b60:	d8c00915 	stw	r3,36(sp)
    3b64:	d8001015 	stw	zero,64(sp)
    3b68:	20c9883a 	add	r4,r4,r3
    3b6c:	d9000a15 	stw	r4,40(sp)
    3b70:	d9001717 	ldw	r4,92(sp)
    3b74:	00800244 	movi	r2,9
    3b78:	11004636 	bltu	r2,r4,3c94 <_dtoa_r+0x398>
    3b7c:	00800144 	movi	r2,5
    3b80:	11020416 	blt	r2,r4,4394 <_dtoa_r+0xa98>
    3b84:	04400044 	movi	r17,1
    3b88:	d8c01717 	ldw	r3,92(sp)
    3b8c:	00800144 	movi	r2,5
    3b90:	10c1ed36 	bltu	r2,r3,4348 <_dtoa_r+0xa4c>
    3b94:	18c5883a 	add	r2,r3,r3
    3b98:	1085883a 	add	r2,r2,r2
    3b9c:	00c00034 	movhi	r3,0
    3ba0:	18ceec04 	addi	r3,r3,15280
    3ba4:	10c5883a 	add	r2,r2,r3
    3ba8:	11000017 	ldw	r4,0(r2)
    3bac:	2000683a 	jmp	r4
    3bb0:	00003c9c 	xori	zero,zero,242
    3bb4:	00003c9c 	xori	zero,zero,242
    3bb8:	0000469c 	xori	zero,zero,282
    3bbc:	00004674 	movhi	zero,281
    3bc0:	000046b8 	rdprs	zero,zero,282
    3bc4:	000046c4 	movi	zero,283
    3bc8:	d9002717 	ldw	r4,156(sp)
    3bcc:	0089c3c4 	movi	r2,9999
    3bd0:	20800015 	stw	r2,0(r4)
    3bd4:	a0001026 	beq	r20,zero,3c18 <_dtoa_r+0x31c>
    3bd8:	00c00074 	movhi	r3,1
    3bdc:	18fa8c04 	addi	r3,r3,-5584
    3be0:	d9802917 	ldw	r6,164(sp)
    3be4:	303f7926 	beq	r6,zero,39cc <_dtoa_r+0xd0>
    3be8:	188000c7 	ldb	r2,3(r3)
    3bec:	190000c4 	addi	r4,r3,3
    3bf0:	1000101e 	bne	r2,zero,3c34 <_dtoa_r+0x338>
    3bf4:	d8802917 	ldw	r2,164(sp)
    3bf8:	11000015 	stw	r4,0(r2)
    3bfc:	003f7306 	br	39cc <_dtoa_r+0xd0>
    3c00:	00a00034 	movhi	r2,32768
    3c04:	10bfffc4 	addi	r2,r2,-1
    3c08:	00c00044 	movi	r3,1
    3c0c:	88aa703a 	and	r21,r17,r2
    3c10:	90c00015 	stw	r3,0(r18)
    3c14:	003f5806 	br	3978 <_dtoa_r+0x7c>
    3c18:	00800434 	movhi	r2,16
    3c1c:	10bfffc4 	addi	r2,r2,-1
    3c20:	a884703a 	and	r2,r21,r2
    3c24:	103fec1e 	bne	r2,zero,3bd8 <_dtoa_r+0x2dc>
    3c28:	00c00074 	movhi	r3,1
    3c2c:	18fa8904 	addi	r3,r3,-5596
    3c30:	003feb06 	br	3be0 <_dtoa_r+0x2e4>
    3c34:	d8802917 	ldw	r2,164(sp)
    3c38:	19000204 	addi	r4,r3,8
    3c3c:	11000015 	stw	r4,0(r2)
    3c40:	003f6206 	br	39cc <_dtoa_r+0xd0>
    3c44:	ddc00117 	ldw	r23,4(sp)
    3c48:	d8800217 	ldw	r2,8(sp)
    3c4c:	01000804 	movi	r4,32
    3c50:	b8c10c84 	addi	r3,r23,1074
    3c54:	18a3883a 	add	r17,r3,r2
    3c58:	2441b80e 	bge	r4,r17,433c <_dtoa_r+0xa40>
    3c5c:	00c01004 	movi	r3,64
    3c60:	1c47c83a 	sub	r3,r3,r17
    3c64:	88bff804 	addi	r2,r17,-32
    3c68:	a8c6983a 	sll	r3,r21,r3
    3c6c:	a084d83a 	srl	r2,r20,r2
    3c70:	1888b03a 	or	r4,r3,r2
    3c74:	000a3180 	call	a318 <__floatunsidf>
    3c78:	1011883a 	mov	r8,r2
    3c7c:	00bf8434 	movhi	r2,65040
    3c80:	01000044 	movi	r4,1
    3c84:	10d3883a 	add	r9,r2,r3
    3c88:	8dbef344 	addi	r22,r17,-1075
    3c8c:	d9000815 	stw	r4,32(sp)
    3c90:	003f6f06 	br	3a50 <_dtoa_r+0x154>
    3c94:	d8001715 	stw	zero,92(sp)
    3c98:	04400044 	movi	r17,1
    3c9c:	00bfffc4 	movi	r2,-1
    3ca0:	00c00044 	movi	r3,1
    3ca4:	d8800e15 	stw	r2,56(sp)
    3ca8:	d8002615 	stw	zero,152(sp)
    3cac:	d8800f15 	stw	r2,60(sp)
    3cb0:	d8c00b15 	stw	r3,44(sp)
    3cb4:	1021883a 	mov	r16,r2
    3cb8:	d8801617 	ldw	r2,88(sp)
    3cbc:	10001115 	stw	zero,68(r2)
    3cc0:	d8801617 	ldw	r2,88(sp)
    3cc4:	11401117 	ldw	r5,68(r2)
    3cc8:	1009883a 	mov	r4,r2
    3ccc:	00070100 	call	7010 <_Balloc>
    3cd0:	d8c01617 	ldw	r3,88(sp)
    3cd4:	d8800515 	stw	r2,20(sp)
    3cd8:	18801015 	stw	r2,64(r3)
    3cdc:	00800384 	movi	r2,14
    3ce0:	14006836 	bltu	r2,r16,3e84 <_dtoa_r+0x588>
    3ce4:	8805003a 	cmpeq	r2,r17,zero
    3ce8:	1000661e 	bne	r2,zero,3e84 <_dtoa_r+0x588>
    3cec:	d9000d17 	ldw	r4,52(sp)
    3cf0:	0102300e 	bge	zero,r4,45b4 <_dtoa_r+0xcb8>
    3cf4:	208003cc 	andi	r2,r4,15
    3cf8:	100490fa 	slli	r2,r2,3
    3cfc:	2025d13a 	srai	r18,r4,4
    3d00:	00c00074 	movhi	r3,1
    3d04:	18fa9e04 	addi	r3,r3,-5512
    3d08:	10c5883a 	add	r2,r2,r3
    3d0c:	90c0040c 	andi	r3,r18,16
    3d10:	14000017 	ldw	r16,0(r2)
    3d14:	14400117 	ldw	r17,4(r2)
    3d18:	18036a1e 	bne	r3,zero,4ac4 <_dtoa_r+0x11c8>
    3d1c:	05800084 	movi	r22,2
    3d20:	90001026 	beq	r18,zero,3d64 <_dtoa_r+0x468>
    3d24:	04c00074 	movhi	r19,1
    3d28:	9cfad004 	addi	r19,r19,-5312
    3d2c:	9080004c 	andi	r2,r18,1
    3d30:	1005003a 	cmpeq	r2,r2,zero
    3d34:	1000081e 	bne	r2,zero,3d58 <_dtoa_r+0x45c>
    3d38:	99800017 	ldw	r6,0(r19)
    3d3c:	99c00117 	ldw	r7,4(r19)
    3d40:	880b883a 	mov	r5,r17
    3d44:	8009883a 	mov	r4,r16
    3d48:	00098840 	call	9884 <__muldf3>
    3d4c:	1021883a 	mov	r16,r2
    3d50:	b5800044 	addi	r22,r22,1
    3d54:	1823883a 	mov	r17,r3
    3d58:	9025d07a 	srai	r18,r18,1
    3d5c:	9cc00204 	addi	r19,r19,8
    3d60:	903ff21e 	bne	r18,zero,3d2c <_dtoa_r+0x430>
    3d64:	a80b883a 	mov	r5,r21
    3d68:	a009883a 	mov	r4,r20
    3d6c:	880f883a 	mov	r7,r17
    3d70:	800d883a 	mov	r6,r16
    3d74:	0009c480 	call	9c48 <__divdf3>
    3d78:	1029883a 	mov	r20,r2
    3d7c:	182b883a 	mov	r21,r3
    3d80:	d8c00c17 	ldw	r3,48(sp)
    3d84:	1805003a 	cmpeq	r2,r3,zero
    3d88:	1000081e 	bne	r2,zero,3dac <_dtoa_r+0x4b0>
    3d8c:	0005883a 	mov	r2,zero
    3d90:	00cffc34 	movhi	r3,16368
    3d94:	180f883a 	mov	r7,r3
    3d98:	a009883a 	mov	r4,r20
    3d9c:	a80b883a 	mov	r5,r21
    3da0:	100d883a 	mov	r6,r2
    3da4:	000a0c00 	call	a0c0 <__ltdf2>
    3da8:	1003fe16 	blt	r2,zero,4da4 <_dtoa_r+0x14a8>
    3dac:	b009883a 	mov	r4,r22
    3db0:	000a1480 	call	a148 <__floatsidf>
    3db4:	180b883a 	mov	r5,r3
    3db8:	1009883a 	mov	r4,r2
    3dbc:	a00d883a 	mov	r6,r20
    3dc0:	a80f883a 	mov	r7,r21
    3dc4:	00098840 	call	9884 <__muldf3>
    3dc8:	0011883a 	mov	r8,zero
    3dcc:	02500734 	movhi	r9,16412
    3dd0:	1009883a 	mov	r4,r2
    3dd4:	180b883a 	mov	r5,r3
    3dd8:	480f883a 	mov	r7,r9
    3ddc:	400d883a 	mov	r6,r8
    3de0:	00098100 	call	9810 <__adddf3>
    3de4:	d9000f17 	ldw	r4,60(sp)
    3de8:	102d883a 	mov	r22,r2
    3dec:	00bf3034 	movhi	r2,64704
    3df0:	18b9883a 	add	fp,r3,r2
    3df4:	e02f883a 	mov	r23,fp
    3df8:	20028f1e 	bne	r4,zero,4838 <_dtoa_r+0xf3c>
    3dfc:	0005883a 	mov	r2,zero
    3e00:	00d00534 	movhi	r3,16404
    3e04:	a009883a 	mov	r4,r20
    3e08:	a80b883a 	mov	r5,r21
    3e0c:	180f883a 	mov	r7,r3
    3e10:	100d883a 	mov	r6,r2
    3e14:	00097900 	call	9790 <__subdf3>
    3e18:	1009883a 	mov	r4,r2
    3e1c:	e00f883a 	mov	r7,fp
    3e20:	180b883a 	mov	r5,r3
    3e24:	b00d883a 	mov	r6,r22
    3e28:	1025883a 	mov	r18,r2
    3e2c:	1827883a 	mov	r19,r3
    3e30:	0009fb00 	call	9fb0 <__gtdf2>
    3e34:	00834f16 	blt	zero,r2,4b74 <_dtoa_r+0x1278>
    3e38:	e0e0003c 	xorhi	r3,fp,32768
    3e3c:	9009883a 	mov	r4,r18
    3e40:	980b883a 	mov	r5,r19
    3e44:	180f883a 	mov	r7,r3
    3e48:	b00d883a 	mov	r6,r22
    3e4c:	000a0c00 	call	a0c0 <__ltdf2>
    3e50:	1000080e 	bge	r2,zero,3e74 <_dtoa_r+0x578>
    3e54:	0027883a 	mov	r19,zero
    3e58:	0025883a 	mov	r18,zero
    3e5c:	d8802617 	ldw	r2,152(sp)
    3e60:	df000517 	ldw	fp,20(sp)
    3e64:	d8000615 	stw	zero,24(sp)
    3e68:	0084303a 	nor	r2,zero,r2
    3e6c:	d8800d15 	stw	r2,52(sp)
    3e70:	00019b06 	br	44e0 <_dtoa_r+0xbe4>
    3e74:	d9801217 	ldw	r6,72(sp)
    3e78:	d8801317 	ldw	r2,76(sp)
    3e7c:	3029883a 	mov	r20,r6
    3e80:	102b883a 	mov	r21,r2
    3e84:	d8c00217 	ldw	r3,8(sp)
    3e88:	18008516 	blt	r3,zero,40a0 <_dtoa_r+0x7a4>
    3e8c:	d9000d17 	ldw	r4,52(sp)
    3e90:	00800384 	movi	r2,14
    3e94:	11008216 	blt	r2,r4,40a0 <_dtoa_r+0x7a4>
    3e98:	200490fa 	slli	r2,r4,3
    3e9c:	d9802617 	ldw	r6,152(sp)
    3ea0:	00c00074 	movhi	r3,1
    3ea4:	18fa9e04 	addi	r3,r3,-5512
    3ea8:	10c5883a 	add	r2,r2,r3
    3eac:	14800017 	ldw	r18,0(r2)
    3eb0:	14c00117 	ldw	r19,4(r2)
    3eb4:	30031e16 	blt	r6,zero,4b30 <_dtoa_r+0x1234>
    3eb8:	d9000517 	ldw	r4,20(sp)
    3ebc:	d8c00f17 	ldw	r3,60(sp)
    3ec0:	a823883a 	mov	r17,r21
    3ec4:	a021883a 	mov	r16,r20
    3ec8:	192b883a 	add	r21,r3,r4
    3ecc:	2039883a 	mov	fp,r4
    3ed0:	00000f06 	br	3f10 <_dtoa_r+0x614>
    3ed4:	0005883a 	mov	r2,zero
    3ed8:	00d00934 	movhi	r3,16420
    3edc:	5009883a 	mov	r4,r10
    3ee0:	580b883a 	mov	r5,r11
    3ee4:	180f883a 	mov	r7,r3
    3ee8:	100d883a 	mov	r6,r2
    3eec:	00098840 	call	9884 <__muldf3>
    3ef0:	180b883a 	mov	r5,r3
    3ef4:	000d883a 	mov	r6,zero
    3ef8:	000f883a 	mov	r7,zero
    3efc:	1009883a 	mov	r4,r2
    3f00:	1021883a 	mov	r16,r2
    3f04:	1823883a 	mov	r17,r3
    3f08:	0009f280 	call	9f28 <__nedf2>
    3f0c:	10004526 	beq	r2,zero,4024 <_dtoa_r+0x728>
    3f10:	900d883a 	mov	r6,r18
    3f14:	980f883a 	mov	r7,r19
    3f18:	8009883a 	mov	r4,r16
    3f1c:	880b883a 	mov	r5,r17
    3f20:	0009c480 	call	9c48 <__divdf3>
    3f24:	180b883a 	mov	r5,r3
    3f28:	1009883a 	mov	r4,r2
    3f2c:	000a2400 	call	a240 <__fixdfsi>
    3f30:	1009883a 	mov	r4,r2
    3f34:	1029883a 	mov	r20,r2
    3f38:	000a1480 	call	a148 <__floatsidf>
    3f3c:	180f883a 	mov	r7,r3
    3f40:	9009883a 	mov	r4,r18
    3f44:	980b883a 	mov	r5,r19
    3f48:	100d883a 	mov	r6,r2
    3f4c:	00098840 	call	9884 <__muldf3>
    3f50:	180f883a 	mov	r7,r3
    3f54:	880b883a 	mov	r5,r17
    3f58:	8009883a 	mov	r4,r16
    3f5c:	100d883a 	mov	r6,r2
    3f60:	00097900 	call	9790 <__subdf3>
    3f64:	1015883a 	mov	r10,r2
    3f68:	a0800c04 	addi	r2,r20,48
    3f6c:	e0800005 	stb	r2,0(fp)
    3f70:	e7000044 	addi	fp,fp,1
    3f74:	1817883a 	mov	r11,r3
    3f78:	e57fd61e 	bne	fp,r21,3ed4 <_dtoa_r+0x5d8>
    3f7c:	500d883a 	mov	r6,r10
    3f80:	180f883a 	mov	r7,r3
    3f84:	5009883a 	mov	r4,r10
    3f88:	180b883a 	mov	r5,r3
    3f8c:	00098100 	call	9810 <__adddf3>
    3f90:	100d883a 	mov	r6,r2
    3f94:	9009883a 	mov	r4,r18
    3f98:	980b883a 	mov	r5,r19
    3f9c:	180f883a 	mov	r7,r3
    3fa0:	1021883a 	mov	r16,r2
    3fa4:	1823883a 	mov	r17,r3
    3fa8:	000a0c00 	call	a0c0 <__ltdf2>
    3fac:	10000816 	blt	r2,zero,3fd0 <_dtoa_r+0x6d4>
    3fb0:	980b883a 	mov	r5,r19
    3fb4:	800d883a 	mov	r6,r16
    3fb8:	880f883a 	mov	r7,r17
    3fbc:	9009883a 	mov	r4,r18
    3fc0:	0009ea00 	call	9ea0 <__eqdf2>
    3fc4:	1000171e 	bne	r2,zero,4024 <_dtoa_r+0x728>
    3fc8:	a080004c 	andi	r2,r20,1
    3fcc:	10001526 	beq	r2,zero,4024 <_dtoa_r+0x728>
    3fd0:	d8800d17 	ldw	r2,52(sp)
    3fd4:	d8800415 	stw	r2,16(sp)
    3fd8:	e009883a 	mov	r4,fp
    3fdc:	213fffc4 	addi	r4,r4,-1
    3fe0:	20c00007 	ldb	r3,0(r4)
    3fe4:	00800e44 	movi	r2,57
    3fe8:	1880081e 	bne	r3,r2,400c <_dtoa_r+0x710>
    3fec:	d8800517 	ldw	r2,20(sp)
    3ff0:	113ffa1e 	bne	r2,r4,3fdc <_dtoa_r+0x6e0>
    3ff4:	d8c00417 	ldw	r3,16(sp)
    3ff8:	d9800517 	ldw	r6,20(sp)
    3ffc:	00800c04 	movi	r2,48
    4000:	18c00044 	addi	r3,r3,1
    4004:	d8c00415 	stw	r3,16(sp)
    4008:	30800005 	stb	r2,0(r6)
    400c:	20800003 	ldbu	r2,0(r4)
    4010:	d8c00417 	ldw	r3,16(sp)
    4014:	27000044 	addi	fp,r4,1
    4018:	10800044 	addi	r2,r2,1
    401c:	d8c00d15 	stw	r3,52(sp)
    4020:	20800005 	stb	r2,0(r4)
    4024:	d9001617 	ldw	r4,88(sp)
    4028:	d9400717 	ldw	r5,28(sp)
    402c:	0006a900 	call	6a90 <_Bfree>
    4030:	e0000005 	stb	zero,0(fp)
    4034:	d9800d17 	ldw	r6,52(sp)
    4038:	d8c02717 	ldw	r3,156(sp)
    403c:	d9002917 	ldw	r4,164(sp)
    4040:	30800044 	addi	r2,r6,1
    4044:	18800015 	stw	r2,0(r3)
    4048:	20029c26 	beq	r4,zero,4abc <_dtoa_r+0x11c0>
    404c:	d8c00517 	ldw	r3,20(sp)
    4050:	27000015 	stw	fp,0(r4)
    4054:	003e5d06 	br	39cc <_dtoa_r+0xd0>
    4058:	d9800d17 	ldw	r6,52(sp)
    405c:	00c00074 	movhi	r3,1
    4060:	18fa9e04 	addi	r3,r3,-5512
    4064:	d9001217 	ldw	r4,72(sp)
    4068:	300490fa 	slli	r2,r6,3
    406c:	d9401317 	ldw	r5,76(sp)
    4070:	10c5883a 	add	r2,r2,r3
    4074:	12000017 	ldw	r8,0(r2)
    4078:	12400117 	ldw	r9,4(r2)
    407c:	400d883a 	mov	r6,r8
    4080:	480f883a 	mov	r7,r9
    4084:	000a0c00 	call	a0c0 <__ltdf2>
    4088:	1000030e 	bge	r2,zero,4098 <_dtoa_r+0x79c>
    408c:	d8800d17 	ldw	r2,52(sp)
    4090:	10bfffc4 	addi	r2,r2,-1
    4094:	d8800d15 	stw	r2,52(sp)
    4098:	d8000c15 	stw	zero,48(sp)
    409c:	003ea806 	br	3b40 <_dtoa_r+0x244>
    40a0:	d9000b17 	ldw	r4,44(sp)
    40a4:	202cc03a 	cmpne	r22,r4,zero
    40a8:	b000c71e 	bne	r22,zero,43c8 <_dtoa_r+0xacc>
    40ac:	dc001117 	ldw	r16,68(sp)
    40b0:	dc801017 	ldw	r18,64(sp)
    40b4:	0027883a 	mov	r19,zero
    40b8:	04000b0e 	bge	zero,r16,40e8 <_dtoa_r+0x7ec>
    40bc:	d8c00a17 	ldw	r3,40(sp)
    40c0:	00c0090e 	bge	zero,r3,40e8 <_dtoa_r+0x7ec>
    40c4:	8005883a 	mov	r2,r16
    40c8:	1c011316 	blt	r3,r16,4518 <_dtoa_r+0xc1c>
    40cc:	d9000a17 	ldw	r4,40(sp)
    40d0:	d9801117 	ldw	r6,68(sp)
    40d4:	80a1c83a 	sub	r16,r16,r2
    40d8:	2089c83a 	sub	r4,r4,r2
    40dc:	308dc83a 	sub	r6,r6,r2
    40e0:	d9000a15 	stw	r4,40(sp)
    40e4:	d9801115 	stw	r6,68(sp)
    40e8:	d8801017 	ldw	r2,64(sp)
    40ec:	0080150e 	bge	zero,r2,4144 <_dtoa_r+0x848>
    40f0:	d8c00b17 	ldw	r3,44(sp)
    40f4:	1805003a 	cmpeq	r2,r3,zero
    40f8:	1001c91e 	bne	r2,zero,4820 <_dtoa_r+0xf24>
    40fc:	04800e0e 	bge	zero,r18,4138 <_dtoa_r+0x83c>
    4100:	d9001617 	ldw	r4,88(sp)
    4104:	980b883a 	mov	r5,r19
    4108:	900d883a 	mov	r6,r18
    410c:	00078440 	call	7844 <__pow5mult>
    4110:	d9001617 	ldw	r4,88(sp)
    4114:	d9800717 	ldw	r6,28(sp)
    4118:	100b883a 	mov	r5,r2
    411c:	1027883a 	mov	r19,r2
    4120:	00075200 	call	7520 <__multiply>
    4124:	d9001617 	ldw	r4,88(sp)
    4128:	d9400717 	ldw	r5,28(sp)
    412c:	1023883a 	mov	r17,r2
    4130:	0006a900 	call	6a90 <_Bfree>
    4134:	dc400715 	stw	r17,28(sp)
    4138:	d9001017 	ldw	r4,64(sp)
    413c:	248dc83a 	sub	r6,r4,r18
    4140:	30010e1e 	bne	r6,zero,457c <_dtoa_r+0xc80>
    4144:	d9001617 	ldw	r4,88(sp)
    4148:	04400044 	movi	r17,1
    414c:	880b883a 	mov	r5,r17
    4150:	00077080 	call	7708 <__i2b>
    4154:	d9800917 	ldw	r6,36(sp)
    4158:	1025883a 	mov	r18,r2
    415c:	0180040e 	bge	zero,r6,4170 <_dtoa_r+0x874>
    4160:	d9001617 	ldw	r4,88(sp)
    4164:	100b883a 	mov	r5,r2
    4168:	00078440 	call	7844 <__pow5mult>
    416c:	1025883a 	mov	r18,r2
    4170:	d8801717 	ldw	r2,92(sp)
    4174:	8880f30e 	bge	r17,r2,4544 <_dtoa_r+0xc48>
    4178:	0023883a 	mov	r17,zero
    417c:	d9800917 	ldw	r6,36(sp)
    4180:	30019e1e 	bne	r6,zero,47fc <_dtoa_r+0xf00>
    4184:	00c00044 	movi	r3,1
    4188:	d9000a17 	ldw	r4,40(sp)
    418c:	20c5883a 	add	r2,r4,r3
    4190:	10c007cc 	andi	r3,r2,31
    4194:	1800841e 	bne	r3,zero,43a8 <_dtoa_r+0xaac>
    4198:	00800704 	movi	r2,28
    419c:	d9000a17 	ldw	r4,40(sp)
    41a0:	d9801117 	ldw	r6,68(sp)
    41a4:	80a1883a 	add	r16,r16,r2
    41a8:	2089883a 	add	r4,r4,r2
    41ac:	308d883a 	add	r6,r6,r2
    41b0:	d9000a15 	stw	r4,40(sp)
    41b4:	d9801115 	stw	r6,68(sp)
    41b8:	d8801117 	ldw	r2,68(sp)
    41bc:	0080050e 	bge	zero,r2,41d4 <_dtoa_r+0x8d8>
    41c0:	d9400717 	ldw	r5,28(sp)
    41c4:	d9001617 	ldw	r4,88(sp)
    41c8:	100d883a 	mov	r6,r2
    41cc:	00073d40 	call	73d4 <__lshift>
    41d0:	d8800715 	stw	r2,28(sp)
    41d4:	d8c00a17 	ldw	r3,40(sp)
    41d8:	00c0050e 	bge	zero,r3,41f0 <_dtoa_r+0x8f4>
    41dc:	d9001617 	ldw	r4,88(sp)
    41e0:	900b883a 	mov	r5,r18
    41e4:	180d883a 	mov	r6,r3
    41e8:	00073d40 	call	73d4 <__lshift>
    41ec:	1025883a 	mov	r18,r2
    41f0:	d9000c17 	ldw	r4,48(sp)
    41f4:	2005003a 	cmpeq	r2,r4,zero
    41f8:	10016f26 	beq	r2,zero,47b8 <_dtoa_r+0xebc>
    41fc:	d9000f17 	ldw	r4,60(sp)
    4200:	0102170e 	bge	zero,r4,4a60 <_dtoa_r+0x1164>
    4204:	d9800b17 	ldw	r6,44(sp)
    4208:	3005003a 	cmpeq	r2,r6,zero
    420c:	1000881e 	bne	r2,zero,4430 <_dtoa_r+0xb34>
    4210:	0400050e 	bge	zero,r16,4228 <_dtoa_r+0x92c>
    4214:	d9001617 	ldw	r4,88(sp)
    4218:	980b883a 	mov	r5,r19
    421c:	800d883a 	mov	r6,r16
    4220:	00073d40 	call	73d4 <__lshift>
    4224:	1027883a 	mov	r19,r2
    4228:	8804c03a 	cmpne	r2,r17,zero
    422c:	1002541e 	bne	r2,zero,4b80 <_dtoa_r+0x1284>
    4230:	980b883a 	mov	r5,r19
    4234:	dd800517 	ldw	r22,20(sp)
    4238:	dcc00615 	stw	r19,24(sp)
    423c:	a700004c 	andi	fp,r20,1
    4240:	2827883a 	mov	r19,r5
    4244:	d9000717 	ldw	r4,28(sp)
    4248:	900b883a 	mov	r5,r18
    424c:	00036e40 	call	36e4 <quorem>
    4250:	d9000717 	ldw	r4,28(sp)
    4254:	d9400617 	ldw	r5,24(sp)
    4258:	1023883a 	mov	r17,r2
    425c:	8dc00c04 	addi	r23,r17,48
    4260:	0006bec0 	call	6bec <__mcmp>
    4264:	d9001617 	ldw	r4,88(sp)
    4268:	900b883a 	mov	r5,r18
    426c:	980d883a 	mov	r6,r19
    4270:	1029883a 	mov	r20,r2
    4274:	00072480 	call	7248 <__mdiff>
    4278:	102b883a 	mov	r21,r2
    427c:	10800317 	ldw	r2,12(r2)
    4280:	1001281e 	bne	r2,zero,4724 <_dtoa_r+0xe28>
    4284:	d9000717 	ldw	r4,28(sp)
    4288:	a80b883a 	mov	r5,r21
    428c:	0006bec0 	call	6bec <__mcmp>
    4290:	d9001617 	ldw	r4,88(sp)
    4294:	1021883a 	mov	r16,r2
    4298:	a80b883a 	mov	r5,r21
    429c:	0006a900 	call	6a90 <_Bfree>
    42a0:	8000041e 	bne	r16,zero,42b4 <_dtoa_r+0x9b8>
    42a4:	d8801717 	ldw	r2,92(sp)
    42a8:	1000021e 	bne	r2,zero,42b4 <_dtoa_r+0x9b8>
    42ac:	e004c03a 	cmpne	r2,fp,zero
    42b0:	10011726 	beq	r2,zero,4710 <_dtoa_r+0xe14>
    42b4:	a0010616 	blt	r20,zero,46d0 <_dtoa_r+0xdd4>
    42b8:	a000041e 	bne	r20,zero,42cc <_dtoa_r+0x9d0>
    42bc:	d8c01717 	ldw	r3,92(sp)
    42c0:	1800021e 	bne	r3,zero,42cc <_dtoa_r+0x9d0>
    42c4:	e004c03a 	cmpne	r2,fp,zero
    42c8:	10010126 	beq	r2,zero,46d0 <_dtoa_r+0xdd4>
    42cc:	04023d16 	blt	zero,r16,4bc4 <_dtoa_r+0x12c8>
    42d0:	b5c00005 	stb	r23,0(r22)
    42d4:	d9800517 	ldw	r6,20(sp)
    42d8:	d9000f17 	ldw	r4,60(sp)
    42dc:	b5800044 	addi	r22,r22,1
    42e0:	3105883a 	add	r2,r6,r4
    42e4:	b0806526 	beq	r22,r2,447c <_dtoa_r+0xb80>
    42e8:	d9400717 	ldw	r5,28(sp)
    42ec:	d9001617 	ldw	r4,88(sp)
    42f0:	01800284 	movi	r6,10
    42f4:	000f883a 	mov	r7,zero
    42f8:	00077440 	call	7744 <__multadd>
    42fc:	d8800715 	stw	r2,28(sp)
    4300:	d8800617 	ldw	r2,24(sp)
    4304:	14c10c26 	beq	r2,r19,4738 <_dtoa_r+0xe3c>
    4308:	d9400617 	ldw	r5,24(sp)
    430c:	d9001617 	ldw	r4,88(sp)
    4310:	01800284 	movi	r6,10
    4314:	000f883a 	mov	r7,zero
    4318:	00077440 	call	7744 <__multadd>
    431c:	d9001617 	ldw	r4,88(sp)
    4320:	980b883a 	mov	r5,r19
    4324:	01800284 	movi	r6,10
    4328:	000f883a 	mov	r7,zero
    432c:	d8800615 	stw	r2,24(sp)
    4330:	00077440 	call	7744 <__multadd>
    4334:	1027883a 	mov	r19,r2
    4338:	003fc206 	br	4244 <_dtoa_r+0x948>
    433c:	2445c83a 	sub	r2,r4,r17
    4340:	a088983a 	sll	r4,r20,r2
    4344:	003e4b06 	br	3c74 <_dtoa_r+0x378>
    4348:	01bfffc4 	movi	r6,-1
    434c:	00800044 	movi	r2,1
    4350:	d9800e15 	stw	r6,56(sp)
    4354:	d9800f15 	stw	r6,60(sp)
    4358:	d8800b15 	stw	r2,44(sp)
    435c:	d8c01617 	ldw	r3,88(sp)
    4360:	008005c4 	movi	r2,23
    4364:	18001115 	stw	zero,68(r3)
    4368:	1580082e 	bgeu	r2,r22,438c <_dtoa_r+0xa90>
    436c:	00c00104 	movi	r3,4
    4370:	0009883a 	mov	r4,zero
    4374:	18c7883a 	add	r3,r3,r3
    4378:	18800504 	addi	r2,r3,20
    437c:	21000044 	addi	r4,r4,1
    4380:	b0bffc2e 	bgeu	r22,r2,4374 <_dtoa_r+0xa78>
    4384:	d9801617 	ldw	r6,88(sp)
    4388:	31001115 	stw	r4,68(r6)
    438c:	dc000f17 	ldw	r16,60(sp)
    4390:	003e4b06 	br	3cc0 <_dtoa_r+0x3c4>
    4394:	d9801717 	ldw	r6,92(sp)
    4398:	0023883a 	mov	r17,zero
    439c:	31bfff04 	addi	r6,r6,-4
    43a0:	d9801715 	stw	r6,92(sp)
    43a4:	003df806 	br	3b88 <_dtoa_r+0x28c>
    43a8:	00800804 	movi	r2,32
    43ac:	10c9c83a 	sub	r4,r2,r3
    43b0:	00c00104 	movi	r3,4
    43b4:	19005a16 	blt	r3,r4,4520 <_dtoa_r+0xc24>
    43b8:	008000c4 	movi	r2,3
    43bc:	113f7e16 	blt	r2,r4,41b8 <_dtoa_r+0x8bc>
    43c0:	20800704 	addi	r2,r4,28
    43c4:	003f7506 	br	419c <_dtoa_r+0x8a0>
    43c8:	d9801717 	ldw	r6,92(sp)
    43cc:	00800044 	movi	r2,1
    43d0:	1180a10e 	bge	r2,r6,4658 <_dtoa_r+0xd5c>
    43d4:	d9800f17 	ldw	r6,60(sp)
    43d8:	d8c01017 	ldw	r3,64(sp)
    43dc:	30bfffc4 	addi	r2,r6,-1
    43e0:	1881c616 	blt	r3,r2,4afc <_dtoa_r+0x1200>
    43e4:	18a5c83a 	sub	r18,r3,r2
    43e8:	d8800f17 	ldw	r2,60(sp)
    43ec:	10026216 	blt	r2,zero,4d78 <_dtoa_r+0x147c>
    43f0:	dc001117 	ldw	r16,68(sp)
    43f4:	1007883a 	mov	r3,r2
    43f8:	d9800a17 	ldw	r6,40(sp)
    43fc:	d8801117 	ldw	r2,68(sp)
    4400:	d9001617 	ldw	r4,88(sp)
    4404:	30cd883a 	add	r6,r6,r3
    4408:	10c5883a 	add	r2,r2,r3
    440c:	01400044 	movi	r5,1
    4410:	d9800a15 	stw	r6,40(sp)
    4414:	d8801115 	stw	r2,68(sp)
    4418:	00077080 	call	7708 <__i2b>
    441c:	1027883a 	mov	r19,r2
    4420:	003f2506 	br	40b8 <_dtoa_r+0x7bc>
    4424:	00c00074 	movhi	r3,1
    4428:	18fa8004 	addi	r3,r3,-5632
    442c:	003d6706 	br	39cc <_dtoa_r+0xd0>
    4430:	dd800517 	ldw	r22,20(sp)
    4434:	04000044 	movi	r16,1
    4438:	00000706 	br	4458 <_dtoa_r+0xb5c>
    443c:	d9400717 	ldw	r5,28(sp)
    4440:	d9001617 	ldw	r4,88(sp)
    4444:	01800284 	movi	r6,10
    4448:	000f883a 	mov	r7,zero
    444c:	00077440 	call	7744 <__multadd>
    4450:	d8800715 	stw	r2,28(sp)
    4454:	84000044 	addi	r16,r16,1
    4458:	d9000717 	ldw	r4,28(sp)
    445c:	900b883a 	mov	r5,r18
    4460:	00036e40 	call	36e4 <quorem>
    4464:	15c00c04 	addi	r23,r2,48
    4468:	b5c00005 	stb	r23,0(r22)
    446c:	d8c00f17 	ldw	r3,60(sp)
    4470:	b5800044 	addi	r22,r22,1
    4474:	80fff116 	blt	r16,r3,443c <_dtoa_r+0xb40>
    4478:	d8000615 	stw	zero,24(sp)
    447c:	d9400717 	ldw	r5,28(sp)
    4480:	d9001617 	ldw	r4,88(sp)
    4484:	01800044 	movi	r6,1
    4488:	00073d40 	call	73d4 <__lshift>
    448c:	1009883a 	mov	r4,r2
    4490:	900b883a 	mov	r5,r18
    4494:	d8800715 	stw	r2,28(sp)
    4498:	0006bec0 	call	6bec <__mcmp>
    449c:	00803c0e 	bge	zero,r2,4590 <_dtoa_r+0xc94>
    44a0:	b009883a 	mov	r4,r22
    44a4:	213fffc4 	addi	r4,r4,-1
    44a8:	21400003 	ldbu	r5,0(r4)
    44ac:	00800e44 	movi	r2,57
    44b0:	28c03fcc 	andi	r3,r5,255
    44b4:	18c0201c 	xori	r3,r3,128
    44b8:	18ffe004 	addi	r3,r3,-128
    44bc:	1881981e 	bne	r3,r2,4b20 <_dtoa_r+0x1224>
    44c0:	d9800517 	ldw	r6,20(sp)
    44c4:	21bff71e 	bne	r4,r6,44a4 <_dtoa_r+0xba8>
    44c8:	d8800d17 	ldw	r2,52(sp)
    44cc:	37000044 	addi	fp,r6,1
    44d0:	10800044 	addi	r2,r2,1
    44d4:	d8800d15 	stw	r2,52(sp)
    44d8:	00800c44 	movi	r2,49
    44dc:	30800005 	stb	r2,0(r6)
    44e0:	d9001617 	ldw	r4,88(sp)
    44e4:	900b883a 	mov	r5,r18
    44e8:	0006a900 	call	6a90 <_Bfree>
    44ec:	983ecd26 	beq	r19,zero,4024 <_dtoa_r+0x728>
    44f0:	d8c00617 	ldw	r3,24(sp)
    44f4:	18000426 	beq	r3,zero,4508 <_dtoa_r+0xc0c>
    44f8:	1cc00326 	beq	r3,r19,4508 <_dtoa_r+0xc0c>
    44fc:	d9001617 	ldw	r4,88(sp)
    4500:	180b883a 	mov	r5,r3
    4504:	0006a900 	call	6a90 <_Bfree>
    4508:	d9001617 	ldw	r4,88(sp)
    450c:	980b883a 	mov	r5,r19
    4510:	0006a900 	call	6a90 <_Bfree>
    4514:	003ec306 	br	4024 <_dtoa_r+0x728>
    4518:	1805883a 	mov	r2,r3
    451c:	003eeb06 	br	40cc <_dtoa_r+0x7d0>
    4520:	d9800a17 	ldw	r6,40(sp)
    4524:	d8c01117 	ldw	r3,68(sp)
    4528:	20bfff04 	addi	r2,r4,-4
    452c:	308d883a 	add	r6,r6,r2
    4530:	1887883a 	add	r3,r3,r2
    4534:	80a1883a 	add	r16,r16,r2
    4538:	d9800a15 	stw	r6,40(sp)
    453c:	d8c01115 	stw	r3,68(sp)
    4540:	003f1d06 	br	41b8 <_dtoa_r+0x8bc>
    4544:	a03f0c1e 	bne	r20,zero,4178 <_dtoa_r+0x87c>
    4548:	00800434 	movhi	r2,16
    454c:	10bfffc4 	addi	r2,r2,-1
    4550:	a884703a 	and	r2,r21,r2
    4554:	103f081e 	bne	r2,zero,4178 <_dtoa_r+0x87c>
    4558:	a89ffc2c 	andhi	r2,r21,32752
    455c:	103f0626 	beq	r2,zero,4178 <_dtoa_r+0x87c>
    4560:	d8c01117 	ldw	r3,68(sp)
    4564:	d9000a17 	ldw	r4,40(sp)
    4568:	18c00044 	addi	r3,r3,1
    456c:	21000044 	addi	r4,r4,1
    4570:	d8c01115 	stw	r3,68(sp)
    4574:	d9000a15 	stw	r4,40(sp)
    4578:	003f0006 	br	417c <_dtoa_r+0x880>
    457c:	d9400717 	ldw	r5,28(sp)
    4580:	d9001617 	ldw	r4,88(sp)
    4584:	00078440 	call	7844 <__pow5mult>
    4588:	d8800715 	stw	r2,28(sp)
    458c:	003eed06 	br	4144 <_dtoa_r+0x848>
    4590:	1000021e 	bne	r2,zero,459c <_dtoa_r+0xca0>
    4594:	b880004c 	andi	r2,r23,1
    4598:	103fc11e 	bne	r2,zero,44a0 <_dtoa_r+0xba4>
    459c:	b5bfffc4 	addi	r22,r22,-1
    45a0:	b0c00007 	ldb	r3,0(r22)
    45a4:	00800c04 	movi	r2,48
    45a8:	18bffc26 	beq	r3,r2,459c <_dtoa_r+0xca0>
    45ac:	b7000044 	addi	fp,r22,1
    45b0:	003fcb06 	br	44e0 <_dtoa_r+0xbe4>
    45b4:	d9800d17 	ldw	r6,52(sp)
    45b8:	018fc83a 	sub	r7,zero,r6
    45bc:	3801f726 	beq	r7,zero,4d9c <_dtoa_r+0x14a0>
    45c0:	398003cc 	andi	r6,r7,15
    45c4:	300c90fa 	slli	r6,r6,3
    45c8:	01400074 	movhi	r5,1
    45cc:	297a9e04 	addi	r5,r5,-5512
    45d0:	d9001217 	ldw	r4,72(sp)
    45d4:	314d883a 	add	r6,r6,r5
    45d8:	30c00117 	ldw	r3,4(r6)
    45dc:	30800017 	ldw	r2,0(r6)
    45e0:	d9401317 	ldw	r5,76(sp)
    45e4:	3821d13a 	srai	r16,r7,4
    45e8:	100d883a 	mov	r6,r2
    45ec:	180f883a 	mov	r7,r3
    45f0:	00098840 	call	9884 <__muldf3>
    45f4:	1011883a 	mov	r8,r2
    45f8:	1813883a 	mov	r9,r3
    45fc:	1029883a 	mov	r20,r2
    4600:	182b883a 	mov	r21,r3
    4604:	8001e526 	beq	r16,zero,4d9c <_dtoa_r+0x14a0>
    4608:	05800084 	movi	r22,2
    460c:	04400074 	movhi	r17,1
    4610:	8c7ad004 	addi	r17,r17,-5312
    4614:	8080004c 	andi	r2,r16,1
    4618:	1005003a 	cmpeq	r2,r2,zero
    461c:	1000081e 	bne	r2,zero,4640 <_dtoa_r+0xd44>
    4620:	89800017 	ldw	r6,0(r17)
    4624:	89c00117 	ldw	r7,4(r17)
    4628:	480b883a 	mov	r5,r9
    462c:	4009883a 	mov	r4,r8
    4630:	00098840 	call	9884 <__muldf3>
    4634:	1011883a 	mov	r8,r2
    4638:	b5800044 	addi	r22,r22,1
    463c:	1813883a 	mov	r9,r3
    4640:	8021d07a 	srai	r16,r16,1
    4644:	8c400204 	addi	r17,r17,8
    4648:	803ff21e 	bne	r16,zero,4614 <_dtoa_r+0xd18>
    464c:	4029883a 	mov	r20,r8
    4650:	482b883a 	mov	r21,r9
    4654:	003dca06 	br	3d80 <_dtoa_r+0x484>
    4658:	d9000817 	ldw	r4,32(sp)
    465c:	2005003a 	cmpeq	r2,r4,zero
    4660:	1001f61e 	bne	r2,zero,4e3c <_dtoa_r+0x1540>
    4664:	dc001117 	ldw	r16,68(sp)
    4668:	dc801017 	ldw	r18,64(sp)
    466c:	18c10cc4 	addi	r3,r3,1075
    4670:	003f6106 	br	43f8 <_dtoa_r+0xafc>
    4674:	d8000b15 	stw	zero,44(sp)
    4678:	d9802617 	ldw	r6,152(sp)
    467c:	d8c00d17 	ldw	r3,52(sp)
    4680:	30800044 	addi	r2,r6,1
    4684:	18ad883a 	add	r22,r3,r2
    4688:	b13fffc4 	addi	r4,r22,-1
    468c:	d9000e15 	stw	r4,56(sp)
    4690:	0581f60e 	bge	zero,r22,4e6c <_dtoa_r+0x1570>
    4694:	dd800f15 	stw	r22,60(sp)
    4698:	003f3006 	br	435c <_dtoa_r+0xa60>
    469c:	d8000b15 	stw	zero,44(sp)
    46a0:	d9002617 	ldw	r4,152(sp)
    46a4:	0101eb0e 	bge	zero,r4,4e54 <_dtoa_r+0x1558>
    46a8:	202d883a 	mov	r22,r4
    46ac:	d9000e15 	stw	r4,56(sp)
    46b0:	d9000f15 	stw	r4,60(sp)
    46b4:	003f2906 	br	435c <_dtoa_r+0xa60>
    46b8:	01800044 	movi	r6,1
    46bc:	d9800b15 	stw	r6,44(sp)
    46c0:	003ff706 	br	46a0 <_dtoa_r+0xda4>
    46c4:	01000044 	movi	r4,1
    46c8:	d9000b15 	stw	r4,44(sp)
    46cc:	003fea06 	br	4678 <_dtoa_r+0xd7c>
    46d0:	04000c0e 	bge	zero,r16,4704 <_dtoa_r+0xe08>
    46d4:	d9400717 	ldw	r5,28(sp)
    46d8:	d9001617 	ldw	r4,88(sp)
    46dc:	01800044 	movi	r6,1
    46e0:	00073d40 	call	73d4 <__lshift>
    46e4:	1009883a 	mov	r4,r2
    46e8:	900b883a 	mov	r5,r18
    46ec:	d8800715 	stw	r2,28(sp)
    46f0:	0006bec0 	call	6bec <__mcmp>
    46f4:	0081e00e 	bge	zero,r2,4e78 <_dtoa_r+0x157c>
    46f8:	bdc00044 	addi	r23,r23,1
    46fc:	00800e84 	movi	r2,58
    4700:	b881a226 	beq	r23,r2,4d8c <_dtoa_r+0x1490>
    4704:	b7000044 	addi	fp,r22,1
    4708:	b5c00005 	stb	r23,0(r22)
    470c:	003f7406 	br	44e0 <_dtoa_r+0xbe4>
    4710:	00800e44 	movi	r2,57
    4714:	b8819d26 	beq	r23,r2,4d8c <_dtoa_r+0x1490>
    4718:	053ffa0e 	bge	zero,r20,4704 <_dtoa_r+0xe08>
    471c:	8dc00c44 	addi	r23,r17,49
    4720:	003ff806 	br	4704 <_dtoa_r+0xe08>
    4724:	d9001617 	ldw	r4,88(sp)
    4728:	a80b883a 	mov	r5,r21
    472c:	04000044 	movi	r16,1
    4730:	0006a900 	call	6a90 <_Bfree>
    4734:	003edf06 	br	42b4 <_dtoa_r+0x9b8>
    4738:	d9001617 	ldw	r4,88(sp)
    473c:	980b883a 	mov	r5,r19
    4740:	01800284 	movi	r6,10
    4744:	000f883a 	mov	r7,zero
    4748:	00077440 	call	7744 <__multadd>
    474c:	1027883a 	mov	r19,r2
    4750:	d8800615 	stw	r2,24(sp)
    4754:	003ebb06 	br	4244 <_dtoa_r+0x948>
    4758:	d9801117 	ldw	r6,68(sp)
    475c:	d8800d17 	ldw	r2,52(sp)
    4760:	d8000915 	stw	zero,36(sp)
    4764:	308dc83a 	sub	r6,r6,r2
    4768:	0087c83a 	sub	r3,zero,r2
    476c:	d9801115 	stw	r6,68(sp)
    4770:	d8c01015 	stw	r3,64(sp)
    4774:	003cfe06 	br	3b70 <_dtoa_r+0x274>
    4778:	018dc83a 	sub	r6,zero,r6
    477c:	d9801115 	stw	r6,68(sp)
    4780:	d8000a15 	stw	zero,40(sp)
    4784:	003cf306 	br	3b54 <_dtoa_r+0x258>
    4788:	d9000d17 	ldw	r4,52(sp)
    478c:	000a1480 	call	a148 <__floatsidf>
    4790:	880b883a 	mov	r5,r17
    4794:	8009883a 	mov	r4,r16
    4798:	180f883a 	mov	r7,r3
    479c:	100d883a 	mov	r6,r2
    47a0:	0009f280 	call	9f28 <__nedf2>
    47a4:	103ce126 	beq	r2,zero,3b2c <_dtoa_r+0x230>
    47a8:	d9800d17 	ldw	r6,52(sp)
    47ac:	31bfffc4 	addi	r6,r6,-1
    47b0:	d9800d15 	stw	r6,52(sp)
    47b4:	003cdd06 	br	3b2c <_dtoa_r+0x230>
    47b8:	d9000717 	ldw	r4,28(sp)
    47bc:	900b883a 	mov	r5,r18
    47c0:	0006bec0 	call	6bec <__mcmp>
    47c4:	103e8d0e 	bge	r2,zero,41fc <_dtoa_r+0x900>
    47c8:	d9400717 	ldw	r5,28(sp)
    47cc:	d9001617 	ldw	r4,88(sp)
    47d0:	01800284 	movi	r6,10
    47d4:	000f883a 	mov	r7,zero
    47d8:	00077440 	call	7744 <__multadd>
    47dc:	d9800d17 	ldw	r6,52(sp)
    47e0:	d8800715 	stw	r2,28(sp)
    47e4:	31bfffc4 	addi	r6,r6,-1
    47e8:	d9800d15 	stw	r6,52(sp)
    47ec:	b001a71e 	bne	r22,zero,4e8c <_dtoa_r+0x1590>
    47f0:	d8800e17 	ldw	r2,56(sp)
    47f4:	d8800f15 	stw	r2,60(sp)
    47f8:	003e8006 	br	41fc <_dtoa_r+0x900>
    47fc:	90800417 	ldw	r2,16(r18)
    4800:	1085883a 	add	r2,r2,r2
    4804:	1085883a 	add	r2,r2,r2
    4808:	1485883a 	add	r2,r2,r18
    480c:	11000417 	ldw	r4,16(r2)
    4810:	0006ab80 	call	6ab8 <__hi0bits>
    4814:	00c00804 	movi	r3,32
    4818:	1887c83a 	sub	r3,r3,r2
    481c:	003e5a06 	br	4188 <_dtoa_r+0x88c>
    4820:	d9400717 	ldw	r5,28(sp)
    4824:	d9801017 	ldw	r6,64(sp)
    4828:	d9001617 	ldw	r4,88(sp)
    482c:	00078440 	call	7844 <__pow5mult>
    4830:	d8800715 	stw	r2,28(sp)
    4834:	003e4306 	br	4144 <_dtoa_r+0x848>
    4838:	d9800f17 	ldw	r6,60(sp)
    483c:	d8800d17 	ldw	r2,52(sp)
    4840:	d9800315 	stw	r6,12(sp)
    4844:	d8800415 	stw	r2,16(sp)
    4848:	d8c00b17 	ldw	r3,44(sp)
    484c:	1805003a 	cmpeq	r2,r3,zero
    4850:	1000e21e 	bne	r2,zero,4bdc <_dtoa_r+0x12e0>
    4854:	d9000317 	ldw	r4,12(sp)
    4858:	0005883a 	mov	r2,zero
    485c:	00cff834 	movhi	r3,16352
    4860:	200c90fa 	slli	r6,r4,3
    4864:	01000074 	movhi	r4,1
    4868:	213a9e04 	addi	r4,r4,-5512
    486c:	180b883a 	mov	r5,r3
    4870:	310d883a 	add	r6,r6,r4
    4874:	327fff17 	ldw	r9,-4(r6)
    4878:	323ffe17 	ldw	r8,-8(r6)
    487c:	1009883a 	mov	r4,r2
    4880:	480f883a 	mov	r7,r9
    4884:	400d883a 	mov	r6,r8
    4888:	0009c480 	call	9c48 <__divdf3>
    488c:	180b883a 	mov	r5,r3
    4890:	b00d883a 	mov	r6,r22
    4894:	b80f883a 	mov	r7,r23
    4898:	1009883a 	mov	r4,r2
    489c:	00097900 	call	9790 <__subdf3>
    48a0:	a80b883a 	mov	r5,r21
    48a4:	a009883a 	mov	r4,r20
    48a8:	d8c01915 	stw	r3,100(sp)
    48ac:	d8801815 	stw	r2,96(sp)
    48b0:	000a2400 	call	a240 <__fixdfsi>
    48b4:	1009883a 	mov	r4,r2
    48b8:	1027883a 	mov	r19,r2
    48bc:	000a1480 	call	a148 <__floatsidf>
    48c0:	a80b883a 	mov	r5,r21
    48c4:	a009883a 	mov	r4,r20
    48c8:	180f883a 	mov	r7,r3
    48cc:	100d883a 	mov	r6,r2
    48d0:	00097900 	call	9790 <__subdf3>
    48d4:	d9801817 	ldw	r6,96(sp)
    48d8:	1823883a 	mov	r17,r3
    48dc:	d8801415 	stw	r2,80(sp)
    48e0:	302d883a 	mov	r22,r6
    48e4:	d9800517 	ldw	r6,20(sp)
    48e8:	9cc00c04 	addi	r19,r19,48
    48ec:	dc401515 	stw	r17,84(sp)
    48f0:	d8c01917 	ldw	r3,100(sp)
    48f4:	34c00005 	stb	r19,0(r6)
    48f8:	d8800517 	ldw	r2,20(sp)
    48fc:	d9401917 	ldw	r5,100(sp)
    4900:	d9801417 	ldw	r6,80(sp)
    4904:	b009883a 	mov	r4,r22
    4908:	880f883a 	mov	r7,r17
    490c:	182f883a 	mov	r23,r3
    4910:	17000044 	addi	fp,r2,1
    4914:	0009fb00 	call	9fb0 <__gtdf2>
    4918:	00804e16 	blt	zero,r2,4a54 <_dtoa_r+0x1158>
    491c:	d9801417 	ldw	r6,80(sp)
    4920:	0005883a 	mov	r2,zero
    4924:	00cffc34 	movhi	r3,16368
    4928:	180b883a 	mov	r5,r3
    492c:	880f883a 	mov	r7,r17
    4930:	1009883a 	mov	r4,r2
    4934:	00097900 	call	9790 <__subdf3>
    4938:	d9401917 	ldw	r5,100(sp)
    493c:	180f883a 	mov	r7,r3
    4940:	b009883a 	mov	r4,r22
    4944:	100d883a 	mov	r6,r2
    4948:	0009fb00 	call	9fb0 <__gtdf2>
    494c:	00bda216 	blt	zero,r2,3fd8 <_dtoa_r+0x6dc>
    4950:	d8c00317 	ldw	r3,12(sp)
    4954:	00800044 	movi	r2,1
    4958:	10c01216 	blt	r2,r3,49a4 <_dtoa_r+0x10a8>
    495c:	003d4506 	br	3e74 <_dtoa_r+0x578>
    4960:	d9801417 	ldw	r6,80(sp)
    4964:	0005883a 	mov	r2,zero
    4968:	00cffc34 	movhi	r3,16368
    496c:	180b883a 	mov	r5,r3
    4970:	880f883a 	mov	r7,r17
    4974:	1009883a 	mov	r4,r2
    4978:	00097900 	call	9790 <__subdf3>
    497c:	d9c01b17 	ldw	r7,108(sp)
    4980:	180b883a 	mov	r5,r3
    4984:	1009883a 	mov	r4,r2
    4988:	b00d883a 	mov	r6,r22
    498c:	000a0c00 	call	a0c0 <__ltdf2>
    4990:	103d9116 	blt	r2,zero,3fd8 <_dtoa_r+0x6dc>
    4994:	d9800517 	ldw	r6,20(sp)
    4998:	d9000317 	ldw	r4,12(sp)
    499c:	3105883a 	add	r2,r6,r4
    49a0:	e0bd3426 	beq	fp,r2,3e74 <_dtoa_r+0x578>
    49a4:	04500934 	movhi	r17,16420
    49a8:	0021883a 	mov	r16,zero
    49ac:	b80b883a 	mov	r5,r23
    49b0:	b009883a 	mov	r4,r22
    49b4:	800d883a 	mov	r6,r16
    49b8:	880f883a 	mov	r7,r17
    49bc:	00098840 	call	9884 <__muldf3>
    49c0:	d9401517 	ldw	r5,84(sp)
    49c4:	d9001417 	ldw	r4,80(sp)
    49c8:	880f883a 	mov	r7,r17
    49cc:	000d883a 	mov	r6,zero
    49d0:	d8801a15 	stw	r2,104(sp)
    49d4:	d8c01b15 	stw	r3,108(sp)
    49d8:	00098840 	call	9884 <__muldf3>
    49dc:	180b883a 	mov	r5,r3
    49e0:	1009883a 	mov	r4,r2
    49e4:	1823883a 	mov	r17,r3
    49e8:	1021883a 	mov	r16,r2
    49ec:	000a2400 	call	a240 <__fixdfsi>
    49f0:	1009883a 	mov	r4,r2
    49f4:	102b883a 	mov	r21,r2
    49f8:	000a1480 	call	a148 <__floatsidf>
    49fc:	880b883a 	mov	r5,r17
    4a00:	8009883a 	mov	r4,r16
    4a04:	180f883a 	mov	r7,r3
    4a08:	100d883a 	mov	r6,r2
    4a0c:	00097900 	call	9790 <__subdf3>
    4a10:	1021883a 	mov	r16,r2
    4a14:	d9001b17 	ldw	r4,108(sp)
    4a18:	1823883a 	mov	r17,r3
    4a1c:	dc001415 	stw	r16,80(sp)
    4a20:	ad400c04 	addi	r21,r21,48
    4a24:	dc401515 	stw	r17,84(sp)
    4a28:	d8801a17 	ldw	r2,104(sp)
    4a2c:	e5400005 	stb	r21,0(fp)
    4a30:	202f883a 	mov	r23,r4
    4a34:	d9c01b17 	ldw	r7,108(sp)
    4a38:	d9001417 	ldw	r4,80(sp)
    4a3c:	880b883a 	mov	r5,r17
    4a40:	100d883a 	mov	r6,r2
    4a44:	102d883a 	mov	r22,r2
    4a48:	e7000044 	addi	fp,fp,1
    4a4c:	000a0c00 	call	a0c0 <__ltdf2>
    4a50:	103fc30e 	bge	r2,zero,4960 <_dtoa_r+0x1064>
    4a54:	d9000417 	ldw	r4,16(sp)
    4a58:	d9000d15 	stw	r4,52(sp)
    4a5c:	003d7106 	br	4024 <_dtoa_r+0x728>
    4a60:	d9801717 	ldw	r6,92(sp)
    4a64:	00800084 	movi	r2,2
    4a68:	11bde60e 	bge	r2,r6,4204 <_dtoa_r+0x908>
    4a6c:	203cfb1e 	bne	r4,zero,3e5c <_dtoa_r+0x560>
    4a70:	d9001617 	ldw	r4,88(sp)
    4a74:	900b883a 	mov	r5,r18
    4a78:	01800144 	movi	r6,5
    4a7c:	000f883a 	mov	r7,zero
    4a80:	00077440 	call	7744 <__multadd>
    4a84:	d9000717 	ldw	r4,28(sp)
    4a88:	100b883a 	mov	r5,r2
    4a8c:	1025883a 	mov	r18,r2
    4a90:	0006bec0 	call	6bec <__mcmp>
    4a94:	00bcf10e 	bge	zero,r2,3e5c <_dtoa_r+0x560>
    4a98:	d8c00d17 	ldw	r3,52(sp)
    4a9c:	d9000517 	ldw	r4,20(sp)
    4aa0:	d8000615 	stw	zero,24(sp)
    4aa4:	18c00044 	addi	r3,r3,1
    4aa8:	d8c00d15 	stw	r3,52(sp)
    4aac:	00800c44 	movi	r2,49
    4ab0:	27000044 	addi	fp,r4,1
    4ab4:	20800005 	stb	r2,0(r4)
    4ab8:	003e8906 	br	44e0 <_dtoa_r+0xbe4>
    4abc:	d8c00517 	ldw	r3,20(sp)
    4ac0:	003bc206 	br	39cc <_dtoa_r+0xd0>
    4ac4:	01800074 	movhi	r6,1
    4ac8:	31bad004 	addi	r6,r6,-5312
    4acc:	30c00917 	ldw	r3,36(r6)
    4ad0:	30800817 	ldw	r2,32(r6)
    4ad4:	d9001217 	ldw	r4,72(sp)
    4ad8:	d9401317 	ldw	r5,76(sp)
    4adc:	180f883a 	mov	r7,r3
    4ae0:	100d883a 	mov	r6,r2
    4ae4:	0009c480 	call	9c48 <__divdf3>
    4ae8:	948003cc 	andi	r18,r18,15
    4aec:	058000c4 	movi	r22,3
    4af0:	1029883a 	mov	r20,r2
    4af4:	182b883a 	mov	r21,r3
    4af8:	003c8906 	br	3d20 <_dtoa_r+0x424>
    4afc:	d9001017 	ldw	r4,64(sp)
    4b00:	d9800917 	ldw	r6,36(sp)
    4b04:	0025883a 	mov	r18,zero
    4b08:	1105c83a 	sub	r2,r2,r4
    4b0c:	2089883a 	add	r4,r4,r2
    4b10:	308d883a 	add	r6,r6,r2
    4b14:	d9001015 	stw	r4,64(sp)
    4b18:	d9800915 	stw	r6,36(sp)
    4b1c:	003e3206 	br	43e8 <_dtoa_r+0xaec>
    4b20:	28800044 	addi	r2,r5,1
    4b24:	27000044 	addi	fp,r4,1
    4b28:	20800005 	stb	r2,0(r4)
    4b2c:	003e6c06 	br	44e0 <_dtoa_r+0xbe4>
    4b30:	d8800f17 	ldw	r2,60(sp)
    4b34:	00bce016 	blt	zero,r2,3eb8 <_dtoa_r+0x5bc>
    4b38:	d9800f17 	ldw	r6,60(sp)
    4b3c:	303cc51e 	bne	r6,zero,3e54 <_dtoa_r+0x558>
    4b40:	0005883a 	mov	r2,zero
    4b44:	00d00534 	movhi	r3,16404
    4b48:	980b883a 	mov	r5,r19
    4b4c:	180f883a 	mov	r7,r3
    4b50:	9009883a 	mov	r4,r18
    4b54:	100d883a 	mov	r6,r2
    4b58:	00098840 	call	9884 <__muldf3>
    4b5c:	180b883a 	mov	r5,r3
    4b60:	a80f883a 	mov	r7,r21
    4b64:	1009883a 	mov	r4,r2
    4b68:	a00d883a 	mov	r6,r20
    4b6c:	000a0380 	call	a038 <__gedf2>
    4b70:	103cb80e 	bge	r2,zero,3e54 <_dtoa_r+0x558>
    4b74:	0027883a 	mov	r19,zero
    4b78:	0025883a 	mov	r18,zero
    4b7c:	003fc606 	br	4a98 <_dtoa_r+0x119c>
    4b80:	99400117 	ldw	r5,4(r19)
    4b84:	d9001617 	ldw	r4,88(sp)
    4b88:	00070100 	call	7010 <_Balloc>
    4b8c:	99800417 	ldw	r6,16(r19)
    4b90:	11000304 	addi	r4,r2,12
    4b94:	99400304 	addi	r5,r19,12
    4b98:	318d883a 	add	r6,r6,r6
    4b9c:	318d883a 	add	r6,r6,r6
    4ba0:	31800204 	addi	r6,r6,8
    4ba4:	1023883a 	mov	r17,r2
    4ba8:	00068780 	call	6878 <memcpy>
    4bac:	d9001617 	ldw	r4,88(sp)
    4bb0:	880b883a 	mov	r5,r17
    4bb4:	01800044 	movi	r6,1
    4bb8:	00073d40 	call	73d4 <__lshift>
    4bbc:	100b883a 	mov	r5,r2
    4bc0:	003d9c06 	br	4234 <_dtoa_r+0x938>
    4bc4:	00800e44 	movi	r2,57
    4bc8:	b8807026 	beq	r23,r2,4d8c <_dtoa_r+0x1490>
    4bcc:	b8800044 	addi	r2,r23,1
    4bd0:	b7000044 	addi	fp,r22,1
    4bd4:	b0800005 	stb	r2,0(r22)
    4bd8:	003e4106 	br	44e0 <_dtoa_r+0xbe4>
    4bdc:	d8800317 	ldw	r2,12(sp)
    4be0:	01800074 	movhi	r6,1
    4be4:	31ba9e04 	addi	r6,r6,-5512
    4be8:	b009883a 	mov	r4,r22
    4bec:	100e90fa 	slli	r7,r2,3
    4bf0:	b80b883a 	mov	r5,r23
    4bf4:	398f883a 	add	r7,r7,r6
    4bf8:	38bffe17 	ldw	r2,-8(r7)
    4bfc:	d9800517 	ldw	r6,20(sp)
    4c00:	38ffff17 	ldw	r3,-4(r7)
    4c04:	37000044 	addi	fp,r6,1
    4c08:	180f883a 	mov	r7,r3
    4c0c:	100d883a 	mov	r6,r2
    4c10:	00098840 	call	9884 <__muldf3>
    4c14:	a80b883a 	mov	r5,r21
    4c18:	a009883a 	mov	r4,r20
    4c1c:	182f883a 	mov	r23,r3
    4c20:	102d883a 	mov	r22,r2
    4c24:	000a2400 	call	a240 <__fixdfsi>
    4c28:	1009883a 	mov	r4,r2
    4c2c:	1027883a 	mov	r19,r2
    4c30:	000a1480 	call	a148 <__floatsidf>
    4c34:	a80b883a 	mov	r5,r21
    4c38:	a009883a 	mov	r4,r20
    4c3c:	180f883a 	mov	r7,r3
    4c40:	100d883a 	mov	r6,r2
    4c44:	00097900 	call	9790 <__subdf3>
    4c48:	180b883a 	mov	r5,r3
    4c4c:	d8c00517 	ldw	r3,20(sp)
    4c50:	9cc00c04 	addi	r19,r19,48
    4c54:	1009883a 	mov	r4,r2
    4c58:	1cc00005 	stb	r19,0(r3)
    4c5c:	2021883a 	mov	r16,r4
    4c60:	d9000317 	ldw	r4,12(sp)
    4c64:	00800044 	movi	r2,1
    4c68:	2823883a 	mov	r17,r5
    4c6c:	20802226 	beq	r4,r2,4cf8 <_dtoa_r+0x13fc>
    4c70:	1029883a 	mov	r20,r2
    4c74:	0005883a 	mov	r2,zero
    4c78:	00d00934 	movhi	r3,16420
    4c7c:	180f883a 	mov	r7,r3
    4c80:	100d883a 	mov	r6,r2
    4c84:	880b883a 	mov	r5,r17
    4c88:	8009883a 	mov	r4,r16
    4c8c:	00098840 	call	9884 <__muldf3>
    4c90:	180b883a 	mov	r5,r3
    4c94:	1009883a 	mov	r4,r2
    4c98:	1823883a 	mov	r17,r3
    4c9c:	1021883a 	mov	r16,r2
    4ca0:	000a2400 	call	a240 <__fixdfsi>
    4ca4:	1009883a 	mov	r4,r2
    4ca8:	102b883a 	mov	r21,r2
    4cac:	000a1480 	call	a148 <__floatsidf>
    4cb0:	880b883a 	mov	r5,r17
    4cb4:	8009883a 	mov	r4,r16
    4cb8:	180f883a 	mov	r7,r3
    4cbc:	100d883a 	mov	r6,r2
    4cc0:	00097900 	call	9790 <__subdf3>
    4cc4:	180b883a 	mov	r5,r3
    4cc8:	d8c00517 	ldw	r3,20(sp)
    4ccc:	1009883a 	mov	r4,r2
    4cd0:	ad400c04 	addi	r21,r21,48
    4cd4:	1d05883a 	add	r2,r3,r20
    4cd8:	15400005 	stb	r21,0(r2)
    4cdc:	2021883a 	mov	r16,r4
    4ce0:	d9000317 	ldw	r4,12(sp)
    4ce4:	a5000044 	addi	r20,r20,1
    4ce8:	2823883a 	mov	r17,r5
    4cec:	a13fe11e 	bne	r20,r4,4c74 <_dtoa_r+0x1378>
    4cf0:	e505883a 	add	r2,fp,r20
    4cf4:	173fffc4 	addi	fp,r2,-1
    4cf8:	0025883a 	mov	r18,zero
    4cfc:	04cff834 	movhi	r19,16352
    4d00:	b009883a 	mov	r4,r22
    4d04:	b80b883a 	mov	r5,r23
    4d08:	900d883a 	mov	r6,r18
    4d0c:	980f883a 	mov	r7,r19
    4d10:	00098100 	call	9810 <__adddf3>
    4d14:	180b883a 	mov	r5,r3
    4d18:	1009883a 	mov	r4,r2
    4d1c:	800d883a 	mov	r6,r16
    4d20:	880f883a 	mov	r7,r17
    4d24:	000a0c00 	call	a0c0 <__ltdf2>
    4d28:	103cab16 	blt	r2,zero,3fd8 <_dtoa_r+0x6dc>
    4d2c:	0009883a 	mov	r4,zero
    4d30:	980b883a 	mov	r5,r19
    4d34:	b80f883a 	mov	r7,r23
    4d38:	b00d883a 	mov	r6,r22
    4d3c:	00097900 	call	9790 <__subdf3>
    4d40:	180b883a 	mov	r5,r3
    4d44:	880f883a 	mov	r7,r17
    4d48:	1009883a 	mov	r4,r2
    4d4c:	800d883a 	mov	r6,r16
    4d50:	0009fb00 	call	9fb0 <__gtdf2>
    4d54:	00bc470e 	bge	zero,r2,3e74 <_dtoa_r+0x578>
    4d58:	00c00c04 	movi	r3,48
    4d5c:	e73fffc4 	addi	fp,fp,-1
    4d60:	e0800007 	ldb	r2,0(fp)
    4d64:	10fffd26 	beq	r2,r3,4d5c <_dtoa_r+0x1460>
    4d68:	d9800417 	ldw	r6,16(sp)
    4d6c:	e7000044 	addi	fp,fp,1
    4d70:	d9800d15 	stw	r6,52(sp)
    4d74:	003cab06 	br	4024 <_dtoa_r+0x728>
    4d78:	d8c00f17 	ldw	r3,60(sp)
    4d7c:	d9001117 	ldw	r4,68(sp)
    4d80:	20e1c83a 	sub	r16,r4,r3
    4d84:	0007883a 	mov	r3,zero
    4d88:	003d9b06 	br	43f8 <_dtoa_r+0xafc>
    4d8c:	00800e44 	movi	r2,57
    4d90:	b0800005 	stb	r2,0(r22)
    4d94:	b5800044 	addi	r22,r22,1
    4d98:	003dc106 	br	44a0 <_dtoa_r+0xba4>
    4d9c:	05800084 	movi	r22,2
    4da0:	003bf706 	br	3d80 <_dtoa_r+0x484>
    4da4:	d9000f17 	ldw	r4,60(sp)
    4da8:	013c000e 	bge	zero,r4,3dac <_dtoa_r+0x4b0>
    4dac:	d9800e17 	ldw	r6,56(sp)
    4db0:	01bc300e 	bge	zero,r6,3e74 <_dtoa_r+0x578>
    4db4:	0005883a 	mov	r2,zero
    4db8:	00d00934 	movhi	r3,16420
    4dbc:	a80b883a 	mov	r5,r21
    4dc0:	180f883a 	mov	r7,r3
    4dc4:	a009883a 	mov	r4,r20
    4dc8:	100d883a 	mov	r6,r2
    4dcc:	00098840 	call	9884 <__muldf3>
    4dd0:	b1000044 	addi	r4,r22,1
    4dd4:	1021883a 	mov	r16,r2
    4dd8:	1823883a 	mov	r17,r3
    4ddc:	000a1480 	call	a148 <__floatsidf>
    4de0:	880b883a 	mov	r5,r17
    4de4:	8009883a 	mov	r4,r16
    4de8:	180f883a 	mov	r7,r3
    4dec:	100d883a 	mov	r6,r2
    4df0:	00098840 	call	9884 <__muldf3>
    4df4:	0011883a 	mov	r8,zero
    4df8:	02500734 	movhi	r9,16412
    4dfc:	180b883a 	mov	r5,r3
    4e00:	480f883a 	mov	r7,r9
    4e04:	1009883a 	mov	r4,r2
    4e08:	400d883a 	mov	r6,r8
    4e0c:	00098100 	call	9810 <__adddf3>
    4e10:	102d883a 	mov	r22,r2
    4e14:	00bf3034 	movhi	r2,64704
    4e18:	10ef883a 	add	r23,r2,r3
    4e1c:	d8800d17 	ldw	r2,52(sp)
    4e20:	d8c00e17 	ldw	r3,56(sp)
    4e24:	8029883a 	mov	r20,r16
    4e28:	10bfffc4 	addi	r2,r2,-1
    4e2c:	882b883a 	mov	r21,r17
    4e30:	d8800415 	stw	r2,16(sp)
    4e34:	d8c00315 	stw	r3,12(sp)
    4e38:	003e8306 	br	4848 <_dtoa_r+0xf4c>
    4e3c:	d8800117 	ldw	r2,4(sp)
    4e40:	dc001117 	ldw	r16,68(sp)
    4e44:	dc801017 	ldw	r18,64(sp)
    4e48:	00c00d84 	movi	r3,54
    4e4c:	1887c83a 	sub	r3,r3,r2
    4e50:	003d6906 	br	43f8 <_dtoa_r+0xafc>
    4e54:	01800044 	movi	r6,1
    4e58:	3021883a 	mov	r16,r6
    4e5c:	d9800f15 	stw	r6,60(sp)
    4e60:	d9802615 	stw	r6,152(sp)
    4e64:	d9800e15 	stw	r6,56(sp)
    4e68:	003b9306 	br	3cb8 <_dtoa_r+0x3bc>
    4e6c:	b021883a 	mov	r16,r22
    4e70:	dd800f15 	stw	r22,60(sp)
    4e74:	003b9006 	br	3cb8 <_dtoa_r+0x3bc>
    4e78:	103e221e 	bne	r2,zero,4704 <_dtoa_r+0xe08>
    4e7c:	b880004c 	andi	r2,r23,1
    4e80:	1005003a 	cmpeq	r2,r2,zero
    4e84:	103e1f1e 	bne	r2,zero,4704 <_dtoa_r+0xe08>
    4e88:	003e1b06 	br	46f8 <_dtoa_r+0xdfc>
    4e8c:	d9001617 	ldw	r4,88(sp)
    4e90:	980b883a 	mov	r5,r19
    4e94:	01800284 	movi	r6,10
    4e98:	000f883a 	mov	r7,zero
    4e9c:	00077440 	call	7744 <__multadd>
    4ea0:	d8c00e17 	ldw	r3,56(sp)
    4ea4:	1027883a 	mov	r19,r2
    4ea8:	d8c00f15 	stw	r3,60(sp)
    4eac:	003cd306 	br	41fc <_dtoa_r+0x900>

00004eb0 <_fflush_r>:
    4eb0:	defffb04 	addi	sp,sp,-20
    4eb4:	dcc00315 	stw	r19,12(sp)
    4eb8:	dc800215 	stw	r18,8(sp)
    4ebc:	dfc00415 	stw	ra,16(sp)
    4ec0:	dc400115 	stw	r17,4(sp)
    4ec4:	dc000015 	stw	r16,0(sp)
    4ec8:	2027883a 	mov	r19,r4
    4ecc:	2825883a 	mov	r18,r5
    4ed0:	20000226 	beq	r4,zero,4edc <_fflush_r+0x2c>
    4ed4:	20800e17 	ldw	r2,56(r4)
    4ed8:	10005626 	beq	r2,zero,5034 <_fflush_r+0x184>
    4edc:	9100030b 	ldhu	r4,12(r18)
    4ee0:	20ffffcc 	andi	r3,r4,65535
    4ee4:	18e0001c 	xori	r3,r3,32768
    4ee8:	18e00004 	addi	r3,r3,-32768
    4eec:	1880020c 	andi	r2,r3,8
    4ef0:	1000261e 	bne	r2,zero,4f8c <_fflush_r+0xdc>
    4ef4:	90c00117 	ldw	r3,4(r18)
    4ef8:	20820014 	ori	r2,r4,2048
    4efc:	9080030d 	sth	r2,12(r18)
    4f00:	1009883a 	mov	r4,r2
    4f04:	00c0400e 	bge	zero,r3,5008 <_fflush_r+0x158>
    4f08:	92000a17 	ldw	r8,40(r18)
    4f0c:	40004026 	beq	r8,zero,5010 <_fflush_r+0x160>
    4f10:	2084000c 	andi	r2,r4,4096
    4f14:	10005326 	beq	r2,zero,5064 <_fflush_r+0x1b4>
    4f18:	94001417 	ldw	r16,80(r18)
    4f1c:	9080030b 	ldhu	r2,12(r18)
    4f20:	1080010c 	andi	r2,r2,4
    4f24:	1000481e 	bne	r2,zero,5048 <_fflush_r+0x198>
    4f28:	91400717 	ldw	r5,28(r18)
    4f2c:	9809883a 	mov	r4,r19
    4f30:	800d883a 	mov	r6,r16
    4f34:	000f883a 	mov	r7,zero
    4f38:	403ee83a 	callr	r8
    4f3c:	8080261e 	bne	r16,r2,4fd8 <_fflush_r+0x128>
    4f40:	9080030b 	ldhu	r2,12(r18)
    4f44:	91000417 	ldw	r4,16(r18)
    4f48:	90000115 	stw	zero,4(r18)
    4f4c:	10bdffcc 	andi	r2,r2,63487
    4f50:	10ffffcc 	andi	r3,r2,65535
    4f54:	18c4000c 	andi	r3,r3,4096
    4f58:	9080030d 	sth	r2,12(r18)
    4f5c:	91000015 	stw	r4,0(r18)
    4f60:	18002b26 	beq	r3,zero,5010 <_fflush_r+0x160>
    4f64:	0007883a 	mov	r3,zero
    4f68:	1805883a 	mov	r2,r3
    4f6c:	94001415 	stw	r16,80(r18)
    4f70:	dfc00417 	ldw	ra,16(sp)
    4f74:	dcc00317 	ldw	r19,12(sp)
    4f78:	dc800217 	ldw	r18,8(sp)
    4f7c:	dc400117 	ldw	r17,4(sp)
    4f80:	dc000017 	ldw	r16,0(sp)
    4f84:	dec00504 	addi	sp,sp,20
    4f88:	f800283a 	ret
    4f8c:	94400417 	ldw	r17,16(r18)
    4f90:	88001f26 	beq	r17,zero,5010 <_fflush_r+0x160>
    4f94:	90800017 	ldw	r2,0(r18)
    4f98:	18c000cc 	andi	r3,r3,3
    4f9c:	94400015 	stw	r17,0(r18)
    4fa0:	1461c83a 	sub	r16,r2,r17
    4fa4:	18002526 	beq	r3,zero,503c <_fflush_r+0x18c>
    4fa8:	0005883a 	mov	r2,zero
    4fac:	90800215 	stw	r2,8(r18)
    4fb0:	0400170e 	bge	zero,r16,5010 <_fflush_r+0x160>
    4fb4:	90c00917 	ldw	r3,36(r18)
    4fb8:	91400717 	ldw	r5,28(r18)
    4fbc:	880d883a 	mov	r6,r17
    4fc0:	800f883a 	mov	r7,r16
    4fc4:	9809883a 	mov	r4,r19
    4fc8:	183ee83a 	callr	r3
    4fcc:	88a3883a 	add	r17,r17,r2
    4fd0:	80a1c83a 	sub	r16,r16,r2
    4fd4:	00bff616 	blt	zero,r2,4fb0 <_fflush_r+0x100>
    4fd8:	9080030b 	ldhu	r2,12(r18)
    4fdc:	00ffffc4 	movi	r3,-1
    4fe0:	10801014 	ori	r2,r2,64
    4fe4:	9080030d 	sth	r2,12(r18)
    4fe8:	1805883a 	mov	r2,r3
    4fec:	dfc00417 	ldw	ra,16(sp)
    4ff0:	dcc00317 	ldw	r19,12(sp)
    4ff4:	dc800217 	ldw	r18,8(sp)
    4ff8:	dc400117 	ldw	r17,4(sp)
    4ffc:	dc000017 	ldw	r16,0(sp)
    5000:	dec00504 	addi	sp,sp,20
    5004:	f800283a 	ret
    5008:	90800f17 	ldw	r2,60(r18)
    500c:	00bfbe16 	blt	zero,r2,4f08 <_fflush_r+0x58>
    5010:	0007883a 	mov	r3,zero
    5014:	1805883a 	mov	r2,r3
    5018:	dfc00417 	ldw	ra,16(sp)
    501c:	dcc00317 	ldw	r19,12(sp)
    5020:	dc800217 	ldw	r18,8(sp)
    5024:	dc400117 	ldw	r17,4(sp)
    5028:	dc000017 	ldw	r16,0(sp)
    502c:	dec00504 	addi	sp,sp,20
    5030:	f800283a 	ret
    5034:	00051480 	call	5148 <__sinit>
    5038:	003fa806 	br	4edc <_fflush_r+0x2c>
    503c:	90800517 	ldw	r2,20(r18)
    5040:	90800215 	stw	r2,8(r18)
    5044:	003fda06 	br	4fb0 <_fflush_r+0x100>
    5048:	90800117 	ldw	r2,4(r18)
    504c:	90c00c17 	ldw	r3,48(r18)
    5050:	80a1c83a 	sub	r16,r16,r2
    5054:	183fb426 	beq	r3,zero,4f28 <_fflush_r+0x78>
    5058:	90800f17 	ldw	r2,60(r18)
    505c:	80a1c83a 	sub	r16,r16,r2
    5060:	003fb106 	br	4f28 <_fflush_r+0x78>
    5064:	91400717 	ldw	r5,28(r18)
    5068:	9809883a 	mov	r4,r19
    506c:	000d883a 	mov	r6,zero
    5070:	01c00044 	movi	r7,1
    5074:	403ee83a 	callr	r8
    5078:	1021883a 	mov	r16,r2
    507c:	00bfffc4 	movi	r2,-1
    5080:	80800226 	beq	r16,r2,508c <_fflush_r+0x1dc>
    5084:	92000a17 	ldw	r8,40(r18)
    5088:	003fa406 	br	4f1c <_fflush_r+0x6c>
    508c:	98c00017 	ldw	r3,0(r19)
    5090:	00800744 	movi	r2,29
    5094:	18bfde26 	beq	r3,r2,5010 <_fflush_r+0x160>
    5098:	9080030b 	ldhu	r2,12(r18)
    509c:	8007883a 	mov	r3,r16
    50a0:	10801014 	ori	r2,r2,64
    50a4:	9080030d 	sth	r2,12(r18)
    50a8:	003fcf06 	br	4fe8 <_fflush_r+0x138>

000050ac <fflush>:
    50ac:	01400034 	movhi	r5,0
    50b0:	2953ac04 	addi	r5,r5,20144
    50b4:	2007883a 	mov	r3,r4
    50b8:	20000526 	beq	r4,zero,50d0 <fflush+0x24>
    50bc:	00800074 	movhi	r2,1
    50c0:	1081b304 	addi	r2,r2,1740
    50c4:	11000017 	ldw	r4,0(r2)
    50c8:	180b883a 	mov	r5,r3
    50cc:	0004eb01 	jmpi	4eb0 <_fflush_r>
    50d0:	00800074 	movhi	r2,1
    50d4:	1081b404 	addi	r2,r2,1744
    50d8:	11000017 	ldw	r4,0(r2)
    50dc:	0005c7c1 	jmpi	5c7c <_fwalk_reent>

000050e0 <std>:
    50e0:	00800074 	movhi	r2,1
    50e4:	10a05604 	addi	r2,r2,-32424
    50e8:	20800b15 	stw	r2,44(r4)
    50ec:	00800074 	movhi	r2,1
    50f0:	10a09104 	addi	r2,r2,-32188
    50f4:	20800815 	stw	r2,32(r4)
    50f8:	00c00074 	movhi	r3,1
    50fc:	18e07204 	addi	r3,r3,-32312
    5100:	00800074 	movhi	r2,1
    5104:	10a05804 	addi	r2,r2,-32416
    5108:	2140030d 	sth	r5,12(r4)
    510c:	2180038d 	sth	r6,14(r4)
    5110:	20c00915 	stw	r3,36(r4)
    5114:	20800a15 	stw	r2,40(r4)
    5118:	20000015 	stw	zero,0(r4)
    511c:	20000115 	stw	zero,4(r4)
    5120:	20000215 	stw	zero,8(r4)
    5124:	20000415 	stw	zero,16(r4)
    5128:	20000515 	stw	zero,20(r4)
    512c:	20000615 	stw	zero,24(r4)
    5130:	21000715 	stw	r4,28(r4)
    5134:	f800283a 	ret

00005138 <__sfp_lock_acquire>:
    5138:	f800283a 	ret

0000513c <__sfp_lock_release>:
    513c:	f800283a 	ret

00005140 <__sinit_lock_acquire>:
    5140:	f800283a 	ret

00005144 <__sinit_lock_release>:
    5144:	f800283a 	ret

00005148 <__sinit>:
    5148:	20800e17 	ldw	r2,56(r4)
    514c:	defffd04 	addi	sp,sp,-12
    5150:	dc400115 	stw	r17,4(sp)
    5154:	dc000015 	stw	r16,0(sp)
    5158:	dfc00215 	stw	ra,8(sp)
    515c:	04400044 	movi	r17,1
    5160:	01400104 	movi	r5,4
    5164:	000d883a 	mov	r6,zero
    5168:	2021883a 	mov	r16,r4
    516c:	2200bb04 	addi	r8,r4,748
    5170:	200f883a 	mov	r7,r4
    5174:	10000526 	beq	r2,zero,518c <__sinit+0x44>
    5178:	dfc00217 	ldw	ra,8(sp)
    517c:	dc400117 	ldw	r17,4(sp)
    5180:	dc000017 	ldw	r16,0(sp)
    5184:	dec00304 	addi	sp,sp,12
    5188:	f800283a 	ret
    518c:	21000117 	ldw	r4,4(r4)
    5190:	00800034 	movhi	r2,0
    5194:	10948b04 	addi	r2,r2,21036
    5198:	00c000c4 	movi	r3,3
    519c:	80800f15 	stw	r2,60(r16)
    51a0:	80c0b915 	stw	r3,740(r16)
    51a4:	8200ba15 	stw	r8,744(r16)
    51a8:	84400e15 	stw	r17,56(r16)
    51ac:	8000b815 	stw	zero,736(r16)
    51b0:	00050e00 	call	50e0 <std>
    51b4:	81000217 	ldw	r4,8(r16)
    51b8:	880d883a 	mov	r6,r17
    51bc:	800f883a 	mov	r7,r16
    51c0:	01400284 	movi	r5,10
    51c4:	00050e00 	call	50e0 <std>
    51c8:	81000317 	ldw	r4,12(r16)
    51cc:	800f883a 	mov	r7,r16
    51d0:	01400484 	movi	r5,18
    51d4:	01800084 	movi	r6,2
    51d8:	dfc00217 	ldw	ra,8(sp)
    51dc:	dc400117 	ldw	r17,4(sp)
    51e0:	dc000017 	ldw	r16,0(sp)
    51e4:	dec00304 	addi	sp,sp,12
    51e8:	00050e01 	jmpi	50e0 <std>

000051ec <__fp_lock>:
    51ec:	0005883a 	mov	r2,zero
    51f0:	f800283a 	ret

000051f4 <__fp_unlock>:
    51f4:	0005883a 	mov	r2,zero
    51f8:	f800283a 	ret

000051fc <__fp_unlock_all>:
    51fc:	00800074 	movhi	r2,1
    5200:	1081b304 	addi	r2,r2,1740
    5204:	11000017 	ldw	r4,0(r2)
    5208:	01400034 	movhi	r5,0
    520c:	29547d04 	addi	r5,r5,20980
    5210:	0005d441 	jmpi	5d44 <_fwalk>

00005214 <__fp_lock_all>:
    5214:	00800074 	movhi	r2,1
    5218:	1081b304 	addi	r2,r2,1740
    521c:	11000017 	ldw	r4,0(r2)
    5220:	01400034 	movhi	r5,0
    5224:	29547b04 	addi	r5,r5,20972
    5228:	0005d441 	jmpi	5d44 <_fwalk>

0000522c <_cleanup_r>:
    522c:	01400074 	movhi	r5,1
    5230:	29618304 	addi	r5,r5,-31220
    5234:	0005d441 	jmpi	5d44 <_fwalk>

00005238 <_cleanup>:
    5238:	00800074 	movhi	r2,1
    523c:	1081b404 	addi	r2,r2,1744
    5240:	11000017 	ldw	r4,0(r2)
    5244:	000522c1 	jmpi	522c <_cleanup_r>

00005248 <__sfmoreglue>:
    5248:	defffc04 	addi	sp,sp,-16
    524c:	dc400115 	stw	r17,4(sp)
    5250:	2c401724 	muli	r17,r5,92
    5254:	dc800215 	stw	r18,8(sp)
    5258:	2825883a 	mov	r18,r5
    525c:	89400304 	addi	r5,r17,12
    5260:	dc000015 	stw	r16,0(sp)
    5264:	dfc00315 	stw	ra,12(sp)
    5268:	00060540 	call	6054 <_malloc_r>
    526c:	0021883a 	mov	r16,zero
    5270:	880d883a 	mov	r6,r17
    5274:	000b883a 	mov	r5,zero
    5278:	10000626 	beq	r2,zero,5294 <__sfmoreglue+0x4c>
    527c:	11000304 	addi	r4,r2,12
    5280:	14800115 	stw	r18,4(r2)
    5284:	10000015 	stw	zero,0(r2)
    5288:	11000215 	stw	r4,8(r2)
    528c:	1021883a 	mov	r16,r2
    5290:	00069f80 	call	69f8 <memset>
    5294:	8005883a 	mov	r2,r16
    5298:	dfc00317 	ldw	ra,12(sp)
    529c:	dc800217 	ldw	r18,8(sp)
    52a0:	dc400117 	ldw	r17,4(sp)
    52a4:	dc000017 	ldw	r16,0(sp)
    52a8:	dec00404 	addi	sp,sp,16
    52ac:	f800283a 	ret

000052b0 <__sfp>:
    52b0:	defffd04 	addi	sp,sp,-12
    52b4:	00800074 	movhi	r2,1
    52b8:	1081b404 	addi	r2,r2,1744
    52bc:	dc000015 	stw	r16,0(sp)
    52c0:	14000017 	ldw	r16,0(r2)
    52c4:	dc400115 	stw	r17,4(sp)
    52c8:	dfc00215 	stw	ra,8(sp)
    52cc:	80800e17 	ldw	r2,56(r16)
    52d0:	2023883a 	mov	r17,r4
    52d4:	10002626 	beq	r2,zero,5370 <__sfp+0xc0>
    52d8:	8400b804 	addi	r16,r16,736
    52dc:	80800117 	ldw	r2,4(r16)
    52e0:	81000217 	ldw	r4,8(r16)
    52e4:	10ffffc4 	addi	r3,r2,-1
    52e8:	18000916 	blt	r3,zero,5310 <__sfp+0x60>
    52ec:	2080030f 	ldh	r2,12(r4)
    52f0:	10000b26 	beq	r2,zero,5320 <__sfp+0x70>
    52f4:	017fffc4 	movi	r5,-1
    52f8:	00000206 	br	5304 <__sfp+0x54>
    52fc:	2080030f 	ldh	r2,12(r4)
    5300:	10000726 	beq	r2,zero,5320 <__sfp+0x70>
    5304:	18ffffc4 	addi	r3,r3,-1
    5308:	21001704 	addi	r4,r4,92
    530c:	197ffb1e 	bne	r3,r5,52fc <__sfp+0x4c>
    5310:	80800017 	ldw	r2,0(r16)
    5314:	10001926 	beq	r2,zero,537c <__sfp+0xcc>
    5318:	1021883a 	mov	r16,r2
    531c:	003fef06 	br	52dc <__sfp+0x2c>
    5320:	00bfffc4 	movi	r2,-1
    5324:	00c00044 	movi	r3,1
    5328:	2080038d 	sth	r2,14(r4)
    532c:	20c0030d 	sth	r3,12(r4)
    5330:	20000015 	stw	zero,0(r4)
    5334:	20000215 	stw	zero,8(r4)
    5338:	20000115 	stw	zero,4(r4)
    533c:	20000415 	stw	zero,16(r4)
    5340:	20000515 	stw	zero,20(r4)
    5344:	20000615 	stw	zero,24(r4)
    5348:	20000c15 	stw	zero,48(r4)
    534c:	20000d15 	stw	zero,52(r4)
    5350:	20001115 	stw	zero,68(r4)
    5354:	20001215 	stw	zero,72(r4)
    5358:	2005883a 	mov	r2,r4
    535c:	dfc00217 	ldw	ra,8(sp)
    5360:	dc400117 	ldw	r17,4(sp)
    5364:	dc000017 	ldw	r16,0(sp)
    5368:	dec00304 	addi	sp,sp,12
    536c:	f800283a 	ret
    5370:	8009883a 	mov	r4,r16
    5374:	00051480 	call	5148 <__sinit>
    5378:	003fd706 	br	52d8 <__sfp+0x28>
    537c:	8809883a 	mov	r4,r17
    5380:	01400104 	movi	r5,4
    5384:	00052480 	call	5248 <__sfmoreglue>
    5388:	80800015 	stw	r2,0(r16)
    538c:	103fe21e 	bne	r2,zero,5318 <__sfp+0x68>
    5390:	00800304 	movi	r2,12
    5394:	0009883a 	mov	r4,zero
    5398:	88800015 	stw	r2,0(r17)
    539c:	003fee06 	br	5358 <__sfp+0xa8>

000053a0 <_malloc_trim_r>:
    53a0:	defffb04 	addi	sp,sp,-20
    53a4:	dcc00315 	stw	r19,12(sp)
    53a8:	04c00074 	movhi	r19,1
    53ac:	9cfbfd04 	addi	r19,r19,-4108
    53b0:	dc800215 	stw	r18,8(sp)
    53b4:	dc400115 	stw	r17,4(sp)
    53b8:	dc000015 	stw	r16,0(sp)
    53bc:	2823883a 	mov	r17,r5
    53c0:	2025883a 	mov	r18,r4
    53c4:	dfc00415 	stw	ra,16(sp)
    53c8:	000b0440 	call	b044 <__malloc_lock>
    53cc:	98800217 	ldw	r2,8(r19)
    53d0:	9009883a 	mov	r4,r18
    53d4:	000b883a 	mov	r5,zero
    53d8:	10c00117 	ldw	r3,4(r2)
    53dc:	00bfff04 	movi	r2,-4
    53e0:	18a0703a 	and	r16,r3,r2
    53e4:	8463c83a 	sub	r17,r16,r17
    53e8:	8c43fbc4 	addi	r17,r17,4079
    53ec:	8822d33a 	srli	r17,r17,12
    53f0:	0083ffc4 	movi	r2,4095
    53f4:	8c7fffc4 	addi	r17,r17,-1
    53f8:	8822933a 	slli	r17,r17,12
    53fc:	1440060e 	bge	r2,r17,5418 <_malloc_trim_r+0x78>
    5400:	00080e80 	call	80e8 <_sbrk_r>
    5404:	98c00217 	ldw	r3,8(r19)
    5408:	9009883a 	mov	r4,r18
    540c:	044bc83a 	sub	r5,zero,r17
    5410:	80c7883a 	add	r3,r16,r3
    5414:	10c00926 	beq	r2,r3,543c <_malloc_trim_r+0x9c>
    5418:	000b0640 	call	b064 <__malloc_unlock>
    541c:	0005883a 	mov	r2,zero
    5420:	dfc00417 	ldw	ra,16(sp)
    5424:	dcc00317 	ldw	r19,12(sp)
    5428:	dc800217 	ldw	r18,8(sp)
    542c:	dc400117 	ldw	r17,4(sp)
    5430:	dc000017 	ldw	r16,0(sp)
    5434:	dec00504 	addi	sp,sp,20
    5438:	f800283a 	ret
    543c:	9009883a 	mov	r4,r18
    5440:	00080e80 	call	80e8 <_sbrk_r>
    5444:	844dc83a 	sub	r6,r16,r17
    5448:	00ffffc4 	movi	r3,-1
    544c:	9009883a 	mov	r4,r18
    5450:	000b883a 	mov	r5,zero
    5454:	01c00074 	movhi	r7,1
    5458:	39c8b404 	addi	r7,r7,8912
    545c:	31800054 	ori	r6,r6,1
    5460:	10c00926 	beq	r2,r3,5488 <_malloc_trim_r+0xe8>
    5464:	38800017 	ldw	r2,0(r7)
    5468:	98c00217 	ldw	r3,8(r19)
    546c:	9009883a 	mov	r4,r18
    5470:	1445c83a 	sub	r2,r2,r17
    5474:	38800015 	stw	r2,0(r7)
    5478:	19800115 	stw	r6,4(r3)
    547c:	000b0640 	call	b064 <__malloc_unlock>
    5480:	00800044 	movi	r2,1
    5484:	003fe606 	br	5420 <_malloc_trim_r+0x80>
    5488:	00080e80 	call	80e8 <_sbrk_r>
    548c:	99800217 	ldw	r6,8(r19)
    5490:	100f883a 	mov	r7,r2
    5494:	9009883a 	mov	r4,r18
    5498:	1187c83a 	sub	r3,r2,r6
    549c:	008003c4 	movi	r2,15
    54a0:	19400054 	ori	r5,r3,1
    54a4:	10ffdc0e 	bge	r2,r3,5418 <_malloc_trim_r+0x78>
    54a8:	00800074 	movhi	r2,1
    54ac:	1081b804 	addi	r2,r2,1760
    54b0:	10c00017 	ldw	r3,0(r2)
    54b4:	00800074 	movhi	r2,1
    54b8:	1088b404 	addi	r2,r2,8912
    54bc:	31400115 	stw	r5,4(r6)
    54c0:	38c7c83a 	sub	r3,r7,r3
    54c4:	10c00015 	stw	r3,0(r2)
    54c8:	003fd306 	br	5418 <_malloc_trim_r+0x78>

000054cc <_free_r>:
    54cc:	defffd04 	addi	sp,sp,-12
    54d0:	dc400115 	stw	r17,4(sp)
    54d4:	dc000015 	stw	r16,0(sp)
    54d8:	dfc00215 	stw	ra,8(sp)
    54dc:	2821883a 	mov	r16,r5
    54e0:	2023883a 	mov	r17,r4
    54e4:	28005a26 	beq	r5,zero,5650 <_free_r+0x184>
    54e8:	000b0440 	call	b044 <__malloc_lock>
    54ec:	823ffe04 	addi	r8,r16,-8
    54f0:	41400117 	ldw	r5,4(r8)
    54f4:	00bfff84 	movi	r2,-2
    54f8:	02800074 	movhi	r10,1
    54fc:	52bbfd04 	addi	r10,r10,-4108
    5500:	288e703a 	and	r7,r5,r2
    5504:	41cd883a 	add	r6,r8,r7
    5508:	30c00117 	ldw	r3,4(r6)
    550c:	51000217 	ldw	r4,8(r10)
    5510:	00bfff04 	movi	r2,-4
    5514:	1892703a 	and	r9,r3,r2
    5518:	5017883a 	mov	r11,r10
    551c:	31006726 	beq	r6,r4,56bc <_free_r+0x1f0>
    5520:	2880004c 	andi	r2,r5,1
    5524:	1005003a 	cmpeq	r2,r2,zero
    5528:	32400115 	stw	r9,4(r6)
    552c:	10001a1e 	bne	r2,zero,5598 <_free_r+0xcc>
    5530:	000b883a 	mov	r5,zero
    5534:	3247883a 	add	r3,r6,r9
    5538:	18800117 	ldw	r2,4(r3)
    553c:	1080004c 	andi	r2,r2,1
    5540:	1000231e 	bne	r2,zero,55d0 <_free_r+0x104>
    5544:	280ac03a 	cmpne	r5,r5,zero
    5548:	3a4f883a 	add	r7,r7,r9
    554c:	2800451e 	bne	r5,zero,5664 <_free_r+0x198>
    5550:	31000217 	ldw	r4,8(r6)
    5554:	00800074 	movhi	r2,1
    5558:	10bbff04 	addi	r2,r2,-4100
    555c:	20807b26 	beq	r4,r2,574c <_free_r+0x280>
    5560:	30800317 	ldw	r2,12(r6)
    5564:	3a07883a 	add	r3,r7,r8
    5568:	19c00015 	stw	r7,0(r3)
    556c:	11000215 	stw	r4,8(r2)
    5570:	20800315 	stw	r2,12(r4)
    5574:	38800054 	ori	r2,r7,1
    5578:	40800115 	stw	r2,4(r8)
    557c:	28001a26 	beq	r5,zero,55e8 <_free_r+0x11c>
    5580:	8809883a 	mov	r4,r17
    5584:	dfc00217 	ldw	ra,8(sp)
    5588:	dc400117 	ldw	r17,4(sp)
    558c:	dc000017 	ldw	r16,0(sp)
    5590:	dec00304 	addi	sp,sp,12
    5594:	000b0641 	jmpi	b064 <__malloc_unlock>
    5598:	80bffe17 	ldw	r2,-8(r16)
    559c:	50c00204 	addi	r3,r10,8
    55a0:	4091c83a 	sub	r8,r8,r2
    55a4:	41000217 	ldw	r4,8(r8)
    55a8:	388f883a 	add	r7,r7,r2
    55ac:	20c06126 	beq	r4,r3,5734 <_free_r+0x268>
    55b0:	40800317 	ldw	r2,12(r8)
    55b4:	3247883a 	add	r3,r6,r9
    55b8:	000b883a 	mov	r5,zero
    55bc:	11000215 	stw	r4,8(r2)
    55c0:	20800315 	stw	r2,12(r4)
    55c4:	18800117 	ldw	r2,4(r3)
    55c8:	1080004c 	andi	r2,r2,1
    55cc:	103fdd26 	beq	r2,zero,5544 <_free_r+0x78>
    55d0:	38800054 	ori	r2,r7,1
    55d4:	3a07883a 	add	r3,r7,r8
    55d8:	280ac03a 	cmpne	r5,r5,zero
    55dc:	40800115 	stw	r2,4(r8)
    55e0:	19c00015 	stw	r7,0(r3)
    55e4:	283fe61e 	bne	r5,zero,5580 <_free_r+0xb4>
    55e8:	00807fc4 	movi	r2,511
    55ec:	11c01f2e 	bgeu	r2,r7,566c <_free_r+0x1a0>
    55f0:	3806d27a 	srli	r3,r7,9
    55f4:	1800481e 	bne	r3,zero,5718 <_free_r+0x24c>
    55f8:	3804d0fa 	srli	r2,r7,3
    55fc:	100690fa 	slli	r3,r2,3
    5600:	1acd883a 	add	r6,r3,r11
    5604:	31400217 	ldw	r5,8(r6)
    5608:	31405926 	beq	r6,r5,5770 <_free_r+0x2a4>
    560c:	28800117 	ldw	r2,4(r5)
    5610:	00ffff04 	movi	r3,-4
    5614:	10c4703a 	and	r2,r2,r3
    5618:	3880022e 	bgeu	r7,r2,5624 <_free_r+0x158>
    561c:	29400217 	ldw	r5,8(r5)
    5620:	317ffa1e 	bne	r6,r5,560c <_free_r+0x140>
    5624:	29800317 	ldw	r6,12(r5)
    5628:	41800315 	stw	r6,12(r8)
    562c:	41400215 	stw	r5,8(r8)
    5630:	8809883a 	mov	r4,r17
    5634:	2a000315 	stw	r8,12(r5)
    5638:	32000215 	stw	r8,8(r6)
    563c:	dfc00217 	ldw	ra,8(sp)
    5640:	dc400117 	ldw	r17,4(sp)
    5644:	dc000017 	ldw	r16,0(sp)
    5648:	dec00304 	addi	sp,sp,12
    564c:	000b0641 	jmpi	b064 <__malloc_unlock>
    5650:	dfc00217 	ldw	ra,8(sp)
    5654:	dc400117 	ldw	r17,4(sp)
    5658:	dc000017 	ldw	r16,0(sp)
    565c:	dec00304 	addi	sp,sp,12
    5660:	f800283a 	ret
    5664:	31000217 	ldw	r4,8(r6)
    5668:	003fbd06 	br	5560 <_free_r+0x94>
    566c:	3806d0fa 	srli	r3,r7,3
    5670:	00800044 	movi	r2,1
    5674:	51400117 	ldw	r5,4(r10)
    5678:	180890fa 	slli	r4,r3,3
    567c:	1807d0ba 	srai	r3,r3,2
    5680:	22c9883a 	add	r4,r4,r11
    5684:	21800217 	ldw	r6,8(r4)
    5688:	10c4983a 	sll	r2,r2,r3
    568c:	41000315 	stw	r4,12(r8)
    5690:	41800215 	stw	r6,8(r8)
    5694:	288ab03a 	or	r5,r5,r2
    5698:	22000215 	stw	r8,8(r4)
    569c:	8809883a 	mov	r4,r17
    56a0:	51400115 	stw	r5,4(r10)
    56a4:	32000315 	stw	r8,12(r6)
    56a8:	dfc00217 	ldw	ra,8(sp)
    56ac:	dc400117 	ldw	r17,4(sp)
    56b0:	dc000017 	ldw	r16,0(sp)
    56b4:	dec00304 	addi	sp,sp,12
    56b8:	000b0641 	jmpi	b064 <__malloc_unlock>
    56bc:	2880004c 	andi	r2,r5,1
    56c0:	3a4d883a 	add	r6,r7,r9
    56c4:	1000071e 	bne	r2,zero,56e4 <_free_r+0x218>
    56c8:	80bffe17 	ldw	r2,-8(r16)
    56cc:	4091c83a 	sub	r8,r8,r2
    56d0:	41000317 	ldw	r4,12(r8)
    56d4:	40c00217 	ldw	r3,8(r8)
    56d8:	308d883a 	add	r6,r6,r2
    56dc:	20c00215 	stw	r3,8(r4)
    56e0:	19000315 	stw	r4,12(r3)
    56e4:	00800074 	movhi	r2,1
    56e8:	1081b704 	addi	r2,r2,1756
    56ec:	11000017 	ldw	r4,0(r2)
    56f0:	30c00054 	ori	r3,r6,1
    56f4:	52000215 	stw	r8,8(r10)
    56f8:	40c00115 	stw	r3,4(r8)
    56fc:	313fa036 	bltu	r6,r4,5580 <_free_r+0xb4>
    5700:	00800074 	movhi	r2,1
    5704:	1088aa04 	addi	r2,r2,8872
    5708:	11400017 	ldw	r5,0(r2)
    570c:	8809883a 	mov	r4,r17
    5710:	00053a00 	call	53a0 <_malloc_trim_r>
    5714:	003f9a06 	br	5580 <_free_r+0xb4>
    5718:	00800104 	movi	r2,4
    571c:	10c0072e 	bgeu	r2,r3,573c <_free_r+0x270>
    5720:	00800504 	movi	r2,20
    5724:	10c01936 	bltu	r2,r3,578c <_free_r+0x2c0>
    5728:	188016c4 	addi	r2,r3,91
    572c:	100690fa 	slli	r3,r2,3
    5730:	003fb306 	br	5600 <_free_r+0x134>
    5734:	01400044 	movi	r5,1
    5738:	003f7e06 	br	5534 <_free_r+0x68>
    573c:	3804d1ba 	srli	r2,r7,6
    5740:	10800e04 	addi	r2,r2,56
    5744:	100690fa 	slli	r3,r2,3
    5748:	003fad06 	br	5600 <_free_r+0x134>
    574c:	22000315 	stw	r8,12(r4)
    5750:	22000215 	stw	r8,8(r4)
    5754:	3a05883a 	add	r2,r7,r8
    5758:	38c00054 	ori	r3,r7,1
    575c:	11c00015 	stw	r7,0(r2)
    5760:	41000215 	stw	r4,8(r8)
    5764:	40c00115 	stw	r3,4(r8)
    5768:	41000315 	stw	r4,12(r8)
    576c:	003f8406 	br	5580 <_free_r+0xb4>
    5770:	1005d0ba 	srai	r2,r2,2
    5774:	00c00044 	movi	r3,1
    5778:	51000117 	ldw	r4,4(r10)
    577c:	1886983a 	sll	r3,r3,r2
    5780:	20c8b03a 	or	r4,r4,r3
    5784:	51000115 	stw	r4,4(r10)
    5788:	003fa706 	br	5628 <_free_r+0x15c>
    578c:	00801504 	movi	r2,84
    5790:	10c00436 	bltu	r2,r3,57a4 <_free_r+0x2d8>
    5794:	3804d33a 	srli	r2,r7,12
    5798:	10801b84 	addi	r2,r2,110
    579c:	100690fa 	slli	r3,r2,3
    57a0:	003f9706 	br	5600 <_free_r+0x134>
    57a4:	00805504 	movi	r2,340
    57a8:	10c00436 	bltu	r2,r3,57bc <_free_r+0x2f0>
    57ac:	3804d3fa 	srli	r2,r7,15
    57b0:	10801dc4 	addi	r2,r2,119
    57b4:	100690fa 	slli	r3,r2,3
    57b8:	003f9106 	br	5600 <_free_r+0x134>
    57bc:	00815504 	movi	r2,1364
    57c0:	10c0032e 	bgeu	r2,r3,57d0 <_free_r+0x304>
    57c4:	00801f84 	movi	r2,126
    57c8:	00c0fc04 	movi	r3,1008
    57cc:	003f8c06 	br	5600 <_free_r+0x134>
    57d0:	3804d4ba 	srli	r2,r7,18
    57d4:	10801f04 	addi	r2,r2,124
    57d8:	100690fa 	slli	r3,r2,3
    57dc:	003f8806 	br	5600 <_free_r+0x134>

000057e0 <__sfvwrite_r>:
    57e0:	30800217 	ldw	r2,8(r6)
    57e4:	defff504 	addi	sp,sp,-44
    57e8:	df000915 	stw	fp,36(sp)
    57ec:	dd800715 	stw	r22,28(sp)
    57f0:	dc800315 	stw	r18,12(sp)
    57f4:	dfc00a15 	stw	ra,40(sp)
    57f8:	ddc00815 	stw	r23,32(sp)
    57fc:	dd400615 	stw	r21,24(sp)
    5800:	dd000515 	stw	r20,20(sp)
    5804:	dcc00415 	stw	r19,16(sp)
    5808:	dc400215 	stw	r17,8(sp)
    580c:	dc000115 	stw	r16,4(sp)
    5810:	302d883a 	mov	r22,r6
    5814:	2039883a 	mov	fp,r4
    5818:	2825883a 	mov	r18,r5
    581c:	10001c26 	beq	r2,zero,5890 <__sfvwrite_r+0xb0>
    5820:	29c0030b 	ldhu	r7,12(r5)
    5824:	3880020c 	andi	r2,r7,8
    5828:	10002726 	beq	r2,zero,58c8 <__sfvwrite_r+0xe8>
    582c:	28800417 	ldw	r2,16(r5)
    5830:	10002526 	beq	r2,zero,58c8 <__sfvwrite_r+0xe8>
    5834:	3880008c 	andi	r2,r7,2
    5838:	b5400017 	ldw	r21,0(r22)
    583c:	10002826 	beq	r2,zero,58e0 <__sfvwrite_r+0x100>
    5840:	0021883a 	mov	r16,zero
    5844:	0023883a 	mov	r17,zero
    5848:	880d883a 	mov	r6,r17
    584c:	e009883a 	mov	r4,fp
    5850:	00810004 	movi	r2,1024
    5854:	80006e26 	beq	r16,zero,5a10 <__sfvwrite_r+0x230>
    5858:	800f883a 	mov	r7,r16
    585c:	91400717 	ldw	r5,28(r18)
    5860:	1400012e 	bgeu	r2,r16,5868 <__sfvwrite_r+0x88>
    5864:	100f883a 	mov	r7,r2
    5868:	90c00917 	ldw	r3,36(r18)
    586c:	183ee83a 	callr	r3
    5870:	1007883a 	mov	r3,r2
    5874:	80a1c83a 	sub	r16,r16,r2
    5878:	88a3883a 	add	r17,r17,r2
    587c:	00806d0e 	bge	zero,r2,5a34 <__sfvwrite_r+0x254>
    5880:	b0800217 	ldw	r2,8(r22)
    5884:	10c5c83a 	sub	r2,r2,r3
    5888:	b0800215 	stw	r2,8(r22)
    588c:	103fee1e 	bne	r2,zero,5848 <__sfvwrite_r+0x68>
    5890:	0009883a 	mov	r4,zero
    5894:	2005883a 	mov	r2,r4
    5898:	dfc00a17 	ldw	ra,40(sp)
    589c:	df000917 	ldw	fp,36(sp)
    58a0:	ddc00817 	ldw	r23,32(sp)
    58a4:	dd800717 	ldw	r22,28(sp)
    58a8:	dd400617 	ldw	r21,24(sp)
    58ac:	dd000517 	ldw	r20,20(sp)
    58b0:	dcc00417 	ldw	r19,16(sp)
    58b4:	dc800317 	ldw	r18,12(sp)
    58b8:	dc400217 	ldw	r17,8(sp)
    58bc:	dc000117 	ldw	r16,4(sp)
    58c0:	dec00b04 	addi	sp,sp,44
    58c4:	f800283a 	ret
    58c8:	00035a80 	call	35a8 <__swsetup_r>
    58cc:	1000e41e 	bne	r2,zero,5c60 <__sfvwrite_r+0x480>
    58d0:	91c0030b 	ldhu	r7,12(r18)
    58d4:	b5400017 	ldw	r21,0(r22)
    58d8:	3880008c 	andi	r2,r7,2
    58dc:	103fd81e 	bne	r2,zero,5840 <__sfvwrite_r+0x60>
    58e0:	3880004c 	andi	r2,r7,1
    58e4:	1005003a 	cmpeq	r2,r2,zero
    58e8:	10005726 	beq	r2,zero,5a48 <__sfvwrite_r+0x268>
    58ec:	0029883a 	mov	r20,zero
    58f0:	002f883a 	mov	r23,zero
    58f4:	a0004226 	beq	r20,zero,5a00 <__sfvwrite_r+0x220>
    58f8:	3880800c 	andi	r2,r7,512
    58fc:	94000217 	ldw	r16,8(r18)
    5900:	10008b26 	beq	r2,zero,5b30 <__sfvwrite_r+0x350>
    5904:	800d883a 	mov	r6,r16
    5908:	a400a536 	bltu	r20,r16,5ba0 <__sfvwrite_r+0x3c0>
    590c:	3881200c 	andi	r2,r7,1152
    5910:	10002726 	beq	r2,zero,59b0 <__sfvwrite_r+0x1d0>
    5914:	90800517 	ldw	r2,20(r18)
    5918:	92000417 	ldw	r8,16(r18)
    591c:	91400017 	ldw	r5,0(r18)
    5920:	1087883a 	add	r3,r2,r2
    5924:	1887883a 	add	r3,r3,r2
    5928:	1808d7fa 	srli	r4,r3,31
    592c:	2a21c83a 	sub	r16,r5,r8
    5930:	80800044 	addi	r2,r16,1
    5934:	20c9883a 	add	r4,r4,r3
    5938:	2027d07a 	srai	r19,r4,1
    593c:	a085883a 	add	r2,r20,r2
    5940:	980d883a 	mov	r6,r19
    5944:	9880022e 	bgeu	r19,r2,5950 <__sfvwrite_r+0x170>
    5948:	1027883a 	mov	r19,r2
    594c:	100d883a 	mov	r6,r2
    5950:	3881000c 	andi	r2,r7,1024
    5954:	1000b826 	beq	r2,zero,5c38 <__sfvwrite_r+0x458>
    5958:	300b883a 	mov	r5,r6
    595c:	e009883a 	mov	r4,fp
    5960:	00060540 	call	6054 <_malloc_r>
    5964:	10003126 	beq	r2,zero,5a2c <__sfvwrite_r+0x24c>
    5968:	91400417 	ldw	r5,16(r18)
    596c:	1009883a 	mov	r4,r2
    5970:	800d883a 	mov	r6,r16
    5974:	1023883a 	mov	r17,r2
    5978:	00068780 	call	6878 <memcpy>
    597c:	90c0030b 	ldhu	r3,12(r18)
    5980:	00beffc4 	movi	r2,-1025
    5984:	1886703a 	and	r3,r3,r2
    5988:	18c02014 	ori	r3,r3,128
    598c:	90c0030d 	sth	r3,12(r18)
    5990:	9c07c83a 	sub	r3,r19,r16
    5994:	8c05883a 	add	r2,r17,r16
    5998:	a00d883a 	mov	r6,r20
    599c:	a021883a 	mov	r16,r20
    59a0:	90800015 	stw	r2,0(r18)
    59a4:	90c00215 	stw	r3,8(r18)
    59a8:	94400415 	stw	r17,16(r18)
    59ac:	94c00515 	stw	r19,20(r18)
    59b0:	91000017 	ldw	r4,0(r18)
    59b4:	b80b883a 	mov	r5,r23
    59b8:	a023883a 	mov	r17,r20
    59bc:	00069180 	call	6918 <memmove>
    59c0:	90c00217 	ldw	r3,8(r18)
    59c4:	90800017 	ldw	r2,0(r18)
    59c8:	a027883a 	mov	r19,r20
    59cc:	1c07c83a 	sub	r3,r3,r16
    59d0:	1405883a 	add	r2,r2,r16
    59d4:	90c00215 	stw	r3,8(r18)
    59d8:	a021883a 	mov	r16,r20
    59dc:	90800015 	stw	r2,0(r18)
    59e0:	b0800217 	ldw	r2,8(r22)
    59e4:	1405c83a 	sub	r2,r2,r16
    59e8:	b0800215 	stw	r2,8(r22)
    59ec:	103fa826 	beq	r2,zero,5890 <__sfvwrite_r+0xb0>
    59f0:	a469c83a 	sub	r20,r20,r17
    59f4:	91c0030b 	ldhu	r7,12(r18)
    59f8:	bcef883a 	add	r23,r23,r19
    59fc:	a03fbe1e 	bne	r20,zero,58f8 <__sfvwrite_r+0x118>
    5a00:	adc00017 	ldw	r23,0(r21)
    5a04:	ad000117 	ldw	r20,4(r21)
    5a08:	ad400204 	addi	r21,r21,8
    5a0c:	003fb906 	br	58f4 <__sfvwrite_r+0x114>
    5a10:	ac400017 	ldw	r17,0(r21)
    5a14:	ac000117 	ldw	r16,4(r21)
    5a18:	ad400204 	addi	r21,r21,8
    5a1c:	003f8a06 	br	5848 <__sfvwrite_r+0x68>
    5a20:	91400417 	ldw	r5,16(r18)
    5a24:	e009883a 	mov	r4,fp
    5a28:	00054cc0 	call	54cc <_free_r>
    5a2c:	00800304 	movi	r2,12
    5a30:	e0800015 	stw	r2,0(fp)
    5a34:	9080030b 	ldhu	r2,12(r18)
    5a38:	013fffc4 	movi	r4,-1
    5a3c:	10801014 	ori	r2,r2,64
    5a40:	9080030d 	sth	r2,12(r18)
    5a44:	003f9306 	br	5894 <__sfvwrite_r+0xb4>
    5a48:	0027883a 	mov	r19,zero
    5a4c:	002f883a 	mov	r23,zero
    5a50:	d8000015 	stw	zero,0(sp)
    5a54:	0029883a 	mov	r20,zero
    5a58:	98001e26 	beq	r19,zero,5ad4 <__sfvwrite_r+0x2f4>
    5a5c:	d8c00017 	ldw	r3,0(sp)
    5a60:	1804c03a 	cmpne	r2,r3,zero
    5a64:	10005e26 	beq	r2,zero,5be0 <__sfvwrite_r+0x400>
    5a68:	9821883a 	mov	r16,r19
    5a6c:	a4c0012e 	bgeu	r20,r19,5a74 <__sfvwrite_r+0x294>
    5a70:	a021883a 	mov	r16,r20
    5a74:	91000017 	ldw	r4,0(r18)
    5a78:	90800417 	ldw	r2,16(r18)
    5a7c:	91800217 	ldw	r6,8(r18)
    5a80:	91c00517 	ldw	r7,20(r18)
    5a84:	1100022e 	bgeu	r2,r4,5a90 <__sfvwrite_r+0x2b0>
    5a88:	31e3883a 	add	r17,r6,r7
    5a8c:	8c001616 	blt	r17,r16,5ae8 <__sfvwrite_r+0x308>
    5a90:	81c03816 	blt	r16,r7,5b74 <__sfvwrite_r+0x394>
    5a94:	90c00917 	ldw	r3,36(r18)
    5a98:	91400717 	ldw	r5,28(r18)
    5a9c:	e009883a 	mov	r4,fp
    5aa0:	b80d883a 	mov	r6,r23
    5aa4:	183ee83a 	callr	r3
    5aa8:	1023883a 	mov	r17,r2
    5aac:	00bfe10e 	bge	zero,r2,5a34 <__sfvwrite_r+0x254>
    5ab0:	a469c83a 	sub	r20,r20,r17
    5ab4:	a0001826 	beq	r20,zero,5b18 <__sfvwrite_r+0x338>
    5ab8:	b0800217 	ldw	r2,8(r22)
    5abc:	1445c83a 	sub	r2,r2,r17
    5ac0:	b0800215 	stw	r2,8(r22)
    5ac4:	103f7226 	beq	r2,zero,5890 <__sfvwrite_r+0xb0>
    5ac8:	9c67c83a 	sub	r19,r19,r17
    5acc:	bc6f883a 	add	r23,r23,r17
    5ad0:	983fe21e 	bne	r19,zero,5a5c <__sfvwrite_r+0x27c>
    5ad4:	adc00017 	ldw	r23,0(r21)
    5ad8:	acc00117 	ldw	r19,4(r21)
    5adc:	ad400204 	addi	r21,r21,8
    5ae0:	d8000015 	stw	zero,0(sp)
    5ae4:	003fdc06 	br	5a58 <__sfvwrite_r+0x278>
    5ae8:	b80b883a 	mov	r5,r23
    5aec:	880d883a 	mov	r6,r17
    5af0:	00069180 	call	6918 <memmove>
    5af4:	90c00017 	ldw	r3,0(r18)
    5af8:	e009883a 	mov	r4,fp
    5afc:	900b883a 	mov	r5,r18
    5b00:	1c47883a 	add	r3,r3,r17
    5b04:	90c00015 	stw	r3,0(r18)
    5b08:	0004eb00 	call	4eb0 <_fflush_r>
    5b0c:	103fc91e 	bne	r2,zero,5a34 <__sfvwrite_r+0x254>
    5b10:	a469c83a 	sub	r20,r20,r17
    5b14:	a03fe81e 	bne	r20,zero,5ab8 <__sfvwrite_r+0x2d8>
    5b18:	e009883a 	mov	r4,fp
    5b1c:	900b883a 	mov	r5,r18
    5b20:	0004eb00 	call	4eb0 <_fflush_r>
    5b24:	103fc31e 	bne	r2,zero,5a34 <__sfvwrite_r+0x254>
    5b28:	d8000015 	stw	zero,0(sp)
    5b2c:	003fe206 	br	5ab8 <__sfvwrite_r+0x2d8>
    5b30:	91000017 	ldw	r4,0(r18)
    5b34:	90800417 	ldw	r2,16(r18)
    5b38:	1100022e 	bgeu	r2,r4,5b44 <__sfvwrite_r+0x364>
    5b3c:	8023883a 	mov	r17,r16
    5b40:	85003136 	bltu	r16,r20,5c08 <__sfvwrite_r+0x428>
    5b44:	91c00517 	ldw	r7,20(r18)
    5b48:	a1c01836 	bltu	r20,r7,5bac <__sfvwrite_r+0x3cc>
    5b4c:	90c00917 	ldw	r3,36(r18)
    5b50:	91400717 	ldw	r5,28(r18)
    5b54:	e009883a 	mov	r4,fp
    5b58:	b80d883a 	mov	r6,r23
    5b5c:	183ee83a 	callr	r3
    5b60:	1021883a 	mov	r16,r2
    5b64:	00bfb30e 	bge	zero,r2,5a34 <__sfvwrite_r+0x254>
    5b68:	1023883a 	mov	r17,r2
    5b6c:	1027883a 	mov	r19,r2
    5b70:	003f9b06 	br	59e0 <__sfvwrite_r+0x200>
    5b74:	b80b883a 	mov	r5,r23
    5b78:	800d883a 	mov	r6,r16
    5b7c:	00069180 	call	6918 <memmove>
    5b80:	90c00217 	ldw	r3,8(r18)
    5b84:	90800017 	ldw	r2,0(r18)
    5b88:	8023883a 	mov	r17,r16
    5b8c:	1c07c83a 	sub	r3,r3,r16
    5b90:	1405883a 	add	r2,r2,r16
    5b94:	90c00215 	stw	r3,8(r18)
    5b98:	90800015 	stw	r2,0(r18)
    5b9c:	003fc406 	br	5ab0 <__sfvwrite_r+0x2d0>
    5ba0:	a00d883a 	mov	r6,r20
    5ba4:	a021883a 	mov	r16,r20
    5ba8:	003f8106 	br	59b0 <__sfvwrite_r+0x1d0>
    5bac:	b80b883a 	mov	r5,r23
    5bb0:	a00d883a 	mov	r6,r20
    5bb4:	00069180 	call	6918 <memmove>
    5bb8:	90c00217 	ldw	r3,8(r18)
    5bbc:	90800017 	ldw	r2,0(r18)
    5bc0:	a021883a 	mov	r16,r20
    5bc4:	1d07c83a 	sub	r3,r3,r20
    5bc8:	1505883a 	add	r2,r2,r20
    5bcc:	a023883a 	mov	r17,r20
    5bd0:	a027883a 	mov	r19,r20
    5bd4:	90c00215 	stw	r3,8(r18)
    5bd8:	90800015 	stw	r2,0(r18)
    5bdc:	003f8006 	br	59e0 <__sfvwrite_r+0x200>
    5be0:	b809883a 	mov	r4,r23
    5be4:	01400284 	movi	r5,10
    5be8:	980d883a 	mov	r6,r19
    5bec:	00067940 	call	6794 <memchr>
    5bf0:	10001726 	beq	r2,zero,5c50 <__sfvwrite_r+0x470>
    5bf4:	15c5c83a 	sub	r2,r2,r23
    5bf8:	15000044 	addi	r20,r2,1
    5bfc:	00800044 	movi	r2,1
    5c00:	d8800015 	stw	r2,0(sp)
    5c04:	003f9806 	br	5a68 <__sfvwrite_r+0x288>
    5c08:	b80b883a 	mov	r5,r23
    5c0c:	800d883a 	mov	r6,r16
    5c10:	00069180 	call	6918 <memmove>
    5c14:	90c00017 	ldw	r3,0(r18)
    5c18:	e009883a 	mov	r4,fp
    5c1c:	900b883a 	mov	r5,r18
    5c20:	1c07883a 	add	r3,r3,r16
    5c24:	90c00015 	stw	r3,0(r18)
    5c28:	8027883a 	mov	r19,r16
    5c2c:	0004eb00 	call	4eb0 <_fflush_r>
    5c30:	103f6b26 	beq	r2,zero,59e0 <__sfvwrite_r+0x200>
    5c34:	003f7f06 	br	5a34 <__sfvwrite_r+0x254>
    5c38:	400b883a 	mov	r5,r8
    5c3c:	e009883a 	mov	r4,fp
    5c40:	0007a840 	call	7a84 <_realloc_r>
    5c44:	103f7626 	beq	r2,zero,5a20 <__sfvwrite_r+0x240>
    5c48:	1023883a 	mov	r17,r2
    5c4c:	003f5006 	br	5990 <__sfvwrite_r+0x1b0>
    5c50:	00c00044 	movi	r3,1
    5c54:	9d000044 	addi	r20,r19,1
    5c58:	d8c00015 	stw	r3,0(sp)
    5c5c:	003f8206 	br	5a68 <__sfvwrite_r+0x288>
    5c60:	9080030b 	ldhu	r2,12(r18)
    5c64:	00c00244 	movi	r3,9
    5c68:	013fffc4 	movi	r4,-1
    5c6c:	10801014 	ori	r2,r2,64
    5c70:	9080030d 	sth	r2,12(r18)
    5c74:	e0c00015 	stw	r3,0(fp)
    5c78:	003f0606 	br	5894 <__sfvwrite_r+0xb4>

00005c7c <_fwalk_reent>:
    5c7c:	defff704 	addi	sp,sp,-36
    5c80:	dcc00315 	stw	r19,12(sp)
    5c84:	24c0b804 	addi	r19,r4,736
    5c88:	dd800615 	stw	r22,24(sp)
    5c8c:	dd400515 	stw	r21,20(sp)
    5c90:	dfc00815 	stw	ra,32(sp)
    5c94:	ddc00715 	stw	r23,28(sp)
    5c98:	dd000415 	stw	r20,16(sp)
    5c9c:	dc800215 	stw	r18,8(sp)
    5ca0:	dc400115 	stw	r17,4(sp)
    5ca4:	dc000015 	stw	r16,0(sp)
    5ca8:	202b883a 	mov	r21,r4
    5cac:	282d883a 	mov	r22,r5
    5cb0:	00051380 	call	5138 <__sfp_lock_acquire>
    5cb4:	98002126 	beq	r19,zero,5d3c <_fwalk_reent+0xc0>
    5cb8:	002f883a 	mov	r23,zero
    5cbc:	9c800117 	ldw	r18,4(r19)
    5cc0:	9c000217 	ldw	r16,8(r19)
    5cc4:	90bfffc4 	addi	r2,r18,-1
    5cc8:	10000d16 	blt	r2,zero,5d00 <_fwalk_reent+0x84>
    5ccc:	0023883a 	mov	r17,zero
    5cd0:	053fffc4 	movi	r20,-1
    5cd4:	8080030f 	ldh	r2,12(r16)
    5cd8:	8c400044 	addi	r17,r17,1
    5cdc:	10000626 	beq	r2,zero,5cf8 <_fwalk_reent+0x7c>
    5ce0:	8080038f 	ldh	r2,14(r16)
    5ce4:	800b883a 	mov	r5,r16
    5ce8:	a809883a 	mov	r4,r21
    5cec:	15000226 	beq	r2,r20,5cf8 <_fwalk_reent+0x7c>
    5cf0:	b03ee83a 	callr	r22
    5cf4:	b8aeb03a 	or	r23,r23,r2
    5cf8:	84001704 	addi	r16,r16,92
    5cfc:	947ff51e 	bne	r18,r17,5cd4 <_fwalk_reent+0x58>
    5d00:	9cc00017 	ldw	r19,0(r19)
    5d04:	983fed1e 	bne	r19,zero,5cbc <_fwalk_reent+0x40>
    5d08:	000513c0 	call	513c <__sfp_lock_release>
    5d0c:	b805883a 	mov	r2,r23
    5d10:	dfc00817 	ldw	ra,32(sp)
    5d14:	ddc00717 	ldw	r23,28(sp)
    5d18:	dd800617 	ldw	r22,24(sp)
    5d1c:	dd400517 	ldw	r21,20(sp)
    5d20:	dd000417 	ldw	r20,16(sp)
    5d24:	dcc00317 	ldw	r19,12(sp)
    5d28:	dc800217 	ldw	r18,8(sp)
    5d2c:	dc400117 	ldw	r17,4(sp)
    5d30:	dc000017 	ldw	r16,0(sp)
    5d34:	dec00904 	addi	sp,sp,36
    5d38:	f800283a 	ret
    5d3c:	002f883a 	mov	r23,zero
    5d40:	003ff106 	br	5d08 <_fwalk_reent+0x8c>

00005d44 <_fwalk>:
    5d44:	defff804 	addi	sp,sp,-32
    5d48:	dcc00315 	stw	r19,12(sp)
    5d4c:	24c0b804 	addi	r19,r4,736
    5d50:	dd400515 	stw	r21,20(sp)
    5d54:	dfc00715 	stw	ra,28(sp)
    5d58:	dd800615 	stw	r22,24(sp)
    5d5c:	dd000415 	stw	r20,16(sp)
    5d60:	dc800215 	stw	r18,8(sp)
    5d64:	dc400115 	stw	r17,4(sp)
    5d68:	dc000015 	stw	r16,0(sp)
    5d6c:	282b883a 	mov	r21,r5
    5d70:	00051380 	call	5138 <__sfp_lock_acquire>
    5d74:	98001f26 	beq	r19,zero,5df4 <_fwalk+0xb0>
    5d78:	002d883a 	mov	r22,zero
    5d7c:	9c800117 	ldw	r18,4(r19)
    5d80:	9c000217 	ldw	r16,8(r19)
    5d84:	90bfffc4 	addi	r2,r18,-1
    5d88:	10000c16 	blt	r2,zero,5dbc <_fwalk+0x78>
    5d8c:	0023883a 	mov	r17,zero
    5d90:	053fffc4 	movi	r20,-1
    5d94:	8080030f 	ldh	r2,12(r16)
    5d98:	8c400044 	addi	r17,r17,1
    5d9c:	10000526 	beq	r2,zero,5db4 <_fwalk+0x70>
    5da0:	8080038f 	ldh	r2,14(r16)
    5da4:	8009883a 	mov	r4,r16
    5da8:	15000226 	beq	r2,r20,5db4 <_fwalk+0x70>
    5dac:	a83ee83a 	callr	r21
    5db0:	b0acb03a 	or	r22,r22,r2
    5db4:	84001704 	addi	r16,r16,92
    5db8:	947ff61e 	bne	r18,r17,5d94 <_fwalk+0x50>
    5dbc:	9cc00017 	ldw	r19,0(r19)
    5dc0:	983fee1e 	bne	r19,zero,5d7c <_fwalk+0x38>
    5dc4:	000513c0 	call	513c <__sfp_lock_release>
    5dc8:	b005883a 	mov	r2,r22
    5dcc:	dfc00717 	ldw	ra,28(sp)
    5dd0:	dd800617 	ldw	r22,24(sp)
    5dd4:	dd400517 	ldw	r21,20(sp)
    5dd8:	dd000417 	ldw	r20,16(sp)
    5ddc:	dcc00317 	ldw	r19,12(sp)
    5de0:	dc800217 	ldw	r18,8(sp)
    5de4:	dc400117 	ldw	r17,4(sp)
    5de8:	dc000017 	ldw	r16,0(sp)
    5dec:	dec00804 	addi	sp,sp,32
    5df0:	f800283a 	ret
    5df4:	002d883a 	mov	r22,zero
    5df8:	003ff206 	br	5dc4 <_fwalk+0x80>

00005dfc <__locale_charset>:
    5dfc:	d0a00317 	ldw	r2,-32756(gp)
    5e00:	f800283a 	ret

00005e04 <_localeconv_r>:
    5e04:	00800074 	movhi	r2,1
    5e08:	10ba9204 	addi	r2,r2,-5560
    5e0c:	f800283a 	ret

00005e10 <localeconv>:
    5e10:	00800074 	movhi	r2,1
    5e14:	1081b304 	addi	r2,r2,1740
    5e18:	11000017 	ldw	r4,0(r2)
    5e1c:	0005e041 	jmpi	5e04 <_localeconv_r>

00005e20 <_setlocale_r>:
    5e20:	defffc04 	addi	sp,sp,-16
    5e24:	00c00074 	movhi	r3,1
    5e28:	18fa8d04 	addi	r3,r3,-5580
    5e2c:	dc800215 	stw	r18,8(sp)
    5e30:	dc400115 	stw	r17,4(sp)
    5e34:	dc000015 	stw	r16,0(sp)
    5e38:	2023883a 	mov	r17,r4
    5e3c:	2825883a 	mov	r18,r5
    5e40:	dfc00315 	stw	ra,12(sp)
    5e44:	3021883a 	mov	r16,r6
    5e48:	3009883a 	mov	r4,r6
    5e4c:	180b883a 	mov	r5,r3
    5e50:	30000926 	beq	r6,zero,5e78 <_setlocale_r+0x58>
    5e54:	00082a40 	call	82a4 <strcmp>
    5e58:	8009883a 	mov	r4,r16
    5e5c:	01400074 	movhi	r5,1
    5e60:	297a7804 	addi	r5,r5,-5664
    5e64:	10000b1e 	bne	r2,zero,5e94 <_setlocale_r+0x74>
    5e68:	8c000d15 	stw	r16,52(r17)
    5e6c:	8c800c15 	stw	r18,48(r17)
    5e70:	00c00074 	movhi	r3,1
    5e74:	18fa8d04 	addi	r3,r3,-5580
    5e78:	1805883a 	mov	r2,r3
    5e7c:	dfc00317 	ldw	ra,12(sp)
    5e80:	dc800217 	ldw	r18,8(sp)
    5e84:	dc400117 	ldw	r17,4(sp)
    5e88:	dc000017 	ldw	r16,0(sp)
    5e8c:	dec00404 	addi	sp,sp,16
    5e90:	f800283a 	ret
    5e94:	00082a40 	call	82a4 <strcmp>
    5e98:	0007883a 	mov	r3,zero
    5e9c:	103ff226 	beq	r2,zero,5e68 <_setlocale_r+0x48>
    5ea0:	003ff506 	br	5e78 <_setlocale_r+0x58>

00005ea4 <setlocale>:
    5ea4:	01800074 	movhi	r6,1
    5ea8:	3181b304 	addi	r6,r6,1740
    5eac:	2007883a 	mov	r3,r4
    5eb0:	31000017 	ldw	r4,0(r6)
    5eb4:	280d883a 	mov	r6,r5
    5eb8:	180b883a 	mov	r5,r3
    5ebc:	0005e201 	jmpi	5e20 <_setlocale_r>

00005ec0 <__smakebuf_r>:
    5ec0:	2880030b 	ldhu	r2,12(r5)
    5ec4:	deffed04 	addi	sp,sp,-76
    5ec8:	dc401015 	stw	r17,64(sp)
    5ecc:	1080008c 	andi	r2,r2,2
    5ed0:	dc000f15 	stw	r16,60(sp)
    5ed4:	dfc01215 	stw	ra,72(sp)
    5ed8:	dc801115 	stw	r18,68(sp)
    5edc:	2821883a 	mov	r16,r5
    5ee0:	2023883a 	mov	r17,r4
    5ee4:	10000b26 	beq	r2,zero,5f14 <__smakebuf_r+0x54>
    5ee8:	28c010c4 	addi	r3,r5,67
    5eec:	00800044 	movi	r2,1
    5ef0:	28800515 	stw	r2,20(r5)
    5ef4:	28c00415 	stw	r3,16(r5)
    5ef8:	28c00015 	stw	r3,0(r5)
    5efc:	dfc01217 	ldw	ra,72(sp)
    5f00:	dc801117 	ldw	r18,68(sp)
    5f04:	dc401017 	ldw	r17,64(sp)
    5f08:	dc000f17 	ldw	r16,60(sp)
    5f0c:	dec01304 	addi	sp,sp,76
    5f10:	f800283a 	ret
    5f14:	2940038f 	ldh	r5,14(r5)
    5f18:	28002116 	blt	r5,zero,5fa0 <__smakebuf_r+0xe0>
    5f1c:	d80d883a 	mov	r6,sp
    5f20:	00086200 	call	8620 <_fstat_r>
    5f24:	10001e16 	blt	r2,zero,5fa0 <__smakebuf_r+0xe0>
    5f28:	d8800117 	ldw	r2,4(sp)
    5f2c:	00e00014 	movui	r3,32768
    5f30:	113c000c 	andi	r4,r2,61440
    5f34:	20c03126 	beq	r4,r3,5ffc <__smakebuf_r+0x13c>
    5f38:	8080030b 	ldhu	r2,12(r16)
    5f3c:	00c80004 	movi	r3,8192
    5f40:	10820014 	ori	r2,r2,2048
    5f44:	8080030d 	sth	r2,12(r16)
    5f48:	20c01e26 	beq	r4,r3,5fc4 <__smakebuf_r+0x104>
    5f4c:	04810004 	movi	r18,1024
    5f50:	8809883a 	mov	r4,r17
    5f54:	900b883a 	mov	r5,r18
    5f58:	00060540 	call	6054 <_malloc_r>
    5f5c:	1009883a 	mov	r4,r2
    5f60:	10003126 	beq	r2,zero,6028 <__smakebuf_r+0x168>
    5f64:	80c0030b 	ldhu	r3,12(r16)
    5f68:	00800034 	movhi	r2,0
    5f6c:	10948b04 	addi	r2,r2,21036
    5f70:	88800f15 	stw	r2,60(r17)
    5f74:	18c02014 	ori	r3,r3,128
    5f78:	84800515 	stw	r18,20(r16)
    5f7c:	80c0030d 	sth	r3,12(r16)
    5f80:	81000415 	stw	r4,16(r16)
    5f84:	81000015 	stw	r4,0(r16)
    5f88:	dfc01217 	ldw	ra,72(sp)
    5f8c:	dc801117 	ldw	r18,68(sp)
    5f90:	dc401017 	ldw	r17,64(sp)
    5f94:	dc000f17 	ldw	r16,60(sp)
    5f98:	dec01304 	addi	sp,sp,76
    5f9c:	f800283a 	ret
    5fa0:	80c0030b 	ldhu	r3,12(r16)
    5fa4:	1880200c 	andi	r2,r3,128
    5fa8:	10000426 	beq	r2,zero,5fbc <__smakebuf_r+0xfc>
    5fac:	04801004 	movi	r18,64
    5fb0:	18820014 	ori	r2,r3,2048
    5fb4:	8080030d 	sth	r2,12(r16)
    5fb8:	003fe506 	br	5f50 <__smakebuf_r+0x90>
    5fbc:	04810004 	movi	r18,1024
    5fc0:	003ffb06 	br	5fb0 <__smakebuf_r+0xf0>
    5fc4:	8140038f 	ldh	r5,14(r16)
    5fc8:	8809883a 	mov	r4,r17
    5fcc:	00086940 	call	8694 <_isatty_r>
    5fd0:	103fde26 	beq	r2,zero,5f4c <__smakebuf_r+0x8c>
    5fd4:	8080030b 	ldhu	r2,12(r16)
    5fd8:	80c010c4 	addi	r3,r16,67
    5fdc:	04810004 	movi	r18,1024
    5fe0:	10800054 	ori	r2,r2,1
    5fe4:	8080030d 	sth	r2,12(r16)
    5fe8:	00800044 	movi	r2,1
    5fec:	80c00415 	stw	r3,16(r16)
    5ff0:	80800515 	stw	r2,20(r16)
    5ff4:	80c00015 	stw	r3,0(r16)
    5ff8:	003fd506 	br	5f50 <__smakebuf_r+0x90>
    5ffc:	80c00a17 	ldw	r3,40(r16)
    6000:	00800074 	movhi	r2,1
    6004:	10a05804 	addi	r2,r2,-32416
    6008:	18bfcb1e 	bne	r3,r2,5f38 <__smakebuf_r+0x78>
    600c:	8080030b 	ldhu	r2,12(r16)
    6010:	00c10004 	movi	r3,1024
    6014:	1825883a 	mov	r18,r3
    6018:	10c4b03a 	or	r2,r2,r3
    601c:	8080030d 	sth	r2,12(r16)
    6020:	80c01315 	stw	r3,76(r16)
    6024:	003fca06 	br	5f50 <__smakebuf_r+0x90>
    6028:	8100030b 	ldhu	r4,12(r16)
    602c:	2080800c 	andi	r2,r4,512
    6030:	103fb21e 	bne	r2,zero,5efc <__smakebuf_r+0x3c>
    6034:	80c010c4 	addi	r3,r16,67
    6038:	21000094 	ori	r4,r4,2
    603c:	00800044 	movi	r2,1
    6040:	80800515 	stw	r2,20(r16)
    6044:	8100030d 	sth	r4,12(r16)
    6048:	80c00415 	stw	r3,16(r16)
    604c:	80c00015 	stw	r3,0(r16)
    6050:	003faa06 	br	5efc <__smakebuf_r+0x3c>

00006054 <_malloc_r>:
    6054:	defff604 	addi	sp,sp,-40
    6058:	28c002c4 	addi	r3,r5,11
    605c:	00800584 	movi	r2,22
    6060:	dc800215 	stw	r18,8(sp)
    6064:	dfc00915 	stw	ra,36(sp)
    6068:	df000815 	stw	fp,32(sp)
    606c:	ddc00715 	stw	r23,28(sp)
    6070:	dd800615 	stw	r22,24(sp)
    6074:	dd400515 	stw	r21,20(sp)
    6078:	dd000415 	stw	r20,16(sp)
    607c:	dcc00315 	stw	r19,12(sp)
    6080:	dc400115 	stw	r17,4(sp)
    6084:	dc000015 	stw	r16,0(sp)
    6088:	2025883a 	mov	r18,r4
    608c:	10c01236 	bltu	r2,r3,60d8 <_malloc_r+0x84>
    6090:	04400404 	movi	r17,16
    6094:	8940142e 	bgeu	r17,r5,60e8 <_malloc_r+0x94>
    6098:	00800304 	movi	r2,12
    609c:	0007883a 	mov	r3,zero
    60a0:	90800015 	stw	r2,0(r18)
    60a4:	1805883a 	mov	r2,r3
    60a8:	dfc00917 	ldw	ra,36(sp)
    60ac:	df000817 	ldw	fp,32(sp)
    60b0:	ddc00717 	ldw	r23,28(sp)
    60b4:	dd800617 	ldw	r22,24(sp)
    60b8:	dd400517 	ldw	r21,20(sp)
    60bc:	dd000417 	ldw	r20,16(sp)
    60c0:	dcc00317 	ldw	r19,12(sp)
    60c4:	dc800217 	ldw	r18,8(sp)
    60c8:	dc400117 	ldw	r17,4(sp)
    60cc:	dc000017 	ldw	r16,0(sp)
    60d0:	dec00a04 	addi	sp,sp,40
    60d4:	f800283a 	ret
    60d8:	00bffe04 	movi	r2,-8
    60dc:	18a2703a 	and	r17,r3,r2
    60e0:	883fed16 	blt	r17,zero,6098 <_malloc_r+0x44>
    60e4:	897fec36 	bltu	r17,r5,6098 <_malloc_r+0x44>
    60e8:	9009883a 	mov	r4,r18
    60ec:	000b0440 	call	b044 <__malloc_lock>
    60f0:	00807dc4 	movi	r2,503
    60f4:	14402b2e 	bgeu	r2,r17,61a4 <_malloc_r+0x150>
    60f8:	8806d27a 	srli	r3,r17,9
    60fc:	18003f1e 	bne	r3,zero,61fc <_malloc_r+0x1a8>
    6100:	880cd0fa 	srli	r6,r17,3
    6104:	300490fa 	slli	r2,r6,3
    6108:	02c00074 	movhi	r11,1
    610c:	5afbfd04 	addi	r11,r11,-4108
    6110:	12cb883a 	add	r5,r2,r11
    6114:	2c000317 	ldw	r16,12(r5)
    6118:	580f883a 	mov	r7,r11
    611c:	2c00041e 	bne	r5,r16,6130 <_malloc_r+0xdc>
    6120:	00000a06 	br	614c <_malloc_r+0xf8>
    6124:	1800860e 	bge	r3,zero,6340 <_malloc_r+0x2ec>
    6128:	84000317 	ldw	r16,12(r16)
    612c:	2c000726 	beq	r5,r16,614c <_malloc_r+0xf8>
    6130:	80800117 	ldw	r2,4(r16)
    6134:	00ffff04 	movi	r3,-4
    6138:	10c8703a 	and	r4,r2,r3
    613c:	2447c83a 	sub	r3,r4,r17
    6140:	008003c4 	movi	r2,15
    6144:	10fff70e 	bge	r2,r3,6124 <_malloc_r+0xd0>
    6148:	31bfffc4 	addi	r6,r6,-1
    614c:	32400044 	addi	r9,r6,1
    6150:	02800074 	movhi	r10,1
    6154:	52bbff04 	addi	r10,r10,-4100
    6158:	54000217 	ldw	r16,8(r10)
    615c:	8280a026 	beq	r16,r10,63e0 <_malloc_r+0x38c>
    6160:	80800117 	ldw	r2,4(r16)
    6164:	00ffff04 	movi	r3,-4
    6168:	10ca703a 	and	r5,r2,r3
    616c:	2c4dc83a 	sub	r6,r5,r17
    6170:	008003c4 	movi	r2,15
    6174:	11808316 	blt	r2,r6,6384 <_malloc_r+0x330>
    6178:	52800315 	stw	r10,12(r10)
    617c:	52800215 	stw	r10,8(r10)
    6180:	30002916 	blt	r6,zero,6228 <_malloc_r+0x1d4>
    6184:	8147883a 	add	r3,r16,r5
    6188:	18800117 	ldw	r2,4(r3)
    618c:	9009883a 	mov	r4,r18
    6190:	10800054 	ori	r2,r2,1
    6194:	18800115 	stw	r2,4(r3)
    6198:	000b0640 	call	b064 <__malloc_unlock>
    619c:	80c00204 	addi	r3,r16,8
    61a0:	003fc006 	br	60a4 <_malloc_r+0x50>
    61a4:	02c00074 	movhi	r11,1
    61a8:	5afbfd04 	addi	r11,r11,-4108
    61ac:	8ac5883a 	add	r2,r17,r11
    61b0:	14000317 	ldw	r16,12(r2)
    61b4:	580f883a 	mov	r7,r11
    61b8:	8806d0fa 	srli	r3,r17,3
    61bc:	14006c26 	beq	r2,r16,6370 <_malloc_r+0x31c>
    61c0:	80c00117 	ldw	r3,4(r16)
    61c4:	00bfff04 	movi	r2,-4
    61c8:	81800317 	ldw	r6,12(r16)
    61cc:	1886703a 	and	r3,r3,r2
    61d0:	80c7883a 	add	r3,r16,r3
    61d4:	18800117 	ldw	r2,4(r3)
    61d8:	81400217 	ldw	r5,8(r16)
    61dc:	9009883a 	mov	r4,r18
    61e0:	10800054 	ori	r2,r2,1
    61e4:	18800115 	stw	r2,4(r3)
    61e8:	31400215 	stw	r5,8(r6)
    61ec:	29800315 	stw	r6,12(r5)
    61f0:	000b0640 	call	b064 <__malloc_unlock>
    61f4:	80c00204 	addi	r3,r16,8
    61f8:	003faa06 	br	60a4 <_malloc_r+0x50>
    61fc:	00800104 	movi	r2,4
    6200:	10c0052e 	bgeu	r2,r3,6218 <_malloc_r+0x1c4>
    6204:	00800504 	movi	r2,20
    6208:	10c07836 	bltu	r2,r3,63ec <_malloc_r+0x398>
    620c:	198016c4 	addi	r6,r3,91
    6210:	300490fa 	slli	r2,r6,3
    6214:	003fbc06 	br	6108 <_malloc_r+0xb4>
    6218:	8804d1ba 	srli	r2,r17,6
    621c:	11800e04 	addi	r6,r2,56
    6220:	300490fa 	slli	r2,r6,3
    6224:	003fb806 	br	6108 <_malloc_r+0xb4>
    6228:	00807fc4 	movi	r2,511
    622c:	1140bb36 	bltu	r2,r5,651c <_malloc_r+0x4c8>
    6230:	2806d0fa 	srli	r3,r5,3
    6234:	573ffe04 	addi	fp,r10,-8
    6238:	00800044 	movi	r2,1
    623c:	180890fa 	slli	r4,r3,3
    6240:	1807d0ba 	srai	r3,r3,2
    6244:	e1c00117 	ldw	r7,4(fp)
    6248:	5909883a 	add	r4,r11,r4
    624c:	21400217 	ldw	r5,8(r4)
    6250:	10c4983a 	sll	r2,r2,r3
    6254:	81000315 	stw	r4,12(r16)
    6258:	81400215 	stw	r5,8(r16)
    625c:	388eb03a 	or	r7,r7,r2
    6260:	2c000315 	stw	r16,12(r5)
    6264:	24000215 	stw	r16,8(r4)
    6268:	e1c00115 	stw	r7,4(fp)
    626c:	4807883a 	mov	r3,r9
    6270:	4800cd16 	blt	r9,zero,65a8 <_malloc_r+0x554>
    6274:	1807d0ba 	srai	r3,r3,2
    6278:	00800044 	movi	r2,1
    627c:	10c8983a 	sll	r4,r2,r3
    6280:	39004436 	bltu	r7,r4,6394 <_malloc_r+0x340>
    6284:	21c4703a 	and	r2,r4,r7
    6288:	10000a1e 	bne	r2,zero,62b4 <_malloc_r+0x260>
    628c:	2109883a 	add	r4,r4,r4
    6290:	00bfff04 	movi	r2,-4
    6294:	4884703a 	and	r2,r9,r2
    6298:	3906703a 	and	r3,r7,r4
    629c:	12400104 	addi	r9,r2,4
    62a0:	1800041e 	bne	r3,zero,62b4 <_malloc_r+0x260>
    62a4:	2109883a 	add	r4,r4,r4
    62a8:	3904703a 	and	r2,r7,r4
    62ac:	4a400104 	addi	r9,r9,4
    62b0:	103ffc26 	beq	r2,zero,62a4 <_malloc_r+0x250>
    62b4:	480490fa 	slli	r2,r9,3
    62b8:	4819883a 	mov	r12,r9
    62bc:	023fff04 	movi	r8,-4
    62c0:	589b883a 	add	r13,r11,r2
    62c4:	6807883a 	mov	r3,r13
    62c8:	014003c4 	movi	r5,15
    62cc:	1c000317 	ldw	r16,12(r3)
    62d0:	1c00041e 	bne	r3,r16,62e4 <_malloc_r+0x290>
    62d4:	0000a706 	br	6574 <_malloc_r+0x520>
    62d8:	3000ab0e 	bge	r6,zero,6588 <_malloc_r+0x534>
    62dc:	84000317 	ldw	r16,12(r16)
    62e0:	1c00a426 	beq	r3,r16,6574 <_malloc_r+0x520>
    62e4:	80800117 	ldw	r2,4(r16)
    62e8:	1204703a 	and	r2,r2,r8
    62ec:	144dc83a 	sub	r6,r2,r17
    62f0:	29bff90e 	bge	r5,r6,62d8 <_malloc_r+0x284>
    62f4:	81000317 	ldw	r4,12(r16)
    62f8:	80c00217 	ldw	r3,8(r16)
    62fc:	89400054 	ori	r5,r17,1
    6300:	8445883a 	add	r2,r16,r17
    6304:	20c00215 	stw	r3,8(r4)
    6308:	19000315 	stw	r4,12(r3)
    630c:	81400115 	stw	r5,4(r16)
    6310:	1187883a 	add	r3,r2,r6
    6314:	31000054 	ori	r4,r6,1
    6318:	50800315 	stw	r2,12(r10)
    631c:	50800215 	stw	r2,8(r10)
    6320:	19800015 	stw	r6,0(r3)
    6324:	11000115 	stw	r4,4(r2)
    6328:	12800215 	stw	r10,8(r2)
    632c:	12800315 	stw	r10,12(r2)
    6330:	9009883a 	mov	r4,r18
    6334:	000b0640 	call	b064 <__malloc_unlock>
    6338:	80c00204 	addi	r3,r16,8
    633c:	003f5906 	br	60a4 <_malloc_r+0x50>
    6340:	8109883a 	add	r4,r16,r4
    6344:	20800117 	ldw	r2,4(r4)
    6348:	80c00217 	ldw	r3,8(r16)
    634c:	81400317 	ldw	r5,12(r16)
    6350:	10800054 	ori	r2,r2,1
    6354:	20800115 	stw	r2,4(r4)
    6358:	28c00215 	stw	r3,8(r5)
    635c:	19400315 	stw	r5,12(r3)
    6360:	9009883a 	mov	r4,r18
    6364:	000b0640 	call	b064 <__malloc_unlock>
    6368:	80c00204 	addi	r3,r16,8
    636c:	003f4d06 	br	60a4 <_malloc_r+0x50>
    6370:	80800204 	addi	r2,r16,8
    6374:	14000317 	ldw	r16,12(r2)
    6378:	143f911e 	bne	r2,r16,61c0 <_malloc_r+0x16c>
    637c:	1a400084 	addi	r9,r3,2
    6380:	003f7306 	br	6150 <_malloc_r+0xfc>
    6384:	88c00054 	ori	r3,r17,1
    6388:	8445883a 	add	r2,r16,r17
    638c:	80c00115 	stw	r3,4(r16)
    6390:	003fdf06 	br	6310 <_malloc_r+0x2bc>
    6394:	e4000217 	ldw	r16,8(fp)
    6398:	00bfff04 	movi	r2,-4
    639c:	80c00117 	ldw	r3,4(r16)
    63a0:	802d883a 	mov	r22,r16
    63a4:	18aa703a 	and	r21,r3,r2
    63a8:	ac401636 	bltu	r21,r17,6404 <_malloc_r+0x3b0>
    63ac:	ac49c83a 	sub	r4,r21,r17
    63b0:	008003c4 	movi	r2,15
    63b4:	1100130e 	bge	r2,r4,6404 <_malloc_r+0x3b0>
    63b8:	88800054 	ori	r2,r17,1
    63bc:	8447883a 	add	r3,r16,r17
    63c0:	80800115 	stw	r2,4(r16)
    63c4:	20800054 	ori	r2,r4,1
    63c8:	18800115 	stw	r2,4(r3)
    63cc:	e0c00215 	stw	r3,8(fp)
    63d0:	9009883a 	mov	r4,r18
    63d4:	000b0640 	call	b064 <__malloc_unlock>
    63d8:	80c00204 	addi	r3,r16,8
    63dc:	003f3106 	br	60a4 <_malloc_r+0x50>
    63e0:	39c00117 	ldw	r7,4(r7)
    63e4:	573ffe04 	addi	fp,r10,-8
    63e8:	003fa006 	br	626c <_malloc_r+0x218>
    63ec:	00801504 	movi	r2,84
    63f0:	10c06736 	bltu	r2,r3,6590 <_malloc_r+0x53c>
    63f4:	8804d33a 	srli	r2,r17,12
    63f8:	11801b84 	addi	r6,r2,110
    63fc:	300490fa 	slli	r2,r6,3
    6400:	003f4106 	br	6108 <_malloc_r+0xb4>
    6404:	d0a6f717 	ldw	r2,-25636(gp)
    6408:	d0e00517 	ldw	r3,-32748(gp)
    640c:	053fffc4 	movi	r20,-1
    6410:	10800404 	addi	r2,r2,16
    6414:	88a7883a 	add	r19,r17,r2
    6418:	1d000326 	beq	r3,r20,6428 <_malloc_r+0x3d4>
    641c:	98c3ffc4 	addi	r3,r19,4095
    6420:	00bc0004 	movi	r2,-4096
    6424:	18a6703a 	and	r19,r3,r2
    6428:	9009883a 	mov	r4,r18
    642c:	980b883a 	mov	r5,r19
    6430:	00080e80 	call	80e8 <_sbrk_r>
    6434:	1009883a 	mov	r4,r2
    6438:	15000426 	beq	r2,r20,644c <_malloc_r+0x3f8>
    643c:	854b883a 	add	r5,r16,r21
    6440:	1029883a 	mov	r20,r2
    6444:	11405a2e 	bgeu	r2,r5,65b0 <_malloc_r+0x55c>
    6448:	87000c26 	beq	r16,fp,647c <_malloc_r+0x428>
    644c:	e4000217 	ldw	r16,8(fp)
    6450:	80c00117 	ldw	r3,4(r16)
    6454:	00bfff04 	movi	r2,-4
    6458:	1884703a 	and	r2,r3,r2
    645c:	14400336 	bltu	r2,r17,646c <_malloc_r+0x418>
    6460:	1449c83a 	sub	r4,r2,r17
    6464:	008003c4 	movi	r2,15
    6468:	113fd316 	blt	r2,r4,63b8 <_malloc_r+0x364>
    646c:	9009883a 	mov	r4,r18
    6470:	000b0640 	call	b064 <__malloc_unlock>
    6474:	0007883a 	mov	r3,zero
    6478:	003f0a06 	br	60a4 <_malloc_r+0x50>
    647c:	05c00074 	movhi	r23,1
    6480:	bdc8b404 	addi	r23,r23,8912
    6484:	b8800017 	ldw	r2,0(r23)
    6488:	988d883a 	add	r6,r19,r2
    648c:	b9800015 	stw	r6,0(r23)
    6490:	d0e00517 	ldw	r3,-32748(gp)
    6494:	00bfffc4 	movi	r2,-1
    6498:	18808e26 	beq	r3,r2,66d4 <_malloc_r+0x680>
    649c:	2145c83a 	sub	r2,r4,r5
    64a0:	3085883a 	add	r2,r6,r2
    64a4:	b8800015 	stw	r2,0(r23)
    64a8:	20c001cc 	andi	r3,r4,7
    64ac:	18005f1e 	bne	r3,zero,662c <_malloc_r+0x5d8>
    64b0:	000b883a 	mov	r5,zero
    64b4:	a4c5883a 	add	r2,r20,r19
    64b8:	1083ffcc 	andi	r2,r2,4095
    64bc:	00c40004 	movi	r3,4096
    64c0:	1887c83a 	sub	r3,r3,r2
    64c4:	28e7883a 	add	r19,r5,r3
    64c8:	9009883a 	mov	r4,r18
    64cc:	980b883a 	mov	r5,r19
    64d0:	00080e80 	call	80e8 <_sbrk_r>
    64d4:	1007883a 	mov	r3,r2
    64d8:	00bfffc4 	movi	r2,-1
    64dc:	18807a26 	beq	r3,r2,66c8 <_malloc_r+0x674>
    64e0:	1d05c83a 	sub	r2,r3,r20
    64e4:	9885883a 	add	r2,r19,r2
    64e8:	10c00054 	ori	r3,r2,1
    64ec:	b8800017 	ldw	r2,0(r23)
    64f0:	a021883a 	mov	r16,r20
    64f4:	a0c00115 	stw	r3,4(r20)
    64f8:	9885883a 	add	r2,r19,r2
    64fc:	b8800015 	stw	r2,0(r23)
    6500:	e5000215 	stw	r20,8(fp)
    6504:	b7003626 	beq	r22,fp,65e0 <_malloc_r+0x58c>
    6508:	018003c4 	movi	r6,15
    650c:	35404b36 	bltu	r6,r21,663c <_malloc_r+0x5e8>
    6510:	00800044 	movi	r2,1
    6514:	a0800115 	stw	r2,4(r20)
    6518:	003fcd06 	br	6450 <_malloc_r+0x3fc>
    651c:	2808d27a 	srli	r4,r5,9
    6520:	2000371e 	bne	r4,zero,6600 <_malloc_r+0x5ac>
    6524:	2808d0fa 	srli	r4,r5,3
    6528:	200690fa 	slli	r3,r4,3
    652c:	1ad1883a 	add	r8,r3,r11
    6530:	41800217 	ldw	r6,8(r8)
    6534:	41805b26 	beq	r8,r6,66a4 <_malloc_r+0x650>
    6538:	30800117 	ldw	r2,4(r6)
    653c:	00ffff04 	movi	r3,-4
    6540:	10c4703a 	and	r2,r2,r3
    6544:	2880022e 	bgeu	r5,r2,6550 <_malloc_r+0x4fc>
    6548:	31800217 	ldw	r6,8(r6)
    654c:	41bffa1e 	bne	r8,r6,6538 <_malloc_r+0x4e4>
    6550:	32000317 	ldw	r8,12(r6)
    6554:	39c00117 	ldw	r7,4(r7)
    6558:	82000315 	stw	r8,12(r16)
    655c:	81800215 	stw	r6,8(r16)
    6560:	07000074 	movhi	fp,1
    6564:	e73bfd04 	addi	fp,fp,-4108
    6568:	34000315 	stw	r16,12(r6)
    656c:	44000215 	stw	r16,8(r8)
    6570:	003f3e06 	br	626c <_malloc_r+0x218>
    6574:	63000044 	addi	r12,r12,1
    6578:	608000cc 	andi	r2,r12,3
    657c:	10005d26 	beq	r2,zero,66f4 <_malloc_r+0x6a0>
    6580:	18c00204 	addi	r3,r3,8
    6584:	003f5106 	br	62cc <_malloc_r+0x278>
    6588:	8089883a 	add	r4,r16,r2
    658c:	003f6d06 	br	6344 <_malloc_r+0x2f0>
    6590:	00805504 	movi	r2,340
    6594:	10c02036 	bltu	r2,r3,6618 <_malloc_r+0x5c4>
    6598:	8804d3fa 	srli	r2,r17,15
    659c:	11801dc4 	addi	r6,r2,119
    65a0:	300490fa 	slli	r2,r6,3
    65a4:	003ed806 	br	6108 <_malloc_r+0xb4>
    65a8:	48c000c4 	addi	r3,r9,3
    65ac:	003f3106 	br	6274 <_malloc_r+0x220>
    65b0:	05c00074 	movhi	r23,1
    65b4:	bdc8b404 	addi	r23,r23,8912
    65b8:	b8800017 	ldw	r2,0(r23)
    65bc:	988d883a 	add	r6,r19,r2
    65c0:	b9800015 	stw	r6,0(r23)
    65c4:	293fb21e 	bne	r5,r4,6490 <_malloc_r+0x43c>
    65c8:	2083ffcc 	andi	r2,r4,4095
    65cc:	103fb01e 	bne	r2,zero,6490 <_malloc_r+0x43c>
    65d0:	e4000217 	ldw	r16,8(fp)
    65d4:	9d45883a 	add	r2,r19,r21
    65d8:	10800054 	ori	r2,r2,1
    65dc:	80800115 	stw	r2,4(r16)
    65e0:	b8c00017 	ldw	r3,0(r23)
    65e4:	d0a6f817 	ldw	r2,-25632(gp)
    65e8:	10c0012e 	bgeu	r2,r3,65f0 <_malloc_r+0x59c>
    65ec:	d0e6f815 	stw	r3,-25632(gp)
    65f0:	d0a6f917 	ldw	r2,-25628(gp)
    65f4:	10ff962e 	bgeu	r2,r3,6450 <_malloc_r+0x3fc>
    65f8:	d0e6f915 	stw	r3,-25628(gp)
    65fc:	003f9406 	br	6450 <_malloc_r+0x3fc>
    6600:	00800104 	movi	r2,4
    6604:	11001e36 	bltu	r2,r4,6680 <_malloc_r+0x62c>
    6608:	2804d1ba 	srli	r2,r5,6
    660c:	11000e04 	addi	r4,r2,56
    6610:	200690fa 	slli	r3,r4,3
    6614:	003fc506 	br	652c <_malloc_r+0x4d8>
    6618:	00815504 	movi	r2,1364
    661c:	10c01d2e 	bgeu	r2,r3,6694 <_malloc_r+0x640>
    6620:	01801f84 	movi	r6,126
    6624:	0080fc04 	movi	r2,1008
    6628:	003eb706 	br	6108 <_malloc_r+0xb4>
    662c:	00800204 	movi	r2,8
    6630:	10cbc83a 	sub	r5,r2,r3
    6634:	2169883a 	add	r20,r4,r5
    6638:	003f9e06 	br	64b4 <_malloc_r+0x460>
    663c:	00bffe04 	movi	r2,-8
    6640:	a93ffd04 	addi	r4,r21,-12
    6644:	2088703a 	and	r4,r4,r2
    6648:	b10b883a 	add	r5,r22,r4
    664c:	00c00144 	movi	r3,5
    6650:	28c00215 	stw	r3,8(r5)
    6654:	28c00115 	stw	r3,4(r5)
    6658:	b0800117 	ldw	r2,4(r22)
    665c:	1080004c 	andi	r2,r2,1
    6660:	2084b03a 	or	r2,r4,r2
    6664:	b0800115 	stw	r2,4(r22)
    6668:	313fdd2e 	bgeu	r6,r4,65e0 <_malloc_r+0x58c>
    666c:	b1400204 	addi	r5,r22,8
    6670:	9009883a 	mov	r4,r18
    6674:	00054cc0 	call	54cc <_free_r>
    6678:	e4000217 	ldw	r16,8(fp)
    667c:	003fd806 	br	65e0 <_malloc_r+0x58c>
    6680:	00800504 	movi	r2,20
    6684:	11001536 	bltu	r2,r4,66dc <_malloc_r+0x688>
    6688:	210016c4 	addi	r4,r4,91
    668c:	200690fa 	slli	r3,r4,3
    6690:	003fa606 	br	652c <_malloc_r+0x4d8>
    6694:	8804d4ba 	srli	r2,r17,18
    6698:	11801f04 	addi	r6,r2,124
    669c:	300490fa 	slli	r2,r6,3
    66a0:	003e9906 	br	6108 <_malloc_r+0xb4>
    66a4:	2009d0ba 	srai	r4,r4,2
    66a8:	01400074 	movhi	r5,1
    66ac:	297bfd04 	addi	r5,r5,-4108
    66b0:	00c00044 	movi	r3,1
    66b4:	28800117 	ldw	r2,4(r5)
    66b8:	1906983a 	sll	r3,r3,r4
    66bc:	10c4b03a 	or	r2,r2,r3
    66c0:	28800115 	stw	r2,4(r5)
    66c4:	003fa306 	br	6554 <_malloc_r+0x500>
    66c8:	0027883a 	mov	r19,zero
    66cc:	00c00044 	movi	r3,1
    66d0:	003f8606 	br	64ec <_malloc_r+0x498>
    66d4:	d1200515 	stw	r4,-32748(gp)
    66d8:	003f7306 	br	64a8 <_malloc_r+0x454>
    66dc:	00801504 	movi	r2,84
    66e0:	11001936 	bltu	r2,r4,6748 <_malloc_r+0x6f4>
    66e4:	2804d33a 	srli	r2,r5,12
    66e8:	11001b84 	addi	r4,r2,110
    66ec:	200690fa 	slli	r3,r4,3
    66f0:	003f8e06 	br	652c <_malloc_r+0x4d8>
    66f4:	480b883a 	mov	r5,r9
    66f8:	6807883a 	mov	r3,r13
    66fc:	288000cc 	andi	r2,r5,3
    6700:	18fffe04 	addi	r3,r3,-8
    6704:	297fffc4 	addi	r5,r5,-1
    6708:	10001526 	beq	r2,zero,6760 <_malloc_r+0x70c>
    670c:	18800217 	ldw	r2,8(r3)
    6710:	10fffa26 	beq	r2,r3,66fc <_malloc_r+0x6a8>
    6714:	2109883a 	add	r4,r4,r4
    6718:	393f1e36 	bltu	r7,r4,6394 <_malloc_r+0x340>
    671c:	203f1d26 	beq	r4,zero,6394 <_malloc_r+0x340>
    6720:	21c4703a 	and	r2,r4,r7
    6724:	10000226 	beq	r2,zero,6730 <_malloc_r+0x6dc>
    6728:	6013883a 	mov	r9,r12
    672c:	003ee106 	br	62b4 <_malloc_r+0x260>
    6730:	2109883a 	add	r4,r4,r4
    6734:	3904703a 	and	r2,r7,r4
    6738:	63000104 	addi	r12,r12,4
    673c:	103ffc26 	beq	r2,zero,6730 <_malloc_r+0x6dc>
    6740:	6013883a 	mov	r9,r12
    6744:	003edb06 	br	62b4 <_malloc_r+0x260>
    6748:	00805504 	movi	r2,340
    674c:	11000836 	bltu	r2,r4,6770 <_malloc_r+0x71c>
    6750:	2804d3fa 	srli	r2,r5,15
    6754:	11001dc4 	addi	r4,r2,119
    6758:	200690fa 	slli	r3,r4,3
    675c:	003f7306 	br	652c <_malloc_r+0x4d8>
    6760:	0104303a 	nor	r2,zero,r4
    6764:	388e703a 	and	r7,r7,r2
    6768:	e1c00115 	stw	r7,4(fp)
    676c:	003fe906 	br	6714 <_malloc_r+0x6c0>
    6770:	00815504 	movi	r2,1364
    6774:	1100032e 	bgeu	r2,r4,6784 <_malloc_r+0x730>
    6778:	01001f84 	movi	r4,126
    677c:	00c0fc04 	movi	r3,1008
    6780:	003f6a06 	br	652c <_malloc_r+0x4d8>
    6784:	2804d4ba 	srli	r2,r5,18
    6788:	11001f04 	addi	r4,r2,124
    678c:	200690fa 	slli	r3,r4,3
    6790:	003f6606 	br	652c <_malloc_r+0x4d8>

00006794 <memchr>:
    6794:	008000c4 	movi	r2,3
    6798:	29403fcc 	andi	r5,r5,255
    679c:	2007883a 	mov	r3,r4
    67a0:	1180022e 	bgeu	r2,r6,67ac <memchr+0x18>
    67a4:	2084703a 	and	r2,r4,r2
    67a8:	10000b26 	beq	r2,zero,67d8 <memchr+0x44>
    67ac:	313fffc4 	addi	r4,r6,-1
    67b0:	3000051e 	bne	r6,zero,67c8 <memchr+0x34>
    67b4:	00002c06 	br	6868 <memchr+0xd4>
    67b8:	213fffc4 	addi	r4,r4,-1
    67bc:	00bfffc4 	movi	r2,-1
    67c0:	18c00044 	addi	r3,r3,1
    67c4:	20802826 	beq	r4,r2,6868 <memchr+0xd4>
    67c8:	18800003 	ldbu	r2,0(r3)
    67cc:	28bffa1e 	bne	r5,r2,67b8 <memchr+0x24>
    67d0:	1805883a 	mov	r2,r3
    67d4:	f800283a 	ret
    67d8:	0011883a 	mov	r8,zero
    67dc:	0007883a 	mov	r3,zero
    67e0:	01c00104 	movi	r7,4
    67e4:	4004923a 	slli	r2,r8,8
    67e8:	18c00044 	addi	r3,r3,1
    67ec:	1151883a 	add	r8,r2,r5
    67f0:	19fffc1e 	bne	r3,r7,67e4 <memchr+0x50>
    67f4:	02bfbff4 	movhi	r10,65279
    67f8:	52bfbfc4 	addi	r10,r10,-257
    67fc:	02602074 	movhi	r9,32897
    6800:	4a602004 	addi	r9,r9,-32640
    6804:	02c000c4 	movi	r11,3
    6808:	20800017 	ldw	r2,0(r4)
    680c:	31bfff04 	addi	r6,r6,-4
    6810:	200f883a 	mov	r7,r4
    6814:	1204f03a 	xor	r2,r2,r8
    6818:	1287883a 	add	r3,r2,r10
    681c:	1a46703a 	and	r3,r3,r9
    6820:	0084303a 	nor	r2,zero,r2
    6824:	10c4703a 	and	r2,r2,r3
    6828:	10000b26 	beq	r2,zero,6858 <memchr+0xc4>
    682c:	20800003 	ldbu	r2,0(r4)
    6830:	28800f26 	beq	r5,r2,6870 <memchr+0xdc>
    6834:	20800043 	ldbu	r2,1(r4)
    6838:	21c00044 	addi	r7,r4,1
    683c:	28800c26 	beq	r5,r2,6870 <memchr+0xdc>
    6840:	20800083 	ldbu	r2,2(r4)
    6844:	21c00084 	addi	r7,r4,2
    6848:	28800926 	beq	r5,r2,6870 <memchr+0xdc>
    684c:	208000c3 	ldbu	r2,3(r4)
    6850:	21c000c4 	addi	r7,r4,3
    6854:	28800626 	beq	r5,r2,6870 <memchr+0xdc>
    6858:	21000104 	addi	r4,r4,4
    685c:	59bfea36 	bltu	r11,r6,6808 <memchr+0x74>
    6860:	2007883a 	mov	r3,r4
    6864:	003fd106 	br	67ac <memchr+0x18>
    6868:	0005883a 	mov	r2,zero
    686c:	f800283a 	ret
    6870:	3805883a 	mov	r2,r7
    6874:	f800283a 	ret

00006878 <memcpy>:
    6878:	01c003c4 	movi	r7,15
    687c:	2007883a 	mov	r3,r4
    6880:	3980032e 	bgeu	r7,r6,6890 <memcpy+0x18>
    6884:	2904b03a 	or	r2,r5,r4
    6888:	108000cc 	andi	r2,r2,3
    688c:	10000926 	beq	r2,zero,68b4 <memcpy+0x3c>
    6890:	30000626 	beq	r6,zero,68ac <memcpy+0x34>
    6894:	30cd883a 	add	r6,r6,r3
    6898:	28800003 	ldbu	r2,0(r5)
    689c:	29400044 	addi	r5,r5,1
    68a0:	18800005 	stb	r2,0(r3)
    68a4:	18c00044 	addi	r3,r3,1
    68a8:	30fffb1e 	bne	r6,r3,6898 <memcpy+0x20>
    68ac:	2005883a 	mov	r2,r4
    68b0:	f800283a 	ret
    68b4:	3811883a 	mov	r8,r7
    68b8:	200f883a 	mov	r7,r4
    68bc:	28c00017 	ldw	r3,0(r5)
    68c0:	31bffc04 	addi	r6,r6,-16
    68c4:	38c00015 	stw	r3,0(r7)
    68c8:	28800117 	ldw	r2,4(r5)
    68cc:	38800115 	stw	r2,4(r7)
    68d0:	28c00217 	ldw	r3,8(r5)
    68d4:	38c00215 	stw	r3,8(r7)
    68d8:	28800317 	ldw	r2,12(r5)
    68dc:	29400404 	addi	r5,r5,16
    68e0:	38800315 	stw	r2,12(r7)
    68e4:	39c00404 	addi	r7,r7,16
    68e8:	41bff436 	bltu	r8,r6,68bc <memcpy+0x44>
    68ec:	008000c4 	movi	r2,3
    68f0:	1180072e 	bgeu	r2,r6,6910 <memcpy+0x98>
    68f4:	1007883a 	mov	r3,r2
    68f8:	28800017 	ldw	r2,0(r5)
    68fc:	31bfff04 	addi	r6,r6,-4
    6900:	29400104 	addi	r5,r5,4
    6904:	38800015 	stw	r2,0(r7)
    6908:	39c00104 	addi	r7,r7,4
    690c:	19bffa36 	bltu	r3,r6,68f8 <memcpy+0x80>
    6910:	3807883a 	mov	r3,r7
    6914:	003fde06 	br	6890 <memcpy+0x18>

00006918 <memmove>:
    6918:	2807883a 	mov	r3,r5
    691c:	2011883a 	mov	r8,r4
    6920:	29000c2e 	bgeu	r5,r4,6954 <memmove+0x3c>
    6924:	298f883a 	add	r7,r5,r6
    6928:	21c00a2e 	bgeu	r4,r7,6954 <memmove+0x3c>
    692c:	30000726 	beq	r6,zero,694c <memmove+0x34>
    6930:	2187883a 	add	r3,r4,r6
    6934:	198dc83a 	sub	r6,r3,r6
    6938:	39ffffc4 	addi	r7,r7,-1
    693c:	38800003 	ldbu	r2,0(r7)
    6940:	18ffffc4 	addi	r3,r3,-1
    6944:	18800005 	stb	r2,0(r3)
    6948:	19bffb1e 	bne	r3,r6,6938 <memmove+0x20>
    694c:	2005883a 	mov	r2,r4
    6950:	f800283a 	ret
    6954:	01c003c4 	movi	r7,15
    6958:	39800a36 	bltu	r7,r6,6984 <memmove+0x6c>
    695c:	303ffb26 	beq	r6,zero,694c <memmove+0x34>
    6960:	400f883a 	mov	r7,r8
    6964:	320d883a 	add	r6,r6,r8
    6968:	28800003 	ldbu	r2,0(r5)
    696c:	29400044 	addi	r5,r5,1
    6970:	38800005 	stb	r2,0(r7)
    6974:	39c00044 	addi	r7,r7,1
    6978:	39bffb1e 	bne	r7,r6,6968 <memmove+0x50>
    697c:	2005883a 	mov	r2,r4
    6980:	f800283a 	ret
    6984:	1904b03a 	or	r2,r3,r4
    6988:	108000cc 	andi	r2,r2,3
    698c:	103ff31e 	bne	r2,zero,695c <memmove+0x44>
    6990:	3811883a 	mov	r8,r7
    6994:	180b883a 	mov	r5,r3
    6998:	200f883a 	mov	r7,r4
    699c:	28c00017 	ldw	r3,0(r5)
    69a0:	31bffc04 	addi	r6,r6,-16
    69a4:	38c00015 	stw	r3,0(r7)
    69a8:	28800117 	ldw	r2,4(r5)
    69ac:	38800115 	stw	r2,4(r7)
    69b0:	28c00217 	ldw	r3,8(r5)
    69b4:	38c00215 	stw	r3,8(r7)
    69b8:	28800317 	ldw	r2,12(r5)
    69bc:	29400404 	addi	r5,r5,16
    69c0:	38800315 	stw	r2,12(r7)
    69c4:	39c00404 	addi	r7,r7,16
    69c8:	41bff436 	bltu	r8,r6,699c <memmove+0x84>
    69cc:	008000c4 	movi	r2,3
    69d0:	1180072e 	bgeu	r2,r6,69f0 <memmove+0xd8>
    69d4:	1007883a 	mov	r3,r2
    69d8:	28800017 	ldw	r2,0(r5)
    69dc:	31bfff04 	addi	r6,r6,-4
    69e0:	29400104 	addi	r5,r5,4
    69e4:	38800015 	stw	r2,0(r7)
    69e8:	39c00104 	addi	r7,r7,4
    69ec:	19bffa36 	bltu	r3,r6,69d8 <memmove+0xc0>
    69f0:	3811883a 	mov	r8,r7
    69f4:	003fd906 	br	695c <memmove+0x44>

000069f8 <memset>:
    69f8:	008000c4 	movi	r2,3
    69fc:	29403fcc 	andi	r5,r5,255
    6a00:	2007883a 	mov	r3,r4
    6a04:	1180022e 	bgeu	r2,r6,6a10 <memset+0x18>
    6a08:	2084703a 	and	r2,r4,r2
    6a0c:	10000826 	beq	r2,zero,6a30 <memset+0x38>
    6a10:	30000526 	beq	r6,zero,6a28 <memset+0x30>
    6a14:	2805883a 	mov	r2,r5
    6a18:	30cd883a 	add	r6,r6,r3
    6a1c:	18800005 	stb	r2,0(r3)
    6a20:	18c00044 	addi	r3,r3,1
    6a24:	19bffd1e 	bne	r3,r6,6a1c <memset+0x24>
    6a28:	2005883a 	mov	r2,r4
    6a2c:	f800283a 	ret
    6a30:	2804923a 	slli	r2,r5,8
    6a34:	020003c4 	movi	r8,15
    6a38:	200f883a 	mov	r7,r4
    6a3c:	2884b03a 	or	r2,r5,r2
    6a40:	1006943a 	slli	r3,r2,16
    6a44:	10c6b03a 	or	r3,r2,r3
    6a48:	41800a2e 	bgeu	r8,r6,6a74 <memset+0x7c>
    6a4c:	4005883a 	mov	r2,r8
    6a50:	31bffc04 	addi	r6,r6,-16
    6a54:	38c00015 	stw	r3,0(r7)
    6a58:	38c00115 	stw	r3,4(r7)
    6a5c:	38c00215 	stw	r3,8(r7)
    6a60:	38c00315 	stw	r3,12(r7)
    6a64:	39c00404 	addi	r7,r7,16
    6a68:	11bff936 	bltu	r2,r6,6a50 <memset+0x58>
    6a6c:	008000c4 	movi	r2,3
    6a70:	1180052e 	bgeu	r2,r6,6a88 <memset+0x90>
    6a74:	31bfff04 	addi	r6,r6,-4
    6a78:	008000c4 	movi	r2,3
    6a7c:	38c00015 	stw	r3,0(r7)
    6a80:	39c00104 	addi	r7,r7,4
    6a84:	11bffb36 	bltu	r2,r6,6a74 <memset+0x7c>
    6a88:	3807883a 	mov	r3,r7
    6a8c:	003fe006 	br	6a10 <memset+0x18>

00006a90 <_Bfree>:
    6a90:	28000826 	beq	r5,zero,6ab4 <_Bfree+0x24>
    6a94:	28800117 	ldw	r2,4(r5)
    6a98:	21001317 	ldw	r4,76(r4)
    6a9c:	1085883a 	add	r2,r2,r2
    6aa0:	1085883a 	add	r2,r2,r2
    6aa4:	1105883a 	add	r2,r2,r4
    6aa8:	10c00017 	ldw	r3,0(r2)
    6aac:	28c00015 	stw	r3,0(r5)
    6ab0:	11400015 	stw	r5,0(r2)
    6ab4:	f800283a 	ret

00006ab8 <__hi0bits>:
    6ab8:	20bfffec 	andhi	r2,r4,65535
    6abc:	10001426 	beq	r2,zero,6b10 <__hi0bits+0x58>
    6ac0:	0007883a 	mov	r3,zero
    6ac4:	20bfc02c 	andhi	r2,r4,65280
    6ac8:	1000021e 	bne	r2,zero,6ad4 <__hi0bits+0x1c>
    6acc:	2008923a 	slli	r4,r4,8
    6ad0:	18c00204 	addi	r3,r3,8
    6ad4:	20bc002c 	andhi	r2,r4,61440
    6ad8:	1000021e 	bne	r2,zero,6ae4 <__hi0bits+0x2c>
    6adc:	2008913a 	slli	r4,r4,4
    6ae0:	18c00104 	addi	r3,r3,4
    6ae4:	20b0002c 	andhi	r2,r4,49152
    6ae8:	1000031e 	bne	r2,zero,6af8 <__hi0bits+0x40>
    6aec:	2105883a 	add	r2,r4,r4
    6af0:	18c00084 	addi	r3,r3,2
    6af4:	1089883a 	add	r4,r2,r2
    6af8:	20000316 	blt	r4,zero,6b08 <__hi0bits+0x50>
    6afc:	2090002c 	andhi	r2,r4,16384
    6b00:	10000626 	beq	r2,zero,6b1c <__hi0bits+0x64>
    6b04:	18c00044 	addi	r3,r3,1
    6b08:	1805883a 	mov	r2,r3
    6b0c:	f800283a 	ret
    6b10:	2008943a 	slli	r4,r4,16
    6b14:	00c00404 	movi	r3,16
    6b18:	003fea06 	br	6ac4 <__hi0bits+0xc>
    6b1c:	00c00804 	movi	r3,32
    6b20:	1805883a 	mov	r2,r3
    6b24:	f800283a 	ret

00006b28 <__lo0bits>:
    6b28:	20c00017 	ldw	r3,0(r4)
    6b2c:	188001cc 	andi	r2,r3,7
    6b30:	10000a26 	beq	r2,zero,6b5c <__lo0bits+0x34>
    6b34:	1880004c 	andi	r2,r3,1
    6b38:	1005003a 	cmpeq	r2,r2,zero
    6b3c:	10002126 	beq	r2,zero,6bc4 <__lo0bits+0x9c>
    6b40:	1880008c 	andi	r2,r3,2
    6b44:	1000251e 	bne	r2,zero,6bdc <__lo0bits+0xb4>
    6b48:	1804d0ba 	srli	r2,r3,2
    6b4c:	01400084 	movi	r5,2
    6b50:	20800015 	stw	r2,0(r4)
    6b54:	2805883a 	mov	r2,r5
    6b58:	f800283a 	ret
    6b5c:	18bfffcc 	andi	r2,r3,65535
    6b60:	10001526 	beq	r2,zero,6bb8 <__lo0bits+0x90>
    6b64:	000b883a 	mov	r5,zero
    6b68:	18803fcc 	andi	r2,r3,255
    6b6c:	1000021e 	bne	r2,zero,6b78 <__lo0bits+0x50>
    6b70:	1806d23a 	srli	r3,r3,8
    6b74:	29400204 	addi	r5,r5,8
    6b78:	188003cc 	andi	r2,r3,15
    6b7c:	1000021e 	bne	r2,zero,6b88 <__lo0bits+0x60>
    6b80:	1806d13a 	srli	r3,r3,4
    6b84:	29400104 	addi	r5,r5,4
    6b88:	188000cc 	andi	r2,r3,3
    6b8c:	1000021e 	bne	r2,zero,6b98 <__lo0bits+0x70>
    6b90:	1806d0ba 	srli	r3,r3,2
    6b94:	29400084 	addi	r5,r5,2
    6b98:	1880004c 	andi	r2,r3,1
    6b9c:	1000031e 	bne	r2,zero,6bac <__lo0bits+0x84>
    6ba0:	1806d07a 	srli	r3,r3,1
    6ba4:	18000a26 	beq	r3,zero,6bd0 <__lo0bits+0xa8>
    6ba8:	29400044 	addi	r5,r5,1
    6bac:	2805883a 	mov	r2,r5
    6bb0:	20c00015 	stw	r3,0(r4)
    6bb4:	f800283a 	ret
    6bb8:	1806d43a 	srli	r3,r3,16
    6bbc:	01400404 	movi	r5,16
    6bc0:	003fe906 	br	6b68 <__lo0bits+0x40>
    6bc4:	000b883a 	mov	r5,zero
    6bc8:	2805883a 	mov	r2,r5
    6bcc:	f800283a 	ret
    6bd0:	01400804 	movi	r5,32
    6bd4:	2805883a 	mov	r2,r5
    6bd8:	f800283a 	ret
    6bdc:	1804d07a 	srli	r2,r3,1
    6be0:	01400044 	movi	r5,1
    6be4:	20800015 	stw	r2,0(r4)
    6be8:	003fda06 	br	6b54 <__lo0bits+0x2c>

00006bec <__mcmp>:
    6bec:	20800417 	ldw	r2,16(r4)
    6bf0:	28c00417 	ldw	r3,16(r5)
    6bf4:	10cfc83a 	sub	r7,r2,r3
    6bf8:	38000c1e 	bne	r7,zero,6c2c <__mcmp+0x40>
    6bfc:	18c5883a 	add	r2,r3,r3
    6c00:	1085883a 	add	r2,r2,r2
    6c04:	10c00504 	addi	r3,r2,20
    6c08:	21000504 	addi	r4,r4,20
    6c0c:	28cb883a 	add	r5,r5,r3
    6c10:	2085883a 	add	r2,r4,r2
    6c14:	10bfff04 	addi	r2,r2,-4
    6c18:	297fff04 	addi	r5,r5,-4
    6c1c:	11800017 	ldw	r6,0(r2)
    6c20:	28c00017 	ldw	r3,0(r5)
    6c24:	30c0031e 	bne	r6,r3,6c34 <__mcmp+0x48>
    6c28:	20bffa36 	bltu	r4,r2,6c14 <__mcmp+0x28>
    6c2c:	3805883a 	mov	r2,r7
    6c30:	f800283a 	ret
    6c34:	30c00336 	bltu	r6,r3,6c44 <__mcmp+0x58>
    6c38:	01c00044 	movi	r7,1
    6c3c:	3805883a 	mov	r2,r7
    6c40:	f800283a 	ret
    6c44:	01ffffc4 	movi	r7,-1
    6c48:	003ff806 	br	6c2c <__mcmp+0x40>

00006c4c <__ulp>:
    6c4c:	295ffc2c 	andhi	r5,r5,32752
    6c50:	013f3034 	movhi	r4,64704
    6c54:	290b883a 	add	r5,r5,r4
    6c58:	0145c83a 	sub	r2,zero,r5
    6c5c:	1007d53a 	srai	r3,r2,20
    6c60:	000d883a 	mov	r6,zero
    6c64:	0140040e 	bge	zero,r5,6c78 <__ulp+0x2c>
    6c68:	280f883a 	mov	r7,r5
    6c6c:	3807883a 	mov	r3,r7
    6c70:	3005883a 	mov	r2,r6
    6c74:	f800283a 	ret
    6c78:	008004c4 	movi	r2,19
    6c7c:	193ffb04 	addi	r4,r3,-20
    6c80:	10c00c0e 	bge	r2,r3,6cb4 <__ulp+0x68>
    6c84:	008007c4 	movi	r2,31
    6c88:	1107c83a 	sub	r3,r2,r4
    6c8c:	00800784 	movi	r2,30
    6c90:	01400044 	movi	r5,1
    6c94:	11000216 	blt	r2,r4,6ca0 <__ulp+0x54>
    6c98:	00800044 	movi	r2,1
    6c9c:	10ca983a 	sll	r5,r2,r3
    6ca0:	000f883a 	mov	r7,zero
    6ca4:	280d883a 	mov	r6,r5
    6ca8:	3807883a 	mov	r3,r7
    6cac:	3005883a 	mov	r2,r6
    6cb0:	f800283a 	ret
    6cb4:	00800234 	movhi	r2,8
    6cb8:	10cfd83a 	sra	r7,r2,r3
    6cbc:	000d883a 	mov	r6,zero
    6cc0:	3005883a 	mov	r2,r6
    6cc4:	3807883a 	mov	r3,r7
    6cc8:	f800283a 	ret

00006ccc <__b2d>:
    6ccc:	20800417 	ldw	r2,16(r4)
    6cd0:	defff904 	addi	sp,sp,-28
    6cd4:	dd000415 	stw	r20,16(sp)
    6cd8:	1085883a 	add	r2,r2,r2
    6cdc:	25000504 	addi	r20,r4,20
    6ce0:	1085883a 	add	r2,r2,r2
    6ce4:	dc000015 	stw	r16,0(sp)
    6ce8:	a0a1883a 	add	r16,r20,r2
    6cec:	dd400515 	stw	r21,20(sp)
    6cf0:	857fff17 	ldw	r21,-4(r16)
    6cf4:	dc400115 	stw	r17,4(sp)
    6cf8:	dfc00615 	stw	ra,24(sp)
    6cfc:	a809883a 	mov	r4,r21
    6d00:	2823883a 	mov	r17,r5
    6d04:	dcc00315 	stw	r19,12(sp)
    6d08:	dc800215 	stw	r18,8(sp)
    6d0c:	0006ab80 	call	6ab8 <__hi0bits>
    6d10:	100b883a 	mov	r5,r2
    6d14:	00800804 	movi	r2,32
    6d18:	1145c83a 	sub	r2,r2,r5
    6d1c:	88800015 	stw	r2,0(r17)
    6d20:	00800284 	movi	r2,10
    6d24:	80ffff04 	addi	r3,r16,-4
    6d28:	11401416 	blt	r2,r5,6d7c <__b2d+0xb0>
    6d2c:	008002c4 	movi	r2,11
    6d30:	1149c83a 	sub	r4,r2,r5
    6d34:	a0c02736 	bltu	r20,r3,6dd4 <__b2d+0x108>
    6d38:	000d883a 	mov	r6,zero
    6d3c:	28800544 	addi	r2,r5,21
    6d40:	a906d83a 	srl	r3,r21,r4
    6d44:	a884983a 	sll	r2,r21,r2
    6d48:	1ccffc34 	orhi	r19,r3,16368
    6d4c:	11a4b03a 	or	r18,r2,r6
    6d50:	9005883a 	mov	r2,r18
    6d54:	9807883a 	mov	r3,r19
    6d58:	dfc00617 	ldw	ra,24(sp)
    6d5c:	dd400517 	ldw	r21,20(sp)
    6d60:	dd000417 	ldw	r20,16(sp)
    6d64:	dcc00317 	ldw	r19,12(sp)
    6d68:	dc800217 	ldw	r18,8(sp)
    6d6c:	dc400117 	ldw	r17,4(sp)
    6d70:	dc000017 	ldw	r16,0(sp)
    6d74:	dec00704 	addi	sp,sp,28
    6d78:	f800283a 	ret
    6d7c:	a0c00e36 	bltu	r20,r3,6db8 <__b2d+0xec>
    6d80:	293ffd44 	addi	r4,r5,-11
    6d84:	000d883a 	mov	r6,zero
    6d88:	20000f26 	beq	r4,zero,6dc8 <__b2d+0xfc>
    6d8c:	00800804 	movi	r2,32
    6d90:	110bc83a 	sub	r5,r2,r4
    6d94:	a0c01236 	bltu	r20,r3,6de0 <__b2d+0x114>
    6d98:	000f883a 	mov	r7,zero
    6d9c:	a904983a 	sll	r2,r21,r4
    6da0:	3146d83a 	srl	r3,r6,r5
    6da4:	3108983a 	sll	r4,r6,r4
    6da8:	108ffc34 	orhi	r2,r2,16368
    6dac:	18a6b03a 	or	r19,r3,r2
    6db0:	3924b03a 	or	r18,r7,r4
    6db4:	003fe606 	br	6d50 <__b2d+0x84>
    6db8:	293ffd44 	addi	r4,r5,-11
    6dbc:	81bffe17 	ldw	r6,-8(r16)
    6dc0:	80fffe04 	addi	r3,r16,-8
    6dc4:	203ff11e 	bne	r4,zero,6d8c <__b2d+0xc0>
    6dc8:	accffc34 	orhi	r19,r21,16368
    6dcc:	3025883a 	mov	r18,r6
    6dd0:	003fdf06 	br	6d50 <__b2d+0x84>
    6dd4:	18bfff17 	ldw	r2,-4(r3)
    6dd8:	110cd83a 	srl	r6,r2,r4
    6ddc:	003fd706 	br	6d3c <__b2d+0x70>
    6de0:	18bfff17 	ldw	r2,-4(r3)
    6de4:	114ed83a 	srl	r7,r2,r5
    6de8:	003fec06 	br	6d9c <__b2d+0xd0>

00006dec <__ratio>:
    6dec:	defff904 	addi	sp,sp,-28
    6df0:	dc400215 	stw	r17,8(sp)
    6df4:	2823883a 	mov	r17,r5
    6df8:	d80b883a 	mov	r5,sp
    6dfc:	dfc00615 	stw	ra,24(sp)
    6e00:	dd000515 	stw	r20,20(sp)
    6e04:	dcc00415 	stw	r19,16(sp)
    6e08:	dc800315 	stw	r18,12(sp)
    6e0c:	2025883a 	mov	r18,r4
    6e10:	0006ccc0 	call	6ccc <__b2d>
    6e14:	8809883a 	mov	r4,r17
    6e18:	d9400104 	addi	r5,sp,4
    6e1c:	1027883a 	mov	r19,r2
    6e20:	1829883a 	mov	r20,r3
    6e24:	0006ccc0 	call	6ccc <__b2d>
    6e28:	89000417 	ldw	r4,16(r17)
    6e2c:	91c00417 	ldw	r7,16(r18)
    6e30:	d9800117 	ldw	r6,4(sp)
    6e34:	180b883a 	mov	r5,r3
    6e38:	390fc83a 	sub	r7,r7,r4
    6e3c:	1009883a 	mov	r4,r2
    6e40:	d8800017 	ldw	r2,0(sp)
    6e44:	380e917a 	slli	r7,r7,5
    6e48:	2011883a 	mov	r8,r4
    6e4c:	1185c83a 	sub	r2,r2,r6
    6e50:	11c5883a 	add	r2,r2,r7
    6e54:	1006953a 	slli	r3,r2,20
    6e58:	2813883a 	mov	r9,r5
    6e5c:	00800d0e 	bge	zero,r2,6e94 <__ratio+0xa8>
    6e60:	1d29883a 	add	r20,r3,r20
    6e64:	a00b883a 	mov	r5,r20
    6e68:	480f883a 	mov	r7,r9
    6e6c:	9809883a 	mov	r4,r19
    6e70:	400d883a 	mov	r6,r8
    6e74:	0009c480 	call	9c48 <__divdf3>
    6e78:	dfc00617 	ldw	ra,24(sp)
    6e7c:	dd000517 	ldw	r20,20(sp)
    6e80:	dcc00417 	ldw	r19,16(sp)
    6e84:	dc800317 	ldw	r18,12(sp)
    6e88:	dc400217 	ldw	r17,8(sp)
    6e8c:	dec00704 	addi	sp,sp,28
    6e90:	f800283a 	ret
    6e94:	28d3c83a 	sub	r9,r5,r3
    6e98:	003ff206 	br	6e64 <__ratio+0x78>

00006e9c <_mprec_log10>:
    6e9c:	defffe04 	addi	sp,sp,-8
    6ea0:	008005c4 	movi	r2,23
    6ea4:	dc000015 	stw	r16,0(sp)
    6ea8:	dfc00115 	stw	ra,4(sp)
    6eac:	2021883a 	mov	r16,r4
    6eb0:	11000c16 	blt	r2,r4,6ee4 <_mprec_log10+0x48>
    6eb4:	200490fa 	slli	r2,r4,3
    6eb8:	00c00074 	movhi	r3,1
    6ebc:	18fa9e04 	addi	r3,r3,-5512
    6ec0:	10c5883a 	add	r2,r2,r3
    6ec4:	12400117 	ldw	r9,4(r2)
    6ec8:	12000017 	ldw	r8,0(r2)
    6ecc:	4807883a 	mov	r3,r9
    6ed0:	4005883a 	mov	r2,r8
    6ed4:	dfc00117 	ldw	ra,4(sp)
    6ed8:	dc000017 	ldw	r16,0(sp)
    6edc:	dec00204 	addi	sp,sp,8
    6ee0:	f800283a 	ret
    6ee4:	0011883a 	mov	r8,zero
    6ee8:	024ffc34 	movhi	r9,16368
    6eec:	0005883a 	mov	r2,zero
    6ef0:	00d00934 	movhi	r3,16420
    6ef4:	480b883a 	mov	r5,r9
    6ef8:	4009883a 	mov	r4,r8
    6efc:	180f883a 	mov	r7,r3
    6f00:	100d883a 	mov	r6,r2
    6f04:	00098840 	call	9884 <__muldf3>
    6f08:	843fffc4 	addi	r16,r16,-1
    6f0c:	1011883a 	mov	r8,r2
    6f10:	1813883a 	mov	r9,r3
    6f14:	803ff51e 	bne	r16,zero,6eec <_mprec_log10+0x50>
    6f18:	4005883a 	mov	r2,r8
    6f1c:	4807883a 	mov	r3,r9
    6f20:	dfc00117 	ldw	ra,4(sp)
    6f24:	dc000017 	ldw	r16,0(sp)
    6f28:	dec00204 	addi	sp,sp,8
    6f2c:	f800283a 	ret

00006f30 <__copybits>:
    6f30:	297fffc4 	addi	r5,r5,-1
    6f34:	30800417 	ldw	r2,16(r6)
    6f38:	280bd17a 	srai	r5,r5,5
    6f3c:	31800504 	addi	r6,r6,20
    6f40:	1085883a 	add	r2,r2,r2
    6f44:	294b883a 	add	r5,r5,r5
    6f48:	294b883a 	add	r5,r5,r5
    6f4c:	1085883a 	add	r2,r2,r2
    6f50:	290b883a 	add	r5,r5,r4
    6f54:	3087883a 	add	r3,r6,r2
    6f58:	29400104 	addi	r5,r5,4
    6f5c:	30c0052e 	bgeu	r6,r3,6f74 <__copybits+0x44>
    6f60:	30800017 	ldw	r2,0(r6)
    6f64:	31800104 	addi	r6,r6,4
    6f68:	20800015 	stw	r2,0(r4)
    6f6c:	21000104 	addi	r4,r4,4
    6f70:	30fffb36 	bltu	r6,r3,6f60 <__copybits+0x30>
    6f74:	2140032e 	bgeu	r4,r5,6f84 <__copybits+0x54>
    6f78:	20000015 	stw	zero,0(r4)
    6f7c:	21000104 	addi	r4,r4,4
    6f80:	217ffd36 	bltu	r4,r5,6f78 <__copybits+0x48>
    6f84:	f800283a 	ret

00006f88 <__any_on>:
    6f88:	20800417 	ldw	r2,16(r4)
    6f8c:	2807d17a 	srai	r3,r5,5
    6f90:	21000504 	addi	r4,r4,20
    6f94:	10c00d0e 	bge	r2,r3,6fcc <__any_on+0x44>
    6f98:	1085883a 	add	r2,r2,r2
    6f9c:	1085883a 	add	r2,r2,r2
    6fa0:	208d883a 	add	r6,r4,r2
    6fa4:	2180182e 	bgeu	r4,r6,7008 <__any_on+0x80>
    6fa8:	30bfff17 	ldw	r2,-4(r6)
    6fac:	30ffff04 	addi	r3,r6,-4
    6fb0:	1000041e 	bne	r2,zero,6fc4 <__any_on+0x3c>
    6fb4:	20c0142e 	bgeu	r4,r3,7008 <__any_on+0x80>
    6fb8:	18ffff04 	addi	r3,r3,-4
    6fbc:	18800017 	ldw	r2,0(r3)
    6fc0:	103ffc26 	beq	r2,zero,6fb4 <__any_on+0x2c>
    6fc4:	00800044 	movi	r2,1
    6fc8:	f800283a 	ret
    6fcc:	18800a0e 	bge	r3,r2,6ff8 <__any_on+0x70>
    6fd0:	294007cc 	andi	r5,r5,31
    6fd4:	28000826 	beq	r5,zero,6ff8 <__any_on+0x70>
    6fd8:	18c5883a 	add	r2,r3,r3
    6fdc:	1085883a 	add	r2,r2,r2
    6fe0:	208d883a 	add	r6,r4,r2
    6fe4:	30c00017 	ldw	r3,0(r6)
    6fe8:	1944d83a 	srl	r2,r3,r5
    6fec:	1144983a 	sll	r2,r2,r5
    6ff0:	18bff41e 	bne	r3,r2,6fc4 <__any_on+0x3c>
    6ff4:	003feb06 	br	6fa4 <__any_on+0x1c>
    6ff8:	18c5883a 	add	r2,r3,r3
    6ffc:	1085883a 	add	r2,r2,r2
    7000:	208d883a 	add	r6,r4,r2
    7004:	003fe706 	br	6fa4 <__any_on+0x1c>
    7008:	0005883a 	mov	r2,zero
    700c:	f800283a 	ret

00007010 <_Balloc>:
    7010:	20c01317 	ldw	r3,76(r4)
    7014:	defffb04 	addi	sp,sp,-20
    7018:	dcc00315 	stw	r19,12(sp)
    701c:	dc800215 	stw	r18,8(sp)
    7020:	dfc00415 	stw	ra,16(sp)
    7024:	2825883a 	mov	r18,r5
    7028:	dc400115 	stw	r17,4(sp)
    702c:	dc000015 	stw	r16,0(sp)
    7030:	2027883a 	mov	r19,r4
    7034:	01800404 	movi	r6,16
    7038:	01400104 	movi	r5,4
    703c:	18001726 	beq	r3,zero,709c <_Balloc+0x8c>
    7040:	01400044 	movi	r5,1
    7044:	9485883a 	add	r2,r18,r18
    7048:	2ca2983a 	sll	r17,r5,r18
    704c:	1085883a 	add	r2,r2,r2
    7050:	10c7883a 	add	r3,r2,r3
    7054:	1c000017 	ldw	r16,0(r3)
    7058:	8c4d883a 	add	r6,r17,r17
    705c:	318d883a 	add	r6,r6,r6
    7060:	9809883a 	mov	r4,r19
    7064:	31800504 	addi	r6,r6,20
    7068:	80001226 	beq	r16,zero,70b4 <_Balloc+0xa4>
    706c:	80800017 	ldw	r2,0(r16)
    7070:	18800015 	stw	r2,0(r3)
    7074:	80000415 	stw	zero,16(r16)
    7078:	80000315 	stw	zero,12(r16)
    707c:	8005883a 	mov	r2,r16
    7080:	dfc00417 	ldw	ra,16(sp)
    7084:	dcc00317 	ldw	r19,12(sp)
    7088:	dc800217 	ldw	r18,8(sp)
    708c:	dc400117 	ldw	r17,4(sp)
    7090:	dc000017 	ldw	r16,0(sp)
    7094:	dec00504 	addi	sp,sp,20
    7098:	f800283a 	ret
    709c:	00083d80 	call	83d8 <_calloc_r>
    70a0:	1007883a 	mov	r3,r2
    70a4:	0021883a 	mov	r16,zero
    70a8:	98801315 	stw	r2,76(r19)
    70ac:	103fe41e 	bne	r2,zero,7040 <_Balloc+0x30>
    70b0:	003ff206 	br	707c <_Balloc+0x6c>
    70b4:	00083d80 	call	83d8 <_calloc_r>
    70b8:	103ff026 	beq	r2,zero,707c <_Balloc+0x6c>
    70bc:	1021883a 	mov	r16,r2
    70c0:	14800115 	stw	r18,4(r2)
    70c4:	14400215 	stw	r17,8(r2)
    70c8:	003fea06 	br	7074 <_Balloc+0x64>

000070cc <__d2b>:
    70cc:	defff504 	addi	sp,sp,-44
    70d0:	dcc00515 	stw	r19,20(sp)
    70d4:	04c00044 	movi	r19,1
    70d8:	dc000215 	stw	r16,8(sp)
    70dc:	2821883a 	mov	r16,r5
    70e0:	980b883a 	mov	r5,r19
    70e4:	ddc00915 	stw	r23,36(sp)
    70e8:	dd800815 	stw	r22,32(sp)
    70ec:	dd400715 	stw	r21,28(sp)
    70f0:	dd000615 	stw	r20,24(sp)
    70f4:	dc800415 	stw	r18,16(sp)
    70f8:	dc400315 	stw	r17,12(sp)
    70fc:	dfc00a15 	stw	ra,40(sp)
    7100:	3023883a 	mov	r17,r6
    7104:	382d883a 	mov	r22,r7
    7108:	ddc00b17 	ldw	r23,44(sp)
    710c:	00070100 	call	7010 <_Balloc>
    7110:	1025883a 	mov	r18,r2
    7114:	00a00034 	movhi	r2,32768
    7118:	10bfffc4 	addi	r2,r2,-1
    711c:	8888703a 	and	r4,r17,r2
    7120:	202ad53a 	srli	r21,r4,20
    7124:	00800434 	movhi	r2,16
    7128:	10bfffc4 	addi	r2,r2,-1
    712c:	8886703a 	and	r3,r17,r2
    7130:	a829003a 	cmpeq	r20,r21,zero
    7134:	800b883a 	mov	r5,r16
    7138:	d8c00115 	stw	r3,4(sp)
    713c:	94000504 	addi	r16,r18,20
    7140:	a000021e 	bne	r20,zero,714c <__d2b+0x80>
    7144:	18c00434 	orhi	r3,r3,16
    7148:	d8c00115 	stw	r3,4(sp)
    714c:	28002726 	beq	r5,zero,71ec <__d2b+0x120>
    7150:	d809883a 	mov	r4,sp
    7154:	d9400015 	stw	r5,0(sp)
    7158:	0006b280 	call	6b28 <__lo0bits>
    715c:	100d883a 	mov	r6,r2
    7160:	10003526 	beq	r2,zero,7238 <__d2b+0x16c>
    7164:	d8c00117 	ldw	r3,4(sp)
    7168:	00800804 	movi	r2,32
    716c:	1185c83a 	sub	r2,r2,r6
    7170:	d9000017 	ldw	r4,0(sp)
    7174:	1886983a 	sll	r3,r3,r2
    7178:	1906b03a 	or	r3,r3,r4
    717c:	90c00515 	stw	r3,20(r18)
    7180:	d8c00117 	ldw	r3,4(sp)
    7184:	1986d83a 	srl	r3,r3,r6
    7188:	d8c00115 	stw	r3,4(sp)
    718c:	180b003a 	cmpeq	r5,r3,zero
    7190:	00800084 	movi	r2,2
    7194:	114bc83a 	sub	r5,r2,r5
    7198:	80c00115 	stw	r3,4(r16)
    719c:	91400415 	stw	r5,16(r18)
    71a0:	a0001a1e 	bne	r20,zero,720c <__d2b+0x140>
    71a4:	3545883a 	add	r2,r6,r21
    71a8:	10bef344 	addi	r2,r2,-1075
    71ac:	00c00d44 	movi	r3,53
    71b0:	b0800015 	stw	r2,0(r22)
    71b4:	1987c83a 	sub	r3,r3,r6
    71b8:	b8c00015 	stw	r3,0(r23)
    71bc:	9005883a 	mov	r2,r18
    71c0:	dfc00a17 	ldw	ra,40(sp)
    71c4:	ddc00917 	ldw	r23,36(sp)
    71c8:	dd800817 	ldw	r22,32(sp)
    71cc:	dd400717 	ldw	r21,28(sp)
    71d0:	dd000617 	ldw	r20,24(sp)
    71d4:	dcc00517 	ldw	r19,20(sp)
    71d8:	dc800417 	ldw	r18,16(sp)
    71dc:	dc400317 	ldw	r17,12(sp)
    71e0:	dc000217 	ldw	r16,8(sp)
    71e4:	dec00b04 	addi	sp,sp,44
    71e8:	f800283a 	ret
    71ec:	d9000104 	addi	r4,sp,4
    71f0:	0006b280 	call	6b28 <__lo0bits>
    71f4:	11800804 	addi	r6,r2,32
    71f8:	d8800117 	ldw	r2,4(sp)
    71fc:	94c00415 	stw	r19,16(r18)
    7200:	980b883a 	mov	r5,r19
    7204:	90800515 	stw	r2,20(r18)
    7208:	a03fe626 	beq	r20,zero,71a4 <__d2b+0xd8>
    720c:	2945883a 	add	r2,r5,r5
    7210:	1085883a 	add	r2,r2,r2
    7214:	1405883a 	add	r2,r2,r16
    7218:	113fff17 	ldw	r4,-4(r2)
    721c:	30fef384 	addi	r3,r6,-1074
    7220:	2820917a 	slli	r16,r5,5
    7224:	b0c00015 	stw	r3,0(r22)
    7228:	0006ab80 	call	6ab8 <__hi0bits>
    722c:	80a1c83a 	sub	r16,r16,r2
    7230:	bc000015 	stw	r16,0(r23)
    7234:	003fe106 	br	71bc <__d2b+0xf0>
    7238:	d8800017 	ldw	r2,0(sp)
    723c:	90800515 	stw	r2,20(r18)
    7240:	d8c00117 	ldw	r3,4(sp)
    7244:	003fd106 	br	718c <__d2b+0xc0>

00007248 <__mdiff>:
    7248:	defffb04 	addi	sp,sp,-20
    724c:	dc000015 	stw	r16,0(sp)
    7250:	2821883a 	mov	r16,r5
    7254:	dc800215 	stw	r18,8(sp)
    7258:	300b883a 	mov	r5,r6
    725c:	2025883a 	mov	r18,r4
    7260:	8009883a 	mov	r4,r16
    7264:	dc400115 	stw	r17,4(sp)
    7268:	dfc00415 	stw	ra,16(sp)
    726c:	dcc00315 	stw	r19,12(sp)
    7270:	3023883a 	mov	r17,r6
    7274:	0006bec0 	call	6bec <__mcmp>
    7278:	10004226 	beq	r2,zero,7384 <__mdiff+0x13c>
    727c:	10005016 	blt	r2,zero,73c0 <__mdiff+0x178>
    7280:	0027883a 	mov	r19,zero
    7284:	81400117 	ldw	r5,4(r16)
    7288:	9009883a 	mov	r4,r18
    728c:	00070100 	call	7010 <_Balloc>
    7290:	1019883a 	mov	r12,r2
    7294:	82800417 	ldw	r10,16(r16)
    7298:	88800417 	ldw	r2,16(r17)
    729c:	81800504 	addi	r6,r16,20
    72a0:	5287883a 	add	r3,r10,r10
    72a4:	1085883a 	add	r2,r2,r2
    72a8:	18c7883a 	add	r3,r3,r3
    72ac:	1085883a 	add	r2,r2,r2
    72b0:	8a000504 	addi	r8,r17,20
    72b4:	64c00315 	stw	r19,12(r12)
    72b8:	30db883a 	add	r13,r6,r3
    72bc:	4097883a 	add	r11,r8,r2
    72c0:	61c00504 	addi	r7,r12,20
    72c4:	0013883a 	mov	r9,zero
    72c8:	31000017 	ldw	r4,0(r6)
    72cc:	41400017 	ldw	r5,0(r8)
    72d0:	42000104 	addi	r8,r8,4
    72d4:	20bfffcc 	andi	r2,r4,65535
    72d8:	28ffffcc 	andi	r3,r5,65535
    72dc:	10c5c83a 	sub	r2,r2,r3
    72e0:	1245883a 	add	r2,r2,r9
    72e4:	2008d43a 	srli	r4,r4,16
    72e8:	280ad43a 	srli	r5,r5,16
    72ec:	1007d43a 	srai	r3,r2,16
    72f0:	3880000d 	sth	r2,0(r7)
    72f4:	2149c83a 	sub	r4,r4,r5
    72f8:	20c9883a 	add	r4,r4,r3
    72fc:	3900008d 	sth	r4,2(r7)
    7300:	31800104 	addi	r6,r6,4
    7304:	39c00104 	addi	r7,r7,4
    7308:	2013d43a 	srai	r9,r4,16
    730c:	42ffee36 	bltu	r8,r11,72c8 <__mdiff+0x80>
    7310:	33400c2e 	bgeu	r6,r13,7344 <__mdiff+0xfc>
    7314:	30800017 	ldw	r2,0(r6)
    7318:	31800104 	addi	r6,r6,4
    731c:	10ffffcc 	andi	r3,r2,65535
    7320:	1a47883a 	add	r3,r3,r9
    7324:	1004d43a 	srli	r2,r2,16
    7328:	1809d43a 	srai	r4,r3,16
    732c:	38c0000d 	sth	r3,0(r7)
    7330:	1105883a 	add	r2,r2,r4
    7334:	3880008d 	sth	r2,2(r7)
    7338:	1013d43a 	srai	r9,r2,16
    733c:	39c00104 	addi	r7,r7,4
    7340:	337ff436 	bltu	r6,r13,7314 <__mdiff+0xcc>
    7344:	38bfff17 	ldw	r2,-4(r7)
    7348:	38ffff04 	addi	r3,r7,-4
    734c:	1000041e 	bne	r2,zero,7360 <__mdiff+0x118>
    7350:	18ffff04 	addi	r3,r3,-4
    7354:	18800017 	ldw	r2,0(r3)
    7358:	52bfffc4 	addi	r10,r10,-1
    735c:	103ffc26 	beq	r2,zero,7350 <__mdiff+0x108>
    7360:	6005883a 	mov	r2,r12
    7364:	62800415 	stw	r10,16(r12)
    7368:	dfc00417 	ldw	ra,16(sp)
    736c:	dcc00317 	ldw	r19,12(sp)
    7370:	dc800217 	ldw	r18,8(sp)
    7374:	dc400117 	ldw	r17,4(sp)
    7378:	dc000017 	ldw	r16,0(sp)
    737c:	dec00504 	addi	sp,sp,20
    7380:	f800283a 	ret
    7384:	9009883a 	mov	r4,r18
    7388:	000b883a 	mov	r5,zero
    738c:	00070100 	call	7010 <_Balloc>
    7390:	1019883a 	mov	r12,r2
    7394:	00800044 	movi	r2,1
    7398:	60800415 	stw	r2,16(r12)
    739c:	6005883a 	mov	r2,r12
    73a0:	60000515 	stw	zero,20(r12)
    73a4:	dfc00417 	ldw	ra,16(sp)
    73a8:	dcc00317 	ldw	r19,12(sp)
    73ac:	dc800217 	ldw	r18,8(sp)
    73b0:	dc400117 	ldw	r17,4(sp)
    73b4:	dc000017 	ldw	r16,0(sp)
    73b8:	dec00504 	addi	sp,sp,20
    73bc:	f800283a 	ret
    73c0:	880d883a 	mov	r6,r17
    73c4:	04c00044 	movi	r19,1
    73c8:	8023883a 	mov	r17,r16
    73cc:	3021883a 	mov	r16,r6
    73d0:	003fac06 	br	7284 <__mdiff+0x3c>

000073d4 <__lshift>:
    73d4:	defff904 	addi	sp,sp,-28
    73d8:	28800417 	ldw	r2,16(r5)
    73dc:	dc000015 	stw	r16,0(sp)
    73e0:	3021d17a 	srai	r16,r6,5
    73e4:	28c00217 	ldw	r3,8(r5)
    73e8:	10800044 	addi	r2,r2,1
    73ec:	dc400115 	stw	r17,4(sp)
    73f0:	80a3883a 	add	r17,r16,r2
    73f4:	dd400515 	stw	r21,20(sp)
    73f8:	dd000415 	stw	r20,16(sp)
    73fc:	dc800215 	stw	r18,8(sp)
    7400:	dfc00615 	stw	ra,24(sp)
    7404:	2825883a 	mov	r18,r5
    7408:	dcc00315 	stw	r19,12(sp)
    740c:	3029883a 	mov	r20,r6
    7410:	202b883a 	mov	r21,r4
    7414:	29400117 	ldw	r5,4(r5)
    7418:	1c40030e 	bge	r3,r17,7428 <__lshift+0x54>
    741c:	18c7883a 	add	r3,r3,r3
    7420:	29400044 	addi	r5,r5,1
    7424:	1c7ffd16 	blt	r3,r17,741c <__lshift+0x48>
    7428:	a809883a 	mov	r4,r21
    742c:	00070100 	call	7010 <_Balloc>
    7430:	1027883a 	mov	r19,r2
    7434:	11400504 	addi	r5,r2,20
    7438:	0400090e 	bge	zero,r16,7460 <__lshift+0x8c>
    743c:	2805883a 	mov	r2,r5
    7440:	0007883a 	mov	r3,zero
    7444:	18c00044 	addi	r3,r3,1
    7448:	10000015 	stw	zero,0(r2)
    744c:	10800104 	addi	r2,r2,4
    7450:	80fffc1e 	bne	r16,r3,7444 <__lshift+0x70>
    7454:	8405883a 	add	r2,r16,r16
    7458:	1085883a 	add	r2,r2,r2
    745c:	288b883a 	add	r5,r5,r2
    7460:	90800417 	ldw	r2,16(r18)
    7464:	91000504 	addi	r4,r18,20
    7468:	a18007cc 	andi	r6,r20,31
    746c:	1085883a 	add	r2,r2,r2
    7470:	1085883a 	add	r2,r2,r2
    7474:	208f883a 	add	r7,r4,r2
    7478:	30001e26 	beq	r6,zero,74f4 <__lshift+0x120>
    747c:	00800804 	movi	r2,32
    7480:	1191c83a 	sub	r8,r2,r6
    7484:	0007883a 	mov	r3,zero
    7488:	20800017 	ldw	r2,0(r4)
    748c:	1184983a 	sll	r2,r2,r6
    7490:	1884b03a 	or	r2,r3,r2
    7494:	28800015 	stw	r2,0(r5)
    7498:	20c00017 	ldw	r3,0(r4)
    749c:	21000104 	addi	r4,r4,4
    74a0:	29400104 	addi	r5,r5,4
    74a4:	1a06d83a 	srl	r3,r3,r8
    74a8:	21fff736 	bltu	r4,r7,7488 <__lshift+0xb4>
    74ac:	28c00015 	stw	r3,0(r5)
    74b0:	18000126 	beq	r3,zero,74b8 <__lshift+0xe4>
    74b4:	8c400044 	addi	r17,r17,1
    74b8:	88bfffc4 	addi	r2,r17,-1
    74bc:	98800415 	stw	r2,16(r19)
    74c0:	a809883a 	mov	r4,r21
    74c4:	900b883a 	mov	r5,r18
    74c8:	0006a900 	call	6a90 <_Bfree>
    74cc:	9805883a 	mov	r2,r19
    74d0:	dfc00617 	ldw	ra,24(sp)
    74d4:	dd400517 	ldw	r21,20(sp)
    74d8:	dd000417 	ldw	r20,16(sp)
    74dc:	dcc00317 	ldw	r19,12(sp)
    74e0:	dc800217 	ldw	r18,8(sp)
    74e4:	dc400117 	ldw	r17,4(sp)
    74e8:	dc000017 	ldw	r16,0(sp)
    74ec:	dec00704 	addi	sp,sp,28
    74f0:	f800283a 	ret
    74f4:	20800017 	ldw	r2,0(r4)
    74f8:	21000104 	addi	r4,r4,4
    74fc:	28800015 	stw	r2,0(r5)
    7500:	29400104 	addi	r5,r5,4
    7504:	21ffec2e 	bgeu	r4,r7,74b8 <__lshift+0xe4>
    7508:	20800017 	ldw	r2,0(r4)
    750c:	21000104 	addi	r4,r4,4
    7510:	28800015 	stw	r2,0(r5)
    7514:	29400104 	addi	r5,r5,4
    7518:	21fff636 	bltu	r4,r7,74f4 <__lshift+0x120>
    751c:	003fe606 	br	74b8 <__lshift+0xe4>

00007520 <__multiply>:
    7520:	defff904 	addi	sp,sp,-28
    7524:	dcc00315 	stw	r19,12(sp)
    7528:	dc800215 	stw	r18,8(sp)
    752c:	2cc00417 	ldw	r19,16(r5)
    7530:	34800417 	ldw	r18,16(r6)
    7534:	dd000415 	stw	r20,16(sp)
    7538:	dc400115 	stw	r17,4(sp)
    753c:	dfc00615 	stw	ra,24(sp)
    7540:	dd400515 	stw	r21,20(sp)
    7544:	dc000015 	stw	r16,0(sp)
    7548:	2823883a 	mov	r17,r5
    754c:	3029883a 	mov	r20,r6
    7550:	9c80040e 	bge	r19,r18,7564 <__multiply+0x44>
    7554:	9027883a 	mov	r19,r18
    7558:	2c800417 	ldw	r18,16(r5)
    755c:	2829883a 	mov	r20,r5
    7560:	3023883a 	mov	r17,r6
    7564:	88800217 	ldw	r2,8(r17)
    7568:	9ca1883a 	add	r16,r19,r18
    756c:	89400117 	ldw	r5,4(r17)
    7570:	1400010e 	bge	r2,r16,7578 <__multiply+0x58>
    7574:	29400044 	addi	r5,r5,1
    7578:	00070100 	call	7010 <_Balloc>
    757c:	102b883a 	mov	r21,r2
    7580:	8405883a 	add	r2,r16,r16
    7584:	1085883a 	add	r2,r2,r2
    7588:	a9000504 	addi	r4,r21,20
    758c:	209d883a 	add	r14,r4,r2
    7590:	2380042e 	bgeu	r4,r14,75a4 <__multiply+0x84>
    7594:	2005883a 	mov	r2,r4
    7598:	10000015 	stw	zero,0(r2)
    759c:	10800104 	addi	r2,r2,4
    75a0:	13bffd36 	bltu	r2,r14,7598 <__multiply+0x78>
    75a4:	9485883a 	add	r2,r18,r18
    75a8:	9cc7883a 	add	r3,r19,r19
    75ac:	a1800504 	addi	r6,r20,20
    75b0:	1085883a 	add	r2,r2,r2
    75b4:	8b400504 	addi	r13,r17,20
    75b8:	18c7883a 	add	r3,r3,r3
    75bc:	309f883a 	add	r15,r6,r2
    75c0:	68d7883a 	add	r11,r13,r3
    75c4:	33c03b2e 	bgeu	r6,r15,76b4 <__multiply+0x194>
    75c8:	2019883a 	mov	r12,r4
    75cc:	30800017 	ldw	r2,0(r6)
    75d0:	127fffcc 	andi	r9,r2,65535
    75d4:	48001826 	beq	r9,zero,7638 <__multiply+0x118>
    75d8:	6811883a 	mov	r8,r13
    75dc:	600f883a 	mov	r7,r12
    75e0:	0015883a 	mov	r10,zero
    75e4:	40c00017 	ldw	r3,0(r8)
    75e8:	39400017 	ldw	r5,0(r7)
    75ec:	42000104 	addi	r8,r8,4
    75f0:	193fffcc 	andi	r4,r3,65535
    75f4:	4909383a 	mul	r4,r9,r4
    75f8:	1806d43a 	srli	r3,r3,16
    75fc:	28bfffcc 	andi	r2,r5,65535
    7600:	5085883a 	add	r2,r10,r2
    7604:	2089883a 	add	r4,r4,r2
    7608:	48c7383a 	mul	r3,r9,r3
    760c:	280ad43a 	srli	r5,r5,16
    7610:	2004d43a 	srli	r2,r4,16
    7614:	3900000d 	sth	r4,0(r7)
    7618:	1947883a 	add	r3,r3,r5
    761c:	10c5883a 	add	r2,r2,r3
    7620:	3880008d 	sth	r2,2(r7)
    7624:	1014d43a 	srli	r10,r2,16
    7628:	39c00104 	addi	r7,r7,4
    762c:	42ffed36 	bltu	r8,r11,75e4 <__multiply+0xc4>
    7630:	3a800015 	stw	r10,0(r7)
    7634:	30800017 	ldw	r2,0(r6)
    7638:	1012d43a 	srli	r9,r2,16
    763c:	48001926 	beq	r9,zero,76a4 <__multiply+0x184>
    7640:	60800017 	ldw	r2,0(r12)
    7644:	6811883a 	mov	r8,r13
    7648:	600f883a 	mov	r7,r12
    764c:	0015883a 	mov	r10,zero
    7650:	100b883a 	mov	r5,r2
    7654:	41000017 	ldw	r4,0(r8)
    7658:	2806d43a 	srli	r3,r5,16
    765c:	3880000d 	sth	r2,0(r7)
    7660:	20bfffcc 	andi	r2,r4,65535
    7664:	4885383a 	mul	r2,r9,r2
    7668:	50c7883a 	add	r3,r10,r3
    766c:	2008d43a 	srli	r4,r4,16
    7670:	10c5883a 	add	r2,r2,r3
    7674:	3880008d 	sth	r2,2(r7)
    7678:	39c00104 	addi	r7,r7,4
    767c:	39400017 	ldw	r5,0(r7)
    7680:	4909383a 	mul	r4,r9,r4
    7684:	1004d43a 	srli	r2,r2,16
    7688:	28ffffcc 	andi	r3,r5,65535
    768c:	20c9883a 	add	r4,r4,r3
    7690:	1105883a 	add	r2,r2,r4
    7694:	42000104 	addi	r8,r8,4
    7698:	1014d43a 	srli	r10,r2,16
    769c:	42ffed36 	bltu	r8,r11,7654 <__multiply+0x134>
    76a0:	38800015 	stw	r2,0(r7)
    76a4:	31800104 	addi	r6,r6,4
    76a8:	33c0022e 	bgeu	r6,r15,76b4 <__multiply+0x194>
    76ac:	63000104 	addi	r12,r12,4
    76b0:	003fc606 	br	75cc <__multiply+0xac>
    76b4:	0400090e 	bge	zero,r16,76dc <__multiply+0x1bc>
    76b8:	70bfff17 	ldw	r2,-4(r14)
    76bc:	70ffff04 	addi	r3,r14,-4
    76c0:	10000326 	beq	r2,zero,76d0 <__multiply+0x1b0>
    76c4:	00000506 	br	76dc <__multiply+0x1bc>
    76c8:	18800017 	ldw	r2,0(r3)
    76cc:	1000031e 	bne	r2,zero,76dc <__multiply+0x1bc>
    76d0:	843fffc4 	addi	r16,r16,-1
    76d4:	18ffff04 	addi	r3,r3,-4
    76d8:	803ffb1e 	bne	r16,zero,76c8 <__multiply+0x1a8>
    76dc:	a805883a 	mov	r2,r21
    76e0:	ac000415 	stw	r16,16(r21)
    76e4:	dfc00617 	ldw	ra,24(sp)
    76e8:	dd400517 	ldw	r21,20(sp)
    76ec:	dd000417 	ldw	r20,16(sp)
    76f0:	dcc00317 	ldw	r19,12(sp)
    76f4:	dc800217 	ldw	r18,8(sp)
    76f8:	dc400117 	ldw	r17,4(sp)
    76fc:	dc000017 	ldw	r16,0(sp)
    7700:	dec00704 	addi	sp,sp,28
    7704:	f800283a 	ret

00007708 <__i2b>:
    7708:	defffd04 	addi	sp,sp,-12
    770c:	dc000015 	stw	r16,0(sp)
    7710:	04000044 	movi	r16,1
    7714:	dc800115 	stw	r18,4(sp)
    7718:	2825883a 	mov	r18,r5
    771c:	800b883a 	mov	r5,r16
    7720:	dfc00215 	stw	ra,8(sp)
    7724:	00070100 	call	7010 <_Balloc>
    7728:	14000415 	stw	r16,16(r2)
    772c:	14800515 	stw	r18,20(r2)
    7730:	dfc00217 	ldw	ra,8(sp)
    7734:	dc800117 	ldw	r18,4(sp)
    7738:	dc000017 	ldw	r16,0(sp)
    773c:	dec00304 	addi	sp,sp,12
    7740:	f800283a 	ret

00007744 <__multadd>:
    7744:	defffa04 	addi	sp,sp,-24
    7748:	dc800215 	stw	r18,8(sp)
    774c:	2c800417 	ldw	r18,16(r5)
    7750:	dd000415 	stw	r20,16(sp)
    7754:	dcc00315 	stw	r19,12(sp)
    7758:	dc000015 	stw	r16,0(sp)
    775c:	dfc00515 	stw	ra,20(sp)
    7760:	3821883a 	mov	r16,r7
    7764:	dc400115 	stw	r17,4(sp)
    7768:	2827883a 	mov	r19,r5
    776c:	2029883a 	mov	r20,r4
    7770:	2a000504 	addi	r8,r5,20
    7774:	000f883a 	mov	r7,zero
    7778:	40800017 	ldw	r2,0(r8)
    777c:	39c00044 	addi	r7,r7,1
    7780:	10ffffcc 	andi	r3,r2,65535
    7784:	1987383a 	mul	r3,r3,r6
    7788:	1004d43a 	srli	r2,r2,16
    778c:	1c07883a 	add	r3,r3,r16
    7790:	180ad43a 	srli	r5,r3,16
    7794:	1185383a 	mul	r2,r2,r6
    7798:	18ffffcc 	andi	r3,r3,65535
    779c:	1145883a 	add	r2,r2,r5
    77a0:	1008943a 	slli	r4,r2,16
    77a4:	1020d43a 	srli	r16,r2,16
    77a8:	20c9883a 	add	r4,r4,r3
    77ac:	41000015 	stw	r4,0(r8)
    77b0:	42000104 	addi	r8,r8,4
    77b4:	3cbff016 	blt	r7,r18,7778 <__multadd+0x34>
    77b8:	80000826 	beq	r16,zero,77dc <__multadd+0x98>
    77bc:	98800217 	ldw	r2,8(r19)
    77c0:	90800f0e 	bge	r18,r2,7800 <__multadd+0xbc>
    77c4:	9485883a 	add	r2,r18,r18
    77c8:	1085883a 	add	r2,r2,r2
    77cc:	14c5883a 	add	r2,r2,r19
    77d0:	90c00044 	addi	r3,r18,1
    77d4:	14000515 	stw	r16,20(r2)
    77d8:	98c00415 	stw	r3,16(r19)
    77dc:	9805883a 	mov	r2,r19
    77e0:	dfc00517 	ldw	ra,20(sp)
    77e4:	dd000417 	ldw	r20,16(sp)
    77e8:	dcc00317 	ldw	r19,12(sp)
    77ec:	dc800217 	ldw	r18,8(sp)
    77f0:	dc400117 	ldw	r17,4(sp)
    77f4:	dc000017 	ldw	r16,0(sp)
    77f8:	dec00604 	addi	sp,sp,24
    77fc:	f800283a 	ret
    7800:	99400117 	ldw	r5,4(r19)
    7804:	a009883a 	mov	r4,r20
    7808:	29400044 	addi	r5,r5,1
    780c:	00070100 	call	7010 <_Balloc>
    7810:	99800417 	ldw	r6,16(r19)
    7814:	99400304 	addi	r5,r19,12
    7818:	11000304 	addi	r4,r2,12
    781c:	318d883a 	add	r6,r6,r6
    7820:	318d883a 	add	r6,r6,r6
    7824:	31800204 	addi	r6,r6,8
    7828:	1023883a 	mov	r17,r2
    782c:	00068780 	call	6878 <memcpy>
    7830:	980b883a 	mov	r5,r19
    7834:	a009883a 	mov	r4,r20
    7838:	0006a900 	call	6a90 <_Bfree>
    783c:	8827883a 	mov	r19,r17
    7840:	003fe006 	br	77c4 <__multadd+0x80>

00007844 <__pow5mult>:
    7844:	defffa04 	addi	sp,sp,-24
    7848:	308000cc 	andi	r2,r6,3
    784c:	dd000415 	stw	r20,16(sp)
    7850:	dcc00315 	stw	r19,12(sp)
    7854:	dc000015 	stw	r16,0(sp)
    7858:	dfc00515 	stw	ra,20(sp)
    785c:	dc800215 	stw	r18,8(sp)
    7860:	dc400115 	stw	r17,4(sp)
    7864:	3021883a 	mov	r16,r6
    7868:	2027883a 	mov	r19,r4
    786c:	2829883a 	mov	r20,r5
    7870:	10002b1e 	bne	r2,zero,7920 <__pow5mult+0xdc>
    7874:	8025d0ba 	srai	r18,r16,2
    7878:	90001b26 	beq	r18,zero,78e8 <__pow5mult+0xa4>
    787c:	9c001217 	ldw	r16,72(r19)
    7880:	8000081e 	bne	r16,zero,78a4 <__pow5mult+0x60>
    7884:	00003006 	br	7948 <__pow5mult+0x104>
    7888:	800b883a 	mov	r5,r16
    788c:	800d883a 	mov	r6,r16
    7890:	9809883a 	mov	r4,r19
    7894:	90001426 	beq	r18,zero,78e8 <__pow5mult+0xa4>
    7898:	80800017 	ldw	r2,0(r16)
    789c:	10001b26 	beq	r2,zero,790c <__pow5mult+0xc8>
    78a0:	1021883a 	mov	r16,r2
    78a4:	9080004c 	andi	r2,r18,1
    78a8:	1005003a 	cmpeq	r2,r2,zero
    78ac:	9025d07a 	srai	r18,r18,1
    78b0:	800d883a 	mov	r6,r16
    78b4:	9809883a 	mov	r4,r19
    78b8:	a00b883a 	mov	r5,r20
    78bc:	103ff21e 	bne	r2,zero,7888 <__pow5mult+0x44>
    78c0:	00075200 	call	7520 <__multiply>
    78c4:	a00b883a 	mov	r5,r20
    78c8:	9809883a 	mov	r4,r19
    78cc:	1023883a 	mov	r17,r2
    78d0:	0006a900 	call	6a90 <_Bfree>
    78d4:	8829883a 	mov	r20,r17
    78d8:	800b883a 	mov	r5,r16
    78dc:	800d883a 	mov	r6,r16
    78e0:	9809883a 	mov	r4,r19
    78e4:	903fec1e 	bne	r18,zero,7898 <__pow5mult+0x54>
    78e8:	a005883a 	mov	r2,r20
    78ec:	dfc00517 	ldw	ra,20(sp)
    78f0:	dd000417 	ldw	r20,16(sp)
    78f4:	dcc00317 	ldw	r19,12(sp)
    78f8:	dc800217 	ldw	r18,8(sp)
    78fc:	dc400117 	ldw	r17,4(sp)
    7900:	dc000017 	ldw	r16,0(sp)
    7904:	dec00604 	addi	sp,sp,24
    7908:	f800283a 	ret
    790c:	00075200 	call	7520 <__multiply>
    7910:	80800015 	stw	r2,0(r16)
    7914:	1021883a 	mov	r16,r2
    7918:	10000015 	stw	zero,0(r2)
    791c:	003fe106 	br	78a4 <__pow5mult+0x60>
    7920:	1085883a 	add	r2,r2,r2
    7924:	00c00074 	movhi	r3,1
    7928:	18fae404 	addi	r3,r3,-5232
    792c:	1085883a 	add	r2,r2,r2
    7930:	10c5883a 	add	r2,r2,r3
    7934:	11bfff17 	ldw	r6,-4(r2)
    7938:	000f883a 	mov	r7,zero
    793c:	00077440 	call	7744 <__multadd>
    7940:	1029883a 	mov	r20,r2
    7944:	003fcb06 	br	7874 <__pow5mult+0x30>
    7948:	9809883a 	mov	r4,r19
    794c:	01409c44 	movi	r5,625
    7950:	00077080 	call	7708 <__i2b>
    7954:	98801215 	stw	r2,72(r19)
    7958:	1021883a 	mov	r16,r2
    795c:	10000015 	stw	zero,0(r2)
    7960:	003fd006 	br	78a4 <__pow5mult+0x60>

00007964 <__s2b>:
    7964:	defff904 	addi	sp,sp,-28
    7968:	dcc00315 	stw	r19,12(sp)
    796c:	dc800215 	stw	r18,8(sp)
    7970:	2827883a 	mov	r19,r5
    7974:	2025883a 	mov	r18,r4
    7978:	01400244 	movi	r5,9
    797c:	39000204 	addi	r4,r7,8
    7980:	dd000415 	stw	r20,16(sp)
    7984:	dc400115 	stw	r17,4(sp)
    7988:	dfc00615 	stw	ra,24(sp)
    798c:	dd400515 	stw	r21,20(sp)
    7990:	dc000015 	stw	r16,0(sp)
    7994:	3829883a 	mov	r20,r7
    7998:	3023883a 	mov	r17,r6
    799c:	00010280 	call	1028 <__divsi3>
    79a0:	00c00044 	movi	r3,1
    79a4:	1880350e 	bge	r3,r2,7a7c <__s2b+0x118>
    79a8:	000b883a 	mov	r5,zero
    79ac:	18c7883a 	add	r3,r3,r3
    79b0:	29400044 	addi	r5,r5,1
    79b4:	18bffd16 	blt	r3,r2,79ac <__s2b+0x48>
    79b8:	9009883a 	mov	r4,r18
    79bc:	00070100 	call	7010 <_Balloc>
    79c0:	1011883a 	mov	r8,r2
    79c4:	d8800717 	ldw	r2,28(sp)
    79c8:	00c00044 	movi	r3,1
    79cc:	01800244 	movi	r6,9
    79d0:	40800515 	stw	r2,20(r8)
    79d4:	40c00415 	stw	r3,16(r8)
    79d8:	3440260e 	bge	r6,r17,7a74 <__s2b+0x110>
    79dc:	3021883a 	mov	r16,r6
    79e0:	99ab883a 	add	r21,r19,r6
    79e4:	9c05883a 	add	r2,r19,r16
    79e8:	11c00007 	ldb	r7,0(r2)
    79ec:	400b883a 	mov	r5,r8
    79f0:	9009883a 	mov	r4,r18
    79f4:	39fff404 	addi	r7,r7,-48
    79f8:	01800284 	movi	r6,10
    79fc:	00077440 	call	7744 <__multadd>
    7a00:	84000044 	addi	r16,r16,1
    7a04:	1011883a 	mov	r8,r2
    7a08:	8c3ff61e 	bne	r17,r16,79e4 <__s2b+0x80>
    7a0c:	ac45883a 	add	r2,r21,r17
    7a10:	117ffe04 	addi	r5,r2,-8
    7a14:	880d883a 	mov	r6,r17
    7a18:	35000c0e 	bge	r6,r20,7a4c <__s2b+0xe8>
    7a1c:	a185c83a 	sub	r2,r20,r6
    7a20:	2821883a 	mov	r16,r5
    7a24:	28a3883a 	add	r17,r5,r2
    7a28:	81c00007 	ldb	r7,0(r16)
    7a2c:	400b883a 	mov	r5,r8
    7a30:	9009883a 	mov	r4,r18
    7a34:	39fff404 	addi	r7,r7,-48
    7a38:	01800284 	movi	r6,10
    7a3c:	00077440 	call	7744 <__multadd>
    7a40:	84000044 	addi	r16,r16,1
    7a44:	1011883a 	mov	r8,r2
    7a48:	847ff71e 	bne	r16,r17,7a28 <__s2b+0xc4>
    7a4c:	4005883a 	mov	r2,r8
    7a50:	dfc00617 	ldw	ra,24(sp)
    7a54:	dd400517 	ldw	r21,20(sp)
    7a58:	dd000417 	ldw	r20,16(sp)
    7a5c:	dcc00317 	ldw	r19,12(sp)
    7a60:	dc800217 	ldw	r18,8(sp)
    7a64:	dc400117 	ldw	r17,4(sp)
    7a68:	dc000017 	ldw	r16,0(sp)
    7a6c:	dec00704 	addi	sp,sp,28
    7a70:	f800283a 	ret
    7a74:	99400284 	addi	r5,r19,10
    7a78:	003fe706 	br	7a18 <__s2b+0xb4>
    7a7c:	000b883a 	mov	r5,zero
    7a80:	003fcd06 	br	79b8 <__s2b+0x54>

00007a84 <_realloc_r>:
    7a84:	defff404 	addi	sp,sp,-48
    7a88:	dd800815 	stw	r22,32(sp)
    7a8c:	dc800415 	stw	r18,16(sp)
    7a90:	dc400315 	stw	r17,12(sp)
    7a94:	dfc00b15 	stw	ra,44(sp)
    7a98:	df000a15 	stw	fp,40(sp)
    7a9c:	ddc00915 	stw	r23,36(sp)
    7aa0:	dd400715 	stw	r21,28(sp)
    7aa4:	dd000615 	stw	r20,24(sp)
    7aa8:	dcc00515 	stw	r19,20(sp)
    7aac:	dc000215 	stw	r16,8(sp)
    7ab0:	2825883a 	mov	r18,r5
    7ab4:	3023883a 	mov	r17,r6
    7ab8:	202d883a 	mov	r22,r4
    7abc:	2800c926 	beq	r5,zero,7de4 <_realloc_r+0x360>
    7ac0:	000b0440 	call	b044 <__malloc_lock>
    7ac4:	943ffe04 	addi	r16,r18,-8
    7ac8:	88c002c4 	addi	r3,r17,11
    7acc:	00800584 	movi	r2,22
    7ad0:	82000117 	ldw	r8,4(r16)
    7ad4:	10c01b2e 	bgeu	r2,r3,7b44 <_realloc_r+0xc0>
    7ad8:	00bffe04 	movi	r2,-8
    7adc:	188e703a 	and	r7,r3,r2
    7ae0:	3839883a 	mov	fp,r7
    7ae4:	38001a16 	blt	r7,zero,7b50 <_realloc_r+0xcc>
    7ae8:	e4401936 	bltu	fp,r17,7b50 <_realloc_r+0xcc>
    7aec:	013fff04 	movi	r4,-4
    7af0:	4126703a 	and	r19,r8,r4
    7af4:	99c02616 	blt	r19,r7,7b90 <_realloc_r+0x10c>
    7af8:	802b883a 	mov	r21,r16
    7afc:	9829883a 	mov	r20,r19
    7b00:	84000204 	addi	r16,r16,8
    7b04:	a80f883a 	mov	r7,r21
    7b08:	a70dc83a 	sub	r6,r20,fp
    7b0c:	008003c4 	movi	r2,15
    7b10:	1180c136 	bltu	r2,r6,7e18 <_realloc_r+0x394>
    7b14:	38800117 	ldw	r2,4(r7)
    7b18:	a549883a 	add	r4,r20,r21
    7b1c:	1080004c 	andi	r2,r2,1
    7b20:	a084b03a 	or	r2,r20,r2
    7b24:	38800115 	stw	r2,4(r7)
    7b28:	20c00117 	ldw	r3,4(r4)
    7b2c:	18c00054 	ori	r3,r3,1
    7b30:	20c00115 	stw	r3,4(r4)
    7b34:	b009883a 	mov	r4,r22
    7b38:	000b0640 	call	b064 <__malloc_unlock>
    7b3c:	8023883a 	mov	r17,r16
    7b40:	00000606 	br	7b5c <_realloc_r+0xd8>
    7b44:	01c00404 	movi	r7,16
    7b48:	3839883a 	mov	fp,r7
    7b4c:	e47fe72e 	bgeu	fp,r17,7aec <_realloc_r+0x68>
    7b50:	00800304 	movi	r2,12
    7b54:	0023883a 	mov	r17,zero
    7b58:	b0800015 	stw	r2,0(r22)
    7b5c:	8805883a 	mov	r2,r17
    7b60:	dfc00b17 	ldw	ra,44(sp)
    7b64:	df000a17 	ldw	fp,40(sp)
    7b68:	ddc00917 	ldw	r23,36(sp)
    7b6c:	dd800817 	ldw	r22,32(sp)
    7b70:	dd400717 	ldw	r21,28(sp)
    7b74:	dd000617 	ldw	r20,24(sp)
    7b78:	dcc00517 	ldw	r19,20(sp)
    7b7c:	dc800417 	ldw	r18,16(sp)
    7b80:	dc400317 	ldw	r17,12(sp)
    7b84:	dc000217 	ldw	r16,8(sp)
    7b88:	dec00c04 	addi	sp,sp,48
    7b8c:	f800283a 	ret
    7b90:	00800074 	movhi	r2,1
    7b94:	10bbfd04 	addi	r2,r2,-4108
    7b98:	12400217 	ldw	r9,8(r2)
    7b9c:	84cd883a 	add	r6,r16,r19
    7ba0:	802b883a 	mov	r21,r16
    7ba4:	3240b926 	beq	r6,r9,7e8c <_realloc_r+0x408>
    7ba8:	31400117 	ldw	r5,4(r6)
    7bac:	00bfff84 	movi	r2,-2
    7bb0:	2884703a 	and	r2,r5,r2
    7bb4:	1185883a 	add	r2,r2,r6
    7bb8:	10c00117 	ldw	r3,4(r2)
    7bbc:	18c0004c 	andi	r3,r3,1
    7bc0:	1807003a 	cmpeq	r3,r3,zero
    7bc4:	1800a326 	beq	r3,zero,7e54 <_realloc_r+0x3d0>
    7bc8:	2908703a 	and	r4,r5,r4
    7bcc:	9929883a 	add	r20,r19,r4
    7bd0:	a1c0a30e 	bge	r20,r7,7e60 <_realloc_r+0x3dc>
    7bd4:	4080004c 	andi	r2,r8,1
    7bd8:	1000551e 	bne	r2,zero,7d30 <_realloc_r+0x2ac>
    7bdc:	80800017 	ldw	r2,0(r16)
    7be0:	80afc83a 	sub	r23,r16,r2
    7be4:	b8c00117 	ldw	r3,4(r23)
    7be8:	00bfff04 	movi	r2,-4
    7bec:	1884703a 	and	r2,r3,r2
    7bf0:	30002e26 	beq	r6,zero,7cac <_realloc_r+0x228>
    7bf4:	3240b926 	beq	r6,r9,7edc <_realloc_r+0x458>
    7bf8:	98a9883a 	add	r20,r19,r2
    7bfc:	2509883a 	add	r4,r4,r20
    7c00:	d9000015 	stw	r4,0(sp)
    7c04:	21c02a16 	blt	r4,r7,7cb0 <_realloc_r+0x22c>
    7c08:	30800317 	ldw	r2,12(r6)
    7c0c:	30c00217 	ldw	r3,8(r6)
    7c10:	01400904 	movi	r5,36
    7c14:	99bfff04 	addi	r6,r19,-4
    7c18:	18800315 	stw	r2,12(r3)
    7c1c:	10c00215 	stw	r3,8(r2)
    7c20:	b9000317 	ldw	r4,12(r23)
    7c24:	b8800217 	ldw	r2,8(r23)
    7c28:	b82b883a 	mov	r21,r23
    7c2c:	bc000204 	addi	r16,r23,8
    7c30:	20800215 	stw	r2,8(r4)
    7c34:	11000315 	stw	r4,12(r2)
    7c38:	2980e436 	bltu	r5,r6,7fcc <_realloc_r+0x548>
    7c3c:	008004c4 	movi	r2,19
    7c40:	9009883a 	mov	r4,r18
    7c44:	8011883a 	mov	r8,r16
    7c48:	11800f2e 	bgeu	r2,r6,7c88 <_realloc_r+0x204>
    7c4c:	90800017 	ldw	r2,0(r18)
    7c50:	ba000404 	addi	r8,r23,16
    7c54:	91000204 	addi	r4,r18,8
    7c58:	b8800215 	stw	r2,8(r23)
    7c5c:	90c00117 	ldw	r3,4(r18)
    7c60:	008006c4 	movi	r2,27
    7c64:	b8c00315 	stw	r3,12(r23)
    7c68:	1180072e 	bgeu	r2,r6,7c88 <_realloc_r+0x204>
    7c6c:	90c00217 	ldw	r3,8(r18)
    7c70:	ba000604 	addi	r8,r23,24
    7c74:	91000404 	addi	r4,r18,16
    7c78:	b8c00415 	stw	r3,16(r23)
    7c7c:	90800317 	ldw	r2,12(r18)
    7c80:	b8800515 	stw	r2,20(r23)
    7c84:	3140e726 	beq	r6,r5,8024 <_realloc_r+0x5a0>
    7c88:	20800017 	ldw	r2,0(r4)
    7c8c:	dd000017 	ldw	r20,0(sp)
    7c90:	b80f883a 	mov	r7,r23
    7c94:	40800015 	stw	r2,0(r8)
    7c98:	20c00117 	ldw	r3,4(r4)
    7c9c:	40c00115 	stw	r3,4(r8)
    7ca0:	20800217 	ldw	r2,8(r4)
    7ca4:	40800215 	stw	r2,8(r8)
    7ca8:	003f9706 	br	7b08 <_realloc_r+0x84>
    7cac:	98a9883a 	add	r20,r19,r2
    7cb0:	a1c01f16 	blt	r20,r7,7d30 <_realloc_r+0x2ac>
    7cb4:	b8c00317 	ldw	r3,12(r23)
    7cb8:	b8800217 	ldw	r2,8(r23)
    7cbc:	99bfff04 	addi	r6,r19,-4
    7cc0:	01400904 	movi	r5,36
    7cc4:	b82b883a 	mov	r21,r23
    7cc8:	18800215 	stw	r2,8(r3)
    7ccc:	10c00315 	stw	r3,12(r2)
    7cd0:	bc000204 	addi	r16,r23,8
    7cd4:	2980c336 	bltu	r5,r6,7fe4 <_realloc_r+0x560>
    7cd8:	008004c4 	movi	r2,19
    7cdc:	9009883a 	mov	r4,r18
    7ce0:	8011883a 	mov	r8,r16
    7ce4:	11800f2e 	bgeu	r2,r6,7d24 <_realloc_r+0x2a0>
    7ce8:	90800017 	ldw	r2,0(r18)
    7cec:	ba000404 	addi	r8,r23,16
    7cf0:	91000204 	addi	r4,r18,8
    7cf4:	b8800215 	stw	r2,8(r23)
    7cf8:	90c00117 	ldw	r3,4(r18)
    7cfc:	008006c4 	movi	r2,27
    7d00:	b8c00315 	stw	r3,12(r23)
    7d04:	1180072e 	bgeu	r2,r6,7d24 <_realloc_r+0x2a0>
    7d08:	90c00217 	ldw	r3,8(r18)
    7d0c:	ba000604 	addi	r8,r23,24
    7d10:	91000404 	addi	r4,r18,16
    7d14:	b8c00415 	stw	r3,16(r23)
    7d18:	90800317 	ldw	r2,12(r18)
    7d1c:	b8800515 	stw	r2,20(r23)
    7d20:	3140c726 	beq	r6,r5,8040 <_realloc_r+0x5bc>
    7d24:	20800017 	ldw	r2,0(r4)
    7d28:	b80f883a 	mov	r7,r23
    7d2c:	003fd906 	br	7c94 <_realloc_r+0x210>
    7d30:	880b883a 	mov	r5,r17
    7d34:	b009883a 	mov	r4,r22
    7d38:	00060540 	call	6054 <_malloc_r>
    7d3c:	1023883a 	mov	r17,r2
    7d40:	10002526 	beq	r2,zero,7dd8 <_realloc_r+0x354>
    7d44:	80800117 	ldw	r2,4(r16)
    7d48:	00ffff84 	movi	r3,-2
    7d4c:	893ffe04 	addi	r4,r17,-8
    7d50:	10c4703a 	and	r2,r2,r3
    7d54:	8085883a 	add	r2,r16,r2
    7d58:	20809526 	beq	r4,r2,7fb0 <_realloc_r+0x52c>
    7d5c:	99bfff04 	addi	r6,r19,-4
    7d60:	01c00904 	movi	r7,36
    7d64:	39804536 	bltu	r7,r6,7e7c <_realloc_r+0x3f8>
    7d68:	008004c4 	movi	r2,19
    7d6c:	9009883a 	mov	r4,r18
    7d70:	880b883a 	mov	r5,r17
    7d74:	11800f2e 	bgeu	r2,r6,7db4 <_realloc_r+0x330>
    7d78:	90800017 	ldw	r2,0(r18)
    7d7c:	89400204 	addi	r5,r17,8
    7d80:	91000204 	addi	r4,r18,8
    7d84:	88800015 	stw	r2,0(r17)
    7d88:	90c00117 	ldw	r3,4(r18)
    7d8c:	008006c4 	movi	r2,27
    7d90:	88c00115 	stw	r3,4(r17)
    7d94:	1180072e 	bgeu	r2,r6,7db4 <_realloc_r+0x330>
    7d98:	90c00217 	ldw	r3,8(r18)
    7d9c:	89400404 	addi	r5,r17,16
    7da0:	91000404 	addi	r4,r18,16
    7da4:	88c00215 	stw	r3,8(r17)
    7da8:	90800317 	ldw	r2,12(r18)
    7dac:	88800315 	stw	r2,12(r17)
    7db0:	31c09126 	beq	r6,r7,7ff8 <_realloc_r+0x574>
    7db4:	20800017 	ldw	r2,0(r4)
    7db8:	28800015 	stw	r2,0(r5)
    7dbc:	20c00117 	ldw	r3,4(r4)
    7dc0:	28c00115 	stw	r3,4(r5)
    7dc4:	20800217 	ldw	r2,8(r4)
    7dc8:	28800215 	stw	r2,8(r5)
    7dcc:	900b883a 	mov	r5,r18
    7dd0:	b009883a 	mov	r4,r22
    7dd4:	00054cc0 	call	54cc <_free_r>
    7dd8:	b009883a 	mov	r4,r22
    7ddc:	000b0640 	call	b064 <__malloc_unlock>
    7de0:	003f5e06 	br	7b5c <_realloc_r+0xd8>
    7de4:	300b883a 	mov	r5,r6
    7de8:	dfc00b17 	ldw	ra,44(sp)
    7dec:	df000a17 	ldw	fp,40(sp)
    7df0:	ddc00917 	ldw	r23,36(sp)
    7df4:	dd800817 	ldw	r22,32(sp)
    7df8:	dd400717 	ldw	r21,28(sp)
    7dfc:	dd000617 	ldw	r20,24(sp)
    7e00:	dcc00517 	ldw	r19,20(sp)
    7e04:	dc800417 	ldw	r18,16(sp)
    7e08:	dc400317 	ldw	r17,12(sp)
    7e0c:	dc000217 	ldw	r16,8(sp)
    7e10:	dec00c04 	addi	sp,sp,48
    7e14:	00060541 	jmpi	6054 <_malloc_r>
    7e18:	38800117 	ldw	r2,4(r7)
    7e1c:	e54b883a 	add	r5,fp,r21
    7e20:	31000054 	ori	r4,r6,1
    7e24:	1080004c 	andi	r2,r2,1
    7e28:	1704b03a 	or	r2,r2,fp
    7e2c:	38800115 	stw	r2,4(r7)
    7e30:	29000115 	stw	r4,4(r5)
    7e34:	2987883a 	add	r3,r5,r6
    7e38:	18800117 	ldw	r2,4(r3)
    7e3c:	29400204 	addi	r5,r5,8
    7e40:	b009883a 	mov	r4,r22
    7e44:	10800054 	ori	r2,r2,1
    7e48:	18800115 	stw	r2,4(r3)
    7e4c:	00054cc0 	call	54cc <_free_r>
    7e50:	003f3806 	br	7b34 <_realloc_r+0xb0>
    7e54:	000d883a 	mov	r6,zero
    7e58:	0009883a 	mov	r4,zero
    7e5c:	003f5d06 	br	7bd4 <_realloc_r+0x150>
    7e60:	30c00217 	ldw	r3,8(r6)
    7e64:	30800317 	ldw	r2,12(r6)
    7e68:	800f883a 	mov	r7,r16
    7e6c:	84000204 	addi	r16,r16,8
    7e70:	10c00215 	stw	r3,8(r2)
    7e74:	18800315 	stw	r2,12(r3)
    7e78:	003f2306 	br	7b08 <_realloc_r+0x84>
    7e7c:	8809883a 	mov	r4,r17
    7e80:	900b883a 	mov	r5,r18
    7e84:	00069180 	call	6918 <memmove>
    7e88:	003fd006 	br	7dcc <_realloc_r+0x348>
    7e8c:	30800117 	ldw	r2,4(r6)
    7e90:	e0c00404 	addi	r3,fp,16
    7e94:	1108703a 	and	r4,r2,r4
    7e98:	9905883a 	add	r2,r19,r4
    7e9c:	10ff4d16 	blt	r2,r3,7bd4 <_realloc_r+0x150>
    7ea0:	1705c83a 	sub	r2,r2,fp
    7ea4:	870b883a 	add	r5,r16,fp
    7ea8:	10800054 	ori	r2,r2,1
    7eac:	28800115 	stw	r2,4(r5)
    7eb0:	80c00117 	ldw	r3,4(r16)
    7eb4:	00800074 	movhi	r2,1
    7eb8:	10bbfd04 	addi	r2,r2,-4108
    7ebc:	b009883a 	mov	r4,r22
    7ec0:	18c0004c 	andi	r3,r3,1
    7ec4:	e0c6b03a 	or	r3,fp,r3
    7ec8:	11400215 	stw	r5,8(r2)
    7ecc:	80c00115 	stw	r3,4(r16)
    7ed0:	000b0640 	call	b064 <__malloc_unlock>
    7ed4:	84400204 	addi	r17,r16,8
    7ed8:	003f2006 	br	7b5c <_realloc_r+0xd8>
    7edc:	98a9883a 	add	r20,r19,r2
    7ee0:	2509883a 	add	r4,r4,r20
    7ee4:	e0800404 	addi	r2,fp,16
    7ee8:	d9000115 	stw	r4,4(sp)
    7eec:	20bf7016 	blt	r4,r2,7cb0 <_realloc_r+0x22c>
    7ef0:	b8c00317 	ldw	r3,12(r23)
    7ef4:	b8800217 	ldw	r2,8(r23)
    7ef8:	99bfff04 	addi	r6,r19,-4
    7efc:	01400904 	movi	r5,36
    7f00:	18800215 	stw	r2,8(r3)
    7f04:	10c00315 	stw	r3,12(r2)
    7f08:	bc400204 	addi	r17,r23,8
    7f0c:	29804136 	bltu	r5,r6,8014 <_realloc_r+0x590>
    7f10:	008004c4 	movi	r2,19
    7f14:	9009883a 	mov	r4,r18
    7f18:	880f883a 	mov	r7,r17
    7f1c:	11800f2e 	bgeu	r2,r6,7f5c <_realloc_r+0x4d8>
    7f20:	90800017 	ldw	r2,0(r18)
    7f24:	b9c00404 	addi	r7,r23,16
    7f28:	91000204 	addi	r4,r18,8
    7f2c:	b8800215 	stw	r2,8(r23)
    7f30:	90c00117 	ldw	r3,4(r18)
    7f34:	008006c4 	movi	r2,27
    7f38:	b8c00315 	stw	r3,12(r23)
    7f3c:	1180072e 	bgeu	r2,r6,7f5c <_realloc_r+0x4d8>
    7f40:	90c00217 	ldw	r3,8(r18)
    7f44:	b9c00604 	addi	r7,r23,24
    7f48:	91000404 	addi	r4,r18,16
    7f4c:	b8c00415 	stw	r3,16(r23)
    7f50:	90800317 	ldw	r2,12(r18)
    7f54:	b8800515 	stw	r2,20(r23)
    7f58:	31404026 	beq	r6,r5,805c <_realloc_r+0x5d8>
    7f5c:	20800017 	ldw	r2,0(r4)
    7f60:	38800015 	stw	r2,0(r7)
    7f64:	20c00117 	ldw	r3,4(r4)
    7f68:	38c00115 	stw	r3,4(r7)
    7f6c:	20800217 	ldw	r2,8(r4)
    7f70:	38800215 	stw	r2,8(r7)
    7f74:	d8c00117 	ldw	r3,4(sp)
    7f78:	bf0b883a 	add	r5,r23,fp
    7f7c:	b009883a 	mov	r4,r22
    7f80:	1f05c83a 	sub	r2,r3,fp
    7f84:	10800054 	ori	r2,r2,1
    7f88:	28800115 	stw	r2,4(r5)
    7f8c:	b8c00117 	ldw	r3,4(r23)
    7f90:	00800074 	movhi	r2,1
    7f94:	10bbfd04 	addi	r2,r2,-4108
    7f98:	11400215 	stw	r5,8(r2)
    7f9c:	18c0004c 	andi	r3,r3,1
    7fa0:	e0c6b03a 	or	r3,fp,r3
    7fa4:	b8c00115 	stw	r3,4(r23)
    7fa8:	000b0640 	call	b064 <__malloc_unlock>
    7fac:	003eeb06 	br	7b5c <_realloc_r+0xd8>
    7fb0:	20800117 	ldw	r2,4(r4)
    7fb4:	00ffff04 	movi	r3,-4
    7fb8:	800f883a 	mov	r7,r16
    7fbc:	10c4703a 	and	r2,r2,r3
    7fc0:	98a9883a 	add	r20,r19,r2
    7fc4:	84000204 	addi	r16,r16,8
    7fc8:	003ecf06 	br	7b08 <_realloc_r+0x84>
    7fcc:	900b883a 	mov	r5,r18
    7fd0:	8009883a 	mov	r4,r16
    7fd4:	00069180 	call	6918 <memmove>
    7fd8:	dd000017 	ldw	r20,0(sp)
    7fdc:	b80f883a 	mov	r7,r23
    7fe0:	003ec906 	br	7b08 <_realloc_r+0x84>
    7fe4:	900b883a 	mov	r5,r18
    7fe8:	8009883a 	mov	r4,r16
    7fec:	00069180 	call	6918 <memmove>
    7ff0:	b80f883a 	mov	r7,r23
    7ff4:	003ec406 	br	7b08 <_realloc_r+0x84>
    7ff8:	90c00417 	ldw	r3,16(r18)
    7ffc:	89400604 	addi	r5,r17,24
    8000:	91000604 	addi	r4,r18,24
    8004:	88c00415 	stw	r3,16(r17)
    8008:	90800517 	ldw	r2,20(r18)
    800c:	88800515 	stw	r2,20(r17)
    8010:	003f6806 	br	7db4 <_realloc_r+0x330>
    8014:	900b883a 	mov	r5,r18
    8018:	8809883a 	mov	r4,r17
    801c:	00069180 	call	6918 <memmove>
    8020:	003fd406 	br	7f74 <_realloc_r+0x4f0>
    8024:	90c00417 	ldw	r3,16(r18)
    8028:	91000604 	addi	r4,r18,24
    802c:	ba000804 	addi	r8,r23,32
    8030:	b8c00615 	stw	r3,24(r23)
    8034:	90800517 	ldw	r2,20(r18)
    8038:	b8800715 	stw	r2,28(r23)
    803c:	003f1206 	br	7c88 <_realloc_r+0x204>
    8040:	90c00417 	ldw	r3,16(r18)
    8044:	91000604 	addi	r4,r18,24
    8048:	ba000804 	addi	r8,r23,32
    804c:	b8c00615 	stw	r3,24(r23)
    8050:	90800517 	ldw	r2,20(r18)
    8054:	b8800715 	stw	r2,28(r23)
    8058:	003f3206 	br	7d24 <_realloc_r+0x2a0>
    805c:	90c00417 	ldw	r3,16(r18)
    8060:	91000604 	addi	r4,r18,24
    8064:	b9c00804 	addi	r7,r23,32
    8068:	b8c00615 	stw	r3,24(r23)
    806c:	90800517 	ldw	r2,20(r18)
    8070:	b8800715 	stw	r2,28(r23)
    8074:	003fb906 	br	7f5c <_realloc_r+0x4d8>

00008078 <__isinfd>:
    8078:	200d883a 	mov	r6,r4
    807c:	0109c83a 	sub	r4,zero,r4
    8080:	2188b03a 	or	r4,r4,r6
    8084:	2008d7fa 	srli	r4,r4,31
    8088:	00a00034 	movhi	r2,32768
    808c:	10bfffc4 	addi	r2,r2,-1
    8090:	1144703a 	and	r2,r2,r5
    8094:	2088b03a 	or	r4,r4,r2
    8098:	009ffc34 	movhi	r2,32752
    809c:	1105c83a 	sub	r2,r2,r4
    80a0:	0087c83a 	sub	r3,zero,r2
    80a4:	10c4b03a 	or	r2,r2,r3
    80a8:	1004d7fa 	srli	r2,r2,31
    80ac:	00c00044 	movi	r3,1
    80b0:	1885c83a 	sub	r2,r3,r2
    80b4:	f800283a 	ret

000080b8 <__isnand>:
    80b8:	200d883a 	mov	r6,r4
    80bc:	0109c83a 	sub	r4,zero,r4
    80c0:	2188b03a 	or	r4,r4,r6
    80c4:	2008d7fa 	srli	r4,r4,31
    80c8:	00a00034 	movhi	r2,32768
    80cc:	10bfffc4 	addi	r2,r2,-1
    80d0:	1144703a 	and	r2,r2,r5
    80d4:	2088b03a 	or	r4,r4,r2
    80d8:	009ffc34 	movhi	r2,32752
    80dc:	1105c83a 	sub	r2,r2,r4
    80e0:	1004d7fa 	srli	r2,r2,31
    80e4:	f800283a 	ret

000080e8 <_sbrk_r>:
    80e8:	defffd04 	addi	sp,sp,-12
    80ec:	dc000015 	stw	r16,0(sp)
    80f0:	04000074 	movhi	r16,1
    80f4:	8408ad04 	addi	r16,r16,8884
    80f8:	dc400115 	stw	r17,4(sp)
    80fc:	80000015 	stw	zero,0(r16)
    8100:	2023883a 	mov	r17,r4
    8104:	2809883a 	mov	r4,r5
    8108:	dfc00215 	stw	ra,8(sp)
    810c:	000b2640 	call	b264 <sbrk>
    8110:	1007883a 	mov	r3,r2
    8114:	00bfffc4 	movi	r2,-1
    8118:	18800626 	beq	r3,r2,8134 <_sbrk_r+0x4c>
    811c:	1805883a 	mov	r2,r3
    8120:	dfc00217 	ldw	ra,8(sp)
    8124:	dc400117 	ldw	r17,4(sp)
    8128:	dc000017 	ldw	r16,0(sp)
    812c:	dec00304 	addi	sp,sp,12
    8130:	f800283a 	ret
    8134:	80800017 	ldw	r2,0(r16)
    8138:	103ff826 	beq	r2,zero,811c <_sbrk_r+0x34>
    813c:	88800015 	stw	r2,0(r17)
    8140:	1805883a 	mov	r2,r3
    8144:	dfc00217 	ldw	ra,8(sp)
    8148:	dc400117 	ldw	r17,4(sp)
    814c:	dc000017 	ldw	r16,0(sp)
    8150:	dec00304 	addi	sp,sp,12
    8154:	f800283a 	ret

00008158 <__sclose>:
    8158:	2940038f 	ldh	r5,14(r5)
    815c:	000848c1 	jmpi	848c <_close_r>

00008160 <__sseek>:
    8160:	defffe04 	addi	sp,sp,-8
    8164:	dc000015 	stw	r16,0(sp)
    8168:	2821883a 	mov	r16,r5
    816c:	2940038f 	ldh	r5,14(r5)
    8170:	dfc00115 	stw	ra,4(sp)
    8174:	00087040 	call	8704 <_lseek_r>
    8178:	1007883a 	mov	r3,r2
    817c:	00bfffc4 	movi	r2,-1
    8180:	18800926 	beq	r3,r2,81a8 <__sseek+0x48>
    8184:	8080030b 	ldhu	r2,12(r16)
    8188:	80c01415 	stw	r3,80(r16)
    818c:	10840014 	ori	r2,r2,4096
    8190:	8080030d 	sth	r2,12(r16)
    8194:	1805883a 	mov	r2,r3
    8198:	dfc00117 	ldw	ra,4(sp)
    819c:	dc000017 	ldw	r16,0(sp)
    81a0:	dec00204 	addi	sp,sp,8
    81a4:	f800283a 	ret
    81a8:	8080030b 	ldhu	r2,12(r16)
    81ac:	10bbffcc 	andi	r2,r2,61439
    81b0:	8080030d 	sth	r2,12(r16)
    81b4:	1805883a 	mov	r2,r3
    81b8:	dfc00117 	ldw	ra,4(sp)
    81bc:	dc000017 	ldw	r16,0(sp)
    81c0:	dec00204 	addi	sp,sp,8
    81c4:	f800283a 	ret

000081c8 <__swrite>:
    81c8:	2880030b 	ldhu	r2,12(r5)
    81cc:	defffb04 	addi	sp,sp,-20
    81d0:	dcc00315 	stw	r19,12(sp)
    81d4:	1080400c 	andi	r2,r2,256
    81d8:	dc800215 	stw	r18,8(sp)
    81dc:	dc400115 	stw	r17,4(sp)
    81e0:	dc000015 	stw	r16,0(sp)
    81e4:	3027883a 	mov	r19,r6
    81e8:	3825883a 	mov	r18,r7
    81ec:	dfc00415 	stw	ra,16(sp)
    81f0:	2821883a 	mov	r16,r5
    81f4:	000d883a 	mov	r6,zero
    81f8:	01c00084 	movi	r7,2
    81fc:	2023883a 	mov	r17,r4
    8200:	10000226 	beq	r2,zero,820c <__swrite+0x44>
    8204:	2940038f 	ldh	r5,14(r5)
    8208:	00087040 	call	8704 <_lseek_r>
    820c:	8080030b 	ldhu	r2,12(r16)
    8210:	8140038f 	ldh	r5,14(r16)
    8214:	8809883a 	mov	r4,r17
    8218:	10bbffcc 	andi	r2,r2,61439
    821c:	980d883a 	mov	r6,r19
    8220:	900f883a 	mov	r7,r18
    8224:	8080030d 	sth	r2,12(r16)
    8228:	dfc00417 	ldw	ra,16(sp)
    822c:	dcc00317 	ldw	r19,12(sp)
    8230:	dc800217 	ldw	r18,8(sp)
    8234:	dc400117 	ldw	r17,4(sp)
    8238:	dc000017 	ldw	r16,0(sp)
    823c:	dec00504 	addi	sp,sp,20
    8240:	00083601 	jmpi	8360 <_write_r>

00008244 <__sread>:
    8244:	defffe04 	addi	sp,sp,-8
    8248:	dc000015 	stw	r16,0(sp)
    824c:	2821883a 	mov	r16,r5
    8250:	2940038f 	ldh	r5,14(r5)
    8254:	dfc00115 	stw	ra,4(sp)
    8258:	000877c0 	call	877c <_read_r>
    825c:	1007883a 	mov	r3,r2
    8260:	10000816 	blt	r2,zero,8284 <__sread+0x40>
    8264:	80801417 	ldw	r2,80(r16)
    8268:	10c5883a 	add	r2,r2,r3
    826c:	80801415 	stw	r2,80(r16)
    8270:	1805883a 	mov	r2,r3
    8274:	dfc00117 	ldw	ra,4(sp)
    8278:	dc000017 	ldw	r16,0(sp)
    827c:	dec00204 	addi	sp,sp,8
    8280:	f800283a 	ret
    8284:	8080030b 	ldhu	r2,12(r16)
    8288:	10bbffcc 	andi	r2,r2,61439
    828c:	8080030d 	sth	r2,12(r16)
    8290:	1805883a 	mov	r2,r3
    8294:	dfc00117 	ldw	ra,4(sp)
    8298:	dc000017 	ldw	r16,0(sp)
    829c:	dec00204 	addi	sp,sp,8
    82a0:	f800283a 	ret

000082a4 <strcmp>:
    82a4:	2144b03a 	or	r2,r4,r5
    82a8:	108000cc 	andi	r2,r2,3
    82ac:	10001d1e 	bne	r2,zero,8324 <strcmp+0x80>
    82b0:	200f883a 	mov	r7,r4
    82b4:	28800017 	ldw	r2,0(r5)
    82b8:	21000017 	ldw	r4,0(r4)
    82bc:	280d883a 	mov	r6,r5
    82c0:	2080161e 	bne	r4,r2,831c <strcmp+0x78>
    82c4:	023fbff4 	movhi	r8,65279
    82c8:	423fbfc4 	addi	r8,r8,-257
    82cc:	2207883a 	add	r3,r4,r8
    82d0:	01602074 	movhi	r5,32897
    82d4:	29602004 	addi	r5,r5,-32640
    82d8:	1946703a 	and	r3,r3,r5
    82dc:	0104303a 	nor	r2,zero,r4
    82e0:	10c4703a 	and	r2,r2,r3
    82e4:	10001c1e 	bne	r2,zero,8358 <strcmp+0xb4>
    82e8:	4013883a 	mov	r9,r8
    82ec:	2811883a 	mov	r8,r5
    82f0:	00000106 	br	82f8 <strcmp+0x54>
    82f4:	1800181e 	bne	r3,zero,8358 <strcmp+0xb4>
    82f8:	39c00104 	addi	r7,r7,4
    82fc:	39000017 	ldw	r4,0(r7)
    8300:	31800104 	addi	r6,r6,4
    8304:	31400017 	ldw	r5,0(r6)
    8308:	2245883a 	add	r2,r4,r9
    830c:	1204703a 	and	r2,r2,r8
    8310:	0106303a 	nor	r3,zero,r4
    8314:	1886703a 	and	r3,r3,r2
    8318:	217ff626 	beq	r4,r5,82f4 <strcmp+0x50>
    831c:	3809883a 	mov	r4,r7
    8320:	300b883a 	mov	r5,r6
    8324:	20c00007 	ldb	r3,0(r4)
    8328:	1800051e 	bne	r3,zero,8340 <strcmp+0x9c>
    832c:	00000606 	br	8348 <strcmp+0xa4>
    8330:	21000044 	addi	r4,r4,1
    8334:	20c00007 	ldb	r3,0(r4)
    8338:	29400044 	addi	r5,r5,1
    833c:	18000226 	beq	r3,zero,8348 <strcmp+0xa4>
    8340:	28800007 	ldb	r2,0(r5)
    8344:	18bffa26 	beq	r3,r2,8330 <strcmp+0x8c>
    8348:	20c00003 	ldbu	r3,0(r4)
    834c:	28800003 	ldbu	r2,0(r5)
    8350:	1885c83a 	sub	r2,r3,r2
    8354:	f800283a 	ret
    8358:	0005883a 	mov	r2,zero
    835c:	f800283a 	ret

00008360 <_write_r>:
    8360:	defffd04 	addi	sp,sp,-12
    8364:	dc000015 	stw	r16,0(sp)
    8368:	04000074 	movhi	r16,1
    836c:	8408ad04 	addi	r16,r16,8884
    8370:	dc400115 	stw	r17,4(sp)
    8374:	80000015 	stw	zero,0(r16)
    8378:	2023883a 	mov	r17,r4
    837c:	2809883a 	mov	r4,r5
    8380:	300b883a 	mov	r5,r6
    8384:	380d883a 	mov	r6,r7
    8388:	dfc00215 	stw	ra,8(sp)
    838c:	000b3200 	call	b320 <write>
    8390:	1007883a 	mov	r3,r2
    8394:	00bfffc4 	movi	r2,-1
    8398:	18800626 	beq	r3,r2,83b4 <_write_r+0x54>
    839c:	1805883a 	mov	r2,r3
    83a0:	dfc00217 	ldw	ra,8(sp)
    83a4:	dc400117 	ldw	r17,4(sp)
    83a8:	dc000017 	ldw	r16,0(sp)
    83ac:	dec00304 	addi	sp,sp,12
    83b0:	f800283a 	ret
    83b4:	80800017 	ldw	r2,0(r16)
    83b8:	103ff826 	beq	r2,zero,839c <_write_r+0x3c>
    83bc:	88800015 	stw	r2,0(r17)
    83c0:	1805883a 	mov	r2,r3
    83c4:	dfc00217 	ldw	ra,8(sp)
    83c8:	dc400117 	ldw	r17,4(sp)
    83cc:	dc000017 	ldw	r16,0(sp)
    83d0:	dec00304 	addi	sp,sp,12
    83d4:	f800283a 	ret

000083d8 <_calloc_r>:
    83d8:	298b383a 	mul	r5,r5,r6
    83dc:	defffe04 	addi	sp,sp,-8
    83e0:	dc000015 	stw	r16,0(sp)
    83e4:	dfc00115 	stw	ra,4(sp)
    83e8:	00060540 	call	6054 <_malloc_r>
    83ec:	1021883a 	mov	r16,r2
    83f0:	01c00904 	movi	r7,36
    83f4:	10000d26 	beq	r2,zero,842c <_calloc_r+0x54>
    83f8:	10ffff17 	ldw	r3,-4(r2)
    83fc:	1009883a 	mov	r4,r2
    8400:	00bfff04 	movi	r2,-4
    8404:	1886703a 	and	r3,r3,r2
    8408:	1887883a 	add	r3,r3,r2
    840c:	180d883a 	mov	r6,r3
    8410:	000b883a 	mov	r5,zero
    8414:	38c01736 	bltu	r7,r3,8474 <_calloc_r+0x9c>
    8418:	008004c4 	movi	r2,19
    841c:	10c00836 	bltu	r2,r3,8440 <_calloc_r+0x68>
    8420:	20000215 	stw	zero,8(r4)
    8424:	20000015 	stw	zero,0(r4)
    8428:	20000115 	stw	zero,4(r4)
    842c:	8005883a 	mov	r2,r16
    8430:	dfc00117 	ldw	ra,4(sp)
    8434:	dc000017 	ldw	r16,0(sp)
    8438:	dec00204 	addi	sp,sp,8
    843c:	f800283a 	ret
    8440:	008006c4 	movi	r2,27
    8444:	80000015 	stw	zero,0(r16)
    8448:	80000115 	stw	zero,4(r16)
    844c:	81000204 	addi	r4,r16,8
    8450:	10fff32e 	bgeu	r2,r3,8420 <_calloc_r+0x48>
    8454:	80000215 	stw	zero,8(r16)
    8458:	80000315 	stw	zero,12(r16)
    845c:	81000404 	addi	r4,r16,16
    8460:	19ffef1e 	bne	r3,r7,8420 <_calloc_r+0x48>
    8464:	81000604 	addi	r4,r16,24
    8468:	80000415 	stw	zero,16(r16)
    846c:	80000515 	stw	zero,20(r16)
    8470:	003feb06 	br	8420 <_calloc_r+0x48>
    8474:	00069f80 	call	69f8 <memset>
    8478:	8005883a 	mov	r2,r16
    847c:	dfc00117 	ldw	ra,4(sp)
    8480:	dc000017 	ldw	r16,0(sp)
    8484:	dec00204 	addi	sp,sp,8
    8488:	f800283a 	ret

0000848c <_close_r>:
    848c:	defffd04 	addi	sp,sp,-12
    8490:	dc000015 	stw	r16,0(sp)
    8494:	04000074 	movhi	r16,1
    8498:	8408ad04 	addi	r16,r16,8884
    849c:	dc400115 	stw	r17,4(sp)
    84a0:	80000015 	stw	zero,0(r16)
    84a4:	2023883a 	mov	r17,r4
    84a8:	2809883a 	mov	r4,r5
    84ac:	dfc00215 	stw	ra,8(sp)
    84b0:	000a9c00 	call	a9c0 <close>
    84b4:	1007883a 	mov	r3,r2
    84b8:	00bfffc4 	movi	r2,-1
    84bc:	18800626 	beq	r3,r2,84d8 <_close_r+0x4c>
    84c0:	1805883a 	mov	r2,r3
    84c4:	dfc00217 	ldw	ra,8(sp)
    84c8:	dc400117 	ldw	r17,4(sp)
    84cc:	dc000017 	ldw	r16,0(sp)
    84d0:	dec00304 	addi	sp,sp,12
    84d4:	f800283a 	ret
    84d8:	80800017 	ldw	r2,0(r16)
    84dc:	103ff826 	beq	r2,zero,84c0 <_close_r+0x34>
    84e0:	88800015 	stw	r2,0(r17)
    84e4:	1805883a 	mov	r2,r3
    84e8:	dfc00217 	ldw	ra,8(sp)
    84ec:	dc400117 	ldw	r17,4(sp)
    84f0:	dc000017 	ldw	r16,0(sp)
    84f4:	dec00304 	addi	sp,sp,12
    84f8:	f800283a 	ret

000084fc <_fclose_r>:
    84fc:	defffc04 	addi	sp,sp,-16
    8500:	dc400115 	stw	r17,4(sp)
    8504:	dc000015 	stw	r16,0(sp)
    8508:	dfc00315 	stw	ra,12(sp)
    850c:	dc800215 	stw	r18,8(sp)
    8510:	2821883a 	mov	r16,r5
    8514:	2023883a 	mov	r17,r4
    8518:	28002926 	beq	r5,zero,85c0 <_fclose_r+0xc4>
    851c:	00051380 	call	5138 <__sfp_lock_acquire>
    8520:	88000226 	beq	r17,zero,852c <_fclose_r+0x30>
    8524:	88800e17 	ldw	r2,56(r17)
    8528:	10002d26 	beq	r2,zero,85e0 <_fclose_r+0xe4>
    852c:	8080030f 	ldh	r2,12(r16)
    8530:	10002226 	beq	r2,zero,85bc <_fclose_r+0xc0>
    8534:	8809883a 	mov	r4,r17
    8538:	800b883a 	mov	r5,r16
    853c:	0004eb00 	call	4eb0 <_fflush_r>
    8540:	1025883a 	mov	r18,r2
    8544:	80800b17 	ldw	r2,44(r16)
    8548:	10000426 	beq	r2,zero,855c <_fclose_r+0x60>
    854c:	81400717 	ldw	r5,28(r16)
    8550:	8809883a 	mov	r4,r17
    8554:	103ee83a 	callr	r2
    8558:	10002a16 	blt	r2,zero,8604 <_fclose_r+0x108>
    855c:	8080030b 	ldhu	r2,12(r16)
    8560:	1080200c 	andi	r2,r2,128
    8564:	1000231e 	bne	r2,zero,85f4 <_fclose_r+0xf8>
    8568:	81400c17 	ldw	r5,48(r16)
    856c:	28000526 	beq	r5,zero,8584 <_fclose_r+0x88>
    8570:	80801004 	addi	r2,r16,64
    8574:	28800226 	beq	r5,r2,8580 <_fclose_r+0x84>
    8578:	8809883a 	mov	r4,r17
    857c:	00054cc0 	call	54cc <_free_r>
    8580:	80000c15 	stw	zero,48(r16)
    8584:	81401117 	ldw	r5,68(r16)
    8588:	28000326 	beq	r5,zero,8598 <_fclose_r+0x9c>
    858c:	8809883a 	mov	r4,r17
    8590:	00054cc0 	call	54cc <_free_r>
    8594:	80001115 	stw	zero,68(r16)
    8598:	8000030d 	sth	zero,12(r16)
    859c:	000513c0 	call	513c <__sfp_lock_release>
    85a0:	9005883a 	mov	r2,r18
    85a4:	dfc00317 	ldw	ra,12(sp)
    85a8:	dc800217 	ldw	r18,8(sp)
    85ac:	dc400117 	ldw	r17,4(sp)
    85b0:	dc000017 	ldw	r16,0(sp)
    85b4:	dec00404 	addi	sp,sp,16
    85b8:	f800283a 	ret
    85bc:	000513c0 	call	513c <__sfp_lock_release>
    85c0:	0025883a 	mov	r18,zero
    85c4:	9005883a 	mov	r2,r18
    85c8:	dfc00317 	ldw	ra,12(sp)
    85cc:	dc800217 	ldw	r18,8(sp)
    85d0:	dc400117 	ldw	r17,4(sp)
    85d4:	dc000017 	ldw	r16,0(sp)
    85d8:	dec00404 	addi	sp,sp,16
    85dc:	f800283a 	ret
    85e0:	8809883a 	mov	r4,r17
    85e4:	00051480 	call	5148 <__sinit>
    85e8:	8080030f 	ldh	r2,12(r16)
    85ec:	103fd11e 	bne	r2,zero,8534 <_fclose_r+0x38>
    85f0:	003ff206 	br	85bc <_fclose_r+0xc0>
    85f4:	81400417 	ldw	r5,16(r16)
    85f8:	8809883a 	mov	r4,r17
    85fc:	00054cc0 	call	54cc <_free_r>
    8600:	003fd906 	br	8568 <_fclose_r+0x6c>
    8604:	04bfffc4 	movi	r18,-1
    8608:	003fd406 	br	855c <_fclose_r+0x60>

0000860c <fclose>:
    860c:	00800074 	movhi	r2,1
    8610:	1081b304 	addi	r2,r2,1740
    8614:	200b883a 	mov	r5,r4
    8618:	11000017 	ldw	r4,0(r2)
    861c:	00084fc1 	jmpi	84fc <_fclose_r>

00008620 <_fstat_r>:
    8620:	defffd04 	addi	sp,sp,-12
    8624:	dc000015 	stw	r16,0(sp)
    8628:	04000074 	movhi	r16,1
    862c:	8408ad04 	addi	r16,r16,8884
    8630:	dc400115 	stw	r17,4(sp)
    8634:	80000015 	stw	zero,0(r16)
    8638:	2023883a 	mov	r17,r4
    863c:	2809883a 	mov	r4,r5
    8640:	300b883a 	mov	r5,r6
    8644:	dfc00215 	stw	ra,8(sp)
    8648:	000ab480 	call	ab48 <fstat>
    864c:	1007883a 	mov	r3,r2
    8650:	00bfffc4 	movi	r2,-1
    8654:	18800626 	beq	r3,r2,8670 <_fstat_r+0x50>
    8658:	1805883a 	mov	r2,r3
    865c:	dfc00217 	ldw	ra,8(sp)
    8660:	dc400117 	ldw	r17,4(sp)
    8664:	dc000017 	ldw	r16,0(sp)
    8668:	dec00304 	addi	sp,sp,12
    866c:	f800283a 	ret
    8670:	80800017 	ldw	r2,0(r16)
    8674:	103ff826 	beq	r2,zero,8658 <_fstat_r+0x38>
    8678:	88800015 	stw	r2,0(r17)
    867c:	1805883a 	mov	r2,r3
    8680:	dfc00217 	ldw	ra,8(sp)
    8684:	dc400117 	ldw	r17,4(sp)
    8688:	dc000017 	ldw	r16,0(sp)
    868c:	dec00304 	addi	sp,sp,12
    8690:	f800283a 	ret

00008694 <_isatty_r>:
    8694:	defffd04 	addi	sp,sp,-12
    8698:	dc000015 	stw	r16,0(sp)
    869c:	04000074 	movhi	r16,1
    86a0:	8408ad04 	addi	r16,r16,8884
    86a4:	dc400115 	stw	r17,4(sp)
    86a8:	80000015 	stw	zero,0(r16)
    86ac:	2023883a 	mov	r17,r4
    86b0:	2809883a 	mov	r4,r5
    86b4:	dfc00215 	stw	ra,8(sp)
    86b8:	000ac7c0 	call	ac7c <isatty>
    86bc:	1007883a 	mov	r3,r2
    86c0:	00bfffc4 	movi	r2,-1
    86c4:	18800626 	beq	r3,r2,86e0 <_isatty_r+0x4c>
    86c8:	1805883a 	mov	r2,r3
    86cc:	dfc00217 	ldw	ra,8(sp)
    86d0:	dc400117 	ldw	r17,4(sp)
    86d4:	dc000017 	ldw	r16,0(sp)
    86d8:	dec00304 	addi	sp,sp,12
    86dc:	f800283a 	ret
    86e0:	80800017 	ldw	r2,0(r16)
    86e4:	103ff826 	beq	r2,zero,86c8 <_isatty_r+0x34>
    86e8:	88800015 	stw	r2,0(r17)
    86ec:	1805883a 	mov	r2,r3
    86f0:	dfc00217 	ldw	ra,8(sp)
    86f4:	dc400117 	ldw	r17,4(sp)
    86f8:	dc000017 	ldw	r16,0(sp)
    86fc:	dec00304 	addi	sp,sp,12
    8700:	f800283a 	ret

00008704 <_lseek_r>:
    8704:	defffd04 	addi	sp,sp,-12
    8708:	dc000015 	stw	r16,0(sp)
    870c:	04000074 	movhi	r16,1
    8710:	8408ad04 	addi	r16,r16,8884
    8714:	dc400115 	stw	r17,4(sp)
    8718:	80000015 	stw	zero,0(r16)
    871c:	2023883a 	mov	r17,r4
    8720:	2809883a 	mov	r4,r5
    8724:	300b883a 	mov	r5,r6
    8728:	380d883a 	mov	r6,r7
    872c:	dfc00215 	stw	ra,8(sp)
    8730:	000ae880 	call	ae88 <lseek>
    8734:	1007883a 	mov	r3,r2
    8738:	00bfffc4 	movi	r2,-1
    873c:	18800626 	beq	r3,r2,8758 <_lseek_r+0x54>
    8740:	1805883a 	mov	r2,r3
    8744:	dfc00217 	ldw	ra,8(sp)
    8748:	dc400117 	ldw	r17,4(sp)
    874c:	dc000017 	ldw	r16,0(sp)
    8750:	dec00304 	addi	sp,sp,12
    8754:	f800283a 	ret
    8758:	80800017 	ldw	r2,0(r16)
    875c:	103ff826 	beq	r2,zero,8740 <_lseek_r+0x3c>
    8760:	88800015 	stw	r2,0(r17)
    8764:	1805883a 	mov	r2,r3
    8768:	dfc00217 	ldw	ra,8(sp)
    876c:	dc400117 	ldw	r17,4(sp)
    8770:	dc000017 	ldw	r16,0(sp)
    8774:	dec00304 	addi	sp,sp,12
    8778:	f800283a 	ret

0000877c <_read_r>:
    877c:	defffd04 	addi	sp,sp,-12
    8780:	dc000015 	stw	r16,0(sp)
    8784:	04000074 	movhi	r16,1
    8788:	8408ad04 	addi	r16,r16,8884
    878c:	dc400115 	stw	r17,4(sp)
    8790:	80000015 	stw	zero,0(r16)
    8794:	2023883a 	mov	r17,r4
    8798:	2809883a 	mov	r4,r5
    879c:	300b883a 	mov	r5,r6
    87a0:	380d883a 	mov	r6,r7
    87a4:	dfc00215 	stw	ra,8(sp)
    87a8:	000b0840 	call	b084 <read>
    87ac:	1007883a 	mov	r3,r2
    87b0:	00bfffc4 	movi	r2,-1
    87b4:	18800626 	beq	r3,r2,87d0 <_read_r+0x54>
    87b8:	1805883a 	mov	r2,r3
    87bc:	dfc00217 	ldw	ra,8(sp)
    87c0:	dc400117 	ldw	r17,4(sp)
    87c4:	dc000017 	ldw	r16,0(sp)
    87c8:	dec00304 	addi	sp,sp,12
    87cc:	f800283a 	ret
    87d0:	80800017 	ldw	r2,0(r16)
    87d4:	103ff826 	beq	r2,zero,87b8 <_read_r+0x3c>
    87d8:	88800015 	stw	r2,0(r17)
    87dc:	1805883a 	mov	r2,r3
    87e0:	dfc00217 	ldw	ra,8(sp)
    87e4:	dc400117 	ldw	r17,4(sp)
    87e8:	dc000017 	ldw	r16,0(sp)
    87ec:	dec00304 	addi	sp,sp,12
    87f0:	f800283a 	ret

000087f4 <__udivdi3>:
    87f4:	defff004 	addi	sp,sp,-64
    87f8:	2005883a 	mov	r2,r4
    87fc:	3011883a 	mov	r8,r6
    8800:	df000e15 	stw	fp,56(sp)
    8804:	dd000a15 	stw	r20,40(sp)
    8808:	dc000615 	stw	r16,24(sp)
    880c:	dfc00f15 	stw	ra,60(sp)
    8810:	ddc00d15 	stw	r23,52(sp)
    8814:	dd800c15 	stw	r22,48(sp)
    8818:	dd400b15 	stw	r21,44(sp)
    881c:	dcc00915 	stw	r19,36(sp)
    8820:	dc800815 	stw	r18,32(sp)
    8824:	dc400715 	stw	r17,28(sp)
    8828:	4021883a 	mov	r16,r8
    882c:	1039883a 	mov	fp,r2
    8830:	2829883a 	mov	r20,r5
    8834:	38003b1e 	bne	r7,zero,8924 <__udivdi3+0x130>
    8838:	2a005c36 	bltu	r5,r8,89ac <__udivdi3+0x1b8>
    883c:	4000a626 	beq	r8,zero,8ad8 <__udivdi3+0x2e4>
    8840:	00bfffd4 	movui	r2,65535
    8844:	14009e36 	bltu	r2,r16,8ac0 <__udivdi3+0x2cc>
    8848:	00803fc4 	movi	r2,255
    884c:	14013d36 	bltu	r2,r16,8d44 <__udivdi3+0x550>
    8850:	000b883a 	mov	r5,zero
    8854:	0005883a 	mov	r2,zero
    8858:	8084d83a 	srl	r2,r16,r2
    885c:	01000074 	movhi	r4,1
    8860:	213a2804 	addi	r4,r4,-5984
    8864:	01800804 	movi	r6,32
    8868:	1105883a 	add	r2,r2,r4
    886c:	10c00003 	ldbu	r3,0(r2)
    8870:	28c7883a 	add	r3,r5,r3
    8874:	30edc83a 	sub	r22,r6,r3
    8878:	b000ee1e 	bne	r22,zero,8c34 <__udivdi3+0x440>
    887c:	802ad43a 	srli	r21,r16,16
    8880:	00800044 	movi	r2,1
    8884:	a423c83a 	sub	r17,r20,r16
    8888:	85ffffcc 	andi	r23,r16,65535
    888c:	d8800315 	stw	r2,12(sp)
    8890:	8809883a 	mov	r4,r17
    8894:	a80b883a 	mov	r5,r21
    8898:	00010e80 	call	10e8 <__udivsi3>
    889c:	8809883a 	mov	r4,r17
    88a0:	a80b883a 	mov	r5,r21
    88a4:	102d883a 	mov	r22,r2
    88a8:	00010f00 	call	10f0 <__umodsi3>
    88ac:	1004943a 	slli	r2,r2,16
    88b0:	e006d43a 	srli	r3,fp,16
    88b4:	bda3383a 	mul	r17,r23,r22
    88b8:	10c4b03a 	or	r2,r2,r3
    88bc:	1440042e 	bgeu	r2,r17,88d0 <__udivdi3+0xdc>
    88c0:	1405883a 	add	r2,r2,r16
    88c4:	b5bfffc4 	addi	r22,r22,-1
    88c8:	14000136 	bltu	r2,r16,88d0 <__udivdi3+0xdc>
    88cc:	14413d36 	bltu	r2,r17,8dc4 <__udivdi3+0x5d0>
    88d0:	1463c83a 	sub	r17,r2,r17
    88d4:	8809883a 	mov	r4,r17
    88d8:	a80b883a 	mov	r5,r21
    88dc:	00010e80 	call	10e8 <__udivsi3>
    88e0:	8809883a 	mov	r4,r17
    88e4:	a80b883a 	mov	r5,r21
    88e8:	1029883a 	mov	r20,r2
    88ec:	00010f00 	call	10f0 <__umodsi3>
    88f0:	1004943a 	slli	r2,r2,16
    88f4:	bd09383a 	mul	r4,r23,r20
    88f8:	e0ffffcc 	andi	r3,fp,65535
    88fc:	10c4b03a 	or	r2,r2,r3
    8900:	1100042e 	bgeu	r2,r4,8914 <__udivdi3+0x120>
    8904:	8085883a 	add	r2,r16,r2
    8908:	a53fffc4 	addi	r20,r20,-1
    890c:	14000136 	bltu	r2,r16,8914 <__udivdi3+0x120>
    8910:	11012036 	bltu	r2,r4,8d94 <__udivdi3+0x5a0>
    8914:	b004943a 	slli	r2,r22,16
    8918:	d9000317 	ldw	r4,12(sp)
    891c:	a084b03a 	or	r2,r20,r2
    8920:	00001506 	br	8978 <__udivdi3+0x184>
    8924:	380d883a 	mov	r6,r7
    8928:	29c06236 	bltu	r5,r7,8ab4 <__udivdi3+0x2c0>
    892c:	00bfffd4 	movui	r2,65535
    8930:	11c05a36 	bltu	r2,r7,8a9c <__udivdi3+0x2a8>
    8934:	00803fc4 	movi	r2,255
    8938:	11c0fc36 	bltu	r2,r7,8d2c <__udivdi3+0x538>
    893c:	000b883a 	mov	r5,zero
    8940:	0005883a 	mov	r2,zero
    8944:	3084d83a 	srl	r2,r6,r2
    8948:	01000074 	movhi	r4,1
    894c:	213a2804 	addi	r4,r4,-5984
    8950:	01c00804 	movi	r7,32
    8954:	1105883a 	add	r2,r2,r4
    8958:	10c00003 	ldbu	r3,0(r2)
    895c:	28c7883a 	add	r3,r5,r3
    8960:	38efc83a 	sub	r23,r7,r3
    8964:	b800691e 	bne	r23,zero,8b0c <__udivdi3+0x318>
    8968:	35000136 	bltu	r6,r20,8970 <__udivdi3+0x17c>
    896c:	e4005136 	bltu	fp,r16,8ab4 <__udivdi3+0x2c0>
    8970:	00800044 	movi	r2,1
    8974:	0009883a 	mov	r4,zero
    8978:	2007883a 	mov	r3,r4
    897c:	dfc00f17 	ldw	ra,60(sp)
    8980:	df000e17 	ldw	fp,56(sp)
    8984:	ddc00d17 	ldw	r23,52(sp)
    8988:	dd800c17 	ldw	r22,48(sp)
    898c:	dd400b17 	ldw	r21,44(sp)
    8990:	dd000a17 	ldw	r20,40(sp)
    8994:	dcc00917 	ldw	r19,36(sp)
    8998:	dc800817 	ldw	r18,32(sp)
    899c:	dc400717 	ldw	r17,28(sp)
    89a0:	dc000617 	ldw	r16,24(sp)
    89a4:	dec01004 	addi	sp,sp,64
    89a8:	f800283a 	ret
    89ac:	00bfffd4 	movui	r2,65535
    89b0:	12005036 	bltu	r2,r8,8af4 <__udivdi3+0x300>
    89b4:	00803fc4 	movi	r2,255
    89b8:	1200e836 	bltu	r2,r8,8d5c <__udivdi3+0x568>
    89bc:	000b883a 	mov	r5,zero
    89c0:	0005883a 	mov	r2,zero
    89c4:	8084d83a 	srl	r2,r16,r2
    89c8:	01000074 	movhi	r4,1
    89cc:	213a2804 	addi	r4,r4,-5984
    89d0:	01800804 	movi	r6,32
    89d4:	1105883a 	add	r2,r2,r4
    89d8:	10c00003 	ldbu	r3,0(r2)
    89dc:	28c7883a 	add	r3,r5,r3
    89e0:	30cbc83a 	sub	r5,r6,r3
    89e4:	28000626 	beq	r5,zero,8a00 <__udivdi3+0x20c>
    89e8:	3145c83a 	sub	r2,r6,r5
    89ec:	e084d83a 	srl	r2,fp,r2
    89f0:	a146983a 	sll	r3,r20,r5
    89f4:	e178983a 	sll	fp,fp,r5
    89f8:	8160983a 	sll	r16,r16,r5
    89fc:	18a8b03a 	or	r20,r3,r2
    8a00:	802ad43a 	srli	r21,r16,16
    8a04:	a009883a 	mov	r4,r20
    8a08:	85ffffcc 	andi	r23,r16,65535
    8a0c:	a80b883a 	mov	r5,r21
    8a10:	00010e80 	call	10e8 <__udivsi3>
    8a14:	a009883a 	mov	r4,r20
    8a18:	a80b883a 	mov	r5,r21
    8a1c:	102d883a 	mov	r22,r2
    8a20:	00010f00 	call	10f0 <__umodsi3>
    8a24:	1004943a 	slli	r2,r2,16
    8a28:	e006d43a 	srli	r3,fp,16
    8a2c:	bda3383a 	mul	r17,r23,r22
    8a30:	10c4b03a 	or	r2,r2,r3
    8a34:	1440042e 	bgeu	r2,r17,8a48 <__udivdi3+0x254>
    8a38:	1405883a 	add	r2,r2,r16
    8a3c:	b5bfffc4 	addi	r22,r22,-1
    8a40:	14000136 	bltu	r2,r16,8a48 <__udivdi3+0x254>
    8a44:	1440d536 	bltu	r2,r17,8d9c <__udivdi3+0x5a8>
    8a48:	1463c83a 	sub	r17,r2,r17
    8a4c:	8809883a 	mov	r4,r17
    8a50:	a80b883a 	mov	r5,r21
    8a54:	00010e80 	call	10e8 <__udivsi3>
    8a58:	8809883a 	mov	r4,r17
    8a5c:	a80b883a 	mov	r5,r21
    8a60:	1029883a 	mov	r20,r2
    8a64:	00010f00 	call	10f0 <__umodsi3>
    8a68:	1004943a 	slli	r2,r2,16
    8a6c:	bd09383a 	mul	r4,r23,r20
    8a70:	e0ffffcc 	andi	r3,fp,65535
    8a74:	10c4b03a 	or	r2,r2,r3
    8a78:	1100042e 	bgeu	r2,r4,8a8c <__udivdi3+0x298>
    8a7c:	8085883a 	add	r2,r16,r2
    8a80:	a53fffc4 	addi	r20,r20,-1
    8a84:	14000136 	bltu	r2,r16,8a8c <__udivdi3+0x298>
    8a88:	1100c736 	bltu	r2,r4,8da8 <__udivdi3+0x5b4>
    8a8c:	b004943a 	slli	r2,r22,16
    8a90:	0009883a 	mov	r4,zero
    8a94:	a084b03a 	or	r2,r20,r2
    8a98:	003fb706 	br	8978 <__udivdi3+0x184>
    8a9c:	00804034 	movhi	r2,256
    8aa0:	10bfffc4 	addi	r2,r2,-1
    8aa4:	11c0a436 	bltu	r2,r7,8d38 <__udivdi3+0x544>
    8aa8:	01400404 	movi	r5,16
    8aac:	2805883a 	mov	r2,r5
    8ab0:	003fa406 	br	8944 <__udivdi3+0x150>
    8ab4:	0005883a 	mov	r2,zero
    8ab8:	0009883a 	mov	r4,zero
    8abc:	003fae06 	br	8978 <__udivdi3+0x184>
    8ac0:	00804034 	movhi	r2,256
    8ac4:	10bfffc4 	addi	r2,r2,-1
    8ac8:	1400a136 	bltu	r2,r16,8d50 <__udivdi3+0x55c>
    8acc:	01400404 	movi	r5,16
    8ad0:	2805883a 	mov	r2,r5
    8ad4:	003f6006 	br	8858 <__udivdi3+0x64>
    8ad8:	01000044 	movi	r4,1
    8adc:	000b883a 	mov	r5,zero
    8ae0:	00010e80 	call	10e8 <__udivsi3>
    8ae4:	1021883a 	mov	r16,r2
    8ae8:	00bfffd4 	movui	r2,65535
    8aec:	143ff436 	bltu	r2,r16,8ac0 <__udivdi3+0x2cc>
    8af0:	003f5506 	br	8848 <__udivdi3+0x54>
    8af4:	00804034 	movhi	r2,256
    8af8:	10bfffc4 	addi	r2,r2,-1
    8afc:	12009a36 	bltu	r2,r8,8d68 <__udivdi3+0x574>
    8b00:	01400404 	movi	r5,16
    8b04:	2805883a 	mov	r2,r5
    8b08:	003fae06 	br	89c4 <__udivdi3+0x1d0>
    8b0c:	3dc5c83a 	sub	r2,r7,r23
    8b10:	35c8983a 	sll	r4,r6,r23
    8b14:	8086d83a 	srl	r3,r16,r2
    8b18:	a0a2d83a 	srl	r17,r20,r2
    8b1c:	e084d83a 	srl	r2,fp,r2
    8b20:	20eab03a 	or	r21,r4,r3
    8b24:	a82cd43a 	srli	r22,r21,16
    8b28:	a5c6983a 	sll	r3,r20,r23
    8b2c:	8809883a 	mov	r4,r17
    8b30:	b00b883a 	mov	r5,r22
    8b34:	1886b03a 	or	r3,r3,r2
    8b38:	d8c00215 	stw	r3,8(sp)
    8b3c:	00010e80 	call	10e8 <__udivsi3>
    8b40:	8809883a 	mov	r4,r17
    8b44:	b00b883a 	mov	r5,r22
    8b48:	1029883a 	mov	r20,r2
    8b4c:	00010f00 	call	10f0 <__umodsi3>
    8b50:	a8ffffcc 	andi	r3,r21,65535
    8b54:	d8c00515 	stw	r3,20(sp)
    8b58:	d9000217 	ldw	r4,8(sp)
    8b5c:	d9400517 	ldw	r5,20(sp)
    8b60:	1004943a 	slli	r2,r2,16
    8b64:	2006d43a 	srli	r3,r4,16
    8b68:	85e0983a 	sll	r16,r16,r23
    8b6c:	2d23383a 	mul	r17,r5,r20
    8b70:	10c4b03a 	or	r2,r2,r3
    8b74:	dc000015 	stw	r16,0(sp)
    8b78:	1440032e 	bgeu	r2,r17,8b88 <__udivdi3+0x394>
    8b7c:	1545883a 	add	r2,r2,r21
    8b80:	a53fffc4 	addi	r20,r20,-1
    8b84:	15407f2e 	bgeu	r2,r21,8d84 <__udivdi3+0x590>
    8b88:	1463c83a 	sub	r17,r2,r17
    8b8c:	8809883a 	mov	r4,r17
    8b90:	b00b883a 	mov	r5,r22
    8b94:	00010e80 	call	10e8 <__udivsi3>
    8b98:	8809883a 	mov	r4,r17
    8b9c:	b00b883a 	mov	r5,r22
    8ba0:	1021883a 	mov	r16,r2
    8ba4:	00010f00 	call	10f0 <__umodsi3>
    8ba8:	d8c00517 	ldw	r3,20(sp)
    8bac:	d9000217 	ldw	r4,8(sp)
    8bb0:	1004943a 	slli	r2,r2,16
    8bb4:	1c0f383a 	mul	r7,r3,r16
    8bb8:	20ffffcc 	andi	r3,r4,65535
    8bbc:	10e2b03a 	or	r17,r2,r3
    8bc0:	89c0032e 	bgeu	r17,r7,8bd0 <__udivdi3+0x3dc>
    8bc4:	8d63883a 	add	r17,r17,r21
    8bc8:	843fffc4 	addi	r16,r16,-1
    8bcc:	8d40692e 	bgeu	r17,r21,8d74 <__udivdi3+0x580>
    8bd0:	a008943a 	slli	r4,r20,16
    8bd4:	d9400017 	ldw	r5,0(sp)
    8bd8:	89e3c83a 	sub	r17,r17,r7
    8bdc:	8110b03a 	or	r8,r16,r4
    8be0:	280cd43a 	srli	r6,r5,16
    8be4:	28ffffcc 	andi	r3,r5,65535
    8be8:	40bfffcc 	andi	r2,r8,65535
    8bec:	400ad43a 	srli	r5,r8,16
    8bf0:	10d3383a 	mul	r9,r2,r3
    8bf4:	1185383a 	mul	r2,r2,r6
    8bf8:	28c7383a 	mul	r3,r5,r3
    8bfc:	4808d43a 	srli	r4,r9,16
    8c00:	298b383a 	mul	r5,r5,r6
    8c04:	10c5883a 	add	r2,r2,r3
    8c08:	2089883a 	add	r4,r4,r2
    8c0c:	20c0022e 	bgeu	r4,r3,8c18 <__udivdi3+0x424>
    8c10:	00800074 	movhi	r2,1
    8c14:	288b883a 	add	r5,r5,r2
    8c18:	2004d43a 	srli	r2,r4,16
    8c1c:	288b883a 	add	r5,r5,r2
    8c20:	89403f36 	bltu	r17,r5,8d20 <__udivdi3+0x52c>
    8c24:	89403926 	beq	r17,r5,8d0c <__udivdi3+0x518>
    8c28:	4005883a 	mov	r2,r8
    8c2c:	0009883a 	mov	r4,zero
    8c30:	003f5106 	br	8978 <__udivdi3+0x184>
    8c34:	85a0983a 	sll	r16,r16,r22
    8c38:	3585c83a 	sub	r2,r6,r22
    8c3c:	a0a2d83a 	srl	r17,r20,r2
    8c40:	802ad43a 	srli	r21,r16,16
    8c44:	e084d83a 	srl	r2,fp,r2
    8c48:	a586983a 	sll	r3,r20,r22
    8c4c:	8809883a 	mov	r4,r17
    8c50:	a80b883a 	mov	r5,r21
    8c54:	1886b03a 	or	r3,r3,r2
    8c58:	d8c00115 	stw	r3,4(sp)
    8c5c:	00010e80 	call	10e8 <__udivsi3>
    8c60:	8809883a 	mov	r4,r17
    8c64:	a80b883a 	mov	r5,r21
    8c68:	d8800415 	stw	r2,16(sp)
    8c6c:	00010f00 	call	10f0 <__umodsi3>
    8c70:	d9000117 	ldw	r4,4(sp)
    8c74:	d9400417 	ldw	r5,16(sp)
    8c78:	1004943a 	slli	r2,r2,16
    8c7c:	85ffffcc 	andi	r23,r16,65535
    8c80:	2006d43a 	srli	r3,r4,16
    8c84:	b963383a 	mul	r17,r23,r5
    8c88:	10c4b03a 	or	r2,r2,r3
    8c8c:	1440042e 	bgeu	r2,r17,8ca0 <__udivdi3+0x4ac>
    8c90:	297fffc4 	addi	r5,r5,-1
    8c94:	1405883a 	add	r2,r2,r16
    8c98:	d9400415 	stw	r5,16(sp)
    8c9c:	1400442e 	bgeu	r2,r16,8db0 <__udivdi3+0x5bc>
    8ca0:	1463c83a 	sub	r17,r2,r17
    8ca4:	8809883a 	mov	r4,r17
    8ca8:	a80b883a 	mov	r5,r21
    8cac:	00010e80 	call	10e8 <__udivsi3>
    8cb0:	8809883a 	mov	r4,r17
    8cb4:	a80b883a 	mov	r5,r21
    8cb8:	1029883a 	mov	r20,r2
    8cbc:	00010f00 	call	10f0 <__umodsi3>
    8cc0:	d9400117 	ldw	r5,4(sp)
    8cc4:	1004943a 	slli	r2,r2,16
    8cc8:	bd09383a 	mul	r4,r23,r20
    8ccc:	28ffffcc 	andi	r3,r5,65535
    8cd0:	10c6b03a 	or	r3,r2,r3
    8cd4:	1900062e 	bgeu	r3,r4,8cf0 <__udivdi3+0x4fc>
    8cd8:	1c07883a 	add	r3,r3,r16
    8cdc:	a53fffc4 	addi	r20,r20,-1
    8ce0:	1c000336 	bltu	r3,r16,8cf0 <__udivdi3+0x4fc>
    8ce4:	1900022e 	bgeu	r3,r4,8cf0 <__udivdi3+0x4fc>
    8ce8:	a53fffc4 	addi	r20,r20,-1
    8cec:	1c07883a 	add	r3,r3,r16
    8cf0:	d9400417 	ldw	r5,16(sp)
    8cf4:	e5b8983a 	sll	fp,fp,r22
    8cf8:	1923c83a 	sub	r17,r3,r4
    8cfc:	2804943a 	slli	r2,r5,16
    8d00:	a0a8b03a 	or	r20,r20,r2
    8d04:	dd000315 	stw	r20,12(sp)
    8d08:	003ee106 	br	8890 <__udivdi3+0x9c>
    8d0c:	2004943a 	slli	r2,r4,16
    8d10:	e5c8983a 	sll	r4,fp,r23
    8d14:	48ffffcc 	andi	r3,r9,65535
    8d18:	10c5883a 	add	r2,r2,r3
    8d1c:	20bfc22e 	bgeu	r4,r2,8c28 <__udivdi3+0x434>
    8d20:	40bfffc4 	addi	r2,r8,-1
    8d24:	0009883a 	mov	r4,zero
    8d28:	003f1306 	br	8978 <__udivdi3+0x184>
    8d2c:	01400204 	movi	r5,8
    8d30:	2805883a 	mov	r2,r5
    8d34:	003f0306 	br	8944 <__udivdi3+0x150>
    8d38:	01400604 	movi	r5,24
    8d3c:	2805883a 	mov	r2,r5
    8d40:	003f0006 	br	8944 <__udivdi3+0x150>
    8d44:	01400204 	movi	r5,8
    8d48:	2805883a 	mov	r2,r5
    8d4c:	003ec206 	br	8858 <__udivdi3+0x64>
    8d50:	01400604 	movi	r5,24
    8d54:	2805883a 	mov	r2,r5
    8d58:	003ebf06 	br	8858 <__udivdi3+0x64>
    8d5c:	01400204 	movi	r5,8
    8d60:	2805883a 	mov	r2,r5
    8d64:	003f1706 	br	89c4 <__udivdi3+0x1d0>
    8d68:	01400604 	movi	r5,24
    8d6c:	2805883a 	mov	r2,r5
    8d70:	003f1406 	br	89c4 <__udivdi3+0x1d0>
    8d74:	89ff962e 	bgeu	r17,r7,8bd0 <__udivdi3+0x3dc>
    8d78:	8d63883a 	add	r17,r17,r21
    8d7c:	843fffc4 	addi	r16,r16,-1
    8d80:	003f9306 	br	8bd0 <__udivdi3+0x3dc>
    8d84:	147f802e 	bgeu	r2,r17,8b88 <__udivdi3+0x394>
    8d88:	a53fffc4 	addi	r20,r20,-1
    8d8c:	1545883a 	add	r2,r2,r21
    8d90:	003f7d06 	br	8b88 <__udivdi3+0x394>
    8d94:	a53fffc4 	addi	r20,r20,-1
    8d98:	003ede06 	br	8914 <__udivdi3+0x120>
    8d9c:	b5bfffc4 	addi	r22,r22,-1
    8da0:	1405883a 	add	r2,r2,r16
    8da4:	003f2806 	br	8a48 <__udivdi3+0x254>
    8da8:	a53fffc4 	addi	r20,r20,-1
    8dac:	003f3706 	br	8a8c <__udivdi3+0x298>
    8db0:	147fbb2e 	bgeu	r2,r17,8ca0 <__udivdi3+0x4ac>
    8db4:	297fffc4 	addi	r5,r5,-1
    8db8:	1405883a 	add	r2,r2,r16
    8dbc:	d9400415 	stw	r5,16(sp)
    8dc0:	003fb706 	br	8ca0 <__udivdi3+0x4ac>
    8dc4:	b5bfffc4 	addi	r22,r22,-1
    8dc8:	1405883a 	add	r2,r2,r16
    8dcc:	003ec006 	br	88d0 <__udivdi3+0xdc>

00008dd0 <__umoddi3>:
    8dd0:	defff104 	addi	sp,sp,-60
    8dd4:	dd800b15 	stw	r22,44(sp)
    8dd8:	dd000915 	stw	r20,36(sp)
    8ddc:	dc000515 	stw	r16,20(sp)
    8de0:	dfc00e15 	stw	ra,56(sp)
    8de4:	df000d15 	stw	fp,52(sp)
    8de8:	ddc00c15 	stw	r23,48(sp)
    8dec:	dd400a15 	stw	r21,40(sp)
    8df0:	dcc00815 	stw	r19,32(sp)
    8df4:	dc800715 	stw	r18,28(sp)
    8df8:	dc400615 	stw	r17,24(sp)
    8dfc:	3021883a 	mov	r16,r6
    8e00:	202d883a 	mov	r22,r4
    8e04:	2829883a 	mov	r20,r5
    8e08:	38002b1e 	bne	r7,zero,8eb8 <__umoddi3+0xe8>
    8e0c:	29805036 	bltu	r5,r6,8f50 <__umoddi3+0x180>
    8e10:	30008a26 	beq	r6,zero,903c <__umoddi3+0x26c>
    8e14:	00bfffd4 	movui	r2,65535
    8e18:	14008236 	bltu	r2,r16,9024 <__umoddi3+0x254>
    8e1c:	00803fc4 	movi	r2,255
    8e20:	14013636 	bltu	r2,r16,92fc <__umoddi3+0x52c>
    8e24:	000b883a 	mov	r5,zero
    8e28:	0005883a 	mov	r2,zero
    8e2c:	8084d83a 	srl	r2,r16,r2
    8e30:	01000074 	movhi	r4,1
    8e34:	213a2804 	addi	r4,r4,-5984
    8e38:	01800804 	movi	r6,32
    8e3c:	1105883a 	add	r2,r2,r4
    8e40:	10c00003 	ldbu	r3,0(r2)
    8e44:	28c7883a 	add	r3,r5,r3
    8e48:	30efc83a 	sub	r23,r6,r3
    8e4c:	b800941e 	bne	r23,zero,90a0 <__umoddi3+0x2d0>
    8e50:	802ad43a 	srli	r21,r16,16
    8e54:	a423c83a 	sub	r17,r20,r16
    8e58:	0039883a 	mov	fp,zero
    8e5c:	853fffcc 	andi	r20,r16,65535
    8e60:	8809883a 	mov	r4,r17
    8e64:	a80b883a 	mov	r5,r21
    8e68:	00010e80 	call	10e8 <__udivsi3>
    8e6c:	8809883a 	mov	r4,r17
    8e70:	a80b883a 	mov	r5,r21
    8e74:	a0a3383a 	mul	r17,r20,r2
    8e78:	00010f00 	call	10f0 <__umodsi3>
    8e7c:	1004943a 	slli	r2,r2,16
    8e80:	b006d43a 	srli	r3,r22,16
    8e84:	10c4b03a 	or	r2,r2,r3
    8e88:	1440032e 	bgeu	r2,r17,8e98 <__umoddi3+0xc8>
    8e8c:	1405883a 	add	r2,r2,r16
    8e90:	14000136 	bltu	r2,r16,8e98 <__umoddi3+0xc8>
    8e94:	14413536 	bltu	r2,r17,936c <__umoddi3+0x59c>
    8e98:	1463c83a 	sub	r17,r2,r17
    8e9c:	8809883a 	mov	r4,r17
    8ea0:	a80b883a 	mov	r5,r21
    8ea4:	00010e80 	call	10e8 <__udivsi3>
    8ea8:	8809883a 	mov	r4,r17
    8eac:	a0a3383a 	mul	r17,r20,r2
    8eb0:	a80b883a 	mov	r5,r21
    8eb4:	00004d06 	br	8fec <__umoddi3+0x21c>
    8eb8:	380d883a 	mov	r6,r7
    8ebc:	29c0102e 	bgeu	r5,r7,8f00 <__umoddi3+0x130>
    8ec0:	2011883a 	mov	r8,r4
    8ec4:	2813883a 	mov	r9,r5
    8ec8:	4005883a 	mov	r2,r8
    8ecc:	4807883a 	mov	r3,r9
    8ed0:	dfc00e17 	ldw	ra,56(sp)
    8ed4:	df000d17 	ldw	fp,52(sp)
    8ed8:	ddc00c17 	ldw	r23,48(sp)
    8edc:	dd800b17 	ldw	r22,44(sp)
    8ee0:	dd400a17 	ldw	r21,40(sp)
    8ee4:	dd000917 	ldw	r20,36(sp)
    8ee8:	dcc00817 	ldw	r19,32(sp)
    8eec:	dc800717 	ldw	r18,28(sp)
    8ef0:	dc400617 	ldw	r17,24(sp)
    8ef4:	dc000517 	ldw	r16,20(sp)
    8ef8:	dec00f04 	addi	sp,sp,60
    8efc:	f800283a 	ret
    8f00:	00bfffd4 	movui	r2,65535
    8f04:	11c05a36 	bltu	r2,r7,9070 <__umoddi3+0x2a0>
    8f08:	00803fc4 	movi	r2,255
    8f0c:	11c0fe36 	bltu	r2,r7,9308 <__umoddi3+0x538>
    8f10:	000b883a 	mov	r5,zero
    8f14:	0005883a 	mov	r2,zero
    8f18:	3084d83a 	srl	r2,r6,r2
    8f1c:	01000074 	movhi	r4,1
    8f20:	213a2804 	addi	r4,r4,-5984
    8f24:	01c00804 	movi	r7,32
    8f28:	1105883a 	add	r2,r2,r4
    8f2c:	10c00003 	ldbu	r3,0(r2)
    8f30:	28c7883a 	add	r3,r5,r3
    8f34:	38ebc83a 	sub	r21,r7,r3
    8f38:	a800851e 	bne	r21,zero,9150 <__umoddi3+0x380>
    8f3c:	35005236 	bltu	r6,r20,9088 <__umoddi3+0x2b8>
    8f40:	b400512e 	bgeu	r22,r16,9088 <__umoddi3+0x2b8>
    8f44:	b011883a 	mov	r8,r22
    8f48:	a013883a 	mov	r9,r20
    8f4c:	003fde06 	br	8ec8 <__umoddi3+0xf8>
    8f50:	00bfffd4 	movui	r2,65535
    8f54:	11804036 	bltu	r2,r6,9058 <__umoddi3+0x288>
    8f58:	00803fc4 	movi	r2,255
    8f5c:	1180ed36 	bltu	r2,r6,9314 <__umoddi3+0x544>
    8f60:	000b883a 	mov	r5,zero
    8f64:	0005883a 	mov	r2,zero
    8f68:	8084d83a 	srl	r2,r16,r2
    8f6c:	01000074 	movhi	r4,1
    8f70:	213a2804 	addi	r4,r4,-5984
    8f74:	01800804 	movi	r6,32
    8f78:	1105883a 	add	r2,r2,r4
    8f7c:	10c00003 	ldbu	r3,0(r2)
    8f80:	28c7883a 	add	r3,r5,r3
    8f84:	30c7c83a 	sub	r3,r6,r3
    8f88:	1800bf1e 	bne	r3,zero,9288 <__umoddi3+0x4b8>
    8f8c:	0039883a 	mov	fp,zero
    8f90:	802ad43a 	srli	r21,r16,16
    8f94:	a009883a 	mov	r4,r20
    8f98:	85ffffcc 	andi	r23,r16,65535
    8f9c:	a80b883a 	mov	r5,r21
    8fa0:	00010e80 	call	10e8 <__udivsi3>
    8fa4:	a009883a 	mov	r4,r20
    8fa8:	a80b883a 	mov	r5,r21
    8fac:	b8a3383a 	mul	r17,r23,r2
    8fb0:	00010f00 	call	10f0 <__umodsi3>
    8fb4:	1004943a 	slli	r2,r2,16
    8fb8:	b006d43a 	srli	r3,r22,16
    8fbc:	10c4b03a 	or	r2,r2,r3
    8fc0:	1440032e 	bgeu	r2,r17,8fd0 <__umoddi3+0x200>
    8fc4:	1405883a 	add	r2,r2,r16
    8fc8:	14000136 	bltu	r2,r16,8fd0 <__umoddi3+0x200>
    8fcc:	1440e536 	bltu	r2,r17,9364 <__umoddi3+0x594>
    8fd0:	1463c83a 	sub	r17,r2,r17
    8fd4:	8809883a 	mov	r4,r17
    8fd8:	a80b883a 	mov	r5,r21
    8fdc:	00010e80 	call	10e8 <__udivsi3>
    8fe0:	8809883a 	mov	r4,r17
    8fe4:	b8a3383a 	mul	r17,r23,r2
    8fe8:	a80b883a 	mov	r5,r21
    8fec:	00010f00 	call	10f0 <__umodsi3>
    8ff0:	1004943a 	slli	r2,r2,16
    8ff4:	b0ffffcc 	andi	r3,r22,65535
    8ff8:	10c4b03a 	or	r2,r2,r3
    8ffc:	1440042e 	bgeu	r2,r17,9010 <__umoddi3+0x240>
    9000:	1405883a 	add	r2,r2,r16
    9004:	14000236 	bltu	r2,r16,9010 <__umoddi3+0x240>
    9008:	1440012e 	bgeu	r2,r17,9010 <__umoddi3+0x240>
    900c:	1405883a 	add	r2,r2,r16
    9010:	1445c83a 	sub	r2,r2,r17
    9014:	1724d83a 	srl	r18,r2,fp
    9018:	0013883a 	mov	r9,zero
    901c:	9011883a 	mov	r8,r18
    9020:	003fa906 	br	8ec8 <__umoddi3+0xf8>
    9024:	00804034 	movhi	r2,256
    9028:	10bfffc4 	addi	r2,r2,-1
    902c:	1400b036 	bltu	r2,r16,92f0 <__umoddi3+0x520>
    9030:	01400404 	movi	r5,16
    9034:	2805883a 	mov	r2,r5
    9038:	003f7c06 	br	8e2c <__umoddi3+0x5c>
    903c:	01000044 	movi	r4,1
    9040:	000b883a 	mov	r5,zero
    9044:	00010e80 	call	10e8 <__udivsi3>
    9048:	1021883a 	mov	r16,r2
    904c:	00bfffd4 	movui	r2,65535
    9050:	143ff436 	bltu	r2,r16,9024 <__umoddi3+0x254>
    9054:	003f7106 	br	8e1c <__umoddi3+0x4c>
    9058:	00804034 	movhi	r2,256
    905c:	10bfffc4 	addi	r2,r2,-1
    9060:	1180af36 	bltu	r2,r6,9320 <__umoddi3+0x550>
    9064:	01400404 	movi	r5,16
    9068:	2805883a 	mov	r2,r5
    906c:	003fbe06 	br	8f68 <__umoddi3+0x198>
    9070:	00804034 	movhi	r2,256
    9074:	10bfffc4 	addi	r2,r2,-1
    9078:	11c0ac36 	bltu	r2,r7,932c <__umoddi3+0x55c>
    907c:	01400404 	movi	r5,16
    9080:	2805883a 	mov	r2,r5
    9084:	003fa406 	br	8f18 <__umoddi3+0x148>
    9088:	b409c83a 	sub	r4,r22,r16
    908c:	b105803a 	cmpltu	r2,r22,r4
    9090:	a187c83a 	sub	r3,r20,r6
    9094:	18a9c83a 	sub	r20,r3,r2
    9098:	202d883a 	mov	r22,r4
    909c:	003fa906 	br	8f44 <__umoddi3+0x174>
    90a0:	85e0983a 	sll	r16,r16,r23
    90a4:	35c5c83a 	sub	r2,r6,r23
    90a8:	a0a2d83a 	srl	r17,r20,r2
    90ac:	802ad43a 	srli	r21,r16,16
    90b0:	b084d83a 	srl	r2,r22,r2
    90b4:	a5c6983a 	sll	r3,r20,r23
    90b8:	8809883a 	mov	r4,r17
    90bc:	a80b883a 	mov	r5,r21
    90c0:	1886b03a 	or	r3,r3,r2
    90c4:	d8c00115 	stw	r3,4(sp)
    90c8:	853fffcc 	andi	r20,r16,65535
    90cc:	00010e80 	call	10e8 <__udivsi3>
    90d0:	8809883a 	mov	r4,r17
    90d4:	a80b883a 	mov	r5,r21
    90d8:	a0a3383a 	mul	r17,r20,r2
    90dc:	00010f00 	call	10f0 <__umodsi3>
    90e0:	d9000117 	ldw	r4,4(sp)
    90e4:	1004943a 	slli	r2,r2,16
    90e8:	b839883a 	mov	fp,r23
    90ec:	2006d43a 	srli	r3,r4,16
    90f0:	10c4b03a 	or	r2,r2,r3
    90f4:	1440022e 	bgeu	r2,r17,9100 <__umoddi3+0x330>
    90f8:	1405883a 	add	r2,r2,r16
    90fc:	1400962e 	bgeu	r2,r16,9358 <__umoddi3+0x588>
    9100:	1463c83a 	sub	r17,r2,r17
    9104:	8809883a 	mov	r4,r17
    9108:	a80b883a 	mov	r5,r21
    910c:	00010e80 	call	10e8 <__udivsi3>
    9110:	8809883a 	mov	r4,r17
    9114:	a80b883a 	mov	r5,r21
    9118:	a0a3383a 	mul	r17,r20,r2
    911c:	00010f00 	call	10f0 <__umodsi3>
    9120:	d9400117 	ldw	r5,4(sp)
    9124:	1004943a 	slli	r2,r2,16
    9128:	28ffffcc 	andi	r3,r5,65535
    912c:	10c4b03a 	or	r2,r2,r3
    9130:	1440042e 	bgeu	r2,r17,9144 <__umoddi3+0x374>
    9134:	1405883a 	add	r2,r2,r16
    9138:	14000236 	bltu	r2,r16,9144 <__umoddi3+0x374>
    913c:	1440012e 	bgeu	r2,r17,9144 <__umoddi3+0x374>
    9140:	1405883a 	add	r2,r2,r16
    9144:	b5ec983a 	sll	r22,r22,r23
    9148:	1463c83a 	sub	r17,r2,r17
    914c:	003f4406 	br	8e60 <__umoddi3+0x90>
    9150:	3d4fc83a 	sub	r7,r7,r21
    9154:	3546983a 	sll	r3,r6,r21
    9158:	81c4d83a 	srl	r2,r16,r7
    915c:	a1e2d83a 	srl	r17,r20,r7
    9160:	a54c983a 	sll	r6,r20,r21
    9164:	18aeb03a 	or	r23,r3,r2
    9168:	b828d43a 	srli	r20,r23,16
    916c:	b1c4d83a 	srl	r2,r22,r7
    9170:	8809883a 	mov	r4,r17
    9174:	a00b883a 	mov	r5,r20
    9178:	308cb03a 	or	r6,r6,r2
    917c:	d9c00315 	stw	r7,12(sp)
    9180:	d9800215 	stw	r6,8(sp)
    9184:	00010e80 	call	10e8 <__udivsi3>
    9188:	8809883a 	mov	r4,r17
    918c:	a00b883a 	mov	r5,r20
    9190:	1039883a 	mov	fp,r2
    9194:	00010f00 	call	10f0 <__umodsi3>
    9198:	b8ffffcc 	andi	r3,r23,65535
    919c:	d8c00415 	stw	r3,16(sp)
    91a0:	d9000217 	ldw	r4,8(sp)
    91a4:	d9400417 	ldw	r5,16(sp)
    91a8:	1004943a 	slli	r2,r2,16
    91ac:	2006d43a 	srli	r3,r4,16
    91b0:	8560983a 	sll	r16,r16,r21
    91b4:	2f23383a 	mul	r17,r5,fp
    91b8:	10c4b03a 	or	r2,r2,r3
    91bc:	dc000015 	stw	r16,0(sp)
    91c0:	b56c983a 	sll	r22,r22,r21
    91c4:	1440032e 	bgeu	r2,r17,91d4 <__umoddi3+0x404>
    91c8:	15c5883a 	add	r2,r2,r23
    91cc:	e73fffc4 	addi	fp,fp,-1
    91d0:	15c05d2e 	bgeu	r2,r23,9348 <__umoddi3+0x578>
    91d4:	1463c83a 	sub	r17,r2,r17
    91d8:	8809883a 	mov	r4,r17
    91dc:	a00b883a 	mov	r5,r20
    91e0:	00010e80 	call	10e8 <__udivsi3>
    91e4:	8809883a 	mov	r4,r17
    91e8:	a00b883a 	mov	r5,r20
    91ec:	1021883a 	mov	r16,r2
    91f0:	00010f00 	call	10f0 <__umodsi3>
    91f4:	d8c00417 	ldw	r3,16(sp)
    91f8:	d9000217 	ldw	r4,8(sp)
    91fc:	1004943a 	slli	r2,r2,16
    9200:	1c23383a 	mul	r17,r3,r16
    9204:	20ffffcc 	andi	r3,r4,65535
    9208:	10ceb03a 	or	r7,r2,r3
    920c:	3c40032e 	bgeu	r7,r17,921c <__umoddi3+0x44c>
    9210:	3dcf883a 	add	r7,r7,r23
    9214:	843fffc4 	addi	r16,r16,-1
    9218:	3dc0472e 	bgeu	r7,r23,9338 <__umoddi3+0x568>
    921c:	e004943a 	slli	r2,fp,16
    9220:	d9400017 	ldw	r5,0(sp)
    9224:	3c4fc83a 	sub	r7,r7,r17
    9228:	8084b03a 	or	r2,r16,r2
    922c:	28ffffcc 	andi	r3,r5,65535
    9230:	280cd43a 	srli	r6,r5,16
    9234:	100ad43a 	srli	r5,r2,16
    9238:	10bfffcc 	andi	r2,r2,65535
    923c:	10d1383a 	mul	r8,r2,r3
    9240:	28c7383a 	mul	r3,r5,r3
    9244:	1185383a 	mul	r2,r2,r6
    9248:	4008d43a 	srli	r4,r8,16
    924c:	298b383a 	mul	r5,r5,r6
    9250:	10c5883a 	add	r2,r2,r3
    9254:	2089883a 	add	r4,r4,r2
    9258:	20c0022e 	bgeu	r4,r3,9264 <__umoddi3+0x494>
    925c:	00800074 	movhi	r2,1
    9260:	288b883a 	add	r5,r5,r2
    9264:	2004d43a 	srli	r2,r4,16
    9268:	2008943a 	slli	r4,r4,16
    926c:	40ffffcc 	andi	r3,r8,65535
    9270:	288b883a 	add	r5,r5,r2
    9274:	20c9883a 	add	r4,r4,r3
    9278:	39400b36 	bltu	r7,r5,92a8 <__umoddi3+0x4d8>
    927c:	39403d26 	beq	r7,r5,9374 <__umoddi3+0x5a4>
    9280:	394bc83a 	sub	r5,r7,r5
    9284:	00000f06 	br	92c4 <__umoddi3+0x4f4>
    9288:	30c5c83a 	sub	r2,r6,r3
    928c:	1839883a 	mov	fp,r3
    9290:	b084d83a 	srl	r2,r22,r2
    9294:	a0c6983a 	sll	r3,r20,r3
    9298:	8720983a 	sll	r16,r16,fp
    929c:	b72c983a 	sll	r22,r22,fp
    92a0:	18a8b03a 	or	r20,r3,r2
    92a4:	003f3a06 	br	8f90 <__umoddi3+0x1c0>
    92a8:	d8c00017 	ldw	r3,0(sp)
    92ac:	20c5c83a 	sub	r2,r4,r3
    92b0:	2089803a 	cmpltu	r4,r4,r2
    92b4:	2dc7c83a 	sub	r3,r5,r23
    92b8:	1907c83a 	sub	r3,r3,r4
    92bc:	38cbc83a 	sub	r5,r7,r3
    92c0:	1009883a 	mov	r4,r2
    92c4:	b105c83a 	sub	r2,r22,r4
    92c8:	b087803a 	cmpltu	r3,r22,r2
    92cc:	28c7c83a 	sub	r3,r5,r3
    92d0:	d9400317 	ldw	r5,12(sp)
    92d4:	1544d83a 	srl	r2,r2,r21
    92d8:	1948983a 	sll	r4,r3,r5
    92dc:	1d46d83a 	srl	r3,r3,r21
    92e0:	20a4b03a 	or	r18,r4,r2
    92e4:	9011883a 	mov	r8,r18
    92e8:	1813883a 	mov	r9,r3
    92ec:	003ef606 	br	8ec8 <__umoddi3+0xf8>
    92f0:	01400604 	movi	r5,24
    92f4:	2805883a 	mov	r2,r5
    92f8:	003ecc06 	br	8e2c <__umoddi3+0x5c>
    92fc:	01400204 	movi	r5,8
    9300:	2805883a 	mov	r2,r5
    9304:	003ec906 	br	8e2c <__umoddi3+0x5c>
    9308:	01400204 	movi	r5,8
    930c:	2805883a 	mov	r2,r5
    9310:	003f0106 	br	8f18 <__umoddi3+0x148>
    9314:	01400204 	movi	r5,8
    9318:	2805883a 	mov	r2,r5
    931c:	003f1206 	br	8f68 <__umoddi3+0x198>
    9320:	01400604 	movi	r5,24
    9324:	2805883a 	mov	r2,r5
    9328:	003f0f06 	br	8f68 <__umoddi3+0x198>
    932c:	01400604 	movi	r5,24
    9330:	2805883a 	mov	r2,r5
    9334:	003ef806 	br	8f18 <__umoddi3+0x148>
    9338:	3c7fb82e 	bgeu	r7,r17,921c <__umoddi3+0x44c>
    933c:	843fffc4 	addi	r16,r16,-1
    9340:	3dcf883a 	add	r7,r7,r23
    9344:	003fb506 	br	921c <__umoddi3+0x44c>
    9348:	147fa22e 	bgeu	r2,r17,91d4 <__umoddi3+0x404>
    934c:	e73fffc4 	addi	fp,fp,-1
    9350:	15c5883a 	add	r2,r2,r23
    9354:	003f9f06 	br	91d4 <__umoddi3+0x404>
    9358:	147f692e 	bgeu	r2,r17,9100 <__umoddi3+0x330>
    935c:	1405883a 	add	r2,r2,r16
    9360:	003f6706 	br	9100 <__umoddi3+0x330>
    9364:	1405883a 	add	r2,r2,r16
    9368:	003f1906 	br	8fd0 <__umoddi3+0x200>
    936c:	1405883a 	add	r2,r2,r16
    9370:	003ec906 	br	8e98 <__umoddi3+0xc8>
    9374:	b13fcc36 	bltu	r22,r4,92a8 <__umoddi3+0x4d8>
    9378:	000b883a 	mov	r5,zero
    937c:	003fd106 	br	92c4 <__umoddi3+0x4f4>

00009380 <_fpadd_parts>:
    9380:	defff804 	addi	sp,sp,-32
    9384:	dcc00315 	stw	r19,12(sp)
    9388:	2027883a 	mov	r19,r4
    938c:	21000017 	ldw	r4,0(r4)
    9390:	00c00044 	movi	r3,1
    9394:	dd400515 	stw	r21,20(sp)
    9398:	dd000415 	stw	r20,16(sp)
    939c:	ddc00715 	stw	r23,28(sp)
    93a0:	dd800615 	stw	r22,24(sp)
    93a4:	dc800215 	stw	r18,8(sp)
    93a8:	dc400115 	stw	r17,4(sp)
    93ac:	dc000015 	stw	r16,0(sp)
    93b0:	282b883a 	mov	r21,r5
    93b4:	3029883a 	mov	r20,r6
    93b8:	1900632e 	bgeu	r3,r4,9548 <_fpadd_parts+0x1c8>
    93bc:	28800017 	ldw	r2,0(r5)
    93c0:	1880812e 	bgeu	r3,r2,95c8 <_fpadd_parts+0x248>
    93c4:	00c00104 	movi	r3,4
    93c8:	20c0dc26 	beq	r4,r3,973c <_fpadd_parts+0x3bc>
    93cc:	10c07e26 	beq	r2,r3,95c8 <_fpadd_parts+0x248>
    93d0:	00c00084 	movi	r3,2
    93d4:	10c06726 	beq	r2,r3,9574 <_fpadd_parts+0x1f4>
    93d8:	20c07b26 	beq	r4,r3,95c8 <_fpadd_parts+0x248>
    93dc:	9dc00217 	ldw	r23,8(r19)
    93e0:	28c00217 	ldw	r3,8(r5)
    93e4:	9c400317 	ldw	r17,12(r19)
    93e8:	2bc00317 	ldw	r15,12(r5)
    93ec:	b8cdc83a 	sub	r6,r23,r3
    93f0:	9c800417 	ldw	r18,16(r19)
    93f4:	2c000417 	ldw	r16,16(r5)
    93f8:	3009883a 	mov	r4,r6
    93fc:	30009716 	blt	r6,zero,965c <_fpadd_parts+0x2dc>
    9400:	00800fc4 	movi	r2,63
    9404:	11806b16 	blt	r2,r6,95b4 <_fpadd_parts+0x234>
    9408:	0100a40e 	bge	zero,r4,969c <_fpadd_parts+0x31c>
    940c:	35bff804 	addi	r22,r6,-32
    9410:	b000bc16 	blt	r22,zero,9704 <_fpadd_parts+0x384>
    9414:	8596d83a 	srl	r11,r16,r22
    9418:	0019883a 	mov	r12,zero
    941c:	0013883a 	mov	r9,zero
    9420:	01000044 	movi	r4,1
    9424:	0015883a 	mov	r10,zero
    9428:	b000be16 	blt	r22,zero,9724 <_fpadd_parts+0x3a4>
    942c:	2590983a 	sll	r8,r4,r22
    9430:	000f883a 	mov	r7,zero
    9434:	00bfffc4 	movi	r2,-1
    9438:	3889883a 	add	r4,r7,r2
    943c:	408b883a 	add	r5,r8,r2
    9440:	21cd803a 	cmpltu	r6,r4,r7
    9444:	314b883a 	add	r5,r6,r5
    9448:	7904703a 	and	r2,r15,r4
    944c:	8146703a 	and	r3,r16,r5
    9450:	10c4b03a 	or	r2,r2,r3
    9454:	10000226 	beq	r2,zero,9460 <_fpadd_parts+0xe0>
    9458:	02400044 	movi	r9,1
    945c:	0015883a 	mov	r10,zero
    9460:	5a5eb03a 	or	r15,r11,r9
    9464:	62a0b03a 	or	r16,r12,r10
    9468:	99400117 	ldw	r5,4(r19)
    946c:	a8800117 	ldw	r2,4(r21)
    9470:	28806e26 	beq	r5,r2,962c <_fpadd_parts+0x2ac>
    9474:	28006626 	beq	r5,zero,9610 <_fpadd_parts+0x290>
    9478:	7c45c83a 	sub	r2,r15,r17
    947c:	7889803a 	cmpltu	r4,r15,r2
    9480:	8487c83a 	sub	r3,r16,r18
    9484:	1909c83a 	sub	r4,r3,r4
    9488:	100d883a 	mov	r6,r2
    948c:	200f883a 	mov	r7,r4
    9490:	38007716 	blt	r7,zero,9670 <_fpadd_parts+0x2f0>
    9494:	a5c00215 	stw	r23,8(r20)
    9498:	a1c00415 	stw	r7,16(r20)
    949c:	a0000115 	stw	zero,4(r20)
    94a0:	a1800315 	stw	r6,12(r20)
    94a4:	a2000317 	ldw	r8,12(r20)
    94a8:	a2400417 	ldw	r9,16(r20)
    94ac:	00bfffc4 	movi	r2,-1
    94b0:	408b883a 	add	r5,r8,r2
    94b4:	2a09803a 	cmpltu	r4,r5,r8
    94b8:	488d883a 	add	r6,r9,r2
    94bc:	01c40034 	movhi	r7,4096
    94c0:	39ffffc4 	addi	r7,r7,-1
    94c4:	218d883a 	add	r6,r4,r6
    94c8:	39801736 	bltu	r7,r6,9528 <_fpadd_parts+0x1a8>
    94cc:	31c06526 	beq	r6,r7,9664 <_fpadd_parts+0x2e4>
    94d0:	a3000217 	ldw	r12,8(r20)
    94d4:	4209883a 	add	r4,r8,r8
    94d8:	00bfffc4 	movi	r2,-1
    94dc:	220f803a 	cmpltu	r7,r4,r8
    94e0:	4a4b883a 	add	r5,r9,r9
    94e4:	394f883a 	add	r7,r7,r5
    94e8:	2095883a 	add	r10,r4,r2
    94ec:	3897883a 	add	r11,r7,r2
    94f0:	510d803a 	cmpltu	r6,r10,r4
    94f4:	6099883a 	add	r12,r12,r2
    94f8:	32d7883a 	add	r11,r6,r11
    94fc:	00840034 	movhi	r2,4096
    9500:	10bfffc4 	addi	r2,r2,-1
    9504:	2011883a 	mov	r8,r4
    9508:	3813883a 	mov	r9,r7
    950c:	a1000315 	stw	r4,12(r20)
    9510:	a1c00415 	stw	r7,16(r20)
    9514:	a3000215 	stw	r12,8(r20)
    9518:	12c00336 	bltu	r2,r11,9528 <_fpadd_parts+0x1a8>
    951c:	58bfed1e 	bne	r11,r2,94d4 <_fpadd_parts+0x154>
    9520:	00bfff84 	movi	r2,-2
    9524:	12bfeb2e 	bgeu	r2,r10,94d4 <_fpadd_parts+0x154>
    9528:	a2800417 	ldw	r10,16(r20)
    952c:	008000c4 	movi	r2,3
    9530:	00c80034 	movhi	r3,8192
    9534:	18ffffc4 	addi	r3,r3,-1
    9538:	a2400317 	ldw	r9,12(r20)
    953c:	a0800015 	stw	r2,0(r20)
    9540:	1a802336 	bltu	r3,r10,95d0 <_fpadd_parts+0x250>
    9544:	a027883a 	mov	r19,r20
    9548:	9805883a 	mov	r2,r19
    954c:	ddc00717 	ldw	r23,28(sp)
    9550:	dd800617 	ldw	r22,24(sp)
    9554:	dd400517 	ldw	r21,20(sp)
    9558:	dd000417 	ldw	r20,16(sp)
    955c:	dcc00317 	ldw	r19,12(sp)
    9560:	dc800217 	ldw	r18,8(sp)
    9564:	dc400117 	ldw	r17,4(sp)
    9568:	dc000017 	ldw	r16,0(sp)
    956c:	dec00804 	addi	sp,sp,32
    9570:	f800283a 	ret
    9574:	20fff41e 	bne	r4,r3,9548 <_fpadd_parts+0x1c8>
    9578:	31000015 	stw	r4,0(r6)
    957c:	98800117 	ldw	r2,4(r19)
    9580:	30800115 	stw	r2,4(r6)
    9584:	98c00217 	ldw	r3,8(r19)
    9588:	30c00215 	stw	r3,8(r6)
    958c:	98800317 	ldw	r2,12(r19)
    9590:	30800315 	stw	r2,12(r6)
    9594:	98c00417 	ldw	r3,16(r19)
    9598:	30c00415 	stw	r3,16(r6)
    959c:	98800117 	ldw	r2,4(r19)
    95a0:	28c00117 	ldw	r3,4(r5)
    95a4:	3027883a 	mov	r19,r6
    95a8:	10c4703a 	and	r2,r2,r3
    95ac:	30800115 	stw	r2,4(r6)
    95b0:	003fe506 	br	9548 <_fpadd_parts+0x1c8>
    95b4:	1dc02616 	blt	r3,r23,9650 <_fpadd_parts+0x2d0>
    95b8:	0023883a 	mov	r17,zero
    95bc:	182f883a 	mov	r23,r3
    95c0:	0025883a 	mov	r18,zero
    95c4:	003fa806 	br	9468 <_fpadd_parts+0xe8>
    95c8:	a827883a 	mov	r19,r21
    95cc:	003fde06 	br	9548 <_fpadd_parts+0x1c8>
    95d0:	01800044 	movi	r6,1
    95d4:	500497fa 	slli	r2,r10,31
    95d8:	4808d07a 	srli	r4,r9,1
    95dc:	518ad83a 	srl	r5,r10,r6
    95e0:	a2000217 	ldw	r8,8(r20)
    95e4:	1108b03a 	or	r4,r2,r4
    95e8:	0007883a 	mov	r3,zero
    95ec:	4984703a 	and	r2,r9,r6
    95f0:	208cb03a 	or	r6,r4,r2
    95f4:	28ceb03a 	or	r7,r5,r3
    95f8:	42000044 	addi	r8,r8,1
    95fc:	a027883a 	mov	r19,r20
    9600:	a1c00415 	stw	r7,16(r20)
    9604:	a2000215 	stw	r8,8(r20)
    9608:	a1800315 	stw	r6,12(r20)
    960c:	003fce06 	br	9548 <_fpadd_parts+0x1c8>
    9610:	8bc5c83a 	sub	r2,r17,r15
    9614:	8889803a 	cmpltu	r4,r17,r2
    9618:	9407c83a 	sub	r3,r18,r16
    961c:	1909c83a 	sub	r4,r3,r4
    9620:	100d883a 	mov	r6,r2
    9624:	200f883a 	mov	r7,r4
    9628:	003f9906 	br	9490 <_fpadd_parts+0x110>
    962c:	7c45883a 	add	r2,r15,r17
    9630:	13c9803a 	cmpltu	r4,r2,r15
    9634:	8487883a 	add	r3,r16,r18
    9638:	20c9883a 	add	r4,r4,r3
    963c:	a1400115 	stw	r5,4(r20)
    9640:	a5c00215 	stw	r23,8(r20)
    9644:	a0800315 	stw	r2,12(r20)
    9648:	a1000415 	stw	r4,16(r20)
    964c:	003fb606 	br	9528 <_fpadd_parts+0x1a8>
    9650:	001f883a 	mov	r15,zero
    9654:	0021883a 	mov	r16,zero
    9658:	003f8306 	br	9468 <_fpadd_parts+0xe8>
    965c:	018dc83a 	sub	r6,zero,r6
    9660:	003f6706 	br	9400 <_fpadd_parts+0x80>
    9664:	00bfff84 	movi	r2,-2
    9668:	117faf36 	bltu	r2,r5,9528 <_fpadd_parts+0x1a8>
    966c:	003f9806 	br	94d0 <_fpadd_parts+0x150>
    9670:	0005883a 	mov	r2,zero
    9674:	1189c83a 	sub	r4,r2,r6
    9678:	1105803a 	cmpltu	r2,r2,r4
    967c:	01cbc83a 	sub	r5,zero,r7
    9680:	2885c83a 	sub	r2,r5,r2
    9684:	01800044 	movi	r6,1
    9688:	a1800115 	stw	r6,4(r20)
    968c:	a5c00215 	stw	r23,8(r20)
    9690:	a1000315 	stw	r4,12(r20)
    9694:	a0800415 	stw	r2,16(r20)
    9698:	003f8206 	br	94a4 <_fpadd_parts+0x124>
    969c:	203f7226 	beq	r4,zero,9468 <_fpadd_parts+0xe8>
    96a0:	35bff804 	addi	r22,r6,-32
    96a4:	b9af883a 	add	r23,r23,r6
    96a8:	b0003116 	blt	r22,zero,9770 <_fpadd_parts+0x3f0>
    96ac:	959ad83a 	srl	r13,r18,r22
    96b0:	001d883a 	mov	r14,zero
    96b4:	000f883a 	mov	r7,zero
    96b8:	01000044 	movi	r4,1
    96bc:	0011883a 	mov	r8,zero
    96c0:	b0002516 	blt	r22,zero,9758 <_fpadd_parts+0x3d8>
    96c4:	2594983a 	sll	r10,r4,r22
    96c8:	0013883a 	mov	r9,zero
    96cc:	00bfffc4 	movi	r2,-1
    96d0:	4889883a 	add	r4,r9,r2
    96d4:	508b883a 	add	r5,r10,r2
    96d8:	224d803a 	cmpltu	r6,r4,r9
    96dc:	314b883a 	add	r5,r6,r5
    96e0:	8904703a 	and	r2,r17,r4
    96e4:	9146703a 	and	r3,r18,r5
    96e8:	10c4b03a 	or	r2,r2,r3
    96ec:	10000226 	beq	r2,zero,96f8 <_fpadd_parts+0x378>
    96f0:	01c00044 	movi	r7,1
    96f4:	0011883a 	mov	r8,zero
    96f8:	69e2b03a 	or	r17,r13,r7
    96fc:	7224b03a 	or	r18,r14,r8
    9700:	003f5906 	br	9468 <_fpadd_parts+0xe8>
    9704:	8407883a 	add	r3,r16,r16
    9708:	008007c4 	movi	r2,31
    970c:	1185c83a 	sub	r2,r2,r6
    9710:	1886983a 	sll	r3,r3,r2
    9714:	7996d83a 	srl	r11,r15,r6
    9718:	8198d83a 	srl	r12,r16,r6
    971c:	1ad6b03a 	or	r11,r3,r11
    9720:	003f3e06 	br	941c <_fpadd_parts+0x9c>
    9724:	2006d07a 	srli	r3,r4,1
    9728:	008007c4 	movi	r2,31
    972c:	1185c83a 	sub	r2,r2,r6
    9730:	1890d83a 	srl	r8,r3,r2
    9734:	218e983a 	sll	r7,r4,r6
    9738:	003f3e06 	br	9434 <_fpadd_parts+0xb4>
    973c:	113f821e 	bne	r2,r4,9548 <_fpadd_parts+0x1c8>
    9740:	28c00117 	ldw	r3,4(r5)
    9744:	98800117 	ldw	r2,4(r19)
    9748:	10ff7f26 	beq	r2,r3,9548 <_fpadd_parts+0x1c8>
    974c:	04c00074 	movhi	r19,1
    9750:	9cfae704 	addi	r19,r19,-5220
    9754:	003f7c06 	br	9548 <_fpadd_parts+0x1c8>
    9758:	2006d07a 	srli	r3,r4,1
    975c:	008007c4 	movi	r2,31
    9760:	1185c83a 	sub	r2,r2,r6
    9764:	1894d83a 	srl	r10,r3,r2
    9768:	2192983a 	sll	r9,r4,r6
    976c:	003fd706 	br	96cc <_fpadd_parts+0x34c>
    9770:	9487883a 	add	r3,r18,r18
    9774:	008007c4 	movi	r2,31
    9778:	1185c83a 	sub	r2,r2,r6
    977c:	1886983a 	sll	r3,r3,r2
    9780:	899ad83a 	srl	r13,r17,r6
    9784:	919cd83a 	srl	r14,r18,r6
    9788:	1b5ab03a 	or	r13,r3,r13
    978c:	003fc906 	br	96b4 <_fpadd_parts+0x334>

00009790 <__subdf3>:
    9790:	deffea04 	addi	sp,sp,-88
    9794:	dcc01415 	stw	r19,80(sp)
    9798:	dcc00404 	addi	r19,sp,16
    979c:	2011883a 	mov	r8,r4
    97a0:	2813883a 	mov	r9,r5
    97a4:	dc401315 	stw	r17,76(sp)
    97a8:	d809883a 	mov	r4,sp
    97ac:	980b883a 	mov	r5,r19
    97b0:	dc400904 	addi	r17,sp,36
    97b4:	dfc01515 	stw	ra,84(sp)
    97b8:	da400115 	stw	r9,4(sp)
    97bc:	d9c00315 	stw	r7,12(sp)
    97c0:	da000015 	stw	r8,0(sp)
    97c4:	d9800215 	stw	r6,8(sp)
    97c8:	000a7c00 	call	a7c0 <__unpack_d>
    97cc:	d9000204 	addi	r4,sp,8
    97d0:	880b883a 	mov	r5,r17
    97d4:	000a7c00 	call	a7c0 <__unpack_d>
    97d8:	d8800a17 	ldw	r2,40(sp)
    97dc:	880b883a 	mov	r5,r17
    97e0:	9809883a 	mov	r4,r19
    97e4:	d9800e04 	addi	r6,sp,56
    97e8:	1080005c 	xori	r2,r2,1
    97ec:	d8800a15 	stw	r2,40(sp)
    97f0:	00093800 	call	9380 <_fpadd_parts>
    97f4:	1009883a 	mov	r4,r2
    97f8:	000a4ac0 	call	a4ac <__pack_d>
    97fc:	dfc01517 	ldw	ra,84(sp)
    9800:	dcc01417 	ldw	r19,80(sp)
    9804:	dc401317 	ldw	r17,76(sp)
    9808:	dec01604 	addi	sp,sp,88
    980c:	f800283a 	ret

00009810 <__adddf3>:
    9810:	deffea04 	addi	sp,sp,-88
    9814:	dcc01415 	stw	r19,80(sp)
    9818:	dcc00404 	addi	r19,sp,16
    981c:	2011883a 	mov	r8,r4
    9820:	2813883a 	mov	r9,r5
    9824:	dc401315 	stw	r17,76(sp)
    9828:	d809883a 	mov	r4,sp
    982c:	980b883a 	mov	r5,r19
    9830:	dc400904 	addi	r17,sp,36
    9834:	dfc01515 	stw	ra,84(sp)
    9838:	da400115 	stw	r9,4(sp)
    983c:	d9c00315 	stw	r7,12(sp)
    9840:	da000015 	stw	r8,0(sp)
    9844:	d9800215 	stw	r6,8(sp)
    9848:	000a7c00 	call	a7c0 <__unpack_d>
    984c:	d9000204 	addi	r4,sp,8
    9850:	880b883a 	mov	r5,r17
    9854:	000a7c00 	call	a7c0 <__unpack_d>
    9858:	d9800e04 	addi	r6,sp,56
    985c:	9809883a 	mov	r4,r19
    9860:	880b883a 	mov	r5,r17
    9864:	00093800 	call	9380 <_fpadd_parts>
    9868:	1009883a 	mov	r4,r2
    986c:	000a4ac0 	call	a4ac <__pack_d>
    9870:	dfc01517 	ldw	ra,84(sp)
    9874:	dcc01417 	ldw	r19,80(sp)
    9878:	dc401317 	ldw	r17,76(sp)
    987c:	dec01604 	addi	sp,sp,88
    9880:	f800283a 	ret

00009884 <__muldf3>:
    9884:	deffe004 	addi	sp,sp,-128
    9888:	dc401815 	stw	r17,96(sp)
    988c:	dc400404 	addi	r17,sp,16
    9890:	2011883a 	mov	r8,r4
    9894:	2813883a 	mov	r9,r5
    9898:	dc001715 	stw	r16,92(sp)
    989c:	d809883a 	mov	r4,sp
    98a0:	880b883a 	mov	r5,r17
    98a4:	dc000904 	addi	r16,sp,36
    98a8:	dfc01f15 	stw	ra,124(sp)
    98ac:	da400115 	stw	r9,4(sp)
    98b0:	d9c00315 	stw	r7,12(sp)
    98b4:	da000015 	stw	r8,0(sp)
    98b8:	d9800215 	stw	r6,8(sp)
    98bc:	ddc01e15 	stw	r23,120(sp)
    98c0:	dd801d15 	stw	r22,116(sp)
    98c4:	dd401c15 	stw	r21,112(sp)
    98c8:	dd001b15 	stw	r20,108(sp)
    98cc:	dcc01a15 	stw	r19,104(sp)
    98d0:	dc801915 	stw	r18,100(sp)
    98d4:	000a7c00 	call	a7c0 <__unpack_d>
    98d8:	d9000204 	addi	r4,sp,8
    98dc:	800b883a 	mov	r5,r16
    98e0:	000a7c00 	call	a7c0 <__unpack_d>
    98e4:	d9000417 	ldw	r4,16(sp)
    98e8:	00800044 	movi	r2,1
    98ec:	1100102e 	bgeu	r2,r4,9930 <__muldf3+0xac>
    98f0:	d8c00917 	ldw	r3,36(sp)
    98f4:	10c0062e 	bgeu	r2,r3,9910 <__muldf3+0x8c>
    98f8:	00800104 	movi	r2,4
    98fc:	20800a26 	beq	r4,r2,9928 <__muldf3+0xa4>
    9900:	1880cc26 	beq	r3,r2,9c34 <__muldf3+0x3b0>
    9904:	00800084 	movi	r2,2
    9908:	20800926 	beq	r4,r2,9930 <__muldf3+0xac>
    990c:	1880191e 	bne	r3,r2,9974 <__muldf3+0xf0>
    9910:	d8c00a17 	ldw	r3,40(sp)
    9914:	d8800517 	ldw	r2,20(sp)
    9918:	8009883a 	mov	r4,r16
    991c:	10c4c03a 	cmpne	r2,r2,r3
    9920:	d8800a15 	stw	r2,40(sp)
    9924:	00000706 	br	9944 <__muldf3+0xc0>
    9928:	00800084 	movi	r2,2
    992c:	1880c326 	beq	r3,r2,9c3c <__muldf3+0x3b8>
    9930:	d8800517 	ldw	r2,20(sp)
    9934:	d8c00a17 	ldw	r3,40(sp)
    9938:	8809883a 	mov	r4,r17
    993c:	10c4c03a 	cmpne	r2,r2,r3
    9940:	d8800515 	stw	r2,20(sp)
    9944:	000a4ac0 	call	a4ac <__pack_d>
    9948:	dfc01f17 	ldw	ra,124(sp)
    994c:	ddc01e17 	ldw	r23,120(sp)
    9950:	dd801d17 	ldw	r22,116(sp)
    9954:	dd401c17 	ldw	r21,112(sp)
    9958:	dd001b17 	ldw	r20,108(sp)
    995c:	dcc01a17 	ldw	r19,104(sp)
    9960:	dc801917 	ldw	r18,100(sp)
    9964:	dc401817 	ldw	r17,96(sp)
    9968:	dc001717 	ldw	r16,92(sp)
    996c:	dec02004 	addi	sp,sp,128
    9970:	f800283a 	ret
    9974:	dd800717 	ldw	r22,28(sp)
    9978:	dc800c17 	ldw	r18,48(sp)
    997c:	002b883a 	mov	r21,zero
    9980:	0023883a 	mov	r17,zero
    9984:	a80b883a 	mov	r5,r21
    9988:	b00d883a 	mov	r6,r22
    998c:	880f883a 	mov	r7,r17
    9990:	ddc00817 	ldw	r23,32(sp)
    9994:	dcc00d17 	ldw	r19,52(sp)
    9998:	9009883a 	mov	r4,r18
    999c:	00010f80 	call	10f8 <__muldi3>
    99a0:	001b883a 	mov	r13,zero
    99a4:	680f883a 	mov	r7,r13
    99a8:	b009883a 	mov	r4,r22
    99ac:	000b883a 	mov	r5,zero
    99b0:	980d883a 	mov	r6,r19
    99b4:	b82d883a 	mov	r22,r23
    99b8:	002f883a 	mov	r23,zero
    99bc:	db401615 	stw	r13,88(sp)
    99c0:	d8801315 	stw	r2,76(sp)
    99c4:	d8c01415 	stw	r3,80(sp)
    99c8:	dcc01515 	stw	r19,84(sp)
    99cc:	00010f80 	call	10f8 <__muldi3>
    99d0:	b00d883a 	mov	r6,r22
    99d4:	000b883a 	mov	r5,zero
    99d8:	9009883a 	mov	r4,r18
    99dc:	b80f883a 	mov	r7,r23
    99e0:	1021883a 	mov	r16,r2
    99e4:	1823883a 	mov	r17,r3
    99e8:	00010f80 	call	10f8 <__muldi3>
    99ec:	8085883a 	add	r2,r16,r2
    99f0:	140d803a 	cmpltu	r6,r2,r16
    99f4:	88c7883a 	add	r3,r17,r3
    99f8:	30cd883a 	add	r6,r6,r3
    99fc:	1029883a 	mov	r20,r2
    9a00:	302b883a 	mov	r21,r6
    9a04:	da801317 	ldw	r10,76(sp)
    9a08:	dac01417 	ldw	r11,80(sp)
    9a0c:	db001517 	ldw	r12,84(sp)
    9a10:	db401617 	ldw	r13,88(sp)
    9a14:	3440612e 	bgeu	r6,r17,9b9c <__muldf3+0x318>
    9a18:	0009883a 	mov	r4,zero
    9a1c:	5105883a 	add	r2,r10,r4
    9a20:	128d803a 	cmpltu	r6,r2,r10
    9a24:	5d07883a 	add	r3,r11,r20
    9a28:	30cd883a 	add	r6,r6,r3
    9a2c:	0021883a 	mov	r16,zero
    9a30:	04400044 	movi	r17,1
    9a34:	1025883a 	mov	r18,r2
    9a38:	3027883a 	mov	r19,r6
    9a3c:	32c06236 	bltu	r6,r11,9bc8 <__muldf3+0x344>
    9a40:	59807a26 	beq	r11,r6,9c2c <__muldf3+0x3a8>
    9a44:	680b883a 	mov	r5,r13
    9a48:	b80f883a 	mov	r7,r23
    9a4c:	6009883a 	mov	r4,r12
    9a50:	b00d883a 	mov	r6,r22
    9a54:	00010f80 	call	10f8 <__muldi3>
    9a58:	1009883a 	mov	r4,r2
    9a5c:	000f883a 	mov	r7,zero
    9a60:	1545883a 	add	r2,r2,r21
    9a64:	1111803a 	cmpltu	r8,r2,r4
    9a68:	19c7883a 	add	r3,r3,r7
    9a6c:	40c7883a 	add	r3,r8,r3
    9a70:	88cb883a 	add	r5,r17,r3
    9a74:	d8c00617 	ldw	r3,24(sp)
    9a78:	8089883a 	add	r4,r16,r2
    9a7c:	d8800b17 	ldw	r2,44(sp)
    9a80:	18c00104 	addi	r3,r3,4
    9a84:	240d803a 	cmpltu	r6,r4,r16
    9a88:	10c7883a 	add	r3,r2,r3
    9a8c:	2013883a 	mov	r9,r4
    9a90:	d8800a17 	ldw	r2,40(sp)
    9a94:	d9000517 	ldw	r4,20(sp)
    9a98:	314d883a 	add	r6,r6,r5
    9a9c:	3015883a 	mov	r10,r6
    9aa0:	2088c03a 	cmpne	r4,r4,r2
    9aa4:	00880034 	movhi	r2,8192
    9aa8:	10bfffc4 	addi	r2,r2,-1
    9aac:	d9000f15 	stw	r4,60(sp)
    9ab0:	d8c01015 	stw	r3,64(sp)
    9ab4:	1180162e 	bgeu	r2,r6,9b10 <__muldf3+0x28c>
    9ab8:	1811883a 	mov	r8,r3
    9abc:	101f883a 	mov	r15,r2
    9ac0:	980497fa 	slli	r2,r19,31
    9ac4:	9016d07a 	srli	r11,r18,1
    9ac8:	500697fa 	slli	r3,r10,31
    9acc:	480cd07a 	srli	r6,r9,1
    9ad0:	500ed07a 	srli	r7,r10,1
    9ad4:	12d6b03a 	or	r11,r2,r11
    9ad8:	00800044 	movi	r2,1
    9adc:	198cb03a 	or	r6,r3,r6
    9ae0:	4888703a 	and	r4,r9,r2
    9ae4:	9818d07a 	srli	r12,r19,1
    9ae8:	001b883a 	mov	r13,zero
    9aec:	03a00034 	movhi	r14,32768
    9af0:	3013883a 	mov	r9,r6
    9af4:	3815883a 	mov	r10,r7
    9af8:	4091883a 	add	r8,r8,r2
    9afc:	20000226 	beq	r4,zero,9b08 <__muldf3+0x284>
    9b00:	5b64b03a 	or	r18,r11,r13
    9b04:	63a6b03a 	or	r19,r12,r14
    9b08:	7abfed36 	bltu	r15,r10,9ac0 <__muldf3+0x23c>
    9b0c:	da001015 	stw	r8,64(sp)
    9b10:	00840034 	movhi	r2,4096
    9b14:	10bfffc4 	addi	r2,r2,-1
    9b18:	12801436 	bltu	r2,r10,9b6c <__muldf3+0x2e8>
    9b1c:	da001017 	ldw	r8,64(sp)
    9b20:	101f883a 	mov	r15,r2
    9b24:	4a45883a 	add	r2,r9,r9
    9b28:	124d803a 	cmpltu	r6,r2,r9
    9b2c:	5287883a 	add	r3,r10,r10
    9b30:	9497883a 	add	r11,r18,r18
    9b34:	5c8f803a 	cmpltu	r7,r11,r18
    9b38:	9cd9883a 	add	r12,r19,r19
    9b3c:	01000044 	movi	r4,1
    9b40:	30cd883a 	add	r6,r6,r3
    9b44:	3b0f883a 	add	r7,r7,r12
    9b48:	423fffc4 	addi	r8,r8,-1
    9b4c:	1013883a 	mov	r9,r2
    9b50:	3015883a 	mov	r10,r6
    9b54:	111ab03a 	or	r13,r2,r4
    9b58:	98003016 	blt	r19,zero,9c1c <__muldf3+0x398>
    9b5c:	5825883a 	mov	r18,r11
    9b60:	3827883a 	mov	r19,r7
    9b64:	7abfef2e 	bgeu	r15,r10,9b24 <__muldf3+0x2a0>
    9b68:	da001015 	stw	r8,64(sp)
    9b6c:	00803fc4 	movi	r2,255
    9b70:	488e703a 	and	r7,r9,r2
    9b74:	00802004 	movi	r2,128
    9b78:	0007883a 	mov	r3,zero
    9b7c:	0011883a 	mov	r8,zero
    9b80:	38801826 	beq	r7,r2,9be4 <__muldf3+0x360>
    9b84:	008000c4 	movi	r2,3
    9b88:	d9000e04 	addi	r4,sp,56
    9b8c:	da801215 	stw	r10,72(sp)
    9b90:	d8800e15 	stw	r2,56(sp)
    9b94:	da401115 	stw	r9,68(sp)
    9b98:	003f6a06 	br	9944 <__muldf3+0xc0>
    9b9c:	89802126 	beq	r17,r6,9c24 <__muldf3+0x3a0>
    9ba0:	0009883a 	mov	r4,zero
    9ba4:	5105883a 	add	r2,r10,r4
    9ba8:	128d803a 	cmpltu	r6,r2,r10
    9bac:	5d07883a 	add	r3,r11,r20
    9bb0:	30cd883a 	add	r6,r6,r3
    9bb4:	0021883a 	mov	r16,zero
    9bb8:	0023883a 	mov	r17,zero
    9bbc:	1025883a 	mov	r18,r2
    9bc0:	3027883a 	mov	r19,r6
    9bc4:	32ff9e2e 	bgeu	r6,r11,9a40 <__muldf3+0x1bc>
    9bc8:	00800044 	movi	r2,1
    9bcc:	8089883a 	add	r4,r16,r2
    9bd0:	240d803a 	cmpltu	r6,r4,r16
    9bd4:	344d883a 	add	r6,r6,r17
    9bd8:	2021883a 	mov	r16,r4
    9bdc:	3023883a 	mov	r17,r6
    9be0:	003f9806 	br	9a44 <__muldf3+0x1c0>
    9be4:	403fe71e 	bne	r8,zero,9b84 <__muldf3+0x300>
    9be8:	01004004 	movi	r4,256
    9bec:	4904703a 	and	r2,r9,r4
    9bf0:	10c4b03a 	or	r2,r2,r3
    9bf4:	103fe31e 	bne	r2,zero,9b84 <__muldf3+0x300>
    9bf8:	94c4b03a 	or	r2,r18,r19
    9bfc:	103fe126 	beq	r2,zero,9b84 <__muldf3+0x300>
    9c00:	49c5883a 	add	r2,r9,r7
    9c04:	1251803a 	cmpltu	r8,r2,r9
    9c08:	4291883a 	add	r8,r8,r10
    9c0c:	013fc004 	movi	r4,-256
    9c10:	1112703a 	and	r9,r2,r4
    9c14:	4015883a 	mov	r10,r8
    9c18:	003fda06 	br	9b84 <__muldf3+0x300>
    9c1c:	6813883a 	mov	r9,r13
    9c20:	003fce06 	br	9b5c <__muldf3+0x2d8>
    9c24:	143f7c36 	bltu	r2,r16,9a18 <__muldf3+0x194>
    9c28:	003fdd06 	br	9ba0 <__muldf3+0x31c>
    9c2c:	12bf852e 	bgeu	r2,r10,9a44 <__muldf3+0x1c0>
    9c30:	003fe506 	br	9bc8 <__muldf3+0x344>
    9c34:	00800084 	movi	r2,2
    9c38:	20bf351e 	bne	r4,r2,9910 <__muldf3+0x8c>
    9c3c:	01000074 	movhi	r4,1
    9c40:	213ae704 	addi	r4,r4,-5220
    9c44:	003f3f06 	br	9944 <__muldf3+0xc0>

00009c48 <__divdf3>:
    9c48:	deffed04 	addi	sp,sp,-76
    9c4c:	dcc01115 	stw	r19,68(sp)
    9c50:	dcc00404 	addi	r19,sp,16
    9c54:	2011883a 	mov	r8,r4
    9c58:	2813883a 	mov	r9,r5
    9c5c:	dc000e15 	stw	r16,56(sp)
    9c60:	d809883a 	mov	r4,sp
    9c64:	980b883a 	mov	r5,r19
    9c68:	dc000904 	addi	r16,sp,36
    9c6c:	dfc01215 	stw	ra,72(sp)
    9c70:	da400115 	stw	r9,4(sp)
    9c74:	d9c00315 	stw	r7,12(sp)
    9c78:	da000015 	stw	r8,0(sp)
    9c7c:	d9800215 	stw	r6,8(sp)
    9c80:	dc801015 	stw	r18,64(sp)
    9c84:	dc400f15 	stw	r17,60(sp)
    9c88:	000a7c00 	call	a7c0 <__unpack_d>
    9c8c:	d9000204 	addi	r4,sp,8
    9c90:	800b883a 	mov	r5,r16
    9c94:	000a7c00 	call	a7c0 <__unpack_d>
    9c98:	d9000417 	ldw	r4,16(sp)
    9c9c:	00800044 	movi	r2,1
    9ca0:	11000b2e 	bgeu	r2,r4,9cd0 <__divdf3+0x88>
    9ca4:	d9400917 	ldw	r5,36(sp)
    9ca8:	1140762e 	bgeu	r2,r5,9e84 <__divdf3+0x23c>
    9cac:	d8800517 	ldw	r2,20(sp)
    9cb0:	d8c00a17 	ldw	r3,40(sp)
    9cb4:	01800104 	movi	r6,4
    9cb8:	10c4f03a 	xor	r2,r2,r3
    9cbc:	d8800515 	stw	r2,20(sp)
    9cc0:	21800226 	beq	r4,r6,9ccc <__divdf3+0x84>
    9cc4:	00800084 	movi	r2,2
    9cc8:	2080141e 	bne	r4,r2,9d1c <__divdf3+0xd4>
    9ccc:	29000926 	beq	r5,r4,9cf4 <__divdf3+0xac>
    9cd0:	9809883a 	mov	r4,r19
    9cd4:	000a4ac0 	call	a4ac <__pack_d>
    9cd8:	dfc01217 	ldw	ra,72(sp)
    9cdc:	dcc01117 	ldw	r19,68(sp)
    9ce0:	dc801017 	ldw	r18,64(sp)
    9ce4:	dc400f17 	ldw	r17,60(sp)
    9ce8:	dc000e17 	ldw	r16,56(sp)
    9cec:	dec01304 	addi	sp,sp,76
    9cf0:	f800283a 	ret
    9cf4:	01000074 	movhi	r4,1
    9cf8:	213ae704 	addi	r4,r4,-5220
    9cfc:	000a4ac0 	call	a4ac <__pack_d>
    9d00:	dfc01217 	ldw	ra,72(sp)
    9d04:	dcc01117 	ldw	r19,68(sp)
    9d08:	dc801017 	ldw	r18,64(sp)
    9d0c:	dc400f17 	ldw	r17,60(sp)
    9d10:	dc000e17 	ldw	r16,56(sp)
    9d14:	dec01304 	addi	sp,sp,76
    9d18:	f800283a 	ret
    9d1c:	29805b26 	beq	r5,r6,9e8c <__divdf3+0x244>
    9d20:	28802d26 	beq	r5,r2,9dd8 <__divdf3+0x190>
    9d24:	d8c00617 	ldw	r3,24(sp)
    9d28:	d8800b17 	ldw	r2,44(sp)
    9d2c:	d9c00817 	ldw	r7,32(sp)
    9d30:	dc400d17 	ldw	r17,52(sp)
    9d34:	188bc83a 	sub	r5,r3,r2
    9d38:	d9800717 	ldw	r6,28(sp)
    9d3c:	dc000c17 	ldw	r16,48(sp)
    9d40:	d9400615 	stw	r5,24(sp)
    9d44:	3c403836 	bltu	r7,r17,9e28 <__divdf3+0x1e0>
    9d48:	89c03626 	beq	r17,r7,9e24 <__divdf3+0x1dc>
    9d4c:	0015883a 	mov	r10,zero
    9d50:	001d883a 	mov	r14,zero
    9d54:	02c40034 	movhi	r11,4096
    9d58:	001f883a 	mov	r15,zero
    9d5c:	003f883a 	mov	ra,zero
    9d60:	04800f44 	movi	r18,61
    9d64:	00000f06 	br	9da4 <__divdf3+0x15c>
    9d68:	601d883a 	mov	r14,r12
    9d6c:	681f883a 	mov	r15,r13
    9d70:	400d883a 	mov	r6,r8
    9d74:	100f883a 	mov	r7,r2
    9d78:	3191883a 	add	r8,r6,r6
    9d7c:	5808d07a 	srli	r4,r11,1
    9d80:	4185803a 	cmpltu	r2,r8,r6
    9d84:	39d3883a 	add	r9,r7,r7
    9d88:	28c6b03a 	or	r3,r5,r3
    9d8c:	1245883a 	add	r2,r2,r9
    9d90:	1815883a 	mov	r10,r3
    9d94:	2017883a 	mov	r11,r4
    9d98:	400d883a 	mov	r6,r8
    9d9c:	100f883a 	mov	r7,r2
    9da0:	fc801726 	beq	ra,r18,9e00 <__divdf3+0x1b8>
    9da4:	580a97fa 	slli	r5,r11,31
    9da8:	5006d07a 	srli	r3,r10,1
    9dac:	ffc00044 	addi	ra,ra,1
    9db0:	3c7ff136 	bltu	r7,r17,9d78 <__divdf3+0x130>
    9db4:	3411c83a 	sub	r8,r6,r16
    9db8:	3205803a 	cmpltu	r2,r6,r8
    9dbc:	3c53c83a 	sub	r9,r7,r17
    9dc0:	7298b03a 	or	r12,r14,r10
    9dc4:	7adab03a 	or	r13,r15,r11
    9dc8:	4885c83a 	sub	r2,r9,r2
    9dcc:	89ffe61e 	bne	r17,r7,9d68 <__divdf3+0x120>
    9dd0:	343fe936 	bltu	r6,r16,9d78 <__divdf3+0x130>
    9dd4:	003fe406 	br	9d68 <__divdf3+0x120>
    9dd8:	9809883a 	mov	r4,r19
    9ddc:	d9800415 	stw	r6,16(sp)
    9de0:	000a4ac0 	call	a4ac <__pack_d>
    9de4:	dfc01217 	ldw	ra,72(sp)
    9de8:	dcc01117 	ldw	r19,68(sp)
    9dec:	dc801017 	ldw	r18,64(sp)
    9df0:	dc400f17 	ldw	r17,60(sp)
    9df4:	dc000e17 	ldw	r16,56(sp)
    9df8:	dec01304 	addi	sp,sp,76
    9dfc:	f800283a 	ret
    9e00:	00803fc4 	movi	r2,255
    9e04:	7090703a 	and	r8,r14,r2
    9e08:	00802004 	movi	r2,128
    9e0c:	0007883a 	mov	r3,zero
    9e10:	0013883a 	mov	r9,zero
    9e14:	40800d26 	beq	r8,r2,9e4c <__divdf3+0x204>
    9e18:	dbc00815 	stw	r15,32(sp)
    9e1c:	db800715 	stw	r14,28(sp)
    9e20:	003fab06 	br	9cd0 <__divdf3+0x88>
    9e24:	343fc92e 	bgeu	r6,r16,9d4c <__divdf3+0x104>
    9e28:	3185883a 	add	r2,r6,r6
    9e2c:	1189803a 	cmpltu	r4,r2,r6
    9e30:	39c7883a 	add	r3,r7,r7
    9e34:	20c9883a 	add	r4,r4,r3
    9e38:	297fffc4 	addi	r5,r5,-1
    9e3c:	100d883a 	mov	r6,r2
    9e40:	200f883a 	mov	r7,r4
    9e44:	d9400615 	stw	r5,24(sp)
    9e48:	003fc006 	br	9d4c <__divdf3+0x104>
    9e4c:	483ff21e 	bne	r9,zero,9e18 <__divdf3+0x1d0>
    9e50:	01004004 	movi	r4,256
    9e54:	7104703a 	and	r2,r14,r4
    9e58:	10c4b03a 	or	r2,r2,r3
    9e5c:	103fee1e 	bne	r2,zero,9e18 <__divdf3+0x1d0>
    9e60:	31c4b03a 	or	r2,r6,r7
    9e64:	103fec26 	beq	r2,zero,9e18 <__divdf3+0x1d0>
    9e68:	7205883a 	add	r2,r14,r8
    9e6c:	1391803a 	cmpltu	r8,r2,r14
    9e70:	43d1883a 	add	r8,r8,r15
    9e74:	013fc004 	movi	r4,-256
    9e78:	111c703a 	and	r14,r2,r4
    9e7c:	401f883a 	mov	r15,r8
    9e80:	003fe506 	br	9e18 <__divdf3+0x1d0>
    9e84:	8009883a 	mov	r4,r16
    9e88:	003f9206 	br	9cd4 <__divdf3+0x8c>
    9e8c:	9809883a 	mov	r4,r19
    9e90:	d8000715 	stw	zero,28(sp)
    9e94:	d8000815 	stw	zero,32(sp)
    9e98:	d8000615 	stw	zero,24(sp)
    9e9c:	003f8d06 	br	9cd4 <__divdf3+0x8c>

00009ea0 <__eqdf2>:
    9ea0:	deffef04 	addi	sp,sp,-68
    9ea4:	dc400f15 	stw	r17,60(sp)
    9ea8:	dc400404 	addi	r17,sp,16
    9eac:	2005883a 	mov	r2,r4
    9eb0:	2807883a 	mov	r3,r5
    9eb4:	dc000e15 	stw	r16,56(sp)
    9eb8:	d809883a 	mov	r4,sp
    9ebc:	880b883a 	mov	r5,r17
    9ec0:	dc000904 	addi	r16,sp,36
    9ec4:	d8c00115 	stw	r3,4(sp)
    9ec8:	d8800015 	stw	r2,0(sp)
    9ecc:	d9800215 	stw	r6,8(sp)
    9ed0:	dfc01015 	stw	ra,64(sp)
    9ed4:	d9c00315 	stw	r7,12(sp)
    9ed8:	000a7c00 	call	a7c0 <__unpack_d>
    9edc:	d9000204 	addi	r4,sp,8
    9ee0:	800b883a 	mov	r5,r16
    9ee4:	000a7c00 	call	a7c0 <__unpack_d>
    9ee8:	d8800417 	ldw	r2,16(sp)
    9eec:	00c00044 	movi	r3,1
    9ef0:	180d883a 	mov	r6,r3
    9ef4:	1880062e 	bgeu	r3,r2,9f10 <__eqdf2+0x70>
    9ef8:	d8800917 	ldw	r2,36(sp)
    9efc:	8809883a 	mov	r4,r17
    9f00:	800b883a 	mov	r5,r16
    9f04:	1880022e 	bgeu	r3,r2,9f10 <__eqdf2+0x70>
    9f08:	000a8f80 	call	a8f8 <__fpcmp_parts_d>
    9f0c:	100d883a 	mov	r6,r2
    9f10:	3005883a 	mov	r2,r6
    9f14:	dfc01017 	ldw	ra,64(sp)
    9f18:	dc400f17 	ldw	r17,60(sp)
    9f1c:	dc000e17 	ldw	r16,56(sp)
    9f20:	dec01104 	addi	sp,sp,68
    9f24:	f800283a 	ret

00009f28 <__nedf2>:
    9f28:	deffef04 	addi	sp,sp,-68
    9f2c:	dc400f15 	stw	r17,60(sp)
    9f30:	dc400404 	addi	r17,sp,16
    9f34:	2005883a 	mov	r2,r4
    9f38:	2807883a 	mov	r3,r5
    9f3c:	dc000e15 	stw	r16,56(sp)
    9f40:	d809883a 	mov	r4,sp
    9f44:	880b883a 	mov	r5,r17
    9f48:	dc000904 	addi	r16,sp,36
    9f4c:	d8c00115 	stw	r3,4(sp)
    9f50:	d8800015 	stw	r2,0(sp)
    9f54:	d9800215 	stw	r6,8(sp)
    9f58:	dfc01015 	stw	ra,64(sp)
    9f5c:	d9c00315 	stw	r7,12(sp)
    9f60:	000a7c00 	call	a7c0 <__unpack_d>
    9f64:	d9000204 	addi	r4,sp,8
    9f68:	800b883a 	mov	r5,r16
    9f6c:	000a7c00 	call	a7c0 <__unpack_d>
    9f70:	d8800417 	ldw	r2,16(sp)
    9f74:	00c00044 	movi	r3,1
    9f78:	180d883a 	mov	r6,r3
    9f7c:	1880062e 	bgeu	r3,r2,9f98 <__nedf2+0x70>
    9f80:	d8800917 	ldw	r2,36(sp)
    9f84:	8809883a 	mov	r4,r17
    9f88:	800b883a 	mov	r5,r16
    9f8c:	1880022e 	bgeu	r3,r2,9f98 <__nedf2+0x70>
    9f90:	000a8f80 	call	a8f8 <__fpcmp_parts_d>
    9f94:	100d883a 	mov	r6,r2
    9f98:	3005883a 	mov	r2,r6
    9f9c:	dfc01017 	ldw	ra,64(sp)
    9fa0:	dc400f17 	ldw	r17,60(sp)
    9fa4:	dc000e17 	ldw	r16,56(sp)
    9fa8:	dec01104 	addi	sp,sp,68
    9fac:	f800283a 	ret

00009fb0 <__gtdf2>:
    9fb0:	deffef04 	addi	sp,sp,-68
    9fb4:	dc400f15 	stw	r17,60(sp)
    9fb8:	dc400404 	addi	r17,sp,16
    9fbc:	2005883a 	mov	r2,r4
    9fc0:	2807883a 	mov	r3,r5
    9fc4:	dc000e15 	stw	r16,56(sp)
    9fc8:	d809883a 	mov	r4,sp
    9fcc:	880b883a 	mov	r5,r17
    9fd0:	dc000904 	addi	r16,sp,36
    9fd4:	d8c00115 	stw	r3,4(sp)
    9fd8:	d8800015 	stw	r2,0(sp)
    9fdc:	d9800215 	stw	r6,8(sp)
    9fe0:	dfc01015 	stw	ra,64(sp)
    9fe4:	d9c00315 	stw	r7,12(sp)
    9fe8:	000a7c00 	call	a7c0 <__unpack_d>
    9fec:	d9000204 	addi	r4,sp,8
    9ff0:	800b883a 	mov	r5,r16
    9ff4:	000a7c00 	call	a7c0 <__unpack_d>
    9ff8:	d8800417 	ldw	r2,16(sp)
    9ffc:	00c00044 	movi	r3,1
    a000:	01bfffc4 	movi	r6,-1
    a004:	1880062e 	bgeu	r3,r2,a020 <__gtdf2+0x70>
    a008:	d8800917 	ldw	r2,36(sp)
    a00c:	8809883a 	mov	r4,r17
    a010:	800b883a 	mov	r5,r16
    a014:	1880022e 	bgeu	r3,r2,a020 <__gtdf2+0x70>
    a018:	000a8f80 	call	a8f8 <__fpcmp_parts_d>
    a01c:	100d883a 	mov	r6,r2
    a020:	3005883a 	mov	r2,r6
    a024:	dfc01017 	ldw	ra,64(sp)
    a028:	dc400f17 	ldw	r17,60(sp)
    a02c:	dc000e17 	ldw	r16,56(sp)
    a030:	dec01104 	addi	sp,sp,68
    a034:	f800283a 	ret

0000a038 <__gedf2>:
    a038:	deffef04 	addi	sp,sp,-68
    a03c:	dc400f15 	stw	r17,60(sp)
    a040:	dc400404 	addi	r17,sp,16
    a044:	2005883a 	mov	r2,r4
    a048:	2807883a 	mov	r3,r5
    a04c:	dc000e15 	stw	r16,56(sp)
    a050:	d809883a 	mov	r4,sp
    a054:	880b883a 	mov	r5,r17
    a058:	dc000904 	addi	r16,sp,36
    a05c:	d8c00115 	stw	r3,4(sp)
    a060:	d8800015 	stw	r2,0(sp)
    a064:	d9800215 	stw	r6,8(sp)
    a068:	dfc01015 	stw	ra,64(sp)
    a06c:	d9c00315 	stw	r7,12(sp)
    a070:	000a7c00 	call	a7c0 <__unpack_d>
    a074:	d9000204 	addi	r4,sp,8
    a078:	800b883a 	mov	r5,r16
    a07c:	000a7c00 	call	a7c0 <__unpack_d>
    a080:	d8800417 	ldw	r2,16(sp)
    a084:	00c00044 	movi	r3,1
    a088:	01bfffc4 	movi	r6,-1
    a08c:	1880062e 	bgeu	r3,r2,a0a8 <__gedf2+0x70>
    a090:	d8800917 	ldw	r2,36(sp)
    a094:	8809883a 	mov	r4,r17
    a098:	800b883a 	mov	r5,r16
    a09c:	1880022e 	bgeu	r3,r2,a0a8 <__gedf2+0x70>
    a0a0:	000a8f80 	call	a8f8 <__fpcmp_parts_d>
    a0a4:	100d883a 	mov	r6,r2
    a0a8:	3005883a 	mov	r2,r6
    a0ac:	dfc01017 	ldw	ra,64(sp)
    a0b0:	dc400f17 	ldw	r17,60(sp)
    a0b4:	dc000e17 	ldw	r16,56(sp)
    a0b8:	dec01104 	addi	sp,sp,68
    a0bc:	f800283a 	ret

0000a0c0 <__ltdf2>:
    a0c0:	deffef04 	addi	sp,sp,-68
    a0c4:	dc400f15 	stw	r17,60(sp)
    a0c8:	dc400404 	addi	r17,sp,16
    a0cc:	2005883a 	mov	r2,r4
    a0d0:	2807883a 	mov	r3,r5
    a0d4:	dc000e15 	stw	r16,56(sp)
    a0d8:	d809883a 	mov	r4,sp
    a0dc:	880b883a 	mov	r5,r17
    a0e0:	dc000904 	addi	r16,sp,36
    a0e4:	d8c00115 	stw	r3,4(sp)
    a0e8:	d8800015 	stw	r2,0(sp)
    a0ec:	d9800215 	stw	r6,8(sp)
    a0f0:	dfc01015 	stw	ra,64(sp)
    a0f4:	d9c00315 	stw	r7,12(sp)
    a0f8:	000a7c00 	call	a7c0 <__unpack_d>
    a0fc:	d9000204 	addi	r4,sp,8
    a100:	800b883a 	mov	r5,r16
    a104:	000a7c00 	call	a7c0 <__unpack_d>
    a108:	d8800417 	ldw	r2,16(sp)
    a10c:	00c00044 	movi	r3,1
    a110:	180d883a 	mov	r6,r3
    a114:	1880062e 	bgeu	r3,r2,a130 <__ltdf2+0x70>
    a118:	d8800917 	ldw	r2,36(sp)
    a11c:	8809883a 	mov	r4,r17
    a120:	800b883a 	mov	r5,r16
    a124:	1880022e 	bgeu	r3,r2,a130 <__ltdf2+0x70>
    a128:	000a8f80 	call	a8f8 <__fpcmp_parts_d>
    a12c:	100d883a 	mov	r6,r2
    a130:	3005883a 	mov	r2,r6
    a134:	dfc01017 	ldw	ra,64(sp)
    a138:	dc400f17 	ldw	r17,60(sp)
    a13c:	dc000e17 	ldw	r16,56(sp)
    a140:	dec01104 	addi	sp,sp,68
    a144:	f800283a 	ret

0000a148 <__floatsidf>:
    a148:	2006d7fa 	srli	r3,r4,31
    a14c:	defff604 	addi	sp,sp,-40
    a150:	008000c4 	movi	r2,3
    a154:	dfc00915 	stw	ra,36(sp)
    a158:	dcc00815 	stw	r19,32(sp)
    a15c:	dc800715 	stw	r18,28(sp)
    a160:	dc400615 	stw	r17,24(sp)
    a164:	dc000515 	stw	r16,20(sp)
    a168:	d8800015 	stw	r2,0(sp)
    a16c:	d8c00115 	stw	r3,4(sp)
    a170:	20000f1e 	bne	r4,zero,a1b0 <__floatsidf+0x68>
    a174:	00800084 	movi	r2,2
    a178:	d8800015 	stw	r2,0(sp)
    a17c:	d809883a 	mov	r4,sp
    a180:	000a4ac0 	call	a4ac <__pack_d>
    a184:	1009883a 	mov	r4,r2
    a188:	180b883a 	mov	r5,r3
    a18c:	2005883a 	mov	r2,r4
    a190:	2807883a 	mov	r3,r5
    a194:	dfc00917 	ldw	ra,36(sp)
    a198:	dcc00817 	ldw	r19,32(sp)
    a19c:	dc800717 	ldw	r18,28(sp)
    a1a0:	dc400617 	ldw	r17,24(sp)
    a1a4:	dc000517 	ldw	r16,20(sp)
    a1a8:	dec00a04 	addi	sp,sp,40
    a1ac:	f800283a 	ret
    a1b0:	00800f04 	movi	r2,60
    a1b4:	1807003a 	cmpeq	r3,r3,zero
    a1b8:	d8800215 	stw	r2,8(sp)
    a1bc:	18001126 	beq	r3,zero,a204 <__floatsidf+0xbc>
    a1c0:	0027883a 	mov	r19,zero
    a1c4:	2025883a 	mov	r18,r4
    a1c8:	d9000315 	stw	r4,12(sp)
    a1cc:	dcc00415 	stw	r19,16(sp)
    a1d0:	00011900 	call	1190 <__clzsi2>
    a1d4:	11000744 	addi	r4,r2,29
    a1d8:	013fe80e 	bge	zero,r4,a17c <__floatsidf+0x34>
    a1dc:	10bfff44 	addi	r2,r2,-3
    a1e0:	10000c16 	blt	r2,zero,a214 <__floatsidf+0xcc>
    a1e4:	90a2983a 	sll	r17,r18,r2
    a1e8:	0021883a 	mov	r16,zero
    a1ec:	d8800217 	ldw	r2,8(sp)
    a1f0:	dc400415 	stw	r17,16(sp)
    a1f4:	dc000315 	stw	r16,12(sp)
    a1f8:	1105c83a 	sub	r2,r2,r4
    a1fc:	d8800215 	stw	r2,8(sp)
    a200:	003fde06 	br	a17c <__floatsidf+0x34>
    a204:	00a00034 	movhi	r2,32768
    a208:	20800a26 	beq	r4,r2,a234 <__floatsidf+0xec>
    a20c:	0109c83a 	sub	r4,zero,r4
    a210:	003feb06 	br	a1c0 <__floatsidf+0x78>
    a214:	9006d07a 	srli	r3,r18,1
    a218:	008007c4 	movi	r2,31
    a21c:	1105c83a 	sub	r2,r2,r4
    a220:	1886d83a 	srl	r3,r3,r2
    a224:	9922983a 	sll	r17,r19,r4
    a228:	9120983a 	sll	r16,r18,r4
    a22c:	1c62b03a 	or	r17,r3,r17
    a230:	003fee06 	br	a1ec <__floatsidf+0xa4>
    a234:	0009883a 	mov	r4,zero
    a238:	01707834 	movhi	r5,49632
    a23c:	003fd306 	br	a18c <__floatsidf+0x44>

0000a240 <__fixdfsi>:
    a240:	defff804 	addi	sp,sp,-32
    a244:	2005883a 	mov	r2,r4
    a248:	2807883a 	mov	r3,r5
    a24c:	d809883a 	mov	r4,sp
    a250:	d9400204 	addi	r5,sp,8
    a254:	d8c00115 	stw	r3,4(sp)
    a258:	d8800015 	stw	r2,0(sp)
    a25c:	dfc00715 	stw	ra,28(sp)
    a260:	000a7c00 	call	a7c0 <__unpack_d>
    a264:	d8c00217 	ldw	r3,8(sp)
    a268:	00800084 	movi	r2,2
    a26c:	1880051e 	bne	r3,r2,a284 <__fixdfsi+0x44>
    a270:	0007883a 	mov	r3,zero
    a274:	1805883a 	mov	r2,r3
    a278:	dfc00717 	ldw	ra,28(sp)
    a27c:	dec00804 	addi	sp,sp,32
    a280:	f800283a 	ret
    a284:	00800044 	movi	r2,1
    a288:	10fff92e 	bgeu	r2,r3,a270 <__fixdfsi+0x30>
    a28c:	00800104 	movi	r2,4
    a290:	18800426 	beq	r3,r2,a2a4 <__fixdfsi+0x64>
    a294:	d8c00417 	ldw	r3,16(sp)
    a298:	183ff516 	blt	r3,zero,a270 <__fixdfsi+0x30>
    a29c:	00800784 	movi	r2,30
    a2a0:	10c0080e 	bge	r2,r3,a2c4 <__fixdfsi+0x84>
    a2a4:	d8800317 	ldw	r2,12(sp)
    a2a8:	1000121e 	bne	r2,zero,a2f4 <__fixdfsi+0xb4>
    a2ac:	00e00034 	movhi	r3,32768
    a2b0:	18ffffc4 	addi	r3,r3,-1
    a2b4:	1805883a 	mov	r2,r3
    a2b8:	dfc00717 	ldw	ra,28(sp)
    a2bc:	dec00804 	addi	sp,sp,32
    a2c0:	f800283a 	ret
    a2c4:	00800f04 	movi	r2,60
    a2c8:	10d1c83a 	sub	r8,r2,r3
    a2cc:	40bff804 	addi	r2,r8,-32
    a2d0:	d9800517 	ldw	r6,20(sp)
    a2d4:	d9c00617 	ldw	r7,24(sp)
    a2d8:	10000816 	blt	r2,zero,a2fc <__fixdfsi+0xbc>
    a2dc:	3888d83a 	srl	r4,r7,r2
    a2e0:	d8800317 	ldw	r2,12(sp)
    a2e4:	2007883a 	mov	r3,r4
    a2e8:	103fe226 	beq	r2,zero,a274 <__fixdfsi+0x34>
    a2ec:	0107c83a 	sub	r3,zero,r4
    a2f0:	003fe006 	br	a274 <__fixdfsi+0x34>
    a2f4:	00e00034 	movhi	r3,32768
    a2f8:	003fde06 	br	a274 <__fixdfsi+0x34>
    a2fc:	39c7883a 	add	r3,r7,r7
    a300:	008007c4 	movi	r2,31
    a304:	1205c83a 	sub	r2,r2,r8
    a308:	1886983a 	sll	r3,r3,r2
    a30c:	3208d83a 	srl	r4,r6,r8
    a310:	1908b03a 	or	r4,r3,r4
    a314:	003ff206 	br	a2e0 <__fixdfsi+0xa0>

0000a318 <__floatunsidf>:
    a318:	defff204 	addi	sp,sp,-56
    a31c:	dfc00d15 	stw	ra,52(sp)
    a320:	ddc00c15 	stw	r23,48(sp)
    a324:	dd800b15 	stw	r22,44(sp)
    a328:	dd400a15 	stw	r21,40(sp)
    a32c:	dd000915 	stw	r20,36(sp)
    a330:	dcc00815 	stw	r19,32(sp)
    a334:	dc800715 	stw	r18,28(sp)
    a338:	dc400615 	stw	r17,24(sp)
    a33c:	dc000515 	stw	r16,20(sp)
    a340:	d8000115 	stw	zero,4(sp)
    a344:	20000f1e 	bne	r4,zero,a384 <__floatunsidf+0x6c>
    a348:	00800084 	movi	r2,2
    a34c:	d8800015 	stw	r2,0(sp)
    a350:	d809883a 	mov	r4,sp
    a354:	000a4ac0 	call	a4ac <__pack_d>
    a358:	dfc00d17 	ldw	ra,52(sp)
    a35c:	ddc00c17 	ldw	r23,48(sp)
    a360:	dd800b17 	ldw	r22,44(sp)
    a364:	dd400a17 	ldw	r21,40(sp)
    a368:	dd000917 	ldw	r20,36(sp)
    a36c:	dcc00817 	ldw	r19,32(sp)
    a370:	dc800717 	ldw	r18,28(sp)
    a374:	dc400617 	ldw	r17,24(sp)
    a378:	dc000517 	ldw	r16,20(sp)
    a37c:	dec00e04 	addi	sp,sp,56
    a380:	f800283a 	ret
    a384:	008000c4 	movi	r2,3
    a388:	00c00f04 	movi	r3,60
    a38c:	002f883a 	mov	r23,zero
    a390:	202d883a 	mov	r22,r4
    a394:	d8800015 	stw	r2,0(sp)
    a398:	d8c00215 	stw	r3,8(sp)
    a39c:	d9000315 	stw	r4,12(sp)
    a3a0:	ddc00415 	stw	r23,16(sp)
    a3a4:	00011900 	call	1190 <__clzsi2>
    a3a8:	12400744 	addi	r9,r2,29
    a3ac:	48000b16 	blt	r9,zero,a3dc <__floatunsidf+0xc4>
    a3b0:	483fe726 	beq	r9,zero,a350 <__floatunsidf+0x38>
    a3b4:	10bfff44 	addi	r2,r2,-3
    a3b8:	10002e16 	blt	r2,zero,a474 <__floatunsidf+0x15c>
    a3bc:	b0a2983a 	sll	r17,r22,r2
    a3c0:	0021883a 	mov	r16,zero
    a3c4:	d8800217 	ldw	r2,8(sp)
    a3c8:	dc400415 	stw	r17,16(sp)
    a3cc:	dc000315 	stw	r16,12(sp)
    a3d0:	1245c83a 	sub	r2,r2,r9
    a3d4:	d8800215 	stw	r2,8(sp)
    a3d8:	003fdd06 	br	a350 <__floatunsidf+0x38>
    a3dc:	0255c83a 	sub	r10,zero,r9
    a3e0:	51bff804 	addi	r6,r10,-32
    a3e4:	30001b16 	blt	r6,zero,a454 <__floatunsidf+0x13c>
    a3e8:	b9a8d83a 	srl	r20,r23,r6
    a3ec:	002b883a 	mov	r21,zero
    a3f0:	000f883a 	mov	r7,zero
    a3f4:	01000044 	movi	r4,1
    a3f8:	0011883a 	mov	r8,zero
    a3fc:	30002516 	blt	r6,zero,a494 <__floatunsidf+0x17c>
    a400:	21a6983a 	sll	r19,r4,r6
    a404:	0025883a 	mov	r18,zero
    a408:	00bfffc4 	movi	r2,-1
    a40c:	9089883a 	add	r4,r18,r2
    a410:	988b883a 	add	r5,r19,r2
    a414:	248d803a 	cmpltu	r6,r4,r18
    a418:	314b883a 	add	r5,r6,r5
    a41c:	b104703a 	and	r2,r22,r4
    a420:	b946703a 	and	r3,r23,r5
    a424:	10c4b03a 	or	r2,r2,r3
    a428:	10000226 	beq	r2,zero,a434 <__floatunsidf+0x11c>
    a42c:	01c00044 	movi	r7,1
    a430:	0011883a 	mov	r8,zero
    a434:	d9000217 	ldw	r4,8(sp)
    a438:	a1c4b03a 	or	r2,r20,r7
    a43c:	aa06b03a 	or	r3,r21,r8
    a440:	2249c83a 	sub	r4,r4,r9
    a444:	d8c00415 	stw	r3,16(sp)
    a448:	d9000215 	stw	r4,8(sp)
    a44c:	d8800315 	stw	r2,12(sp)
    a450:	003fbf06 	br	a350 <__floatunsidf+0x38>
    a454:	bdc7883a 	add	r3,r23,r23
    a458:	008007c4 	movi	r2,31
    a45c:	1285c83a 	sub	r2,r2,r10
    a460:	1886983a 	sll	r3,r3,r2
    a464:	b2a8d83a 	srl	r20,r22,r10
    a468:	baaad83a 	srl	r21,r23,r10
    a46c:	1d28b03a 	or	r20,r3,r20
    a470:	003fdf06 	br	a3f0 <__floatunsidf+0xd8>
    a474:	b006d07a 	srli	r3,r22,1
    a478:	008007c4 	movi	r2,31
    a47c:	1245c83a 	sub	r2,r2,r9
    a480:	1886d83a 	srl	r3,r3,r2
    a484:	ba62983a 	sll	r17,r23,r9
    a488:	b260983a 	sll	r16,r22,r9
    a48c:	1c62b03a 	or	r17,r3,r17
    a490:	003fcc06 	br	a3c4 <__floatunsidf+0xac>
    a494:	2006d07a 	srli	r3,r4,1
    a498:	008007c4 	movi	r2,31
    a49c:	1285c83a 	sub	r2,r2,r10
    a4a0:	18a6d83a 	srl	r19,r3,r2
    a4a4:	22a4983a 	sll	r18,r4,r10
    a4a8:	003fd706 	br	a408 <__floatunsidf+0xf0>

0000a4ac <__pack_d>:
    a4ac:	20c00017 	ldw	r3,0(r4)
    a4b0:	defffd04 	addi	sp,sp,-12
    a4b4:	dc000015 	stw	r16,0(sp)
    a4b8:	dc800215 	stw	r18,8(sp)
    a4bc:	dc400115 	stw	r17,4(sp)
    a4c0:	00800044 	movi	r2,1
    a4c4:	22000317 	ldw	r8,12(r4)
    a4c8:	001f883a 	mov	r15,zero
    a4cc:	22400417 	ldw	r9,16(r4)
    a4d0:	24000117 	ldw	r16,4(r4)
    a4d4:	10c0552e 	bgeu	r2,r3,a62c <__pack_d+0x180>
    a4d8:	00800104 	movi	r2,4
    a4dc:	18804f26 	beq	r3,r2,a61c <__pack_d+0x170>
    a4e0:	00800084 	movi	r2,2
    a4e4:	18800226 	beq	r3,r2,a4f0 <__pack_d+0x44>
    a4e8:	4244b03a 	or	r2,r8,r9
    a4ec:	10001a1e 	bne	r2,zero,a558 <__pack_d+0xac>
    a4f0:	000d883a 	mov	r6,zero
    a4f4:	000f883a 	mov	r7,zero
    a4f8:	0011883a 	mov	r8,zero
    a4fc:	00800434 	movhi	r2,16
    a500:	10bfffc4 	addi	r2,r2,-1
    a504:	301d883a 	mov	r14,r6
    a508:	3884703a 	and	r2,r7,r2
    a50c:	400a953a 	slli	r5,r8,20
    a510:	79bffc2c 	andhi	r6,r15,65520
    a514:	308cb03a 	or	r6,r6,r2
    a518:	00e00434 	movhi	r3,32784
    a51c:	18ffffc4 	addi	r3,r3,-1
    a520:	800497fa 	slli	r2,r16,31
    a524:	30c6703a 	and	r3,r6,r3
    a528:	1946b03a 	or	r3,r3,r5
    a52c:	01600034 	movhi	r5,32768
    a530:	297fffc4 	addi	r5,r5,-1
    a534:	194a703a 	and	r5,r3,r5
    a538:	288ab03a 	or	r5,r5,r2
    a53c:	2807883a 	mov	r3,r5
    a540:	7005883a 	mov	r2,r14
    a544:	dc800217 	ldw	r18,8(sp)
    a548:	dc400117 	ldw	r17,4(sp)
    a54c:	dc000017 	ldw	r16,0(sp)
    a550:	dec00304 	addi	sp,sp,12
    a554:	f800283a 	ret
    a558:	21000217 	ldw	r4,8(r4)
    a55c:	00bf0084 	movi	r2,-1022
    a560:	20803f16 	blt	r4,r2,a660 <__pack_d+0x1b4>
    a564:	0080ffc4 	movi	r2,1023
    a568:	11002c16 	blt	r2,r4,a61c <__pack_d+0x170>
    a56c:	00803fc4 	movi	r2,255
    a570:	408c703a 	and	r6,r8,r2
    a574:	00802004 	movi	r2,128
    a578:	0007883a 	mov	r3,zero
    a57c:	000f883a 	mov	r7,zero
    a580:	2280ffc4 	addi	r10,r4,1023
    a584:	30801e26 	beq	r6,r2,a600 <__pack_d+0x154>
    a588:	00801fc4 	movi	r2,127
    a58c:	4089883a 	add	r4,r8,r2
    a590:	220d803a 	cmpltu	r6,r4,r8
    a594:	324d883a 	add	r6,r6,r9
    a598:	2011883a 	mov	r8,r4
    a59c:	3013883a 	mov	r9,r6
    a5a0:	00880034 	movhi	r2,8192
    a5a4:	10bfffc4 	addi	r2,r2,-1
    a5a8:	12400d36 	bltu	r2,r9,a5e0 <__pack_d+0x134>
    a5ac:	4804963a 	slli	r2,r9,24
    a5b0:	400cd23a 	srli	r6,r8,8
    a5b4:	480ed23a 	srli	r7,r9,8
    a5b8:	013fffc4 	movi	r4,-1
    a5bc:	118cb03a 	or	r6,r2,r6
    a5c0:	01400434 	movhi	r5,16
    a5c4:	297fffc4 	addi	r5,r5,-1
    a5c8:	3104703a 	and	r2,r6,r4
    a5cc:	3946703a 	and	r3,r7,r5
    a5d0:	5201ffcc 	andi	r8,r10,2047
    a5d4:	100d883a 	mov	r6,r2
    a5d8:	180f883a 	mov	r7,r3
    a5dc:	003fc706 	br	a4fc <__pack_d+0x50>
    a5e0:	480897fa 	slli	r4,r9,31
    a5e4:	4004d07a 	srli	r2,r8,1
    a5e8:	4806d07a 	srli	r3,r9,1
    a5ec:	52800044 	addi	r10,r10,1
    a5f0:	2084b03a 	or	r2,r4,r2
    a5f4:	1011883a 	mov	r8,r2
    a5f8:	1813883a 	mov	r9,r3
    a5fc:	003feb06 	br	a5ac <__pack_d+0x100>
    a600:	383fe11e 	bne	r7,zero,a588 <__pack_d+0xdc>
    a604:	01004004 	movi	r4,256
    a608:	4104703a 	and	r2,r8,r4
    a60c:	10c4b03a 	or	r2,r2,r3
    a610:	103fe326 	beq	r2,zero,a5a0 <__pack_d+0xf4>
    a614:	3005883a 	mov	r2,r6
    a618:	003fdc06 	br	a58c <__pack_d+0xe0>
    a61c:	000d883a 	mov	r6,zero
    a620:	000f883a 	mov	r7,zero
    a624:	0201ffc4 	movi	r8,2047
    a628:	003fb406 	br	a4fc <__pack_d+0x50>
    a62c:	0005883a 	mov	r2,zero
    a630:	00c00234 	movhi	r3,8
    a634:	408cb03a 	or	r6,r8,r2
    a638:	48ceb03a 	or	r7,r9,r3
    a63c:	013fffc4 	movi	r4,-1
    a640:	01400434 	movhi	r5,16
    a644:	297fffc4 	addi	r5,r5,-1
    a648:	3104703a 	and	r2,r6,r4
    a64c:	3946703a 	and	r3,r7,r5
    a650:	100d883a 	mov	r6,r2
    a654:	180f883a 	mov	r7,r3
    a658:	0201ffc4 	movi	r8,2047
    a65c:	003fa706 	br	a4fc <__pack_d+0x50>
    a660:	1109c83a 	sub	r4,r2,r4
    a664:	00800e04 	movi	r2,56
    a668:	11004316 	blt	r2,r4,a778 <__pack_d+0x2cc>
    a66c:	21fff804 	addi	r7,r4,-32
    a670:	38004516 	blt	r7,zero,a788 <__pack_d+0x2dc>
    a674:	49d8d83a 	srl	r12,r9,r7
    a678:	001b883a 	mov	r13,zero
    a67c:	0023883a 	mov	r17,zero
    a680:	01400044 	movi	r5,1
    a684:	0025883a 	mov	r18,zero
    a688:	38004716 	blt	r7,zero,a7a8 <__pack_d+0x2fc>
    a68c:	29d6983a 	sll	r11,r5,r7
    a690:	0015883a 	mov	r10,zero
    a694:	00bfffc4 	movi	r2,-1
    a698:	5089883a 	add	r4,r10,r2
    a69c:	588b883a 	add	r5,r11,r2
    a6a0:	228d803a 	cmpltu	r6,r4,r10
    a6a4:	314b883a 	add	r5,r6,r5
    a6a8:	4104703a 	and	r2,r8,r4
    a6ac:	4946703a 	and	r3,r9,r5
    a6b0:	10c4b03a 	or	r2,r2,r3
    a6b4:	10000226 	beq	r2,zero,a6c0 <__pack_d+0x214>
    a6b8:	04400044 	movi	r17,1
    a6bc:	0025883a 	mov	r18,zero
    a6c0:	00803fc4 	movi	r2,255
    a6c4:	644eb03a 	or	r7,r12,r17
    a6c8:	3892703a 	and	r9,r7,r2
    a6cc:	00802004 	movi	r2,128
    a6d0:	6c90b03a 	or	r8,r13,r18
    a6d4:	0015883a 	mov	r10,zero
    a6d8:	48801626 	beq	r9,r2,a734 <__pack_d+0x288>
    a6dc:	01001fc4 	movi	r4,127
    a6e0:	3905883a 	add	r2,r7,r4
    a6e4:	11cd803a 	cmpltu	r6,r2,r7
    a6e8:	320d883a 	add	r6,r6,r8
    a6ec:	100f883a 	mov	r7,r2
    a6f0:	00840034 	movhi	r2,4096
    a6f4:	10bfffc4 	addi	r2,r2,-1
    a6f8:	3011883a 	mov	r8,r6
    a6fc:	0007883a 	mov	r3,zero
    a700:	11801b36 	bltu	r2,r6,a770 <__pack_d+0x2c4>
    a704:	4004963a 	slli	r2,r8,24
    a708:	3808d23a 	srli	r4,r7,8
    a70c:	400ad23a 	srli	r5,r8,8
    a710:	1813883a 	mov	r9,r3
    a714:	1108b03a 	or	r4,r2,r4
    a718:	00bfffc4 	movi	r2,-1
    a71c:	00c00434 	movhi	r3,16
    a720:	18ffffc4 	addi	r3,r3,-1
    a724:	208c703a 	and	r6,r4,r2
    a728:	28ce703a 	and	r7,r5,r3
    a72c:	4a01ffcc 	andi	r8,r9,2047
    a730:	003f7206 	br	a4fc <__pack_d+0x50>
    a734:	503fe91e 	bne	r10,zero,a6dc <__pack_d+0x230>
    a738:	01004004 	movi	r4,256
    a73c:	3904703a 	and	r2,r7,r4
    a740:	0007883a 	mov	r3,zero
    a744:	10c4b03a 	or	r2,r2,r3
    a748:	10000626 	beq	r2,zero,a764 <__pack_d+0x2b8>
    a74c:	3a45883a 	add	r2,r7,r9
    a750:	11cd803a 	cmpltu	r6,r2,r7
    a754:	320d883a 	add	r6,r6,r8
    a758:	100f883a 	mov	r7,r2
    a75c:	3011883a 	mov	r8,r6
    a760:	0007883a 	mov	r3,zero
    a764:	00840034 	movhi	r2,4096
    a768:	10bfffc4 	addi	r2,r2,-1
    a76c:	123fe52e 	bgeu	r2,r8,a704 <__pack_d+0x258>
    a770:	00c00044 	movi	r3,1
    a774:	003fe306 	br	a704 <__pack_d+0x258>
    a778:	0009883a 	mov	r4,zero
    a77c:	0013883a 	mov	r9,zero
    a780:	000b883a 	mov	r5,zero
    a784:	003fe406 	br	a718 <__pack_d+0x26c>
    a788:	4a47883a 	add	r3,r9,r9
    a78c:	008007c4 	movi	r2,31
    a790:	1105c83a 	sub	r2,r2,r4
    a794:	1886983a 	sll	r3,r3,r2
    a798:	4118d83a 	srl	r12,r8,r4
    a79c:	491ad83a 	srl	r13,r9,r4
    a7a0:	1b18b03a 	or	r12,r3,r12
    a7a4:	003fb506 	br	a67c <__pack_d+0x1d0>
    a7a8:	2806d07a 	srli	r3,r5,1
    a7ac:	008007c4 	movi	r2,31
    a7b0:	1105c83a 	sub	r2,r2,r4
    a7b4:	1896d83a 	srl	r11,r3,r2
    a7b8:	2914983a 	sll	r10,r5,r4
    a7bc:	003fb506 	br	a694 <__pack_d+0x1e8>

0000a7c0 <__unpack_d>:
    a7c0:	20c00117 	ldw	r3,4(r4)
    a7c4:	22400017 	ldw	r9,0(r4)
    a7c8:	00800434 	movhi	r2,16
    a7cc:	10bfffc4 	addi	r2,r2,-1
    a7d0:	1808d53a 	srli	r4,r3,20
    a7d4:	180cd7fa 	srli	r6,r3,31
    a7d8:	1894703a 	and	r10,r3,r2
    a7dc:	2201ffcc 	andi	r8,r4,2047
    a7e0:	281b883a 	mov	r13,r5
    a7e4:	4817883a 	mov	r11,r9
    a7e8:	29800115 	stw	r6,4(r5)
    a7ec:	5019883a 	mov	r12,r10
    a7f0:	40001e1e 	bne	r8,zero,a86c <__unpack_d+0xac>
    a7f4:	4a84b03a 	or	r2,r9,r10
    a7f8:	10001926 	beq	r2,zero,a860 <__unpack_d+0xa0>
    a7fc:	4804d63a 	srli	r2,r9,24
    a800:	500c923a 	slli	r6,r10,8
    a804:	013f0084 	movi	r4,-1022
    a808:	00c40034 	movhi	r3,4096
    a80c:	18ffffc4 	addi	r3,r3,-1
    a810:	118cb03a 	or	r6,r2,r6
    a814:	008000c4 	movi	r2,3
    a818:	480a923a 	slli	r5,r9,8
    a81c:	68800015 	stw	r2,0(r13)
    a820:	69000215 	stw	r4,8(r13)
    a824:	19800b36 	bltu	r3,r6,a854 <__unpack_d+0x94>
    a828:	200f883a 	mov	r7,r4
    a82c:	1811883a 	mov	r8,r3
    a830:	2945883a 	add	r2,r5,r5
    a834:	1149803a 	cmpltu	r4,r2,r5
    a838:	3187883a 	add	r3,r6,r6
    a83c:	20c9883a 	add	r4,r4,r3
    a840:	100b883a 	mov	r5,r2
    a844:	200d883a 	mov	r6,r4
    a848:	39ffffc4 	addi	r7,r7,-1
    a84c:	413ff82e 	bgeu	r8,r4,a830 <__unpack_d+0x70>
    a850:	69c00215 	stw	r7,8(r13)
    a854:	69800415 	stw	r6,16(r13)
    a858:	69400315 	stw	r5,12(r13)
    a85c:	f800283a 	ret
    a860:	00800084 	movi	r2,2
    a864:	28800015 	stw	r2,0(r5)
    a868:	f800283a 	ret
    a86c:	0081ffc4 	movi	r2,2047
    a870:	40800f26 	beq	r8,r2,a8b0 <__unpack_d+0xf0>
    a874:	480cd63a 	srli	r6,r9,24
    a878:	5006923a 	slli	r3,r10,8
    a87c:	4804923a 	slli	r2,r9,8
    a880:	0009883a 	mov	r4,zero
    a884:	30c6b03a 	or	r3,r6,r3
    a888:	01440034 	movhi	r5,4096
    a88c:	110cb03a 	or	r6,r2,r4
    a890:	423f0044 	addi	r8,r8,-1023
    a894:	194eb03a 	or	r7,r3,r5
    a898:	008000c4 	movi	r2,3
    a89c:	69c00415 	stw	r7,16(r13)
    a8a0:	6a000215 	stw	r8,8(r13)
    a8a4:	68800015 	stw	r2,0(r13)
    a8a8:	69800315 	stw	r6,12(r13)
    a8ac:	f800283a 	ret
    a8b0:	4a84b03a 	or	r2,r9,r10
    a8b4:	1000031e 	bne	r2,zero,a8c4 <__unpack_d+0x104>
    a8b8:	00800104 	movi	r2,4
    a8bc:	28800015 	stw	r2,0(r5)
    a8c0:	f800283a 	ret
    a8c4:	0009883a 	mov	r4,zero
    a8c8:	01400234 	movhi	r5,8
    a8cc:	4904703a 	and	r2,r9,r4
    a8d0:	5146703a 	and	r3,r10,r5
    a8d4:	10c4b03a 	or	r2,r2,r3
    a8d8:	10000526 	beq	r2,zero,a8f0 <__unpack_d+0x130>
    a8dc:	00800044 	movi	r2,1
    a8e0:	68800015 	stw	r2,0(r13)
    a8e4:	6b000415 	stw	r12,16(r13)
    a8e8:	6ac00315 	stw	r11,12(r13)
    a8ec:	f800283a 	ret
    a8f0:	68000015 	stw	zero,0(r13)
    a8f4:	003ffb06 	br	a8e4 <__unpack_d+0x124>

0000a8f8 <__fpcmp_parts_d>:
    a8f8:	21800017 	ldw	r6,0(r4)
    a8fc:	00c00044 	movi	r3,1
    a900:	19800a2e 	bgeu	r3,r6,a92c <__fpcmp_parts_d+0x34>
    a904:	28800017 	ldw	r2,0(r5)
    a908:	1880082e 	bgeu	r3,r2,a92c <__fpcmp_parts_d+0x34>
    a90c:	00c00104 	movi	r3,4
    a910:	30c02626 	beq	r6,r3,a9ac <__fpcmp_parts_d+0xb4>
    a914:	10c02226 	beq	r2,r3,a9a0 <__fpcmp_parts_d+0xa8>
    a918:	00c00084 	movi	r3,2
    a91c:	30c00526 	beq	r6,r3,a934 <__fpcmp_parts_d+0x3c>
    a920:	10c0071e 	bne	r2,r3,a940 <__fpcmp_parts_d+0x48>
    a924:	20800117 	ldw	r2,4(r4)
    a928:	1000091e 	bne	r2,zero,a950 <__fpcmp_parts_d+0x58>
    a92c:	00800044 	movi	r2,1
    a930:	f800283a 	ret
    a934:	10c01a1e 	bne	r2,r3,a9a0 <__fpcmp_parts_d+0xa8>
    a938:	0005883a 	mov	r2,zero
    a93c:	f800283a 	ret
    a940:	22000117 	ldw	r8,4(r4)
    a944:	28800117 	ldw	r2,4(r5)
    a948:	40800326 	beq	r8,r2,a958 <__fpcmp_parts_d+0x60>
    a94c:	403ff726 	beq	r8,zero,a92c <__fpcmp_parts_d+0x34>
    a950:	00bfffc4 	movi	r2,-1
    a954:	f800283a 	ret
    a958:	20c00217 	ldw	r3,8(r4)
    a95c:	28800217 	ldw	r2,8(r5)
    a960:	10fffa16 	blt	r2,r3,a94c <__fpcmp_parts_d+0x54>
    a964:	18800916 	blt	r3,r2,a98c <__fpcmp_parts_d+0x94>
    a968:	21c00417 	ldw	r7,16(r4)
    a96c:	28c00417 	ldw	r3,16(r5)
    a970:	21800317 	ldw	r6,12(r4)
    a974:	28800317 	ldw	r2,12(r5)
    a978:	19fff436 	bltu	r3,r7,a94c <__fpcmp_parts_d+0x54>
    a97c:	38c00526 	beq	r7,r3,a994 <__fpcmp_parts_d+0x9c>
    a980:	38c00236 	bltu	r7,r3,a98c <__fpcmp_parts_d+0x94>
    a984:	19ffec1e 	bne	r3,r7,a938 <__fpcmp_parts_d+0x40>
    a988:	30bfeb2e 	bgeu	r6,r2,a938 <__fpcmp_parts_d+0x40>
    a98c:	403fe71e 	bne	r8,zero,a92c <__fpcmp_parts_d+0x34>
    a990:	003fef06 	br	a950 <__fpcmp_parts_d+0x58>
    a994:	11bffa2e 	bgeu	r2,r6,a980 <__fpcmp_parts_d+0x88>
    a998:	403fe426 	beq	r8,zero,a92c <__fpcmp_parts_d+0x34>
    a99c:	003fec06 	br	a950 <__fpcmp_parts_d+0x58>
    a9a0:	28800117 	ldw	r2,4(r5)
    a9a4:	103fe11e 	bne	r2,zero,a92c <__fpcmp_parts_d+0x34>
    a9a8:	003fe906 	br	a950 <__fpcmp_parts_d+0x58>
    a9ac:	11bfdd1e 	bne	r2,r6,a924 <__fpcmp_parts_d+0x2c>
    a9b0:	28c00117 	ldw	r3,4(r5)
    a9b4:	20800117 	ldw	r2,4(r4)
    a9b8:	1885c83a 	sub	r2,r3,r2
    a9bc:	f800283a 	ret

0000a9c0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    a9c0:	defff804 	addi	sp,sp,-32
    a9c4:	dfc00715 	stw	ra,28(sp)
    a9c8:	df000615 	stw	fp,24(sp)
    a9cc:	df000604 	addi	fp,sp,24
    a9d0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    a9d4:	e0bffc17 	ldw	r2,-16(fp)
    a9d8:	1004803a 	cmplt	r2,r2,zero
    a9dc:	1000081e 	bne	r2,zero,aa00 <close+0x40>
    a9e0:	e0bffc17 	ldw	r2,-16(fp)
    a9e4:	10800324 	muli	r2,r2,12
    a9e8:	1007883a 	mov	r3,r2
    a9ec:	00800074 	movhi	r2,1
    a9f0:	10bd0904 	addi	r2,r2,-3036
    a9f4:	1887883a 	add	r3,r3,r2
    a9f8:	e0ffff15 	stw	r3,-4(fp)
    a9fc:	00000106 	br	aa04 <close+0x44>
    aa00:	e03fff15 	stw	zero,-4(fp)
    aa04:	e0bfff17 	ldw	r2,-4(fp)
    aa08:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    aa0c:	e0bffb17 	ldw	r2,-20(fp)
    aa10:	1005003a 	cmpeq	r2,r2,zero
    aa14:	10001d1e 	bne	r2,zero,aa8c <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    aa18:	e0bffb17 	ldw	r2,-20(fp)
    aa1c:	10800017 	ldw	r2,0(r2)
    aa20:	10800417 	ldw	r2,16(r2)
    aa24:	1005003a 	cmpeq	r2,r2,zero
    aa28:	1000071e 	bne	r2,zero,aa48 <close+0x88>
    aa2c:	e0bffb17 	ldw	r2,-20(fp)
    aa30:	10800017 	ldw	r2,0(r2)
    aa34:	10800417 	ldw	r2,16(r2)
    aa38:	e13ffb17 	ldw	r4,-20(fp)
    aa3c:	103ee83a 	callr	r2
    aa40:	e0bffe15 	stw	r2,-8(fp)
    aa44:	00000106 	br	aa4c <close+0x8c>
    aa48:	e03ffe15 	stw	zero,-8(fp)
    aa4c:	e0bffe17 	ldw	r2,-8(fp)
    aa50:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    aa54:	e13ffc17 	ldw	r4,-16(fp)
    aa58:	000b2040 	call	b204 <alt_release_fd>
    if (rval < 0)
    aa5c:	e0bffa17 	ldw	r2,-24(fp)
    aa60:	1004403a 	cmpge	r2,r2,zero
    aa64:	1000071e 	bne	r2,zero,aa84 <close+0xc4>
    {
      ALT_ERRNO = -rval;
    aa68:	000aabc0 	call	aabc <alt_get_errno>
    aa6c:	e0fffa17 	ldw	r3,-24(fp)
    aa70:	00c7c83a 	sub	r3,zero,r3
    aa74:	10c00015 	stw	r3,0(r2)
      return -1;
    aa78:	00bfffc4 	movi	r2,-1
    aa7c:	e0bffd15 	stw	r2,-12(fp)
    aa80:	00000806 	br	aaa4 <close+0xe4>
    }
    return 0;
    aa84:	e03ffd15 	stw	zero,-12(fp)
    aa88:	00000606 	br	aaa4 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    aa8c:	000aabc0 	call	aabc <alt_get_errno>
    aa90:	1007883a 	mov	r3,r2
    aa94:	00801444 	movi	r2,81
    aa98:	18800015 	stw	r2,0(r3)
    return -1;
    aa9c:	00bfffc4 	movi	r2,-1
    aaa0:	e0bffd15 	stw	r2,-12(fp)
    aaa4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    aaa8:	e037883a 	mov	sp,fp
    aaac:	dfc00117 	ldw	ra,4(sp)
    aab0:	df000017 	ldw	fp,0(sp)
    aab4:	dec00204 	addi	sp,sp,8
    aab8:	f800283a 	ret

0000aabc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    aabc:	defffd04 	addi	sp,sp,-12
    aac0:	dfc00215 	stw	ra,8(sp)
    aac4:	df000115 	stw	fp,4(sp)
    aac8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    aacc:	00800074 	movhi	r2,1
    aad0:	1081be04 	addi	r2,r2,1784
    aad4:	10800017 	ldw	r2,0(r2)
    aad8:	1005003a 	cmpeq	r2,r2,zero
    aadc:	1000061e 	bne	r2,zero,aaf8 <alt_get_errno+0x3c>
    aae0:	00800074 	movhi	r2,1
    aae4:	1081be04 	addi	r2,r2,1784
    aae8:	10800017 	ldw	r2,0(r2)
    aaec:	103ee83a 	callr	r2
    aaf0:	e0bfff15 	stw	r2,-4(fp)
    aaf4:	00000306 	br	ab04 <alt_get_errno+0x48>
    aaf8:	00800074 	movhi	r2,1
    aafc:	1088ad04 	addi	r2,r2,8884
    ab00:	e0bfff15 	stw	r2,-4(fp)
    ab04:	e0bfff17 	ldw	r2,-4(fp)
}
    ab08:	e037883a 	mov	sp,fp
    ab0c:	dfc00117 	ldw	ra,4(sp)
    ab10:	df000017 	ldw	fp,0(sp)
    ab14:	dec00204 	addi	sp,sp,8
    ab18:	f800283a 	ret

0000ab1c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    ab1c:	defffc04 	addi	sp,sp,-16
    ab20:	df000315 	stw	fp,12(sp)
    ab24:	df000304 	addi	fp,sp,12
    ab28:	e13ffd15 	stw	r4,-12(fp)
    ab2c:	e17ffe15 	stw	r5,-8(fp)
    ab30:	e1bfff15 	stw	r6,-4(fp)
  return len;
    ab34:	e0bfff17 	ldw	r2,-4(fp)
}
    ab38:	e037883a 	mov	sp,fp
    ab3c:	df000017 	ldw	fp,0(sp)
    ab40:	dec00104 	addi	sp,sp,4
    ab44:	f800283a 	ret

0000ab48 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    ab48:	defff904 	addi	sp,sp,-28
    ab4c:	dfc00615 	stw	ra,24(sp)
    ab50:	df000515 	stw	fp,20(sp)
    ab54:	df000504 	addi	fp,sp,20
    ab58:	e13ffc15 	stw	r4,-16(fp)
    ab5c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ab60:	e0bffc17 	ldw	r2,-16(fp)
    ab64:	1004803a 	cmplt	r2,r2,zero
    ab68:	1000081e 	bne	r2,zero,ab8c <fstat+0x44>
    ab6c:	e0bffc17 	ldw	r2,-16(fp)
    ab70:	10800324 	muli	r2,r2,12
    ab74:	1007883a 	mov	r3,r2
    ab78:	00800074 	movhi	r2,1
    ab7c:	10bd0904 	addi	r2,r2,-3036
    ab80:	1887883a 	add	r3,r3,r2
    ab84:	e0ffff15 	stw	r3,-4(fp)
    ab88:	00000106 	br	ab90 <fstat+0x48>
    ab8c:	e03fff15 	stw	zero,-4(fp)
    ab90:	e0bfff17 	ldw	r2,-4(fp)
    ab94:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    ab98:	e0bffb17 	ldw	r2,-20(fp)
    ab9c:	1005003a 	cmpeq	r2,r2,zero
    aba0:	1000121e 	bne	r2,zero,abec <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    aba4:	e0bffb17 	ldw	r2,-20(fp)
    aba8:	10800017 	ldw	r2,0(r2)
    abac:	10800817 	ldw	r2,32(r2)
    abb0:	1005003a 	cmpeq	r2,r2,zero
    abb4:	1000081e 	bne	r2,zero,abd8 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    abb8:	e0bffb17 	ldw	r2,-20(fp)
    abbc:	10800017 	ldw	r2,0(r2)
    abc0:	10800817 	ldw	r2,32(r2)
    abc4:	e13ffb17 	ldw	r4,-20(fp)
    abc8:	e17ffd17 	ldw	r5,-12(fp)
    abcc:	103ee83a 	callr	r2
    abd0:	e0bffe15 	stw	r2,-8(fp)
    abd4:	00000b06 	br	ac04 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    abd8:	e0fffd17 	ldw	r3,-12(fp)
    abdc:	00880004 	movi	r2,8192
    abe0:	18800115 	stw	r2,4(r3)
      return 0;
    abe4:	e03ffe15 	stw	zero,-8(fp)
    abe8:	00000606 	br	ac04 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    abec:	000ac1c0 	call	ac1c <alt_get_errno>
    abf0:	1007883a 	mov	r3,r2
    abf4:	00801444 	movi	r2,81
    abf8:	18800015 	stw	r2,0(r3)
    return -1;
    abfc:	00bfffc4 	movi	r2,-1
    ac00:	e0bffe15 	stw	r2,-8(fp)
    ac04:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    ac08:	e037883a 	mov	sp,fp
    ac0c:	dfc00117 	ldw	ra,4(sp)
    ac10:	df000017 	ldw	fp,0(sp)
    ac14:	dec00204 	addi	sp,sp,8
    ac18:	f800283a 	ret

0000ac1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ac1c:	defffd04 	addi	sp,sp,-12
    ac20:	dfc00215 	stw	ra,8(sp)
    ac24:	df000115 	stw	fp,4(sp)
    ac28:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    ac2c:	00800074 	movhi	r2,1
    ac30:	1081be04 	addi	r2,r2,1784
    ac34:	10800017 	ldw	r2,0(r2)
    ac38:	1005003a 	cmpeq	r2,r2,zero
    ac3c:	1000061e 	bne	r2,zero,ac58 <alt_get_errno+0x3c>
    ac40:	00800074 	movhi	r2,1
    ac44:	1081be04 	addi	r2,r2,1784
    ac48:	10800017 	ldw	r2,0(r2)
    ac4c:	103ee83a 	callr	r2
    ac50:	e0bfff15 	stw	r2,-4(fp)
    ac54:	00000306 	br	ac64 <alt_get_errno+0x48>
    ac58:	00800074 	movhi	r2,1
    ac5c:	1088ad04 	addi	r2,r2,8884
    ac60:	e0bfff15 	stw	r2,-4(fp)
    ac64:	e0bfff17 	ldw	r2,-4(fp)
}
    ac68:	e037883a 	mov	sp,fp
    ac6c:	dfc00117 	ldw	ra,4(sp)
    ac70:	df000017 	ldw	fp,0(sp)
    ac74:	dec00204 	addi	sp,sp,8
    ac78:	f800283a 	ret

0000ac7c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    ac7c:	deffeb04 	addi	sp,sp,-84
    ac80:	dfc01415 	stw	ra,80(sp)
    ac84:	df001315 	stw	fp,76(sp)
    ac88:	df001304 	addi	fp,sp,76
    ac8c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ac90:	e0bffd17 	ldw	r2,-12(fp)
    ac94:	1004803a 	cmplt	r2,r2,zero
    ac98:	1000081e 	bne	r2,zero,acbc <isatty+0x40>
    ac9c:	e0bffd17 	ldw	r2,-12(fp)
    aca0:	10800324 	muli	r2,r2,12
    aca4:	1007883a 	mov	r3,r2
    aca8:	00800074 	movhi	r2,1
    acac:	10bd0904 	addi	r2,r2,-3036
    acb0:	1887883a 	add	r3,r3,r2
    acb4:	e0ffff15 	stw	r3,-4(fp)
    acb8:	00000106 	br	acc0 <isatty+0x44>
    acbc:	e03fff15 	stw	zero,-4(fp)
    acc0:	e0bfff17 	ldw	r2,-4(fp)
    acc4:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    acc8:	e0bfed17 	ldw	r2,-76(fp)
    accc:	1005003a 	cmpeq	r2,r2,zero
    acd0:	10000f1e 	bne	r2,zero,ad10 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    acd4:	e0bfed17 	ldw	r2,-76(fp)
    acd8:	10800017 	ldw	r2,0(r2)
    acdc:	10800817 	ldw	r2,32(r2)
    ace0:	1004c03a 	cmpne	r2,r2,zero
    ace4:	1000031e 	bne	r2,zero,acf4 <isatty+0x78>
    {
      return 1;
    ace8:	00800044 	movi	r2,1
    acec:	e0bffe15 	stw	r2,-8(fp)
    acf0:	00000c06 	br	ad24 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    acf4:	e17fee04 	addi	r5,fp,-72
    acf8:	e13ffd17 	ldw	r4,-12(fp)
    acfc:	000ab480 	call	ab48 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    ad00:	e0bfef17 	ldw	r2,-68(fp)
    ad04:	10880020 	cmpeqi	r2,r2,8192
    ad08:	e0bffe15 	stw	r2,-8(fp)
    ad0c:	00000506 	br	ad24 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ad10:	000ad3c0 	call	ad3c <alt_get_errno>
    ad14:	1007883a 	mov	r3,r2
    ad18:	00801444 	movi	r2,81
    ad1c:	18800015 	stw	r2,0(r3)
    return 0;
    ad20:	e03ffe15 	stw	zero,-8(fp)
    ad24:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    ad28:	e037883a 	mov	sp,fp
    ad2c:	dfc00117 	ldw	ra,4(sp)
    ad30:	df000017 	ldw	fp,0(sp)
    ad34:	dec00204 	addi	sp,sp,8
    ad38:	f800283a 	ret

0000ad3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ad3c:	defffd04 	addi	sp,sp,-12
    ad40:	dfc00215 	stw	ra,8(sp)
    ad44:	df000115 	stw	fp,4(sp)
    ad48:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    ad4c:	00800074 	movhi	r2,1
    ad50:	1081be04 	addi	r2,r2,1784
    ad54:	10800017 	ldw	r2,0(r2)
    ad58:	1005003a 	cmpeq	r2,r2,zero
    ad5c:	1000061e 	bne	r2,zero,ad78 <alt_get_errno+0x3c>
    ad60:	00800074 	movhi	r2,1
    ad64:	1081be04 	addi	r2,r2,1784
    ad68:	10800017 	ldw	r2,0(r2)
    ad6c:	103ee83a 	callr	r2
    ad70:	e0bfff15 	stw	r2,-4(fp)
    ad74:	00000306 	br	ad84 <alt_get_errno+0x48>
    ad78:	00800074 	movhi	r2,1
    ad7c:	1088ad04 	addi	r2,r2,8884
    ad80:	e0bfff15 	stw	r2,-4(fp)
    ad84:	e0bfff17 	ldw	r2,-4(fp)
}
    ad88:	e037883a 	mov	sp,fp
    ad8c:	dfc00117 	ldw	ra,4(sp)
    ad90:	df000017 	ldw	fp,0(sp)
    ad94:	dec00204 	addi	sp,sp,8
    ad98:	f800283a 	ret

0000ad9c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    ad9c:	defffe04 	addi	sp,sp,-8
    ada0:	dfc00115 	stw	ra,4(sp)
    ada4:	df000015 	stw	fp,0(sp)
    ada8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    adac:	01000074 	movhi	r4,1
    adb0:	2101c504 	addi	r4,r4,1812
    adb4:	01400074 	movhi	r5,1
    adb8:	297afa04 	addi	r5,r5,-5144
    adbc:	01800074 	movhi	r6,1
    adc0:	3181c504 	addi	r6,r6,1812
    adc4:	000ae1c0 	call	ae1c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    adc8:	01000034 	movhi	r4,0
    adcc:	21000804 	addi	r4,r4,32
    add0:	01400034 	movhi	r5,0
    add4:	29400804 	addi	r5,r5,32
    add8:	01800034 	movhi	r6,0
    addc:	31806d04 	addi	r6,r6,436
    ade0:	000ae1c0 	call	ae1c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    ade4:	01000074 	movhi	r4,1
    ade8:	213a0604 	addi	r4,r4,-6120
    adec:	01400074 	movhi	r5,1
    adf0:	297a0604 	addi	r5,r5,-6120
    adf4:	01800074 	movhi	r6,1
    adf8:	31bafa04 	addi	r6,r6,-5144
    adfc:	000ae1c0 	call	ae1c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    ae00:	000d3280 	call	d328 <alt_dcache_flush_all>
  alt_icache_flush_all();
    ae04:	000d6180 	call	d618 <alt_icache_flush_all>
}
    ae08:	e037883a 	mov	sp,fp
    ae0c:	dfc00117 	ldw	ra,4(sp)
    ae10:	df000017 	ldw	fp,0(sp)
    ae14:	dec00204 	addi	sp,sp,8
    ae18:	f800283a 	ret

0000ae1c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    ae1c:	defffc04 	addi	sp,sp,-16
    ae20:	df000315 	stw	fp,12(sp)
    ae24:	df000304 	addi	fp,sp,12
    ae28:	e13ffd15 	stw	r4,-12(fp)
    ae2c:	e17ffe15 	stw	r5,-8(fp)
    ae30:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    ae34:	e0fffe17 	ldw	r3,-8(fp)
    ae38:	e0bffd17 	ldw	r2,-12(fp)
    ae3c:	18800e26 	beq	r3,r2,ae78 <alt_load_section+0x5c>
  {
    while( to != end )
    ae40:	00000a06 	br	ae6c <alt_load_section+0x50>
    {
      *to++ = *from++;
    ae44:	e0bffd17 	ldw	r2,-12(fp)
    ae48:	10c00017 	ldw	r3,0(r2)
    ae4c:	e0bffe17 	ldw	r2,-8(fp)
    ae50:	10c00015 	stw	r3,0(r2)
    ae54:	e0bffe17 	ldw	r2,-8(fp)
    ae58:	10800104 	addi	r2,r2,4
    ae5c:	e0bffe15 	stw	r2,-8(fp)
    ae60:	e0bffd17 	ldw	r2,-12(fp)
    ae64:	10800104 	addi	r2,r2,4
    ae68:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    ae6c:	e0fffe17 	ldw	r3,-8(fp)
    ae70:	e0bfff17 	ldw	r2,-4(fp)
    ae74:	18bff31e 	bne	r3,r2,ae44 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    ae78:	e037883a 	mov	sp,fp
    ae7c:	df000017 	ldw	fp,0(sp)
    ae80:	dec00104 	addi	sp,sp,4
    ae84:	f800283a 	ret

0000ae88 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    ae88:	defff804 	addi	sp,sp,-32
    ae8c:	dfc00715 	stw	ra,28(sp)
    ae90:	df000615 	stw	fp,24(sp)
    ae94:	df000604 	addi	fp,sp,24
    ae98:	e13ffc15 	stw	r4,-16(fp)
    ae9c:	e17ffd15 	stw	r5,-12(fp)
    aea0:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    aea4:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    aea8:	e0bffc17 	ldw	r2,-16(fp)
    aeac:	1004803a 	cmplt	r2,r2,zero
    aeb0:	1000081e 	bne	r2,zero,aed4 <lseek+0x4c>
    aeb4:	e0bffc17 	ldw	r2,-16(fp)
    aeb8:	10800324 	muli	r2,r2,12
    aebc:	1007883a 	mov	r3,r2
    aec0:	00800074 	movhi	r2,1
    aec4:	10bd0904 	addi	r2,r2,-3036
    aec8:	1887883a 	add	r3,r3,r2
    aecc:	e0ffff15 	stw	r3,-4(fp)
    aed0:	00000106 	br	aed8 <lseek+0x50>
    aed4:	e03fff15 	stw	zero,-4(fp)
    aed8:	e0bfff17 	ldw	r2,-4(fp)
    aedc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    aee0:	e0bffb17 	ldw	r2,-20(fp)
    aee4:	1005003a 	cmpeq	r2,r2,zero
    aee8:	1000111e 	bne	r2,zero,af30 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    aeec:	e0bffb17 	ldw	r2,-20(fp)
    aef0:	10800017 	ldw	r2,0(r2)
    aef4:	10800717 	ldw	r2,28(r2)
    aef8:	1005003a 	cmpeq	r2,r2,zero
    aefc:	1000091e 	bne	r2,zero,af24 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    af00:	e0bffb17 	ldw	r2,-20(fp)
    af04:	10800017 	ldw	r2,0(r2)
    af08:	10800717 	ldw	r2,28(r2)
    af0c:	e13ffb17 	ldw	r4,-20(fp)
    af10:	e17ffd17 	ldw	r5,-12(fp)
    af14:	e1bffe17 	ldw	r6,-8(fp)
    af18:	103ee83a 	callr	r2
    af1c:	e0bffa15 	stw	r2,-24(fp)
    af20:	00000506 	br	af38 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    af24:	00bfde84 	movi	r2,-134
    af28:	e0bffa15 	stw	r2,-24(fp)
    af2c:	00000206 	br	af38 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    af30:	00bfebc4 	movi	r2,-81
    af34:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    af38:	e0bffa17 	ldw	r2,-24(fp)
    af3c:	1004403a 	cmpge	r2,r2,zero
    af40:	1000071e 	bne	r2,zero,af60 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    af44:	000af780 	call	af78 <alt_get_errno>
    af48:	1007883a 	mov	r3,r2
    af4c:	e0bffa17 	ldw	r2,-24(fp)
    af50:	0085c83a 	sub	r2,zero,r2
    af54:	18800015 	stw	r2,0(r3)
    rc = -1;
    af58:	00bfffc4 	movi	r2,-1
    af5c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    af60:	e0bffa17 	ldw	r2,-24(fp)
}
    af64:	e037883a 	mov	sp,fp
    af68:	dfc00117 	ldw	ra,4(sp)
    af6c:	df000017 	ldw	fp,0(sp)
    af70:	dec00204 	addi	sp,sp,8
    af74:	f800283a 	ret

0000af78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    af78:	defffd04 	addi	sp,sp,-12
    af7c:	dfc00215 	stw	ra,8(sp)
    af80:	df000115 	stw	fp,4(sp)
    af84:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    af88:	00800074 	movhi	r2,1
    af8c:	1081be04 	addi	r2,r2,1784
    af90:	10800017 	ldw	r2,0(r2)
    af94:	1005003a 	cmpeq	r2,r2,zero
    af98:	1000061e 	bne	r2,zero,afb4 <alt_get_errno+0x3c>
    af9c:	00800074 	movhi	r2,1
    afa0:	1081be04 	addi	r2,r2,1784
    afa4:	10800017 	ldw	r2,0(r2)
    afa8:	103ee83a 	callr	r2
    afac:	e0bfff15 	stw	r2,-4(fp)
    afb0:	00000306 	br	afc0 <alt_get_errno+0x48>
    afb4:	00800074 	movhi	r2,1
    afb8:	1088ad04 	addi	r2,r2,8884
    afbc:	e0bfff15 	stw	r2,-4(fp)
    afc0:	e0bfff17 	ldw	r2,-4(fp)
}
    afc4:	e037883a 	mov	sp,fp
    afc8:	dfc00117 	ldw	ra,4(sp)
    afcc:	df000017 	ldw	fp,0(sp)
    afd0:	dec00204 	addi	sp,sp,8
    afd4:	f800283a 	ret

0000afd8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    afd8:	defffd04 	addi	sp,sp,-12
    afdc:	dfc00215 	stw	ra,8(sp)
    afe0:	df000115 	stw	fp,4(sp)
    afe4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    afe8:	0009883a 	mov	r4,zero
    afec:	000b4a00 	call	b4a0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    aff0:	000b4d40 	call	b4d4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    aff4:	01000074 	movhi	r4,1
    aff8:	213aef04 	addi	r4,r4,-5188
    affc:	01400074 	movhi	r5,1
    b000:	297aef04 	addi	r5,r5,-5188
    b004:	01800074 	movhi	r6,1
    b008:	31baef04 	addi	r6,r6,-5188
    b00c:	000d9d80 	call	d9d8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    b010:	000d4800 	call	d480 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    b014:	01000074 	movhi	r4,1
    b018:	21353904 	addi	r4,r4,-11036
    b01c:	000e40c0 	call	e40c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    b020:	d126fb17 	ldw	r4,-25620(gp)
    b024:	d166fc17 	ldw	r5,-25616(gp)
    b028:	d1a6fd17 	ldw	r6,-25612(gp)
    b02c:	00005580 	call	558 <main>
    b030:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    b034:	01000044 	movi	r4,1
    b038:	000a9c00 	call	a9c0 <close>
  exit (result);
    b03c:	e13fff17 	ldw	r4,-4(fp)
    b040:	000e4200 	call	e420 <exit>

0000b044 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    b044:	defffe04 	addi	sp,sp,-8
    b048:	df000115 	stw	fp,4(sp)
    b04c:	df000104 	addi	fp,sp,4
    b050:	e13fff15 	stw	r4,-4(fp)
}
    b054:	e037883a 	mov	sp,fp
    b058:	df000017 	ldw	fp,0(sp)
    b05c:	dec00104 	addi	sp,sp,4
    b060:	f800283a 	ret

0000b064 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    b064:	defffe04 	addi	sp,sp,-8
    b068:	df000115 	stw	fp,4(sp)
    b06c:	df000104 	addi	fp,sp,4
    b070:	e13fff15 	stw	r4,-4(fp)
}
    b074:	e037883a 	mov	sp,fp
    b078:	df000017 	ldw	fp,0(sp)
    b07c:	dec00104 	addi	sp,sp,4
    b080:	f800283a 	ret

0000b084 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    b084:	defff704 	addi	sp,sp,-36
    b088:	dfc00815 	stw	ra,32(sp)
    b08c:	df000715 	stw	fp,28(sp)
    b090:	df000704 	addi	fp,sp,28
    b094:	e13ffb15 	stw	r4,-20(fp)
    b098:	e17ffc15 	stw	r5,-16(fp)
    b09c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b0a0:	e0bffb17 	ldw	r2,-20(fp)
    b0a4:	1004803a 	cmplt	r2,r2,zero
    b0a8:	1000081e 	bne	r2,zero,b0cc <read+0x48>
    b0ac:	e0bffb17 	ldw	r2,-20(fp)
    b0b0:	10800324 	muli	r2,r2,12
    b0b4:	1007883a 	mov	r3,r2
    b0b8:	00800074 	movhi	r2,1
    b0bc:	10bd0904 	addi	r2,r2,-3036
    b0c0:	1887883a 	add	r3,r3,r2
    b0c4:	e0ffff15 	stw	r3,-4(fp)
    b0c8:	00000106 	br	b0d0 <read+0x4c>
    b0cc:	e03fff15 	stw	zero,-4(fp)
    b0d0:	e0bfff17 	ldw	r2,-4(fp)
    b0d4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    b0d8:	e0bffa17 	ldw	r2,-24(fp)
    b0dc:	1005003a 	cmpeq	r2,r2,zero
    b0e0:	1000241e 	bne	r2,zero,b174 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    b0e4:	e0bffa17 	ldw	r2,-24(fp)
    b0e8:	10800217 	ldw	r2,8(r2)
    b0ec:	108000cc 	andi	r2,r2,3
    b0f0:	10800060 	cmpeqi	r2,r2,1
    b0f4:	10001a1e 	bne	r2,zero,b160 <read+0xdc>
    b0f8:	e0bffa17 	ldw	r2,-24(fp)
    b0fc:	10800017 	ldw	r2,0(r2)
    b100:	10800517 	ldw	r2,20(r2)
    b104:	1005003a 	cmpeq	r2,r2,zero
    b108:	1000151e 	bne	r2,zero,b160 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    b10c:	e0bffa17 	ldw	r2,-24(fp)
    b110:	10800017 	ldw	r2,0(r2)
    b114:	10800517 	ldw	r2,20(r2)
    b118:	e17ffc17 	ldw	r5,-16(fp)
    b11c:	e1bffd17 	ldw	r6,-12(fp)
    b120:	e13ffa17 	ldw	r4,-24(fp)
    b124:	103ee83a 	callr	r2
    b128:	e0bff915 	stw	r2,-28(fp)
    b12c:	e0bff917 	ldw	r2,-28(fp)
    b130:	1004403a 	cmpge	r2,r2,zero
    b134:	1000071e 	bne	r2,zero,b154 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    b138:	000b1a40 	call	b1a4 <alt_get_errno>
    b13c:	e0fff917 	ldw	r3,-28(fp)
    b140:	00c7c83a 	sub	r3,zero,r3
    b144:	10c00015 	stw	r3,0(r2)
          return -1;
    b148:	00bfffc4 	movi	r2,-1
    b14c:	e0bffe15 	stw	r2,-8(fp)
    b150:	00000e06 	br	b18c <read+0x108>
        }
        return rval;
    b154:	e0bff917 	ldw	r2,-28(fp)
    b158:	e0bffe15 	stw	r2,-8(fp)
    b15c:	00000b06 	br	b18c <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    b160:	000b1a40 	call	b1a4 <alt_get_errno>
    b164:	1007883a 	mov	r3,r2
    b168:	00800344 	movi	r2,13
    b16c:	18800015 	stw	r2,0(r3)
    b170:	00000406 	br	b184 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    b174:	000b1a40 	call	b1a4 <alt_get_errno>
    b178:	1007883a 	mov	r3,r2
    b17c:	00801444 	movi	r2,81
    b180:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b184:	00bfffc4 	movi	r2,-1
    b188:	e0bffe15 	stw	r2,-8(fp)
    b18c:	e0bffe17 	ldw	r2,-8(fp)
}
    b190:	e037883a 	mov	sp,fp
    b194:	dfc00117 	ldw	ra,4(sp)
    b198:	df000017 	ldw	fp,0(sp)
    b19c:	dec00204 	addi	sp,sp,8
    b1a0:	f800283a 	ret

0000b1a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b1a4:	defffd04 	addi	sp,sp,-12
    b1a8:	dfc00215 	stw	ra,8(sp)
    b1ac:	df000115 	stw	fp,4(sp)
    b1b0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b1b4:	00800074 	movhi	r2,1
    b1b8:	1081be04 	addi	r2,r2,1784
    b1bc:	10800017 	ldw	r2,0(r2)
    b1c0:	1005003a 	cmpeq	r2,r2,zero
    b1c4:	1000061e 	bne	r2,zero,b1e0 <alt_get_errno+0x3c>
    b1c8:	00800074 	movhi	r2,1
    b1cc:	1081be04 	addi	r2,r2,1784
    b1d0:	10800017 	ldw	r2,0(r2)
    b1d4:	103ee83a 	callr	r2
    b1d8:	e0bfff15 	stw	r2,-4(fp)
    b1dc:	00000306 	br	b1ec <alt_get_errno+0x48>
    b1e0:	00800074 	movhi	r2,1
    b1e4:	1088ad04 	addi	r2,r2,8884
    b1e8:	e0bfff15 	stw	r2,-4(fp)
    b1ec:	e0bfff17 	ldw	r2,-4(fp)
}
    b1f0:	e037883a 	mov	sp,fp
    b1f4:	dfc00117 	ldw	ra,4(sp)
    b1f8:	df000017 	ldw	fp,0(sp)
    b1fc:	dec00204 	addi	sp,sp,8
    b200:	f800283a 	ret

0000b204 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    b204:	defffe04 	addi	sp,sp,-8
    b208:	df000115 	stw	fp,4(sp)
    b20c:	df000104 	addi	fp,sp,4
    b210:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    b214:	e0bfff17 	ldw	r2,-4(fp)
    b218:	108000d0 	cmplti	r2,r2,3
    b21c:	10000d1e 	bne	r2,zero,b254 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    b220:	e0bfff17 	ldw	r2,-4(fp)
    b224:	00c00074 	movhi	r3,1
    b228:	18fd0904 	addi	r3,r3,-3036
    b22c:	10800324 	muli	r2,r2,12
    b230:	10c5883a 	add	r2,r2,r3
    b234:	10800204 	addi	r2,r2,8
    b238:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    b23c:	e0bfff17 	ldw	r2,-4(fp)
    b240:	00c00074 	movhi	r3,1
    b244:	18fd0904 	addi	r3,r3,-3036
    b248:	10800324 	muli	r2,r2,12
    b24c:	10c5883a 	add	r2,r2,r3
    b250:	10000015 	stw	zero,0(r2)
  }
}
    b254:	e037883a 	mov	sp,fp
    b258:	df000017 	ldw	fp,0(sp)
    b25c:	dec00104 	addi	sp,sp,4
    b260:	f800283a 	ret

0000b264 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    b264:	defff804 	addi	sp,sp,-32
    b268:	df000715 	stw	fp,28(sp)
    b26c:	df000704 	addi	fp,sp,28
    b270:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b274:	0005303a 	rdctl	r2,status
    b278:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b27c:	e0fffb17 	ldw	r3,-20(fp)
    b280:	00bfff84 	movi	r2,-2
    b284:	1884703a 	and	r2,r3,r2
    b288:	1001703a 	wrctl	status,r2
  
  return context;
    b28c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    b290:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    b294:	d0a00c17 	ldw	r2,-32720(gp)
    b298:	10c000c4 	addi	r3,r2,3
    b29c:	00bfff04 	movi	r2,-4
    b2a0:	1884703a 	and	r2,r3,r2
    b2a4:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    b2a8:	d0e00c17 	ldw	r3,-32720(gp)
    b2ac:	e0bffe17 	ldw	r2,-8(fp)
    b2b0:	1887883a 	add	r3,r3,r2
    b2b4:	00804434 	movhi	r2,272
    b2b8:	10800004 	addi	r2,r2,0
    b2bc:	10c0072e 	bgeu	r2,r3,b2dc <sbrk+0x78>
    b2c0:	e0bffd17 	ldw	r2,-12(fp)
    b2c4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b2c8:	e0bffa17 	ldw	r2,-24(fp)
    b2cc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    b2d0:	00bfffc4 	movi	r2,-1
    b2d4:	e0bfff15 	stw	r2,-4(fp)
    b2d8:	00000c06 	br	b30c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    b2dc:	d0a00c17 	ldw	r2,-32720(gp)
    b2e0:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    b2e4:	d0e00c17 	ldw	r3,-32720(gp)
    b2e8:	e0bffe17 	ldw	r2,-8(fp)
    b2ec:	1885883a 	add	r2,r3,r2
    b2f0:	d0a00c15 	stw	r2,-32720(gp)
    b2f4:	e0bffd17 	ldw	r2,-12(fp)
    b2f8:	e0bff915 	stw	r2,-28(fp)
    b2fc:	e0bff917 	ldw	r2,-28(fp)
    b300:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    b304:	e0bffc17 	ldw	r2,-16(fp)
    b308:	e0bfff15 	stw	r2,-4(fp)
    b30c:	e0bfff17 	ldw	r2,-4(fp)
} 
    b310:	e037883a 	mov	sp,fp
    b314:	df000017 	ldw	fp,0(sp)
    b318:	dec00104 	addi	sp,sp,4
    b31c:	f800283a 	ret

0000b320 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    b320:	defff704 	addi	sp,sp,-36
    b324:	dfc00815 	stw	ra,32(sp)
    b328:	df000715 	stw	fp,28(sp)
    b32c:	df000704 	addi	fp,sp,28
    b330:	e13ffb15 	stw	r4,-20(fp)
    b334:	e17ffc15 	stw	r5,-16(fp)
    b338:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b33c:	e0bffb17 	ldw	r2,-20(fp)
    b340:	1004803a 	cmplt	r2,r2,zero
    b344:	1000081e 	bne	r2,zero,b368 <write+0x48>
    b348:	e0bffb17 	ldw	r2,-20(fp)
    b34c:	10800324 	muli	r2,r2,12
    b350:	1007883a 	mov	r3,r2
    b354:	00800074 	movhi	r2,1
    b358:	10bd0904 	addi	r2,r2,-3036
    b35c:	1887883a 	add	r3,r3,r2
    b360:	e0ffff15 	stw	r3,-4(fp)
    b364:	00000106 	br	b36c <write+0x4c>
    b368:	e03fff15 	stw	zero,-4(fp)
    b36c:	e0bfff17 	ldw	r2,-4(fp)
    b370:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    b374:	e0bffa17 	ldw	r2,-24(fp)
    b378:	1005003a 	cmpeq	r2,r2,zero
    b37c:	1000241e 	bne	r2,zero,b410 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    b380:	e0bffa17 	ldw	r2,-24(fp)
    b384:	10800217 	ldw	r2,8(r2)
    b388:	108000cc 	andi	r2,r2,3
    b38c:	1005003a 	cmpeq	r2,r2,zero
    b390:	10001a1e 	bne	r2,zero,b3fc <write+0xdc>
    b394:	e0bffa17 	ldw	r2,-24(fp)
    b398:	10800017 	ldw	r2,0(r2)
    b39c:	10800617 	ldw	r2,24(r2)
    b3a0:	1005003a 	cmpeq	r2,r2,zero
    b3a4:	1000151e 	bne	r2,zero,b3fc <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    b3a8:	e0bffa17 	ldw	r2,-24(fp)
    b3ac:	10800017 	ldw	r2,0(r2)
    b3b0:	10800617 	ldw	r2,24(r2)
    b3b4:	e17ffc17 	ldw	r5,-16(fp)
    b3b8:	e1bffd17 	ldw	r6,-12(fp)
    b3bc:	e13ffa17 	ldw	r4,-24(fp)
    b3c0:	103ee83a 	callr	r2
    b3c4:	e0bff915 	stw	r2,-28(fp)
    b3c8:	e0bff917 	ldw	r2,-28(fp)
    b3cc:	1004403a 	cmpge	r2,r2,zero
    b3d0:	1000071e 	bne	r2,zero,b3f0 <write+0xd0>
      {
        ALT_ERRNO = -rval;
    b3d4:	000b4400 	call	b440 <alt_get_errno>
    b3d8:	e0fff917 	ldw	r3,-28(fp)
    b3dc:	00c7c83a 	sub	r3,zero,r3
    b3e0:	10c00015 	stw	r3,0(r2)
        return -1;
    b3e4:	00bfffc4 	movi	r2,-1
    b3e8:	e0bffe15 	stw	r2,-8(fp)
    b3ec:	00000e06 	br	b428 <write+0x108>
      }
      return rval;
    b3f0:	e0bff917 	ldw	r2,-28(fp)
    b3f4:	e0bffe15 	stw	r2,-8(fp)
    b3f8:	00000b06 	br	b428 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    b3fc:	000b4400 	call	b440 <alt_get_errno>
    b400:	1007883a 	mov	r3,r2
    b404:	00800344 	movi	r2,13
    b408:	18800015 	stw	r2,0(r3)
    b40c:	00000406 	br	b420 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    b410:	000b4400 	call	b440 <alt_get_errno>
    b414:	1007883a 	mov	r3,r2
    b418:	00801444 	movi	r2,81
    b41c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b420:	00bfffc4 	movi	r2,-1
    b424:	e0bffe15 	stw	r2,-8(fp)
    b428:	e0bffe17 	ldw	r2,-8(fp)
}
    b42c:	e037883a 	mov	sp,fp
    b430:	dfc00117 	ldw	ra,4(sp)
    b434:	df000017 	ldw	fp,0(sp)
    b438:	dec00204 	addi	sp,sp,8
    b43c:	f800283a 	ret

0000b440 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b440:	defffd04 	addi	sp,sp,-12
    b444:	dfc00215 	stw	ra,8(sp)
    b448:	df000115 	stw	fp,4(sp)
    b44c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b450:	00800074 	movhi	r2,1
    b454:	1081be04 	addi	r2,r2,1784
    b458:	10800017 	ldw	r2,0(r2)
    b45c:	1005003a 	cmpeq	r2,r2,zero
    b460:	1000061e 	bne	r2,zero,b47c <alt_get_errno+0x3c>
    b464:	00800074 	movhi	r2,1
    b468:	1081be04 	addi	r2,r2,1784
    b46c:	10800017 	ldw	r2,0(r2)
    b470:	103ee83a 	callr	r2
    b474:	e0bfff15 	stw	r2,-4(fp)
    b478:	00000306 	br	b488 <alt_get_errno+0x48>
    b47c:	00800074 	movhi	r2,1
    b480:	1088ad04 	addi	r2,r2,8884
    b484:	e0bfff15 	stw	r2,-4(fp)
    b488:	e0bfff17 	ldw	r2,-4(fp)
}
    b48c:	e037883a 	mov	sp,fp
    b490:	dfc00117 	ldw	ra,4(sp)
    b494:	df000017 	ldw	fp,0(sp)
    b498:	dec00204 	addi	sp,sp,8
    b49c:	f800283a 	ret

0000b4a0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    b4a0:	defffd04 	addi	sp,sp,-12
    b4a4:	dfc00215 	stw	ra,8(sp)
    b4a8:	df000115 	stw	fp,4(sp)
    b4ac:	df000104 	addi	fp,sp,4
    b4b0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU, cpu);
    b4b4:	000deb80 	call	deb8 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    b4b8:	00800044 	movi	r2,1
    b4bc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    b4c0:	e037883a 	mov	sp,fp
    b4c4:	dfc00117 	ldw	ra,4(sp)
    b4c8:	df000017 	ldw	fp,0(sp)
    b4cc:	dec00204 	addi	sp,sp,8
    b4d0:	f800283a 	ret

0000b4d4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    b4d4:	defffe04 	addi	sp,sp,-8
    b4d8:	dfc00115 	stw	ra,4(sp)
    b4dc:	df000015 	stw	fp,0(sp)
    b4e0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    b4e4:	0100c034 	movhi	r4,768
    b4e8:	000b883a 	mov	r5,zero
    b4ec:	01800144 	movi	r6,5
    b4f0:	01c0fa04 	movi	r7,1000
    b4f4:	000ca700 	call	ca70 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS, epcs);
    b4f8:	01000074 	movhi	r4,1
    b4fc:	213d6904 	addi	r4,r4,-2652
    b500:	000b5700 	call	b570 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    b504:	01000074 	movhi	r4,1
    b508:	213da504 	addi	r4,r4,-2412
    b50c:	000b883a 	mov	r5,zero
    b510:	000d883a 	mov	r6,zero
    b514:	000c09c0 	call	c09c <altera_avalon_jtag_uart_init>
    b518:	01000074 	movhi	r4,1
    b51c:	213d9b04 	addi	r4,r4,-2452
    b520:	000b5380 	call	b538 <alt_dev_reg>
}
    b524:	e037883a 	mov	sp,fp
    b528:	dfc00117 	ldw	ra,4(sp)
    b52c:	df000017 	ldw	fp,0(sp)
    b530:	dec00204 	addi	sp,sp,8
    b534:	f800283a 	ret

0000b538 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    b538:	defffd04 	addi	sp,sp,-12
    b53c:	dfc00215 	stw	ra,8(sp)
    b540:	df000115 	stw	fp,4(sp)
    b544:	df000104 	addi	fp,sp,4
    b548:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    b54c:	e13fff17 	ldw	r4,-4(fp)
    b550:	01400074 	movhi	r5,1
    b554:	2941bb04 	addi	r5,r5,1772
    b558:	000d36c0 	call	d36c <alt_dev_llist_insert>
}
    b55c:	e037883a 	mov	sp,fp
    b560:	dfc00117 	ldw	ra,4(sp)
    b564:	df000017 	ldw	fp,0(sp)
    b568:	dec00204 	addi	sp,sp,8
    b56c:	f800283a 	ret

0000b570 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
    b570:	defffc04 	addi	sp,sp,-16
    b574:	dfc00315 	stw	ra,12(sp)
    b578:	df000215 	stw	fp,8(sp)
    b57c:	df000204 	addi	fp,sp,8
    b580:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
    b584:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
    b588:	e13fff17 	ldw	r4,-4(fp)
    b58c:	000b5fc0 	call	b5fc <alt_epcs_flash_query>
    b590:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
    b594:	e0bffe17 	ldw	r2,-8(fp)
    b598:	1004c03a 	cmpne	r2,r2,zero
    b59c:	1000031e 	bne	r2,zero,b5ac <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
    b5a0:	e13fff17 	ldw	r4,-4(fp)
    b5a4:	000b5c40 	call	b5c4 <alt_flash_device_register>
    b5a8:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
    b5ac:	e0bffe17 	ldw	r2,-8(fp)
}
    b5b0:	e037883a 	mov	sp,fp
    b5b4:	dfc00117 	ldw	ra,4(sp)
    b5b8:	df000017 	ldw	fp,0(sp)
    b5bc:	dec00204 	addi	sp,sp,8
    b5c0:	f800283a 	ret

0000b5c4 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
    b5c4:	defffd04 	addi	sp,sp,-12
    b5c8:	dfc00215 	stw	ra,8(sp)
    b5cc:	df000115 	stw	fp,4(sp)
    b5d0:	df000104 	addi	fp,sp,4
    b5d4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
    b5d8:	e13fff17 	ldw	r4,-4(fp)
    b5dc:	01400074 	movhi	r5,1
    b5e0:	2941c004 	addi	r5,r5,1792
    b5e4:	000d36c0 	call	d36c <alt_dev_llist_insert>
}
    b5e8:	e037883a 	mov	sp,fp
    b5ec:	dfc00117 	ldw	ra,4(sp)
    b5f0:	df000017 	ldw	fp,0(sp)
    b5f4:	dec00204 	addi	sp,sp,8
    b5f8:	f800283a 	ret

0000b5fc <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
    b5fc:	defffc04 	addi	sp,sp,-16
    b600:	dfc00315 	stw	ra,12(sp)
    b604:	df000215 	stw	fp,8(sp)
    b608:	df000204 	addi	fp,sp,8
    b60c:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
    b610:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
    b614:	e0bfff17 	ldw	r2,-4(fp)
    b618:	10003115 	stw	zero,196(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    b61c:	e0bfff17 	ldw	r2,-4(fp)
    b620:	11002d17 	ldw	r4,180(r2)
    b624:	000d0380 	call	d038 <epcs_read_electronic_signature>
    b628:	10c03fcc 	andi	r3,r2,255
    b62c:	e0bfff17 	ldw	r2,-4(fp)
    b630:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
    b634:	e0bfff17 	ldw	r2,-4(fp)
    b638:	10802f17 	ldw	r2,188(r2)
    b63c:	10800598 	cmpnei	r2,r2,22
    b640:	10000a1e 	bne	r2,zero,b66c <alt_epcs_flash_query+0x70>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
    b644:	e0ffff17 	ldw	r3,-4(fp)
    b648:	00802034 	movhi	r2,128
    b64c:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 128;
    b650:	e0ffff17 	ldw	r3,-4(fp)
    b654:	00802004 	movi	r2,128
    b658:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
    b65c:	e0ffff17 	ldw	r3,-4(fp)
    b660:	00800074 	movhi	r2,1
    b664:	18801015 	stw	r2,64(r3)
    b668:	00007306 	br	b838 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
    b66c:	e0bfff17 	ldw	r2,-4(fp)
    b670:	10802f17 	ldw	r2,188(r2)
    b674:	10800518 	cmpnei	r2,r2,20
    b678:	10000a1e 	bne	r2,zero,b6a4 <alt_epcs_flash_query+0xa8>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
    b67c:	e0ffff17 	ldw	r3,-4(fp)
    b680:	00800834 	movhi	r2,32
    b684:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 32;
    b688:	e0ffff17 	ldw	r3,-4(fp)
    b68c:	00800804 	movi	r2,32
    b690:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
    b694:	e0ffff17 	ldw	r3,-4(fp)
    b698:	00800074 	movhi	r2,1
    b69c:	18801015 	stw	r2,64(r3)
    b6a0:	00006506 	br	b838 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
    b6a4:	e0bfff17 	ldw	r2,-4(fp)
    b6a8:	10802f17 	ldw	r2,188(r2)
    b6ac:	108004d8 	cmpnei	r2,r2,19
    b6b0:	10000a1e 	bne	r2,zero,b6dc <alt_epcs_flash_query+0xe0>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
    b6b4:	e0ffff17 	ldw	r3,-4(fp)
    b6b8:	00800434 	movhi	r2,16
    b6bc:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 16;
    b6c0:	e0ffff17 	ldw	r3,-4(fp)
    b6c4:	00800404 	movi	r2,16
    b6c8:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
    b6cc:	e0ffff17 	ldw	r3,-4(fp)
    b6d0:	00800074 	movhi	r2,1
    b6d4:	18801015 	stw	r2,64(r3)
    b6d8:	00005706 	br	b838 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
    b6dc:	e0bfff17 	ldw	r2,-4(fp)
    b6e0:	10802f17 	ldw	r2,188(r2)
    b6e4:	10800498 	cmpnei	r2,r2,18
    b6e8:	10000a1e 	bne	r2,zero,b714 <alt_epcs_flash_query+0x118>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
    b6ec:	e0ffff17 	ldw	r3,-4(fp)
    b6f0:	00800234 	movhi	r2,8
    b6f4:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 8;
    b6f8:	e0ffff17 	ldw	r3,-4(fp)
    b6fc:	00800204 	movi	r2,8
    b700:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
    b704:	e0ffff17 	ldw	r3,-4(fp)
    b708:	00800074 	movhi	r2,1
    b70c:	18801015 	stw	r2,64(r3)
    b710:	00004906 	br	b838 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
    b714:	e0bfff17 	ldw	r2,-4(fp)
    b718:	10802f17 	ldw	r2,188(r2)
    b71c:	10800418 	cmpnei	r2,r2,16
    b720:	10000a1e 	bne	r2,zero,b74c <alt_epcs_flash_query+0x150>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
    b724:	e0ffff17 	ldw	r3,-4(fp)
    b728:	008000b4 	movhi	r2,2
    b72c:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 4;
    b730:	e0ffff17 	ldw	r3,-4(fp)
    b734:	00800104 	movi	r2,4
    b738:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 32768;
    b73c:	e0ffff17 	ldw	r3,-4(fp)
    b740:	00a00014 	movui	r2,32768
    b744:	18801015 	stw	r2,64(r3)
    b748:	00003b06 	br	b838 <alt_epcs_flash_query+0x23c>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
    b74c:	e0bfff17 	ldw	r2,-4(fp)
    b750:	11002d17 	ldw	r4,180(r2)
    b754:	000d0a40 	call	d0a4 <epcs_read_device_id>
    b758:	1007883a 	mov	r3,r2
    b75c:	e0bfff17 	ldw	r2,-4(fp)
    b760:	10c02f15 	stw	r3,188(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
    b764:	e0bfff17 	ldw	r2,-4(fp)
    b768:	10c02f17 	ldw	r3,188(r2)
    b76c:	00804034 	movhi	r2,256
    b770:	10bfffc4 	addi	r2,r2,-1
    b774:	1886703a 	and	r3,r3,r2
    b778:	00800874 	movhi	r2,33
    b77c:	10ae8604 	addi	r2,r2,-17896
    b780:	18800a1e 	bne	r3,r2,b7ac <alt_epcs_flash_query+0x1b0>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
    b784:	e0ffff17 	ldw	r3,-4(fp)
    b788:	00804034 	movhi	r2,256
    b78c:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
    b790:	e0ffff17 	ldw	r3,-4(fp)
    b794:	00804004 	movi	r2,256
    b798:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    b79c:	e0ffff17 	ldw	r3,-4(fp)
    b7a0:	00800074 	movhi	r2,1
    b7a4:	18801015 	stw	r2,64(r3)
    b7a8:	00002306 	br	b838 <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
    b7ac:	e0bfff17 	ldw	r2,-4(fp)
    b7b0:	10802f17 	ldw	r2,188(r2)
    b7b4:	10803fcc 	andi	r2,r2,255
    b7b8:	10800618 	cmpnei	r2,r2,24
    b7bc:	10000a1e 	bne	r2,zero,b7e8 <alt_epcs_flash_query+0x1ec>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
    b7c0:	e0ffff17 	ldw	r3,-4(fp)
    b7c4:	00804034 	movhi	r2,256
    b7c8:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 64;
    b7cc:	e0ffff17 	ldw	r3,-4(fp)
    b7d0:	00801004 	movi	r2,64
    b7d4:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 262144;
    b7d8:	e0ffff17 	ldw	r3,-4(fp)
    b7dc:	00800134 	movhi	r2,4
    b7e0:	18801015 	stw	r2,64(r3)
    b7e4:	00001406 	br	b838 <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
    b7e8:	e0bfff17 	ldw	r2,-4(fp)
    b7ec:	10802f17 	ldw	r2,188(r2)
    b7f0:	10803fcc 	andi	r2,r2,255
    b7f4:	10800658 	cmpnei	r2,r2,25
    b7f8:	10000d1e 	bne	r2,zero,b830 <alt_epcs_flash_query+0x234>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
    b7fc:	e0ffff17 	ldw	r3,-4(fp)
    b800:	00808034 	movhi	r2,512
    b804:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
    b808:	e0ffff17 	ldw	r3,-4(fp)
    b80c:	00808004 	movi	r2,512
    b810:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
    b814:	e0ffff17 	ldw	r3,-4(fp)
    b818:	00800074 	movhi	r2,1
    b81c:	18801015 	stw	r2,64(r3)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
    b820:	e0ffff17 	ldw	r3,-4(fp)
    b824:	00800044 	movi	r2,1
    b828:	18803115 	stw	r2,196(r3)
    b82c:	00000206 	br	b838 <alt_epcs_flash_query+0x23c>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
    b830:	00bffb44 	movi	r2,-19
    b834:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
    b838:	e0bfff17 	ldw	r2,-4(fp)
    b83c:	10800e17 	ldw	r2,56(r2)
    b840:	1007883a 	mov	r3,r2
    b844:	e0bfff17 	ldw	r2,-4(fp)
    b848:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
    b84c:	e0ffff17 	ldw	r3,-4(fp)
    b850:	00800044 	movi	r2,1
    b854:	18800c15 	stw	r2,48(r3)
  flash->dev.region_info[0].offset = 0;
    b858:	e0bfff17 	ldw	r2,-4(fp)
    b85c:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
    b860:	e0ffff17 	ldw	r3,-4(fp)
    b864:	00804004 	movi	r2,256
    b868:	18803015 	stw	r2,192(r3)

  /* Consider clearing all BP bits here. */
  return ret_code;
    b86c:	e0bffe17 	ldw	r2,-8(fp)
}
    b870:	e037883a 	mov	sp,fp
    b874:	dfc00117 	ldw	ra,4(sp)
    b878:	df000017 	ldw	fp,0(sp)
    b87c:	dec00204 	addi	sp,sp,8
    b880:	f800283a 	ret

0000b884 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
    b884:	deffeb04 	addi	sp,sp,-84
    b888:	dfc01415 	stw	ra,80(sp)
    b88c:	df001315 	stw	fp,76(sp)
    b890:	df001304 	addi	fp,sp,76
    b894:	e13ff915 	stw	r4,-28(fp)
    b898:	e17ffa15 	stw	r5,-24(fp)
    b89c:	e1bffb15 	stw	r6,-20(fp)
    b8a0:	e1fffc15 	stw	r7,-16(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
    b8a4:	00800804 	movi	r2,32
    b8a8:	e0bff015 	stw	r2,-64(fp)
  int current_offset = 0;
    b8ac:	e03fef15 	stw	zero,-68(fp)

  while (n > 0)
    b8b0:	00002c06 	br	b964 <alt_epcs_flash_memcmp+0xe0>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    b8b4:	e0bff017 	ldw	r2,-64(fp)
    b8b8:	e0bfff15 	stw	r2,-4(fp)
    b8bc:	e0fffc17 	ldw	r3,-16(fp)
    b8c0:	e0fffe15 	stw	r3,-8(fp)
    b8c4:	e0bfff17 	ldw	r2,-4(fp)
    b8c8:	e0fffe17 	ldw	r3,-8(fp)
    b8cc:	10c0022e 	bgeu	r2,r3,b8d8 <alt_epcs_flash_memcmp+0x54>
    b8d0:	e0bfff17 	ldw	r2,-4(fp)
    b8d4:	e0bffe15 	stw	r2,-8(fp)
    b8d8:	e0fffe17 	ldw	r3,-8(fp)
    b8dc:	e0ffee15 	stw	r3,-72(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
    b8e0:	e0fffb17 	ldw	r3,-20(fp)
    b8e4:	e0bfef17 	ldw	r2,-68(fp)
    b8e8:	188b883a 	add	r5,r3,r2
    b8ec:	e1bff104 	addi	r6,fp,-60
    b8f0:	e13ff917 	ldw	r4,-28(fp)
    b8f4:	e1ffee17 	ldw	r7,-72(fp)
    b8f8:	000bebc0 	call	bebc <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
    b8fc:	1004403a 	cmpge	r2,r2,zero
    b900:	1000031e 	bne	r2,zero,b910 <alt_epcs_flash_memcmp+0x8c>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
    b904:	00bfffc4 	movi	r2,-1
    b908:	e0bffd15 	stw	r2,-12(fp)
    b90c:	00001906 	br	b974 <alt_epcs_flash_memcmp+0xf0>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
    b910:	e0fffa17 	ldw	r3,-24(fp)
    b914:	e0bfef17 	ldw	r2,-68(fp)
    b918:	1889883a 	add	r4,r3,r2
    b91c:	e1bfee17 	ldw	r6,-72(fp)
    b920:	e17ff104 	addi	r5,fp,-60
    b924:	000e4580 	call	e458 <memcmp>
    b928:	e0bfed15 	stw	r2,-76(fp)
    if (this_chunk_cmp)
    b92c:	e0bfed17 	ldw	r2,-76(fp)
    b930:	1005003a 	cmpeq	r2,r2,zero
    b934:	1000031e 	bne	r2,zero,b944 <alt_epcs_flash_memcmp+0xc0>
    {
      return this_chunk_cmp;
    b938:	e0ffed17 	ldw	r3,-76(fp)
    b93c:	e0fffd15 	stw	r3,-12(fp)
    b940:	00000c06 	br	b974 <alt_epcs_flash_memcmp+0xf0>
    }

    n -= this_chunk_size;
    b944:	e0ffee17 	ldw	r3,-72(fp)
    b948:	e0bffc17 	ldw	r2,-16(fp)
    b94c:	10c5c83a 	sub	r2,r2,r3
    b950:	e0bffc15 	stw	r2,-16(fp)
    current_offset += this_chunk_size;
    b954:	e0ffef17 	ldw	r3,-68(fp)
    b958:	e0bfee17 	ldw	r2,-72(fp)
    b95c:	1885883a 	add	r2,r3,r2
    b960:	e0bfef15 	stw	r2,-68(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
    b964:	e0bffc17 	ldw	r2,-16(fp)
    b968:	1004c03a 	cmpne	r2,r2,zero
    b96c:	103fd11e 	bne	r2,zero,b8b4 <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
    b970:	e03ffd15 	stw	zero,-12(fp)
    b974:	e0bffd17 	ldw	r2,-12(fp)
}
    b978:	e037883a 	mov	sp,fp
    b97c:	dfc00117 	ldw	ra,4(sp)
    b980:	df000017 	ldw	fp,0(sp)
    b984:	dec00204 	addi	sp,sp,8
    b988:	f800283a 	ret

0000b98c <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
    b98c:	defff204 	addi	sp,sp,-56
    b990:	dfc00d15 	stw	ra,52(sp)
    b994:	df000c15 	stw	fp,48(sp)
    b998:	df000c04 	addi	fp,sp,48
    b99c:	e13ffa15 	stw	r4,-24(fp)
    b9a0:	e17ffb15 	stw	r5,-20(fp)
    b9a4:	e1bffc15 	stw	r6,-16(fp)
    b9a8:	e1fffd15 	stw	r7,-12(fp)
  int         ret_code = 0;
    b9ac:	e03ff915 	stw	zero,-28(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
    b9b0:	e03ff815 	stw	zero,-32(fp)
    b9b4:	00008b06 	br	bbe4 <alt_epcs_flash_write+0x258>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
    b9b8:	e0bff817 	ldw	r2,-32(fp)
    b9bc:	e0fffa17 	ldw	r3,-24(fp)
    b9c0:	1004913a 	slli	r2,r2,4
    b9c4:	10c5883a 	add	r2,r2,r3
    b9c8:	10800d04 	addi	r2,r2,52
    b9cc:	10c00017 	ldw	r3,0(r2)
    b9d0:	e0bffb17 	ldw	r2,-20(fp)
    b9d4:	10c08016 	blt	r2,r3,bbd8 <alt_epcs_flash_write+0x24c>
    b9d8:	e0bff817 	ldw	r2,-32(fp)
    b9dc:	e0fffa17 	ldw	r3,-24(fp)
    b9e0:	1004913a 	slli	r2,r2,4
    b9e4:	10c5883a 	add	r2,r2,r3
    b9e8:	10800d04 	addi	r2,r2,52
    b9ec:	11000017 	ldw	r4,0(r2)
    b9f0:	e0bff817 	ldw	r2,-32(fp)
    b9f4:	e0fffa17 	ldw	r3,-24(fp)
    b9f8:	1004913a 	slli	r2,r2,4
    b9fc:	10c5883a 	add	r2,r2,r3
    ba00:	10800e04 	addi	r2,r2,56
    ba04:	10800017 	ldw	r2,0(r2)
    ba08:	2087883a 	add	r3,r4,r2
    ba0c:	e0bffb17 	ldw	r2,-20(fp)
    ba10:	10c0710e 	bge	r2,r3,bbd8 <alt_epcs_flash_write+0x24c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
    ba14:	e0bff817 	ldw	r2,-32(fp)
    ba18:	e0fffa17 	ldw	r3,-24(fp)
    ba1c:	1004913a 	slli	r2,r2,4
    ba20:	10c5883a 	add	r2,r2,r3
    ba24:	10800d04 	addi	r2,r2,52
    ba28:	10800017 	ldw	r2,0(r2)
    ba2c:	e0bff515 	stw	r2,-44(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
    ba30:	e03ff715 	stw	zero,-36(fp)
    ba34:	00006006 	br	bbb8 <alt_epcs_flash_write+0x22c>
      {
        if ((offset >= current_offset ) &&
    ba38:	e0fffb17 	ldw	r3,-20(fp)
    ba3c:	e0bff517 	ldw	r2,-44(fp)
    ba40:	18805116 	blt	r3,r2,bb88 <alt_epcs_flash_write+0x1fc>
    ba44:	e0bff817 	ldw	r2,-32(fp)
    ba48:	e0fffa17 	ldw	r3,-24(fp)
    ba4c:	1004913a 	slli	r2,r2,4
    ba50:	10c5883a 	add	r2,r2,r3
    ba54:	10801004 	addi	r2,r2,64
    ba58:	10c00017 	ldw	r3,0(r2)
    ba5c:	e0bff517 	ldw	r2,-44(fp)
    ba60:	1887883a 	add	r3,r3,r2
    ba64:	e0bffb17 	ldw	r2,-20(fp)
    ba68:	10c0470e 	bge	r2,r3,bb88 <alt_epcs_flash_write+0x1fc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
    ba6c:	e0bff817 	ldw	r2,-32(fp)
    ba70:	e0fffa17 	ldw	r3,-24(fp)
    ba74:	1004913a 	slli	r2,r2,4
    ba78:	10c5883a 	add	r2,r2,r3
    ba7c:	10801004 	addi	r2,r2,64
    ba80:	10c00017 	ldw	r3,0(r2)
    ba84:	e0bff517 	ldw	r2,-44(fp)
    ba88:	1887883a 	add	r3,r3,r2
    ba8c:	e0bffb17 	ldw	r2,-20(fp)
    ba90:	1885c83a 	sub	r2,r3,r2
    ba94:	e0bff615 	stw	r2,-40(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
    ba98:	e0bff617 	ldw	r2,-40(fp)
    ba9c:	e0bfff15 	stw	r2,-4(fp)
    baa0:	e0fffd17 	ldw	r3,-12(fp)
    baa4:	e0fffe15 	stw	r3,-8(fp)
    baa8:	e0bfff17 	ldw	r2,-4(fp)
    baac:	e0fffe17 	ldw	r3,-8(fp)
    bab0:	10c0020e 	bge	r2,r3,babc <alt_epcs_flash_write+0x130>
    bab4:	e0bfff17 	ldw	r2,-4(fp)
    bab8:	e0bffe15 	stw	r2,-8(fp)
    babc:	e0fffe17 	ldw	r3,-8(fp)
    bac0:	e0fff615 	stw	r3,-40(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
    bac4:	e1fff617 	ldw	r7,-40(fp)
    bac8:	e13ffa17 	ldw	r4,-24(fp)
    bacc:	e17ffc17 	ldw	r5,-16(fp)
    bad0:	e1bffb17 	ldw	r6,-20(fp)
    bad4:	000b8840 	call	b884 <alt_epcs_flash_memcmp>
    bad8:	1005003a 	cmpeq	r2,r2,zero
    badc:	1000131e 	bne	r2,zero,bb2c <alt_epcs_flash_write+0x1a0>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
    bae0:	e0bffa17 	ldw	r2,-24(fp)
    bae4:	10800817 	ldw	r2,32(r2)
    bae8:	e13ffa17 	ldw	r4,-24(fp)
    baec:	e17ff517 	ldw	r5,-44(fp)
    baf0:	103ee83a 	callr	r2
    baf4:	e0bff915 	stw	r2,-28(fp)

            if (!ret_code)
    baf8:	e0bff917 	ldw	r2,-28(fp)
    bafc:	1004c03a 	cmpne	r2,r2,zero
    bb00:	10000a1e 	bne	r2,zero,bb2c <alt_epcs_flash_write+0x1a0>
            {
              ret_code = (*flash_info->write_block)(
    bb04:	e0bffa17 	ldw	r2,-24(fp)
    bb08:	10c00917 	ldw	r3,36(r2)
    bb0c:	e0bff617 	ldw	r2,-40(fp)
    bb10:	d8800015 	stw	r2,0(sp)
    bb14:	e13ffa17 	ldw	r4,-24(fp)
    bb18:	e17ff517 	ldw	r5,-44(fp)
    bb1c:	e1bffb17 	ldw	r6,-20(fp)
    bb20:	e1fffc17 	ldw	r7,-16(fp)
    bb24:	183ee83a 	callr	r3
    bb28:	e0bff915 	stw	r2,-28(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
    bb2c:	e0fffd17 	ldw	r3,-12(fp)
    bb30:	e0bff617 	ldw	r2,-40(fp)
    bb34:	18802f26 	beq	r3,r2,bbf4 <alt_epcs_flash_write+0x268>
    bb38:	e0bff917 	ldw	r2,-28(fp)
    bb3c:	1004c03a 	cmpne	r2,r2,zero
    bb40:	10002c1e 	bne	r2,zero,bbf4 <alt_epcs_flash_write+0x268>
          {
            goto finished;
          }

          length -= data_to_write;
    bb44:	e0fffd17 	ldw	r3,-12(fp)
    bb48:	e0bff617 	ldw	r2,-40(fp)
    bb4c:	1885c83a 	sub	r2,r3,r2
    bb50:	e0bffd15 	stw	r2,-12(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
    bb54:	e0bff817 	ldw	r2,-32(fp)
    bb58:	e0fffa17 	ldw	r3,-24(fp)
    bb5c:	1004913a 	slli	r2,r2,4
    bb60:	10c5883a 	add	r2,r2,r3
    bb64:	10801004 	addi	r2,r2,64
    bb68:	10c00017 	ldw	r3,0(r2)
    bb6c:	e0bff517 	ldw	r2,-44(fp)
    bb70:	1885883a 	add	r2,r3,r2
    bb74:	e0bffb15 	stw	r2,-20(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
    bb78:	e0fffc17 	ldw	r3,-16(fp)
    bb7c:	e0bff617 	ldw	r2,-40(fp)
    bb80:	1885883a 	add	r2,r3,r2
    bb84:	e0bffc15 	stw	r2,-16(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
    bb88:	e0bff817 	ldw	r2,-32(fp)
    bb8c:	e0fffa17 	ldw	r3,-24(fp)
    bb90:	1004913a 	slli	r2,r2,4
    bb94:	10c5883a 	add	r2,r2,r3
    bb98:	10801004 	addi	r2,r2,64
    bb9c:	10c00017 	ldw	r3,0(r2)
    bba0:	e0bff517 	ldw	r2,-44(fp)
    bba4:	10c5883a 	add	r2,r2,r3
    bba8:	e0bff515 	stw	r2,-44(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
    bbac:	e0bff717 	ldw	r2,-36(fp)
    bbb0:	10800044 	addi	r2,r2,1
    bbb4:	e0bff715 	stw	r2,-36(fp)
    bbb8:	e0bff817 	ldw	r2,-32(fp)
    bbbc:	e0fffa17 	ldw	r3,-24(fp)
    bbc0:	1004913a 	slli	r2,r2,4
    bbc4:	10c5883a 	add	r2,r2,r3
    bbc8:	10800f04 	addi	r2,r2,60
    bbcc:	10c00017 	ldw	r3,0(r2)
    bbd0:	e0bff717 	ldw	r2,-36(fp)
    bbd4:	10ff9816 	blt	r2,r3,ba38 <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
    bbd8:	e0bff817 	ldw	r2,-32(fp)
    bbdc:	10800044 	addi	r2,r2,1
    bbe0:	e0bff815 	stw	r2,-32(fp)
    bbe4:	e0bffa17 	ldw	r2,-24(fp)
    bbe8:	10c00c17 	ldw	r3,48(r2)
    bbec:	e0bff817 	ldw	r2,-32(fp)
    bbf0:	10ff7116 	blt	r2,r3,b9b8 <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
    bbf4:	e0bff917 	ldw	r2,-28(fp)
}
    bbf8:	e037883a 	mov	sp,fp
    bbfc:	dfc00117 	ldw	ra,4(sp)
    bc00:	df000017 	ldw	fp,0(sp)
    bc04:	dec00204 	addi	sp,sp,8
    bc08:	f800283a 	ret

0000bc0c <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
    bc0c:	defffa04 	addi	sp,sp,-24
    bc10:	df000515 	stw	fp,20(sp)
    bc14:	df000504 	addi	fp,sp,20
    bc18:	e13ffd15 	stw	r4,-12(fp)
    bc1c:	e17ffe15 	stw	r5,-8(fp)
    bc20:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
    bc24:	e03ffc15 	stw	zero,-16(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
    bc28:	e0bffd17 	ldw	r2,-12(fp)
    bc2c:	e0bffb15 	stw	r2,-20(fp)

  *number_of_regions = flash->number_of_regions;
    bc30:	e0bffb17 	ldw	r2,-20(fp)
    bc34:	10c00c17 	ldw	r3,48(r2)
    bc38:	e0bfff17 	ldw	r2,-4(fp)
    bc3c:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
    bc40:	e0bffb17 	ldw	r2,-20(fp)
    bc44:	10800c17 	ldw	r2,48(r2)
    bc48:	1004c03a 	cmpne	r2,r2,zero
    bc4c:	1000031e 	bne	r2,zero,bc5c <alt_epcs_flash_get_info+0x50>
  {
    ret_code = -EIO;
    bc50:	00bffec4 	movi	r2,-5
    bc54:	e0bffc15 	stw	r2,-16(fp)
    bc58:	00000b06 	br	bc88 <alt_epcs_flash_get_info+0x7c>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
    bc5c:	e0bffb17 	ldw	r2,-20(fp)
    bc60:	10800c17 	ldw	r2,48(r2)
    bc64:	10800250 	cmplti	r2,r2,9
    bc68:	1000031e 	bne	r2,zero,bc78 <alt_epcs_flash_get_info+0x6c>
  {
    ret_code = -ENOMEM;
    bc6c:	00bffd04 	movi	r2,-12
    bc70:	e0bffc15 	stw	r2,-16(fp)
    bc74:	00000406 	br	bc88 <alt_epcs_flash_get_info+0x7c>
  }
  else
  {
    *info = &flash->region_info[0];
    bc78:	e0bffb17 	ldw	r2,-20(fp)
    bc7c:	10c00d04 	addi	r3,r2,52
    bc80:	e0bffe17 	ldw	r2,-8(fp)
    bc84:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
    bc88:	e0bffc17 	ldw	r2,-16(fp)
}
    bc8c:	e037883a 	mov	sp,fp
    bc90:	df000017 	ldw	fp,0(sp)
    bc94:	dec00104 	addi	sp,sp,4
    bc98:	f800283a 	ret

0000bc9c <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
    bc9c:	defffa04 	addi	sp,sp,-24
    bca0:	dfc00515 	stw	ra,20(sp)
    bca4:	df000415 	stw	fp,16(sp)
    bca8:	df000404 	addi	fp,sp,16
    bcac:	e13ffe15 	stw	r4,-8(fp)
    bcb0:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
    bcb4:	e03ffd15 	stw	zero,-12(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    bcb8:	e0bffe17 	ldw	r2,-8(fp)
    bcbc:	e0bffc15 	stw	r2,-16(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
    bcc0:	e13ffe17 	ldw	r4,-8(fp)
    bcc4:	e17fff17 	ldw	r5,-4(fp)
    bcc8:	000bd0c0 	call	bd0c <alt_epcs_test_address>
    bccc:	e0bffd15 	stw	r2,-12(fp)

  if (ret_code >= 0)
    bcd0:	e0bffd17 	ldw	r2,-12(fp)
    bcd4:	1004803a 	cmplt	r2,r2,zero
    bcd8:	1000061e 	bne	r2,zero,bcf4 <alt_epcs_flash_erase_block+0x58>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
    bcdc:	e0bffc17 	ldw	r2,-16(fp)
    bce0:	11002d17 	ldw	r4,180(r2)
    bce4:	e17fff17 	ldw	r5,-4(fp)
    bce8:	e0bffc17 	ldw	r2,-16(fp)
    bcec:	11803117 	ldw	r6,196(r2)
    bcf0:	000cb600 	call	cb60 <epcs_sector_erase>
  }
  return ret_code;
    bcf4:	e0bffd17 	ldw	r2,-12(fp)
}
    bcf8:	e037883a 	mov	sp,fp
    bcfc:	dfc00117 	ldw	ra,4(sp)
    bd00:	df000017 	ldw	fp,0(sp)
    bd04:	dec00204 	addi	sp,sp,8
    bd08:	f800283a 	ret

0000bd0c <alt_epcs_test_address>:
}


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
    bd0c:	defff904 	addi	sp,sp,-28
    bd10:	df000615 	stw	fp,24(sp)
    bd14:	df000604 	addi	fp,sp,24
    bd18:	e13ffe15 	stw	r4,-8(fp)
    bd1c:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
    bd20:	e03ffd15 	stw	zero,-12(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    bd24:	e0bffe17 	ldw	r2,-8(fp)
    bd28:	e0bffc15 	stw	r2,-16(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
    bd2c:	e0bffc17 	ldw	r2,-16(fp)
    bd30:	10800c17 	ldw	r2,48(r2)
    bd34:	10bfffc4 	addi	r2,r2,-1
    bd38:	e0bffb15 	stw	r2,-20(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
    bd3c:	e0bffb17 	ldw	r2,-20(fp)
    bd40:	e0fffc17 	ldw	r3,-16(fp)
    bd44:	1004913a 	slli	r2,r2,4
    bd48:	10c5883a 	add	r2,r2,r3
    bd4c:	10800d04 	addi	r2,r2,52
    bd50:	11000017 	ldw	r4,0(r2)
    bd54:	e0bffb17 	ldw	r2,-20(fp)
    bd58:	e0fffc17 	ldw	r3,-16(fp)
    bd5c:	1004913a 	slli	r2,r2,4
    bd60:	10c5883a 	add	r2,r2,r3
    bd64:	10800e04 	addi	r2,r2,56
    bd68:	10800017 	ldw	r2,0(r2)
    bd6c:	2085883a 	add	r2,r4,r2
    bd70:	10bfffc4 	addi	r2,r2,-1
    bd74:	e0bffa15 	stw	r2,-24(fp)

  if (offset > last_device_address)
    bd78:	e0ffff17 	ldw	r3,-4(fp)
    bd7c:	e0bffa17 	ldw	r2,-24(fp)
    bd80:	10c0022e 	bgeu	r2,r3,bd8c <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
    bd84:	00bffec4 	movi	r2,-5
    bd88:	e0bffd15 	stw	r2,-12(fp)
  }
  return ret_code;
    bd8c:	e0bffd17 	ldw	r2,-12(fp)
}
    bd90:	e037883a 	mov	sp,fp
    bd94:	df000017 	ldw	fp,0(sp)
    bd98:	dec00104 	addi	sp,sp,4
    bd9c:	f800283a 	ret

0000bda0 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
    bda0:	defff204 	addi	sp,sp,-56
    bda4:	dfc00d15 	stw	ra,52(sp)
    bda8:	df000c15 	stw	fp,48(sp)
    bdac:	df000c04 	addi	fp,sp,48
    bdb0:	e13ffa15 	stw	r4,-24(fp)
    bdb4:	e17ffb15 	stw	r5,-20(fp)
    bdb8:	e1bffc15 	stw	r6,-16(fp)
    bdbc:	e1fffd15 	stw	r7,-12(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    bdc0:	e0bffa17 	ldw	r2,-24(fp)
    bdc4:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
    bdc8:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
    bdcc:	e13ffa17 	ldw	r4,-24(fp)
    bdd0:	e17ffc17 	ldw	r5,-16(fp)
    bdd4:	000bd0c0 	call	bd0c <alt_epcs_test_address>
    bdd8:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
    bddc:	e0bff917 	ldw	r2,-28(fp)
    bde0:	1004803a 	cmplt	r2,r2,zero
    bde4:	10002f1e 	bne	r2,zero,bea4 <alt_epcs_flash_write_block+0x104>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    bde8:	00002b06 	br	be98 <alt_epcs_flash_write_block+0xf8>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
    bdec:	e0bff817 	ldw	r2,-32(fp)
    bdf0:	10c03017 	ldw	r3,192(r2)
    bdf4:	e0bffc17 	ldw	r2,-16(fp)
    bdf8:	1887883a 	add	r3,r3,r2
    bdfc:	e0bff817 	ldw	r2,-32(fp)
    be00:	10803017 	ldw	r2,192(r2)
    be04:	0085c83a 	sub	r2,zero,r2
    be08:	1884703a 	and	r2,r3,r2
    be0c:	e0bff515 	stw	r2,-44(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
    be10:	e0fff517 	ldw	r3,-44(fp)
    be14:	e0bffc17 	ldw	r2,-16(fp)
    be18:	1885c83a 	sub	r2,r3,r2
    be1c:	e0c00217 	ldw	r3,8(fp)
    be20:	e0ffff15 	stw	r3,-4(fp)
    be24:	e0bffe15 	stw	r2,-8(fp)
    be28:	e0bfff17 	ldw	r2,-4(fp)
    be2c:	e0fffe17 	ldw	r3,-8(fp)
    be30:	10c0020e 	bge	r2,r3,be3c <alt_epcs_flash_write_block+0x9c>
    be34:	e0bfff17 	ldw	r2,-4(fp)
    be38:	e0bffe15 	stw	r2,-8(fp)
    be3c:	e0fffe17 	ldw	r3,-8(fp)
    be40:	e0fff615 	stw	r3,-40(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
    be44:	e0bff817 	ldw	r2,-32(fp)
    be48:	11002d17 	ldw	r4,180(r2)
    be4c:	e0fffd17 	ldw	r3,-12(fp)
    be50:	e0bff717 	ldw	r2,-36(fp)
    be54:	188d883a 	add	r6,r3,r2
    be58:	e0bff817 	ldw	r2,-32(fp)
    be5c:	10803117 	ldw	r2,196(r2)
    be60:	d8800015 	stw	r2,0(sp)
    be64:	e17ffc17 	ldw	r5,-16(fp)
    be68:	e1fff617 	ldw	r7,-40(fp)
    be6c:	000cec80 	call	cec8 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
    be70:	e0c00217 	ldw	r3,8(fp)
    be74:	e0bff617 	ldw	r2,-40(fp)
    be78:	1885c83a 	sub	r2,r3,r2
    be7c:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
    be80:	e0fff717 	ldw	r3,-36(fp)
    be84:	e0bff617 	ldw	r2,-40(fp)
    be88:	1885883a 	add	r2,r3,r2
    be8c:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
    be90:	e0bff517 	ldw	r2,-44(fp)
    be94:	e0bffc15 	stw	r2,-16(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
    be98:	e0800217 	ldw	r2,8(fp)
    be9c:	1004c03a 	cmpne	r2,r2,zero
    bea0:	103fd21e 	bne	r2,zero,bdec <alt_epcs_flash_write_block+0x4c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
    bea4:	e0bff917 	ldw	r2,-28(fp)
}
    bea8:	e037883a 	mov	sp,fp
    beac:	dfc00117 	ldw	ra,4(sp)
    beb0:	df000017 	ldw	fp,0(sp)
    beb4:	dec00204 	addi	sp,sp,8
    beb8:	f800283a 	ret

0000bebc <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
    bebc:	defff704 	addi	sp,sp,-36
    bec0:	dfc00815 	stw	ra,32(sp)
    bec4:	df000715 	stw	fp,28(sp)
    bec8:	df000704 	addi	fp,sp,28
    becc:	e13ffc15 	stw	r4,-16(fp)
    bed0:	e17ffd15 	stw	r5,-12(fp)
    bed4:	e1bffe15 	stw	r6,-8(fp)
    bed8:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
    bedc:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
    bee0:	e0bffc17 	ldw	r2,-16(fp)
    bee4:	e0bffa15 	stw	r2,-24(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
    bee8:	e13ffc17 	ldw	r4,-16(fp)
    beec:	e17ffd17 	ldw	r5,-12(fp)
    bef0:	000bd0c0 	call	bd0c <alt_epcs_test_address>
    bef4:	e0bffb15 	stw	r2,-20(fp)

  if (ret_code >= 0)
    bef8:	e0bffb17 	ldw	r2,-20(fp)
    befc:	1004803a 	cmplt	r2,r2,zero
    bf00:	10000e1e 	bne	r2,zero,bf3c <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
    bf04:	e0bffa17 	ldw	r2,-24(fp)
    bf08:	11002d17 	ldw	r4,180(r2)
    bf0c:	e1bffe17 	ldw	r6,-8(fp)
    bf10:	e0bffa17 	ldw	r2,-24(fp)
    bf14:	10803117 	ldw	r2,196(r2)
    bf18:	d8800015 	stw	r2,0(sp)
    bf1c:	e17ffd17 	ldw	r5,-12(fp)
    bf20:	e1ffff17 	ldw	r7,-4(fp)
    bf24:	000ccc80 	call	ccc8 <epcs_read_buffer>
    bf28:	e0bffb15 	stw	r2,-20(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
    bf2c:	e0fffb17 	ldw	r3,-20(fp)
    bf30:	e0bfff17 	ldw	r2,-4(fp)
    bf34:	1880011e 	bne	r3,r2,bf3c <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
    bf38:	e03ffb15 	stw	zero,-20(fp)
    }
  }
  return ret_code;
    bf3c:	e0bffb17 	ldw	r2,-20(fp)
}
    bf40:	e037883a 	mov	sp,fp
    bf44:	dfc00117 	ldw	ra,4(sp)
    bf48:	df000017 	ldw	fp,0(sp)
    bf4c:	dec00204 	addi	sp,sp,8
    bf50:	f800283a 	ret

0000bf54 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    bf54:	defffa04 	addi	sp,sp,-24
    bf58:	dfc00515 	stw	ra,20(sp)
    bf5c:	df000415 	stw	fp,16(sp)
    bf60:	df000404 	addi	fp,sp,16
    bf64:	e13ffd15 	stw	r4,-12(fp)
    bf68:	e17ffe15 	stw	r5,-8(fp)
    bf6c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    bf70:	e0bffd17 	ldw	r2,-12(fp)
    bf74:	10800017 	ldw	r2,0(r2)
    bf78:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    bf7c:	e0bffc17 	ldw	r2,-16(fp)
    bf80:	11000a04 	addi	r4,r2,40
    bf84:	e0bffd17 	ldw	r2,-12(fp)
    bf88:	11c00217 	ldw	r7,8(r2)
    bf8c:	e17ffe17 	ldw	r5,-8(fp)
    bf90:	e1bfff17 	ldw	r6,-4(fp)
    bf94:	000c59c0 	call	c59c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    bf98:	e037883a 	mov	sp,fp
    bf9c:	dfc00117 	ldw	ra,4(sp)
    bfa0:	df000017 	ldw	fp,0(sp)
    bfa4:	dec00204 	addi	sp,sp,8
    bfa8:	f800283a 	ret

0000bfac <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    bfac:	defffa04 	addi	sp,sp,-24
    bfb0:	dfc00515 	stw	ra,20(sp)
    bfb4:	df000415 	stw	fp,16(sp)
    bfb8:	df000404 	addi	fp,sp,16
    bfbc:	e13ffd15 	stw	r4,-12(fp)
    bfc0:	e17ffe15 	stw	r5,-8(fp)
    bfc4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    bfc8:	e0bffd17 	ldw	r2,-12(fp)
    bfcc:	10800017 	ldw	r2,0(r2)
    bfd0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    bfd4:	e0bffc17 	ldw	r2,-16(fp)
    bfd8:	11000a04 	addi	r4,r2,40
    bfdc:	e0bffd17 	ldw	r2,-12(fp)
    bfe0:	11c00217 	ldw	r7,8(r2)
    bfe4:	e17ffe17 	ldw	r5,-8(fp)
    bfe8:	e1bfff17 	ldw	r6,-4(fp)
    bfec:	000c7c00 	call	c7c0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    bff0:	e037883a 	mov	sp,fp
    bff4:	dfc00117 	ldw	ra,4(sp)
    bff8:	df000017 	ldw	fp,0(sp)
    bffc:	dec00204 	addi	sp,sp,8
    c000:	f800283a 	ret

0000c004 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    c004:	defffc04 	addi	sp,sp,-16
    c008:	dfc00315 	stw	ra,12(sp)
    c00c:	df000215 	stw	fp,8(sp)
    c010:	df000204 	addi	fp,sp,8
    c014:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c018:	e0bfff17 	ldw	r2,-4(fp)
    c01c:	10800017 	ldw	r2,0(r2)
    c020:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    c024:	e0bffe17 	ldw	r2,-8(fp)
    c028:	11000a04 	addi	r4,r2,40
    c02c:	e0bfff17 	ldw	r2,-4(fp)
    c030:	11400217 	ldw	r5,8(r2)
    c034:	000c4340 	call	c434 <altera_avalon_jtag_uart_close>
}
    c038:	e037883a 	mov	sp,fp
    c03c:	dfc00117 	ldw	ra,4(sp)
    c040:	df000017 	ldw	fp,0(sp)
    c044:	dec00204 	addi	sp,sp,8
    c048:	f800283a 	ret

0000c04c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    c04c:	defffa04 	addi	sp,sp,-24
    c050:	dfc00515 	stw	ra,20(sp)
    c054:	df000415 	stw	fp,16(sp)
    c058:	df000404 	addi	fp,sp,16
    c05c:	e13ffd15 	stw	r4,-12(fp)
    c060:	e17ffe15 	stw	r5,-8(fp)
    c064:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    c068:	e0bffd17 	ldw	r2,-12(fp)
    c06c:	10800017 	ldw	r2,0(r2)
    c070:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    c074:	e0bffc17 	ldw	r2,-16(fp)
    c078:	11000a04 	addi	r4,r2,40
    c07c:	e17ffe17 	ldw	r5,-8(fp)
    c080:	e1bfff17 	ldw	r6,-4(fp)
    c084:	000c4a80 	call	c4a8 <altera_avalon_jtag_uart_ioctl>
}
    c088:	e037883a 	mov	sp,fp
    c08c:	dfc00117 	ldw	ra,4(sp)
    c090:	df000017 	ldw	fp,0(sp)
    c094:	dec00204 	addi	sp,sp,8
    c098:	f800283a 	ret

0000c09c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    c09c:	defffa04 	addi	sp,sp,-24
    c0a0:	dfc00515 	stw	ra,20(sp)
    c0a4:	df000415 	stw	fp,16(sp)
    c0a8:	df000404 	addi	fp,sp,16
    c0ac:	e13ffd15 	stw	r4,-12(fp)
    c0b0:	e17ffe15 	stw	r5,-8(fp)
    c0b4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c0b8:	e0fffd17 	ldw	r3,-12(fp)
    c0bc:	00800044 	movi	r2,1
    c0c0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    c0c4:	e0bffd17 	ldw	r2,-12(fp)
    c0c8:	10800017 	ldw	r2,0(r2)
    c0cc:	11000104 	addi	r4,r2,4
    c0d0:	e0bffd17 	ldw	r2,-12(fp)
    c0d4:	10800817 	ldw	r2,32(r2)
    c0d8:	1007883a 	mov	r3,r2
    c0dc:	2005883a 	mov	r2,r4
    c0e0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    c0e4:	e13ffe17 	ldw	r4,-8(fp)
    c0e8:	e17fff17 	ldw	r5,-4(fp)
    c0ec:	d8000015 	stw	zero,0(sp)
    c0f0:	01800074 	movhi	r6,1
    c0f4:	31b05704 	addi	r6,r6,-16036
    c0f8:	e1fffd17 	ldw	r7,-12(fp)
    c0fc:	000d6480 	call	d648 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    c100:	e0bffd17 	ldw	r2,-12(fp)
    c104:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    c108:	e0bffd17 	ldw	r2,-12(fp)
    c10c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    c110:	00800074 	movhi	r2,1
    c114:	1088b204 	addi	r2,r2,8904
    c118:	10800017 	ldw	r2,0(r2)
    c11c:	100b883a 	mov	r5,r2
    c120:	01800074 	movhi	r6,1
    c124:	31b0e104 	addi	r6,r6,-15484
    c128:	e1fffd17 	ldw	r7,-12(fp)
    c12c:	000d1d40 	call	d1d4 <alt_alarm_start>
    c130:	1004403a 	cmpge	r2,r2,zero
    c134:	1000041e 	bne	r2,zero,c148 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    c138:	e0fffd17 	ldw	r3,-12(fp)
    c13c:	00a00034 	movhi	r2,32768
    c140:	10bfffc4 	addi	r2,r2,-1
    c144:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    c148:	e037883a 	mov	sp,fp
    c14c:	dfc00117 	ldw	ra,4(sp)
    c150:	df000017 	ldw	fp,0(sp)
    c154:	dec00204 	addi	sp,sp,8
    c158:	f800283a 	ret

0000c15c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    c15c:	defff804 	addi	sp,sp,-32
    c160:	df000715 	stw	fp,28(sp)
    c164:	df000704 	addi	fp,sp,28
    c168:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    c16c:	e0bfff17 	ldw	r2,-4(fp)
    c170:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    c174:	e0bffe17 	ldw	r2,-8(fp)
    c178:	10800017 	ldw	r2,0(r2)
    c17c:	e0bffd15 	stw	r2,-12(fp)
    c180:	00000006 	br	c184 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c184:	e0bffd17 	ldw	r2,-12(fp)
    c188:	10800104 	addi	r2,r2,4
    c18c:	10800037 	ldwio	r2,0(r2)
    c190:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    c194:	e0bffc17 	ldw	r2,-16(fp)
    c198:	1080c00c 	andi	r2,r2,768
    c19c:	1005003a 	cmpeq	r2,r2,zero
    c1a0:	1000741e 	bne	r2,zero,c374 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    c1a4:	e0bffc17 	ldw	r2,-16(fp)
    c1a8:	1080400c 	andi	r2,r2,256
    c1ac:	1005003a 	cmpeq	r2,r2,zero
    c1b0:	1000351e 	bne	r2,zero,c288 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    c1b4:	00800074 	movhi	r2,1
    c1b8:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c1bc:	e0bffe17 	ldw	r2,-8(fp)
    c1c0:	10800a17 	ldw	r2,40(r2)
    c1c4:	10800044 	addi	r2,r2,1
    c1c8:	1081ffcc 	andi	r2,r2,2047
    c1cc:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    c1d0:	e0bffe17 	ldw	r2,-8(fp)
    c1d4:	10c00b17 	ldw	r3,44(r2)
    c1d8:	e0bffa17 	ldw	r2,-24(fp)
    c1dc:	18801626 	beq	r3,r2,c238 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    c1e0:	e0bffd17 	ldw	r2,-12(fp)
    c1e4:	10800037 	ldwio	r2,0(r2)
    c1e8:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    c1ec:	e0bffb17 	ldw	r2,-20(fp)
    c1f0:	10a0000c 	andi	r2,r2,32768
    c1f4:	1005003a 	cmpeq	r2,r2,zero
    c1f8:	10000f1e 	bne	r2,zero,c238 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    c1fc:	e0bffe17 	ldw	r2,-8(fp)
    c200:	10c00a17 	ldw	r3,40(r2)
    c204:	e0bffb17 	ldw	r2,-20(fp)
    c208:	1009883a 	mov	r4,r2
    c20c:	e0bffe17 	ldw	r2,-8(fp)
    c210:	1885883a 	add	r2,r3,r2
    c214:	10800e04 	addi	r2,r2,56
    c218:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c21c:	e0bffe17 	ldw	r2,-8(fp)
    c220:	10800a17 	ldw	r2,40(r2)
    c224:	10800044 	addi	r2,r2,1
    c228:	10c1ffcc 	andi	r3,r2,2047
    c22c:	e0bffe17 	ldw	r2,-8(fp)
    c230:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    c234:	003fe106 	br	c1bc <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    c238:	e0bffb17 	ldw	r2,-20(fp)
    c23c:	10bfffec 	andhi	r2,r2,65535
    c240:	1005003a 	cmpeq	r2,r2,zero
    c244:	1000101e 	bne	r2,zero,c288 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c248:	e0bffe17 	ldw	r2,-8(fp)
    c24c:	10c00817 	ldw	r3,32(r2)
    c250:	00bfff84 	movi	r2,-2
    c254:	1886703a 	and	r3,r3,r2
    c258:	e0bffe17 	ldw	r2,-8(fp)
    c25c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    c260:	e0bffd17 	ldw	r2,-12(fp)
    c264:	11000104 	addi	r4,r2,4
    c268:	e0bffe17 	ldw	r2,-8(fp)
    c26c:	10800817 	ldw	r2,32(r2)
    c270:	1007883a 	mov	r3,r2
    c274:	2005883a 	mov	r2,r4
    c278:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c27c:	e0bffd17 	ldw	r2,-12(fp)
    c280:	10800104 	addi	r2,r2,4
    c284:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    c288:	e0bffc17 	ldw	r2,-16(fp)
    c28c:	1080800c 	andi	r2,r2,512
    c290:	1005003a 	cmpeq	r2,r2,zero
    c294:	103fbb1e 	bne	r2,zero,c184 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    c298:	e0bffc17 	ldw	r2,-16(fp)
    c29c:	10bfffec 	andhi	r2,r2,65535
    c2a0:	1004d43a 	srli	r2,r2,16
    c2a4:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    c2a8:	00001506 	br	c300 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    c2ac:	e13ffd17 	ldw	r4,-12(fp)
    c2b0:	e0bffe17 	ldw	r2,-8(fp)
    c2b4:	10c00d17 	ldw	r3,52(r2)
    c2b8:	e0bffe17 	ldw	r2,-8(fp)
    c2bc:	1885883a 	add	r2,r3,r2
    c2c0:	10820e04 	addi	r2,r2,2104
    c2c4:	10800003 	ldbu	r2,0(r2)
    c2c8:	10c03fcc 	andi	r3,r2,255
    c2cc:	18c0201c 	xori	r3,r3,128
    c2d0:	18ffe004 	addi	r3,r3,-128
    c2d4:	2005883a 	mov	r2,r4
    c2d8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c2dc:	e0bffe17 	ldw	r2,-8(fp)
    c2e0:	10800d17 	ldw	r2,52(r2)
    c2e4:	10800044 	addi	r2,r2,1
    c2e8:	10c1ffcc 	andi	r3,r2,2047
    c2ec:	e0bffe17 	ldw	r2,-8(fp)
    c2f0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    c2f4:	e0bff917 	ldw	r2,-28(fp)
    c2f8:	10bfffc4 	addi	r2,r2,-1
    c2fc:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    c300:	e0bff917 	ldw	r2,-28(fp)
    c304:	1005003a 	cmpeq	r2,r2,zero
    c308:	1000051e 	bne	r2,zero,c320 <altera_avalon_jtag_uart_irq+0x1c4>
    c30c:	e0bffe17 	ldw	r2,-8(fp)
    c310:	10c00d17 	ldw	r3,52(r2)
    c314:	e0bffe17 	ldw	r2,-8(fp)
    c318:	10800c17 	ldw	r2,48(r2)
    c31c:	18bfe31e 	bne	r3,r2,c2ac <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    c320:	e0bff917 	ldw	r2,-28(fp)
    c324:	1005003a 	cmpeq	r2,r2,zero
    c328:	103f961e 	bne	r2,zero,c184 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c32c:	e0bffe17 	ldw	r2,-8(fp)
    c330:	10c00817 	ldw	r3,32(r2)
    c334:	00bfff44 	movi	r2,-3
    c338:	1886703a 	and	r3,r3,r2
    c33c:	e0bffe17 	ldw	r2,-8(fp)
    c340:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c344:	e0bffe17 	ldw	r2,-8(fp)
    c348:	10800017 	ldw	r2,0(r2)
    c34c:	11000104 	addi	r4,r2,4
    c350:	e0bffe17 	ldw	r2,-8(fp)
    c354:	10800817 	ldw	r2,32(r2)
    c358:	1007883a 	mov	r3,r2
    c35c:	2005883a 	mov	r2,r4
    c360:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c364:	e0bffd17 	ldw	r2,-12(fp)
    c368:	10800104 	addi	r2,r2,4
    c36c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    c370:	003f8406 	br	c184 <altera_avalon_jtag_uart_irq+0x28>
}
    c374:	e037883a 	mov	sp,fp
    c378:	df000017 	ldw	fp,0(sp)
    c37c:	dec00104 	addi	sp,sp,4
    c380:	f800283a 	ret

0000c384 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    c384:	defffc04 	addi	sp,sp,-16
    c388:	df000315 	stw	fp,12(sp)
    c38c:	df000304 	addi	fp,sp,12
    c390:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    c394:	e0bfff17 	ldw	r2,-4(fp)
    c398:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    c39c:	e0bffe17 	ldw	r2,-8(fp)
    c3a0:	10800017 	ldw	r2,0(r2)
    c3a4:	10800104 	addi	r2,r2,4
    c3a8:	10800037 	ldwio	r2,0(r2)
    c3ac:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    c3b0:	e0bffd17 	ldw	r2,-12(fp)
    c3b4:	1081000c 	andi	r2,r2,1024
    c3b8:	1005003a 	cmpeq	r2,r2,zero
    c3bc:	10000c1e 	bne	r2,zero,c3f0 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    c3c0:	e0bffe17 	ldw	r2,-8(fp)
    c3c4:	10800017 	ldw	r2,0(r2)
    c3c8:	11000104 	addi	r4,r2,4
    c3cc:	e0bffe17 	ldw	r2,-8(fp)
    c3d0:	10800817 	ldw	r2,32(r2)
    c3d4:	10810014 	ori	r2,r2,1024
    c3d8:	1007883a 	mov	r3,r2
    c3dc:	2005883a 	mov	r2,r4
    c3e0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    c3e4:	e0bffe17 	ldw	r2,-8(fp)
    c3e8:	10000915 	stw	zero,36(r2)
    c3ec:	00000a06 	br	c418 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    c3f0:	e0bffe17 	ldw	r2,-8(fp)
    c3f4:	10c00917 	ldw	r3,36(r2)
    c3f8:	00a00034 	movhi	r2,32768
    c3fc:	10bfff04 	addi	r2,r2,-4
    c400:	10c00536 	bltu	r2,r3,c418 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    c404:	e0bffe17 	ldw	r2,-8(fp)
    c408:	10800917 	ldw	r2,36(r2)
    c40c:	10c00044 	addi	r3,r2,1
    c410:	e0bffe17 	ldw	r2,-8(fp)
    c414:	10c00915 	stw	r3,36(r2)
    c418:	00800074 	movhi	r2,1
    c41c:	1088b204 	addi	r2,r2,8904
    c420:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    c424:	e037883a 	mov	sp,fp
    c428:	df000017 	ldw	fp,0(sp)
    c42c:	dec00104 	addi	sp,sp,4
    c430:	f800283a 	ret

0000c434 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    c434:	defffc04 	addi	sp,sp,-16
    c438:	df000315 	stw	fp,12(sp)
    c43c:	df000304 	addi	fp,sp,12
    c440:	e13ffd15 	stw	r4,-12(fp)
    c444:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c448:	00000706 	br	c468 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    c44c:	e0bffe17 	ldw	r2,-8(fp)
    c450:	1090000c 	andi	r2,r2,16384
    c454:	1005003a 	cmpeq	r2,r2,zero
    c458:	1000031e 	bne	r2,zero,c468 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    c45c:	00bffd44 	movi	r2,-11
    c460:	e0bfff15 	stw	r2,-4(fp)
    c464:	00000b06 	br	c494 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c468:	e0bffd17 	ldw	r2,-12(fp)
    c46c:	10c00d17 	ldw	r3,52(r2)
    c470:	e0bffd17 	ldw	r2,-12(fp)
    c474:	10800c17 	ldw	r2,48(r2)
    c478:	18800526 	beq	r3,r2,c490 <altera_avalon_jtag_uart_close+0x5c>
    c47c:	e0bffd17 	ldw	r2,-12(fp)
    c480:	10c00917 	ldw	r3,36(r2)
    c484:	e0bffd17 	ldw	r2,-12(fp)
    c488:	10800117 	ldw	r2,4(r2)
    c48c:	18bfef36 	bltu	r3,r2,c44c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    c490:	e03fff15 	stw	zero,-4(fp)
    c494:	e0bfff17 	ldw	r2,-4(fp)
}
    c498:	e037883a 	mov	sp,fp
    c49c:	df000017 	ldw	fp,0(sp)
    c4a0:	dec00104 	addi	sp,sp,4
    c4a4:	f800283a 	ret

0000c4a8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    c4a8:	defff804 	addi	sp,sp,-32
    c4ac:	df000715 	stw	fp,28(sp)
    c4b0:	df000704 	addi	fp,sp,28
    c4b4:	e13ffb15 	stw	r4,-20(fp)
    c4b8:	e17ffc15 	stw	r5,-16(fp)
    c4bc:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    c4c0:	00bff9c4 	movi	r2,-25
    c4c4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    c4c8:	e0bffc17 	ldw	r2,-16(fp)
    c4cc:	e0bfff15 	stw	r2,-4(fp)
    c4d0:	e0ffff17 	ldw	r3,-4(fp)
    c4d4:	189a8060 	cmpeqi	r2,r3,27137
    c4d8:	1000041e 	bne	r2,zero,c4ec <altera_avalon_jtag_uart_ioctl+0x44>
    c4dc:	e0ffff17 	ldw	r3,-4(fp)
    c4e0:	189a80a0 	cmpeqi	r2,r3,27138
    c4e4:	10001b1e 	bne	r2,zero,c554 <altera_avalon_jtag_uart_ioctl+0xac>
    c4e8:	00002706 	br	c588 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    c4ec:	e0bffb17 	ldw	r2,-20(fp)
    c4f0:	10c00117 	ldw	r3,4(r2)
    c4f4:	00a00034 	movhi	r2,32768
    c4f8:	10bfffc4 	addi	r2,r2,-1
    c4fc:	18802226 	beq	r3,r2,c588 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    c500:	e0bffd17 	ldw	r2,-12(fp)
    c504:	10800017 	ldw	r2,0(r2)
    c508:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    c50c:	e0bff917 	ldw	r2,-28(fp)
    c510:	10800090 	cmplti	r2,r2,2
    c514:	1000071e 	bne	r2,zero,c534 <altera_avalon_jtag_uart_ioctl+0x8c>
    c518:	e0fff917 	ldw	r3,-28(fp)
    c51c:	00a00034 	movhi	r2,32768
    c520:	10bfffc4 	addi	r2,r2,-1
    c524:	18800326 	beq	r3,r2,c534 <altera_avalon_jtag_uart_ioctl+0x8c>
    c528:	e0bff917 	ldw	r2,-28(fp)
    c52c:	e0bffe15 	stw	r2,-8(fp)
    c530:	00000306 	br	c540 <altera_avalon_jtag_uart_ioctl+0x98>
    c534:	00e00034 	movhi	r3,32768
    c538:	18ffff84 	addi	r3,r3,-2
    c53c:	e0fffe15 	stw	r3,-8(fp)
    c540:	e0bffb17 	ldw	r2,-20(fp)
    c544:	e0fffe17 	ldw	r3,-8(fp)
    c548:	10c00115 	stw	r3,4(r2)
      rc = 0;
    c54c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    c550:	00000d06 	br	c588 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    c554:	e0bffb17 	ldw	r2,-20(fp)
    c558:	10c00117 	ldw	r3,4(r2)
    c55c:	00a00034 	movhi	r2,32768
    c560:	10bfffc4 	addi	r2,r2,-1
    c564:	18800826 	beq	r3,r2,c588 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    c568:	e13ffd17 	ldw	r4,-12(fp)
    c56c:	e0bffb17 	ldw	r2,-20(fp)
    c570:	10c00917 	ldw	r3,36(r2)
    c574:	e0bffb17 	ldw	r2,-20(fp)
    c578:	10800117 	ldw	r2,4(r2)
    c57c:	1885803a 	cmpltu	r2,r3,r2
    c580:	20800015 	stw	r2,0(r4)
      rc = 0;
    c584:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    c588:	e0bffa17 	ldw	r2,-24(fp)
}
    c58c:	e037883a 	mov	sp,fp
    c590:	df000017 	ldw	fp,0(sp)
    c594:	dec00104 	addi	sp,sp,4
    c598:	f800283a 	ret

0000c59c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    c59c:	defff204 	addi	sp,sp,-56
    c5a0:	dfc00d15 	stw	ra,52(sp)
    c5a4:	df000c15 	stw	fp,48(sp)
    c5a8:	df000c04 	addi	fp,sp,48
    c5ac:	e13ffb15 	stw	r4,-20(fp)
    c5b0:	e17ffc15 	stw	r5,-16(fp)
    c5b4:	e1bffd15 	stw	r6,-12(fp)
    c5b8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    c5bc:	e0bffc17 	ldw	r2,-16(fp)
    c5c0:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    c5c4:	00004806 	br	c6e8 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    c5c8:	e0bffb17 	ldw	r2,-20(fp)
    c5cc:	10800a17 	ldw	r2,40(r2)
    c5d0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    c5d4:	e0bffb17 	ldw	r2,-20(fp)
    c5d8:	10800b17 	ldw	r2,44(r2)
    c5dc:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    c5e0:	e0fff717 	ldw	r3,-36(fp)
    c5e4:	e0bff617 	ldw	r2,-40(fp)
    c5e8:	18800536 	bltu	r3,r2,c600 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    c5ec:	e0bff717 	ldw	r2,-36(fp)
    c5f0:	e0fff617 	ldw	r3,-40(fp)
    c5f4:	10c5c83a 	sub	r2,r2,r3
    c5f8:	e0bff815 	stw	r2,-32(fp)
    c5fc:	00000406 	br	c610 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    c600:	00820004 	movi	r2,2048
    c604:	e0fff617 	ldw	r3,-40(fp)
    c608:	10c5c83a 	sub	r2,r2,r3
    c60c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    c610:	e0bff817 	ldw	r2,-32(fp)
    c614:	1005003a 	cmpeq	r2,r2,zero
    c618:	10001f1e 	bne	r2,zero,c698 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    c61c:	e0fffd17 	ldw	r3,-12(fp)
    c620:	e0bff817 	ldw	r2,-32(fp)
    c624:	1880022e 	bgeu	r3,r2,c630 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    c628:	e0bffd17 	ldw	r2,-12(fp)
    c62c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    c630:	e0bffb17 	ldw	r2,-20(fp)
    c634:	10c00e04 	addi	r3,r2,56
    c638:	e0bff617 	ldw	r2,-40(fp)
    c63c:	1887883a 	add	r3,r3,r2
    c640:	e0bffa17 	ldw	r2,-24(fp)
    c644:	1009883a 	mov	r4,r2
    c648:	180b883a 	mov	r5,r3
    c64c:	e1bff817 	ldw	r6,-32(fp)
    c650:	00068780 	call	6878 <memcpy>
      ptr   += n;
    c654:	e0fff817 	ldw	r3,-32(fp)
    c658:	e0bffa17 	ldw	r2,-24(fp)
    c65c:	10c5883a 	add	r2,r2,r3
    c660:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    c664:	e0fffd17 	ldw	r3,-12(fp)
    c668:	e0bff817 	ldw	r2,-32(fp)
    c66c:	1885c83a 	sub	r2,r3,r2
    c670:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c674:	e0fff617 	ldw	r3,-40(fp)
    c678:	e0bff817 	ldw	r2,-32(fp)
    c67c:	1885883a 	add	r2,r3,r2
    c680:	10c1ffcc 	andi	r3,r2,2047
    c684:	e0bffb17 	ldw	r2,-20(fp)
    c688:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    c68c:	e0bffd17 	ldw	r2,-12(fp)
    c690:	10800048 	cmpgei	r2,r2,1
    c694:	103fcc1e 	bne	r2,zero,c5c8 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    c698:	e0fffa17 	ldw	r3,-24(fp)
    c69c:	e0bffc17 	ldw	r2,-16(fp)
    c6a0:	1880141e 	bne	r3,r2,c6f4 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    c6a4:	e0bffe17 	ldw	r2,-8(fp)
    c6a8:	1090000c 	andi	r2,r2,16384
    c6ac:	1004c03a 	cmpne	r2,r2,zero
    c6b0:	1000101e 	bne	r2,zero,c6f4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    c6b4:	e0bffb17 	ldw	r2,-20(fp)
    c6b8:	10c00a17 	ldw	r3,40(r2)
    c6bc:	e0bff717 	ldw	r2,-36(fp)
    c6c0:	1880051e 	bne	r3,r2,c6d8 <altera_avalon_jtag_uart_read+0x13c>
    c6c4:	e0bffb17 	ldw	r2,-20(fp)
    c6c8:	10c00917 	ldw	r3,36(r2)
    c6cc:	e0bffb17 	ldw	r2,-20(fp)
    c6d0:	10800117 	ldw	r2,4(r2)
    c6d4:	18bff736 	bltu	r3,r2,c6b4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    c6d8:	e0bffb17 	ldw	r2,-20(fp)
    c6dc:	10c00a17 	ldw	r3,40(r2)
    c6e0:	e0bff717 	ldw	r2,-36(fp)
    c6e4:	18800326 	beq	r3,r2,c6f4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    c6e8:	e0bffd17 	ldw	r2,-12(fp)
    c6ec:	10800048 	cmpgei	r2,r2,1
    c6f0:	103fb51e 	bne	r2,zero,c5c8 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    c6f4:	e0fffa17 	ldw	r3,-24(fp)
    c6f8:	e0bffc17 	ldw	r2,-16(fp)
    c6fc:	18801926 	beq	r3,r2,c764 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c700:	0005303a 	rdctl	r2,status
    c704:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c708:	e0fff517 	ldw	r3,-44(fp)
    c70c:	00bfff84 	movi	r2,-2
    c710:	1884703a 	and	r2,r3,r2
    c714:	1001703a 	wrctl	status,r2
  
  return context;
    c718:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    c71c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c720:	e0bffb17 	ldw	r2,-20(fp)
    c724:	10800817 	ldw	r2,32(r2)
    c728:	10c00054 	ori	r3,r2,1
    c72c:	e0bffb17 	ldw	r2,-20(fp)
    c730:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c734:	e0bffb17 	ldw	r2,-20(fp)
    c738:	10800017 	ldw	r2,0(r2)
    c73c:	11000104 	addi	r4,r2,4
    c740:	e0bffb17 	ldw	r2,-20(fp)
    c744:	10800817 	ldw	r2,32(r2)
    c748:	1007883a 	mov	r3,r2
    c74c:	2005883a 	mov	r2,r4
    c750:	10c00035 	stwio	r3,0(r2)
    c754:	e0bff917 	ldw	r2,-28(fp)
    c758:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c75c:	e0bff417 	ldw	r2,-48(fp)
    c760:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    c764:	e0fffa17 	ldw	r3,-24(fp)
    c768:	e0bffc17 	ldw	r2,-16(fp)
    c76c:	18800526 	beq	r3,r2,c784 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    c770:	e0fffa17 	ldw	r3,-24(fp)
    c774:	e0bffc17 	ldw	r2,-16(fp)
    c778:	1887c83a 	sub	r3,r3,r2
    c77c:	e0ffff15 	stw	r3,-4(fp)
    c780:	00000906 	br	c7a8 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    c784:	e0bffe17 	ldw	r2,-8(fp)
    c788:	1090000c 	andi	r2,r2,16384
    c78c:	1005003a 	cmpeq	r2,r2,zero
    c790:	1000031e 	bne	r2,zero,c7a0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    c794:	00bffd44 	movi	r2,-11
    c798:	e0bfff15 	stw	r2,-4(fp)
    c79c:	00000206 	br	c7a8 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    c7a0:	00bffec4 	movi	r2,-5
    c7a4:	e0bfff15 	stw	r2,-4(fp)
    c7a8:	e0bfff17 	ldw	r2,-4(fp)
}
    c7ac:	e037883a 	mov	sp,fp
    c7b0:	dfc00117 	ldw	ra,4(sp)
    c7b4:	df000017 	ldw	fp,0(sp)
    c7b8:	dec00204 	addi	sp,sp,8
    c7bc:	f800283a 	ret

0000c7c0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    c7c0:	defff204 	addi	sp,sp,-56
    c7c4:	dfc00d15 	stw	ra,52(sp)
    c7c8:	df000c15 	stw	fp,48(sp)
    c7cc:	df000c04 	addi	fp,sp,48
    c7d0:	e13ffb15 	stw	r4,-20(fp)
    c7d4:	e17ffc15 	stw	r5,-16(fp)
    c7d8:	e1bffd15 	stw	r6,-12(fp)
    c7dc:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    c7e0:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    c7e4:	e0bffc17 	ldw	r2,-16(fp)
    c7e8:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c7ec:	00003a06 	br	c8d8 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    c7f0:	e0bffb17 	ldw	r2,-20(fp)
    c7f4:	10800c17 	ldw	r2,48(r2)
    c7f8:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    c7fc:	e0bffb17 	ldw	r2,-20(fp)
    c800:	10800d17 	ldw	r2,52(r2)
    c804:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    c808:	e0fffa17 	ldw	r3,-24(fp)
    c80c:	e0bff917 	ldw	r2,-28(fp)
    c810:	1880062e 	bgeu	r3,r2,c82c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    c814:	e0fff917 	ldw	r3,-28(fp)
    c818:	e0bffa17 	ldw	r2,-24(fp)
    c81c:	1885c83a 	sub	r2,r3,r2
    c820:	10bfffc4 	addi	r2,r2,-1
    c824:	e0bff815 	stw	r2,-32(fp)
    c828:	00000c06 	br	c85c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    c82c:	e0bff917 	ldw	r2,-28(fp)
    c830:	1005003a 	cmpeq	r2,r2,zero
    c834:	1000051e 	bne	r2,zero,c84c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    c838:	00820004 	movi	r2,2048
    c83c:	e0fffa17 	ldw	r3,-24(fp)
    c840:	10c5c83a 	sub	r2,r2,r3
    c844:	e0bff815 	stw	r2,-32(fp)
    c848:	00000406 	br	c85c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    c84c:	0081ffc4 	movi	r2,2047
    c850:	e0fffa17 	ldw	r3,-24(fp)
    c854:	10c5c83a 	sub	r2,r2,r3
    c858:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    c85c:	e0bff817 	ldw	r2,-32(fp)
    c860:	1005003a 	cmpeq	r2,r2,zero
    c864:	10001f1e 	bne	r2,zero,c8e4 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    c868:	e0fffd17 	ldw	r3,-12(fp)
    c86c:	e0bff817 	ldw	r2,-32(fp)
    c870:	1880022e 	bgeu	r3,r2,c87c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    c874:	e0bffd17 	ldw	r2,-12(fp)
    c878:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    c87c:	e0bffb17 	ldw	r2,-20(fp)
    c880:	10c20e04 	addi	r3,r2,2104
    c884:	e0bffa17 	ldw	r2,-24(fp)
    c888:	1885883a 	add	r2,r3,r2
    c88c:	e0fffc17 	ldw	r3,-16(fp)
    c890:	1009883a 	mov	r4,r2
    c894:	180b883a 	mov	r5,r3
    c898:	e1bff817 	ldw	r6,-32(fp)
    c89c:	00068780 	call	6878 <memcpy>
      ptr   += n;
    c8a0:	e0fff817 	ldw	r3,-32(fp)
    c8a4:	e0bffc17 	ldw	r2,-16(fp)
    c8a8:	10c5883a 	add	r2,r2,r3
    c8ac:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    c8b0:	e0fffd17 	ldw	r3,-12(fp)
    c8b4:	e0bff817 	ldw	r2,-32(fp)
    c8b8:	1885c83a 	sub	r2,r3,r2
    c8bc:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c8c0:	e0fffa17 	ldw	r3,-24(fp)
    c8c4:	e0bff817 	ldw	r2,-32(fp)
    c8c8:	1885883a 	add	r2,r3,r2
    c8cc:	10c1ffcc 	andi	r3,r2,2047
    c8d0:	e0bffb17 	ldw	r2,-20(fp)
    c8d4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c8d8:	e0bffd17 	ldw	r2,-12(fp)
    c8dc:	10800048 	cmpgei	r2,r2,1
    c8e0:	103fc31e 	bne	r2,zero,c7f0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c8e4:	0005303a 	rdctl	r2,status
    c8e8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c8ec:	e0fff517 	ldw	r3,-44(fp)
    c8f0:	00bfff84 	movi	r2,-2
    c8f4:	1884703a 	and	r2,r3,r2
    c8f8:	1001703a 	wrctl	status,r2
  
  return context;
    c8fc:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    c900:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c904:	e0bffb17 	ldw	r2,-20(fp)
    c908:	10800817 	ldw	r2,32(r2)
    c90c:	10c00094 	ori	r3,r2,2
    c910:	e0bffb17 	ldw	r2,-20(fp)
    c914:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c918:	e0bffb17 	ldw	r2,-20(fp)
    c91c:	10800017 	ldw	r2,0(r2)
    c920:	11000104 	addi	r4,r2,4
    c924:	e0bffb17 	ldw	r2,-20(fp)
    c928:	10800817 	ldw	r2,32(r2)
    c92c:	1007883a 	mov	r3,r2
    c930:	2005883a 	mov	r2,r4
    c934:	10c00035 	stwio	r3,0(r2)
    c938:	e0bff717 	ldw	r2,-36(fp)
    c93c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c940:	e0bff417 	ldw	r2,-48(fp)
    c944:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    c948:	e0bffd17 	ldw	r2,-12(fp)
    c94c:	10800050 	cmplti	r2,r2,1
    c950:	1000111e 	bne	r2,zero,c998 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    c954:	e0bffe17 	ldw	r2,-8(fp)
    c958:	1090000c 	andi	r2,r2,16384
    c95c:	1004c03a 	cmpne	r2,r2,zero
    c960:	1000101e 	bne	r2,zero,c9a4 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    c964:	e0bffb17 	ldw	r2,-20(fp)
    c968:	10c00d17 	ldw	r3,52(r2)
    c96c:	e0bff917 	ldw	r2,-28(fp)
    c970:	1880051e 	bne	r3,r2,c988 <altera_avalon_jtag_uart_write+0x1c8>
    c974:	e0bffb17 	ldw	r2,-20(fp)
    c978:	10c00917 	ldw	r3,36(r2)
    c97c:	e0bffb17 	ldw	r2,-20(fp)
    c980:	10800117 	ldw	r2,4(r2)
    c984:	18bff736 	bltu	r3,r2,c964 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    c988:	e0bffb17 	ldw	r2,-20(fp)
    c98c:	10c00d17 	ldw	r3,52(r2)
    c990:	e0bff917 	ldw	r2,-28(fp)
    c994:	18800326 	beq	r3,r2,c9a4 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    c998:	e0bffd17 	ldw	r2,-12(fp)
    c99c:	10800048 	cmpgei	r2,r2,1
    c9a0:	103fcd1e 	bne	r2,zero,c8d8 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    c9a4:	e0fffc17 	ldw	r3,-16(fp)
    c9a8:	e0bff617 	ldw	r2,-40(fp)
    c9ac:	18800526 	beq	r3,r2,c9c4 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    c9b0:	e0fffc17 	ldw	r3,-16(fp)
    c9b4:	e0bff617 	ldw	r2,-40(fp)
    c9b8:	1887c83a 	sub	r3,r3,r2
    c9bc:	e0ffff15 	stw	r3,-4(fp)
    c9c0:	00000906 	br	c9e8 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    c9c4:	e0bffe17 	ldw	r2,-8(fp)
    c9c8:	1090000c 	andi	r2,r2,16384
    c9cc:	1005003a 	cmpeq	r2,r2,zero
    c9d0:	1000031e 	bne	r2,zero,c9e0 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    c9d4:	00bffd44 	movi	r2,-11
    c9d8:	e0bfff15 	stw	r2,-4(fp)
    c9dc:	00000206 	br	c9e8 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    c9e0:	00bffec4 	movi	r2,-5
    c9e4:	e0bfff15 	stw	r2,-4(fp)
    c9e8:	e0bfff17 	ldw	r2,-4(fp)
}
    c9ec:	e037883a 	mov	sp,fp
    c9f0:	dfc00117 	ldw	ra,4(sp)
    c9f4:	df000017 	ldw	fp,0(sp)
    c9f8:	dec00204 	addi	sp,sp,8
    c9fc:	f800283a 	ret

0000ca00 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    ca00:	defffa04 	addi	sp,sp,-24
    ca04:	dfc00515 	stw	ra,20(sp)
    ca08:	df000415 	stw	fp,16(sp)
    ca0c:	df000404 	addi	fp,sp,16
    ca10:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    ca14:	e0bfff17 	ldw	r2,-4(fp)
    ca18:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    ca1c:	e0bfff17 	ldw	r2,-4(fp)
    ca20:	10800104 	addi	r2,r2,4
    ca24:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ca28:	0005303a 	rdctl	r2,status
    ca2c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ca30:	e0fffd17 	ldw	r3,-12(fp)
    ca34:	00bfff84 	movi	r2,-2
    ca38:	1884703a 	and	r2,r3,r2
    ca3c:	1001703a 	wrctl	status,r2
  
  return context;
    ca40:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    ca44:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    ca48:	000ddac0 	call	ddac <alt_tick>
    ca4c:	e0bffe17 	ldw	r2,-8(fp)
    ca50:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ca54:	e0bffc17 	ldw	r2,-16(fp)
    ca58:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    ca5c:	e037883a 	mov	sp,fp
    ca60:	dfc00117 	ldw	ra,4(sp)
    ca64:	df000017 	ldw	fp,0(sp)
    ca68:	dec00204 	addi	sp,sp,8
    ca6c:	f800283a 	ret

0000ca70 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    ca70:	defff804 	addi	sp,sp,-32
    ca74:	dfc00715 	stw	ra,28(sp)
    ca78:	df000615 	stw	fp,24(sp)
    ca7c:	df000604 	addi	fp,sp,24
    ca80:	e13ffc15 	stw	r4,-16(fp)
    ca84:	e17ffd15 	stw	r5,-12(fp)
    ca88:	e1bffe15 	stw	r6,-8(fp)
    ca8c:	e1ffff15 	stw	r7,-4(fp)
    ca90:	e0bfff17 	ldw	r2,-4(fp)
    ca94:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    ca98:	00800074 	movhi	r2,1
    ca9c:	1088b204 	addi	r2,r2,8904
    caa0:	10800017 	ldw	r2,0(r2)
    caa4:	1004c03a 	cmpne	r2,r2,zero
    caa8:	1000041e 	bne	r2,zero,cabc <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    caac:	00c00074 	movhi	r3,1
    cab0:	18c8b204 	addi	r3,r3,8904
    cab4:	e0bffb17 	ldw	r2,-20(fp)
    cab8:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    cabc:	e0bffc17 	ldw	r2,-16(fp)
    cac0:	10800104 	addi	r2,r2,4
    cac4:	1007883a 	mov	r3,r2
    cac8:	008001c4 	movi	r2,7
    cacc:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    cad0:	d8000015 	stw	zero,0(sp)
    cad4:	e13ffd17 	ldw	r4,-12(fp)
    cad8:	e17ffe17 	ldw	r5,-8(fp)
    cadc:	01800074 	movhi	r6,1
    cae0:	31b28004 	addi	r6,r6,-13824
    cae4:	e1fffc17 	ldw	r7,-16(fp)
    cae8:	000d6480 	call	d648 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    caec:	e037883a 	mov	sp,fp
    caf0:	dfc00117 	ldw	ra,4(sp)
    caf4:	df000017 	ldw	fp,0(sp)
    caf8:	dec00204 	addi	sp,sp,8
    cafc:	f800283a 	ret

0000cb00 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
    cb00:	defff904 	addi	sp,sp,-28
    cb04:	dfc00615 	stw	ra,24(sp)
    cb08:	df000515 	stw	fp,20(sp)
    cb0c:	df000504 	addi	fp,sp,20
    cb10:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
    cb14:	00800144 	movi	r2,5
    cb18:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
    cb1c:	00800044 	movi	r2,1
    cb20:	d8800015 	stw	r2,0(sp)
    cb24:	e0bffe44 	addi	r2,fp,-7
    cb28:	d8800115 	stw	r2,4(sp)
    cb2c:	d8000215 	stw	zero,8(sp)
    cb30:	e13fff17 	ldw	r4,-4(fp)
    cb34:	000b883a 	mov	r5,zero
    cb38:	01800044 	movi	r6,1
    cb3c:	e1fffe04 	addi	r7,fp,-8
    cb40:	000ded80 	call	ded8 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
    cb44:	e0bffe43 	ldbu	r2,-7(fp)
    cb48:	10803fcc 	andi	r2,r2,255
}
    cb4c:	e037883a 	mov	sp,fp
    cb50:	dfc00117 	ldw	ra,4(sp)
    cb54:	df000017 	ldw	fp,0(sp)
    cb58:	dec00204 	addi	sp,sp,8
    cb5c:	f800283a 	ret

0000cb60 <epcs_sector_erase>:
  {
  }
}

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
    cb60:	defff604 	addi	sp,sp,-40
    cb64:	dfc00915 	stw	ra,36(sp)
    cb68:	df000815 	stw	fp,32(sp)
    cb6c:	df000804 	addi	fp,sp,32
    cb70:	e13ffd15 	stw	r4,-12(fp)
    cb74:	e17ffe15 	stw	r5,-8(fp)
    cb78:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
    cb7c:	e0bfff17 	ldw	r2,-4(fp)
    cb80:	1005003a 	cmpeq	r2,r2,zero
    cb84:	1000121e 	bne	r2,zero,cbd0 <epcs_sector_erase+0x70>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
    cb88:	00bff604 	movi	r2,-40
    cb8c:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
    cb90:	e0bffe17 	ldw	r2,-8(fp)
    cb94:	1004d63a 	srli	r2,r2,24
    cb98:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
    cb9c:	e0bffe17 	ldw	r2,-8(fp)
    cba0:	1004d43a 	srli	r2,r2,16
    cba4:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
    cba8:	e0bffe17 	ldw	r2,-8(fp)
    cbac:	1004d23a 	srli	r2,r2,8
    cbb0:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
    cbb4:	e0bffe17 	ldw	r2,-8(fp)
    cbb8:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
    cbbc:	00800144 	movi	r2,5
    cbc0:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
    cbc4:	e13ffd17 	ldw	r4,-12(fp)
    cbc8:	000d1240 	call	d124 <epcs_enter_4_bytes_mode>
    cbcc:	00000c06 	br	cc00 <epcs_sector_erase+0xa0>
  }
  else
  {
      se[0] = epcs_se;
    cbd0:	00bff604 	movi	r2,-40
    cbd4:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
    cbd8:	e0bffe17 	ldw	r2,-8(fp)
    cbdc:	1004d43a 	srli	r2,r2,16
    cbe0:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
    cbe4:	e0bffe17 	ldw	r2,-8(fp)
    cbe8:	1004d23a 	srli	r2,r2,8
    cbec:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
    cbf0:	e0bffe17 	ldw	r2,-8(fp)
    cbf4:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
    cbf8:	00800104 	movi	r2,4
    cbfc:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
    cc00:	e13ffd17 	ldw	r4,-12(fp)
    cc04:	000ce140 	call	ce14 <epcs_write_enable>

  alt_avalon_spi_command(
    cc08:	e1bffb03 	ldbu	r6,-20(fp)
    cc0c:	e1fffb44 	addi	r7,fp,-19
    cc10:	d8000015 	stw	zero,0(sp)
    cc14:	d8000115 	stw	zero,4(sp)
    cc18:	d8000215 	stw	zero,8(sp)
    cc1c:	e13ffd17 	ldw	r4,-12(fp)
    cc20:	000b883a 	mov	r5,zero
    cc24:	000ded80 	call	ded8 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
    cc28:	e13ffd17 	ldw	r4,-12(fp)
    cc2c:	000cc580 	call	cc58 <epcs_await_wip_released>

  if(four_bytes_mode)
    cc30:	e0bfff17 	ldw	r2,-4(fp)
    cc34:	1005003a 	cmpeq	r2,r2,zero
    cc38:	1000021e 	bne	r2,zero,cc44 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
    cc3c:	e13ffd17 	ldw	r4,-12(fp)
    cc40:	000d17c0 	call	d17c <epcs_exit_4_bytes_mode>
  }
}
    cc44:	e037883a 	mov	sp,fp
    cc48:	dfc00117 	ldw	ra,4(sp)
    cc4c:	df000017 	ldw	fp,0(sp)
    cc50:	dec00204 	addi	sp,sp,8
    cc54:	f800283a 	ret

0000cc58 <epcs_await_wip_released>:
{
  return epcs_read_status_register(base) & 1;
}

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
    cc58:	defffd04 	addi	sp,sp,-12
    cc5c:	dfc00215 	stw	ra,8(sp)
    cc60:	df000115 	stw	fp,4(sp)
    cc64:	df000104 	addi	fp,sp,4
    cc68:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
    cc6c:	e13fff17 	ldw	r4,-4(fp)
    cc70:	000cc900 	call	cc90 <epcs_test_wip>
    cc74:	1004c03a 	cmpne	r2,r2,zero
    cc78:	103ffc1e 	bne	r2,zero,cc6c <epcs_await_wip_released+0x14>
  {
  }
}
    cc7c:	e037883a 	mov	sp,fp
    cc80:	dfc00117 	ldw	ra,4(sp)
    cc84:	df000017 	ldw	fp,0(sp)
    cc88:	dec00204 	addi	sp,sp,8
    cc8c:	f800283a 	ret

0000cc90 <epcs_test_wip>:

  return status;
}

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
    cc90:	defffd04 	addi	sp,sp,-12
    cc94:	dfc00215 	stw	ra,8(sp)
    cc98:	df000115 	stw	fp,4(sp)
    cc9c:	df000104 	addi	fp,sp,4
    cca0:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
    cca4:	e13fff17 	ldw	r4,-4(fp)
    cca8:	000cb000 	call	cb00 <epcs_read_status_register>
    ccac:	10803fcc 	andi	r2,r2,255
    ccb0:	1080004c 	andi	r2,r2,1
}
    ccb4:	e037883a 	mov	sp,fp
    ccb8:	dfc00117 	ldw	ra,4(sp)
    ccbc:	df000017 	ldw	fp,0(sp)
    ccc0:	dec00204 	addi	sp,sp,8
    ccc4:	f800283a 	ret

0000ccc8 <epcs_read_buffer>:
  }
}

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
    ccc8:	defff404 	addi	sp,sp,-48
    cccc:	dfc00b15 	stw	ra,44(sp)
    ccd0:	df000a15 	stw	fp,40(sp)
    ccd4:	df000a04 	addi	fp,sp,40
    ccd8:	e13ffc15 	stw	r4,-16(fp)
    ccdc:	e17ffd15 	stw	r5,-12(fp)
    cce0:	e1bffe15 	stw	r6,-8(fp)
    cce4:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
    cce8:	008000c4 	movi	r2,3
    ccec:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
    ccf0:	e0800217 	ldw	r2,8(fp)
    ccf4:	1005003a 	cmpeq	r2,r2,zero
    ccf8:	10001c1e 	bne	r2,zero,cd6c <epcs_read_buffer+0xa4>
  {
        read_command[1] = (offset >> 24) & 0xFF;
    ccfc:	e0bffd17 	ldw	r2,-12(fp)
    cd00:	1005d63a 	srai	r2,r2,24
    cd04:	1007883a 	mov	r3,r2
    cd08:	00bfffc4 	movi	r2,-1
    cd0c:	1884703a 	and	r2,r3,r2
    cd10:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
    cd14:	e0bffd17 	ldw	r2,-12(fp)
    cd18:	1005d43a 	srai	r2,r2,16
    cd1c:	1007883a 	mov	r3,r2
    cd20:	00bfffc4 	movi	r2,-1
    cd24:	1884703a 	and	r2,r3,r2
    cd28:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
    cd2c:	e0bffd17 	ldw	r2,-12(fp)
    cd30:	1005d23a 	srai	r2,r2,8
    cd34:	1007883a 	mov	r3,r2
    cd38:	00bfffc4 	movi	r2,-1
    cd3c:	1884703a 	and	r2,r3,r2
    cd40:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
    cd44:	e0bffd17 	ldw	r2,-12(fp)
    cd48:	1007883a 	mov	r3,r2
    cd4c:	00bfffc4 	movi	r2,-1
    cd50:	1884703a 	and	r2,r3,r2
    cd54:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
    cd58:	00800144 	movi	r2,5
    cd5c:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
    cd60:	e13ffc17 	ldw	r4,-16(fp)
    cd64:	000d1240 	call	d124 <epcs_enter_4_bytes_mode>
    cd68:	00001306 	br	cdb8 <epcs_read_buffer+0xf0>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
    cd6c:	e0bffd17 	ldw	r2,-12(fp)
    cd70:	1005d43a 	srai	r2,r2,16
    cd74:	1007883a 	mov	r3,r2
    cd78:	00bfffc4 	movi	r2,-1
    cd7c:	1884703a 	and	r2,r3,r2
    cd80:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
    cd84:	e0bffd17 	ldw	r2,-12(fp)
    cd88:	1005d23a 	srai	r2,r2,8
    cd8c:	1007883a 	mov	r3,r2
    cd90:	00bfffc4 	movi	r2,-1
    cd94:	1884703a 	and	r2,r3,r2
    cd98:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
    cd9c:	e0bffd17 	ldw	r2,-12(fp)
    cda0:	1007883a 	mov	r3,r2
    cda4:	00bfffc4 	movi	r2,-1
    cda8:	1884703a 	and	r2,r3,r2
    cdac:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
    cdb0:	00800104 	movi	r2,4
    cdb4:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
    cdb8:	e13ffc17 	ldw	r4,-16(fp)
    cdbc:	000cc580 	call	cc58 <epcs_await_wip_released>

  alt_avalon_spi_command(
    cdc0:	e0bfff17 	ldw	r2,-4(fp)
    cdc4:	e1fffa04 	addi	r7,fp,-24
    cdc8:	d8800015 	stw	r2,0(sp)
    cdcc:	e0bffe17 	ldw	r2,-8(fp)
    cdd0:	d8800115 	stw	r2,4(sp)
    cdd4:	d8000215 	stw	zero,8(sp)
    cdd8:	e13ffc17 	ldw	r4,-16(fp)
    cddc:	000b883a 	mov	r5,zero
    cde0:	e1bff917 	ldw	r6,-28(fp)
    cde4:	000ded80 	call	ded8 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
    cde8:	e0800217 	ldw	r2,8(fp)
    cdec:	1005003a 	cmpeq	r2,r2,zero
    cdf0:	1000021e 	bne	r2,zero,cdfc <epcs_read_buffer+0x134>
  {
    epcs_exit_4_bytes_mode(base);
    cdf4:	e13ffc17 	ldw	r4,-16(fp)
    cdf8:	000d17c0 	call	d17c <epcs_exit_4_bytes_mode>
  }

  return length;
    cdfc:	e0bfff17 	ldw	r2,-4(fp)
}
    ce00:	e037883a 	mov	sp,fp
    ce04:	dfc00117 	ldw	ra,4(sp)
    ce08:	df000017 	ldw	fp,0(sp)
    ce0c:	dec00204 	addi	sp,sp,8
    ce10:	f800283a 	ret

0000ce14 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
    ce14:	defff904 	addi	sp,sp,-28
    ce18:	dfc00615 	stw	ra,24(sp)
    ce1c:	df000515 	stw	fp,20(sp)
    ce20:	df000504 	addi	fp,sp,20
    ce24:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
    ce28:	00800184 	movi	r2,6
    ce2c:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
    ce30:	d8000015 	stw	zero,0(sp)
    ce34:	d8000115 	stw	zero,4(sp)
    ce38:	d8000215 	stw	zero,8(sp)
    ce3c:	e13fff17 	ldw	r4,-4(fp)
    ce40:	000b883a 	mov	r5,zero
    ce44:	01800044 	movi	r6,1
    ce48:	e1fffe04 	addi	r7,fp,-8
    ce4c:	000ded80 	call	ded8 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
    ce50:	e037883a 	mov	sp,fp
    ce54:	dfc00117 	ldw	ra,4(sp)
    ce58:	df000017 	ldw	fp,0(sp)
    ce5c:	dec00204 	addi	sp,sp,8
    ce60:	f800283a 	ret

0000ce64 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
    ce64:	defff804 	addi	sp,sp,-32
    ce68:	dfc00715 	stw	ra,28(sp)
    ce6c:	df000615 	stw	fp,24(sp)
    ce70:	df000604 	addi	fp,sp,24
    ce74:	e13ffe15 	stw	r4,-8(fp)
    ce78:	e17fff05 	stb	r5,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
    ce7c:	00800044 	movi	r2,1
    ce80:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
    ce84:	e0bfff03 	ldbu	r2,-4(fp)
    ce88:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
    ce8c:	d8000015 	stw	zero,0(sp)
    ce90:	d8000115 	stw	zero,4(sp)
    ce94:	d8000215 	stw	zero,8(sp)
    ce98:	e13ffe17 	ldw	r4,-8(fp)
    ce9c:	000b883a 	mov	r5,zero
    cea0:	01800084 	movi	r6,2
    cea4:	e1fffd04 	addi	r7,fp,-12
    cea8:	000ded80 	call	ded8 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
    ceac:	e13ffe17 	ldw	r4,-8(fp)
    ceb0:	000cc580 	call	cc58 <epcs_await_wip_released>
}
    ceb4:	e037883a 	mov	sp,fp
    ceb8:	dfc00117 	ldw	ra,4(sp)
    cebc:	df000017 	ldw	fp,0(sp)
    cec0:	dec00204 	addi	sp,sp,8
    cec4:	f800283a 	ret

0000cec8 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
    cec8:	defff404 	addi	sp,sp,-48
    cecc:	dfc00b15 	stw	ra,44(sp)
    ced0:	df000a15 	stw	fp,40(sp)
    ced4:	df000a04 	addi	fp,sp,40
    ced8:	e13ffc15 	stw	r4,-16(fp)
    cedc:	e17ffd15 	stw	r5,-12(fp)
    cee0:	e1bffe15 	stw	r6,-8(fp)
    cee4:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
    cee8:	00800084 	movi	r2,2
    ceec:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
    cef0:	e0800217 	ldw	r2,8(fp)
    cef4:	1005003a 	cmpeq	r2,r2,zero
    cef8:	10001c1e 	bne	r2,zero,cf6c <epcs_write_buffer+0xa4>
  {
      pp[1] = (offset >> 24) & 0xFF;
    cefc:	e0bffd17 	ldw	r2,-12(fp)
    cf00:	1005d63a 	srai	r2,r2,24
    cf04:	1007883a 	mov	r3,r2
    cf08:	00bfffc4 	movi	r2,-1
    cf0c:	1884703a 	and	r2,r3,r2
    cf10:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
    cf14:	e0bffd17 	ldw	r2,-12(fp)
    cf18:	1005d43a 	srai	r2,r2,16
    cf1c:	1007883a 	mov	r3,r2
    cf20:	00bfffc4 	movi	r2,-1
    cf24:	1884703a 	and	r2,r3,r2
    cf28:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
    cf2c:	e0bffd17 	ldw	r2,-12(fp)
    cf30:	1005d23a 	srai	r2,r2,8
    cf34:	1007883a 	mov	r3,r2
    cf38:	00bfffc4 	movi	r2,-1
    cf3c:	1884703a 	and	r2,r3,r2
    cf40:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
    cf44:	e0bffd17 	ldw	r2,-12(fp)
    cf48:	1007883a 	mov	r3,r2
    cf4c:	00bfffc4 	movi	r2,-1
    cf50:	1884703a 	and	r2,r3,r2
    cf54:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
    cf58:	00800144 	movi	r2,5
    cf5c:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
    cf60:	e13ffc17 	ldw	r4,-16(fp)
    cf64:	000d1240 	call	d124 <epcs_enter_4_bytes_mode>
    cf68:	00001306 	br	cfb8 <epcs_write_buffer+0xf0>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
    cf6c:	e0bffd17 	ldw	r2,-12(fp)
    cf70:	1005d43a 	srai	r2,r2,16
    cf74:	1007883a 	mov	r3,r2
    cf78:	00bfffc4 	movi	r2,-1
    cf7c:	1884703a 	and	r2,r3,r2
    cf80:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
    cf84:	e0bffd17 	ldw	r2,-12(fp)
    cf88:	1005d23a 	srai	r2,r2,8
    cf8c:	1007883a 	mov	r3,r2
    cf90:	00bfffc4 	movi	r2,-1
    cf94:	1884703a 	and	r2,r3,r2
    cf98:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
    cf9c:	e0bffd17 	ldw	r2,-12(fp)
    cfa0:	1007883a 	mov	r3,r2
    cfa4:	00bfffc4 	movi	r2,-1
    cfa8:	1884703a 	and	r2,r3,r2
    cfac:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
    cfb0:	00800104 	movi	r2,4
    cfb4:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
    cfb8:	e13ffc17 	ldw	r4,-16(fp)
    cfbc:	000ce140 	call	ce14 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
    cfc0:	e1fffa04 	addi	r7,fp,-24
    cfc4:	d8000015 	stw	zero,0(sp)
    cfc8:	d8000115 	stw	zero,4(sp)
    cfcc:	00800044 	movi	r2,1
    cfd0:	d8800215 	stw	r2,8(sp)
    cfd4:	e13ffc17 	ldw	r4,-16(fp)
    cfd8:	000b883a 	mov	r5,zero
    cfdc:	e1bff917 	ldw	r6,-28(fp)
    cfe0:	000ded80 	call	ded8 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
    cfe4:	e1bfff17 	ldw	r6,-4(fp)
    cfe8:	d8000015 	stw	zero,0(sp)
    cfec:	d8000115 	stw	zero,4(sp)
    cff0:	d8000215 	stw	zero,8(sp)
    cff4:	e13ffc17 	ldw	r4,-16(fp)
    cff8:	000b883a 	mov	r5,zero
    cffc:	e1fffe17 	ldw	r7,-8(fp)
    d000:	000ded80 	call	ded8 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
    d004:	e13ffc17 	ldw	r4,-16(fp)
    d008:	000cc580 	call	cc58 <epcs_await_wip_released>

  if(four_bytes_mode)
    d00c:	e0800217 	ldw	r2,8(fp)
    d010:	1005003a 	cmpeq	r2,r2,zero
    d014:	1000021e 	bne	r2,zero,d020 <epcs_write_buffer+0x158>
  {
    epcs_exit_4_bytes_mode(base);
    d018:	e13ffc17 	ldw	r4,-16(fp)
    d01c:	000d17c0 	call	d17c <epcs_exit_4_bytes_mode>
  }

  return length;
    d020:	e0bfff17 	ldw	r2,-4(fp)
}
    d024:	e037883a 	mov	sp,fp
    d028:	dfc00117 	ldw	ra,4(sp)
    d02c:	df000017 	ldw	fp,0(sp)
    d030:	dec00204 	addi	sp,sp,8
    d034:	f800283a 	ret

0000d038 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
    d038:	defff804 	addi	sp,sp,-32
    d03c:	dfc00715 	stw	ra,28(sp)
    d040:	df000615 	stw	fp,24(sp)
    d044:	df000604 	addi	fp,sp,24
    d048:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
    d04c:	00bfeac4 	movi	r2,-85
    d050:	e0bffd05 	stb	r2,-12(fp)
    d054:	e03ffd45 	stb	zero,-11(fp)
    d058:	e03ffd85 	stb	zero,-10(fp)
    d05c:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
    d060:	00800044 	movi	r2,1
    d064:	d8800015 	stw	r2,0(sp)
    d068:	e0bffe04 	addi	r2,fp,-8
    d06c:	d8800115 	stw	r2,4(sp)
    d070:	d8000215 	stw	zero,8(sp)
    d074:	e13fff17 	ldw	r4,-4(fp)
    d078:	000b883a 	mov	r5,zero
    d07c:	01800104 	movi	r6,4
    d080:	e1fffd04 	addi	r7,fp,-12
    d084:	000ded80 	call	ded8 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
    d088:	e0bffe03 	ldbu	r2,-8(fp)
    d08c:	10803fcc 	andi	r2,r2,255
}
    d090:	e037883a 	mov	sp,fp
    d094:	dfc00117 	ldw	ra,4(sp)
    d098:	df000017 	ldw	fp,0(sp)
    d09c:	dec00204 	addi	sp,sp,8
    d0a0:	f800283a 	ret

0000d0a4 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
    d0a4:	defff904 	addi	sp,sp,-28
    d0a8:	dfc00615 	stw	ra,24(sp)
    d0ac:	df000515 	stw	fp,20(sp)
    d0b0:	df000504 	addi	fp,sp,20
    d0b4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
    d0b8:	00bfe7c4 	movi	r2,-97
    d0bc:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
    d0c0:	008000c4 	movi	r2,3
    d0c4:	d8800015 	stw	r2,0(sp)
    d0c8:	e0bffe44 	addi	r2,fp,-7
    d0cc:	d8800115 	stw	r2,4(sp)
    d0d0:	d8000215 	stw	zero,8(sp)
    d0d4:	e13fff17 	ldw	r4,-4(fp)
    d0d8:	000b883a 	mov	r5,zero
    d0dc:	01800044 	movi	r6,1
    d0e0:	e1fffe04 	addi	r7,fp,-8
    d0e4:	000ded80 	call	ded8 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
    d0e8:	e0bffe43 	ldbu	r2,-7(fp)
    d0ec:	10803fcc 	andi	r2,r2,255
    d0f0:	1006943a 	slli	r3,r2,16
    d0f4:	e0bffe83 	ldbu	r2,-6(fp)
    d0f8:	10803fcc 	andi	r2,r2,255
    d0fc:	1004923a 	slli	r2,r2,8
    d100:	1886b03a 	or	r3,r3,r2
    d104:	e0bffec3 	ldbu	r2,-5(fp)
    d108:	10803fcc 	andi	r2,r2,255
    d10c:	1884b03a 	or	r2,r3,r2
}
    d110:	e037883a 	mov	sp,fp
    d114:	dfc00117 	ldw	ra,4(sp)
    d118:	df000017 	ldw	fp,0(sp)
    d11c:	dec00204 	addi	sp,sp,8
    d120:	f800283a 	ret

0000d124 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
    d124:	defff904 	addi	sp,sp,-28
    d128:	dfc00615 	stw	ra,24(sp)
    d12c:	df000515 	stw	fp,20(sp)
    d130:	df000504 	addi	fp,sp,20
    d134:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
    d138:	00bfedc4 	movi	r2,-73
    d13c:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
    d140:	e13fff17 	ldw	r4,-4(fp)
    d144:	000ce140 	call	ce14 <epcs_write_enable>

  alt_avalon_spi_command(
    d148:	d8000015 	stw	zero,0(sp)
    d14c:	d8000115 	stw	zero,4(sp)
    d150:	d8000215 	stw	zero,8(sp)
    d154:	e13fff17 	ldw	r4,-4(fp)
    d158:	000b883a 	mov	r5,zero
    d15c:	01800044 	movi	r6,1
    d160:	e1fffe04 	addi	r7,fp,-8
    d164:	000ded80 	call	ded8 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
    d168:	e037883a 	mov	sp,fp
    d16c:	dfc00117 	ldw	ra,4(sp)
    d170:	df000017 	ldw	fp,0(sp)
    d174:	dec00204 	addi	sp,sp,8
    d178:	f800283a 	ret

0000d17c <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
    d17c:	defff904 	addi	sp,sp,-28
    d180:	dfc00615 	stw	ra,24(sp)
    d184:	df000515 	stw	fp,20(sp)
    d188:	df000504 	addi	fp,sp,20
    d18c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
    d190:	00bffa44 	movi	r2,-23
    d194:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
    d198:	e13fff17 	ldw	r4,-4(fp)
    d19c:	000ce140 	call	ce14 <epcs_write_enable>

  alt_avalon_spi_command(
    d1a0:	d8000015 	stw	zero,0(sp)
    d1a4:	d8000115 	stw	zero,4(sp)
    d1a8:	d8000215 	stw	zero,8(sp)
    d1ac:	e13fff17 	ldw	r4,-4(fp)
    d1b0:	000b883a 	mov	r5,zero
    d1b4:	01800044 	movi	r6,1
    d1b8:	e1fffe04 	addi	r7,fp,-8
    d1bc:	000ded80 	call	ded8 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
    d1c0:	e037883a 	mov	sp,fp
    d1c4:	dfc00117 	ldw	ra,4(sp)
    d1c8:	df000017 	ldw	fp,0(sp)
    d1cc:	dec00204 	addi	sp,sp,8
    d1d0:	f800283a 	ret

0000d1d4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    d1d4:	defff404 	addi	sp,sp,-48
    d1d8:	df000b15 	stw	fp,44(sp)
    d1dc:	df000b04 	addi	fp,sp,44
    d1e0:	e13ffb15 	stw	r4,-20(fp)
    d1e4:	e17ffc15 	stw	r5,-16(fp)
    d1e8:	e1bffd15 	stw	r6,-12(fp)
    d1ec:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    d1f0:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    d1f4:	00800074 	movhi	r2,1
    d1f8:	1088b204 	addi	r2,r2,8904
    d1fc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    d200:	1005003a 	cmpeq	r2,r2,zero
    d204:	1000411e 	bne	r2,zero,d30c <alt_alarm_start+0x138>
  {
    if (alarm)
    d208:	e0bffb17 	ldw	r2,-20(fp)
    d20c:	1005003a 	cmpeq	r2,r2,zero
    d210:	10003b1e 	bne	r2,zero,d300 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    d214:	e0fffb17 	ldw	r3,-20(fp)
    d218:	e0bffd17 	ldw	r2,-12(fp)
    d21c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    d220:	e0fffb17 	ldw	r3,-20(fp)
    d224:	e0bffe17 	ldw	r2,-8(fp)
    d228:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d22c:	0005303a 	rdctl	r2,status
    d230:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d234:	e0fff817 	ldw	r3,-32(fp)
    d238:	00bfff84 	movi	r2,-2
    d23c:	1884703a 	and	r2,r3,r2
    d240:	1001703a 	wrctl	status,r2
  
  return context;
    d244:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    d248:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    d24c:	00800074 	movhi	r2,1
    d250:	1088b304 	addi	r2,r2,8908
    d254:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    d258:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    d25c:	e0fffc17 	ldw	r3,-16(fp)
    d260:	e0bff917 	ldw	r2,-28(fp)
    d264:	1885883a 	add	r2,r3,r2
    d268:	10c00044 	addi	r3,r2,1
    d26c:	e0bffb17 	ldw	r2,-20(fp)
    d270:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    d274:	e0bffb17 	ldw	r2,-20(fp)
    d278:	10c00217 	ldw	r3,8(r2)
    d27c:	e0bff917 	ldw	r2,-28(fp)
    d280:	1880042e 	bgeu	r3,r2,d294 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    d284:	e0fffb17 	ldw	r3,-20(fp)
    d288:	00800044 	movi	r2,1
    d28c:	18800405 	stb	r2,16(r3)
    d290:	00000206 	br	d29c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    d294:	e0bffb17 	ldw	r2,-20(fp)
    d298:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    d29c:	e0fffb17 	ldw	r3,-20(fp)
    d2a0:	00800074 	movhi	r2,1
    d2a4:	1081c304 	addi	r2,r2,1804
    d2a8:	e0bff615 	stw	r2,-40(fp)
    d2ac:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    d2b0:	e0fff717 	ldw	r3,-36(fp)
    d2b4:	e0bff617 	ldw	r2,-40(fp)
    d2b8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    d2bc:	e0bff617 	ldw	r2,-40(fp)
    d2c0:	10c00017 	ldw	r3,0(r2)
    d2c4:	e0bff717 	ldw	r2,-36(fp)
    d2c8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    d2cc:	e0bff617 	ldw	r2,-40(fp)
    d2d0:	10c00017 	ldw	r3,0(r2)
    d2d4:	e0bff717 	ldw	r2,-36(fp)
    d2d8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    d2dc:	e0fff617 	ldw	r3,-40(fp)
    d2e0:	e0bff717 	ldw	r2,-36(fp)
    d2e4:	18800015 	stw	r2,0(r3)
    d2e8:	e0bffa17 	ldw	r2,-24(fp)
    d2ec:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d2f0:	e0bff517 	ldw	r2,-44(fp)
    d2f4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    d2f8:	e03fff15 	stw	zero,-4(fp)
    d2fc:	00000506 	br	d314 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    d300:	00bffa84 	movi	r2,-22
    d304:	e0bfff15 	stw	r2,-4(fp)
    d308:	00000206 	br	d314 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    d30c:	00bfde84 	movi	r2,-134
    d310:	e0bfff15 	stw	r2,-4(fp)
    d314:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    d318:	e037883a 	mov	sp,fp
    d31c:	df000017 	ldw	fp,0(sp)
    d320:	dec00104 	addi	sp,sp,4
    d324:	f800283a 	ret

0000d328 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    d328:	defffe04 	addi	sp,sp,-8
    d32c:	df000115 	stw	fp,4(sp)
    d330:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    d334:	e03fff15 	stw	zero,-4(fp)
    d338:	00000506 	br	d350 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    d33c:	e0bfff17 	ldw	r2,-4(fp)
    d340:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    d344:	e0bfff17 	ldw	r2,-4(fp)
    d348:	10800804 	addi	r2,r2,32
    d34c:	e0bfff15 	stw	r2,-4(fp)
    d350:	e0bfff17 	ldw	r2,-4(fp)
    d354:	10810030 	cmpltui	r2,r2,1024
    d358:	103ff81e 	bne	r2,zero,d33c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    d35c:	e037883a 	mov	sp,fp
    d360:	df000017 	ldw	fp,0(sp)
    d364:	dec00104 	addi	sp,sp,4
    d368:	f800283a 	ret

0000d36c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    d36c:	defff904 	addi	sp,sp,-28
    d370:	dfc00615 	stw	ra,24(sp)
    d374:	df000515 	stw	fp,20(sp)
    d378:	df000504 	addi	fp,sp,20
    d37c:	e13ffd15 	stw	r4,-12(fp)
    d380:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    d384:	e0bffd17 	ldw	r2,-12(fp)
    d388:	1005003a 	cmpeq	r2,r2,zero
    d38c:	1000041e 	bne	r2,zero,d3a0 <alt_dev_llist_insert+0x34>
    d390:	e0bffd17 	ldw	r2,-12(fp)
    d394:	10800217 	ldw	r2,8(r2)
    d398:	1004c03a 	cmpne	r2,r2,zero
    d39c:	1000071e 	bne	r2,zero,d3bc <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    d3a0:	000d4200 	call	d420 <alt_get_errno>
    d3a4:	1007883a 	mov	r3,r2
    d3a8:	00800584 	movi	r2,22
    d3ac:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    d3b0:	00bffa84 	movi	r2,-22
    d3b4:	e0bfff15 	stw	r2,-4(fp)
    d3b8:	00001306 	br	d408 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    d3bc:	e0fffd17 	ldw	r3,-12(fp)
    d3c0:	e0bffe17 	ldw	r2,-8(fp)
    d3c4:	e0bffb15 	stw	r2,-20(fp)
    d3c8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    d3cc:	e0fffc17 	ldw	r3,-16(fp)
    d3d0:	e0bffb17 	ldw	r2,-20(fp)
    d3d4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    d3d8:	e0bffb17 	ldw	r2,-20(fp)
    d3dc:	10c00017 	ldw	r3,0(r2)
    d3e0:	e0bffc17 	ldw	r2,-16(fp)
    d3e4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    d3e8:	e0bffb17 	ldw	r2,-20(fp)
    d3ec:	10c00017 	ldw	r3,0(r2)
    d3f0:	e0bffc17 	ldw	r2,-16(fp)
    d3f4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    d3f8:	e0fffb17 	ldw	r3,-20(fp)
    d3fc:	e0bffc17 	ldw	r2,-16(fp)
    d400:	18800015 	stw	r2,0(r3)

  return 0;  
    d404:	e03fff15 	stw	zero,-4(fp)
    d408:	e0bfff17 	ldw	r2,-4(fp)
}
    d40c:	e037883a 	mov	sp,fp
    d410:	dfc00117 	ldw	ra,4(sp)
    d414:	df000017 	ldw	fp,0(sp)
    d418:	dec00204 	addi	sp,sp,8
    d41c:	f800283a 	ret

0000d420 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d420:	defffd04 	addi	sp,sp,-12
    d424:	dfc00215 	stw	ra,8(sp)
    d428:	df000115 	stw	fp,4(sp)
    d42c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    d430:	00800074 	movhi	r2,1
    d434:	1081be04 	addi	r2,r2,1784
    d438:	10800017 	ldw	r2,0(r2)
    d43c:	1005003a 	cmpeq	r2,r2,zero
    d440:	1000061e 	bne	r2,zero,d45c <alt_get_errno+0x3c>
    d444:	00800074 	movhi	r2,1
    d448:	1081be04 	addi	r2,r2,1784
    d44c:	10800017 	ldw	r2,0(r2)
    d450:	103ee83a 	callr	r2
    d454:	e0bfff15 	stw	r2,-4(fp)
    d458:	00000306 	br	d468 <alt_get_errno+0x48>
    d45c:	00800074 	movhi	r2,1
    d460:	1088ad04 	addi	r2,r2,8884
    d464:	e0bfff15 	stw	r2,-4(fp)
    d468:	e0bfff17 	ldw	r2,-4(fp)
}
    d46c:	e037883a 	mov	sp,fp
    d470:	dfc00117 	ldw	ra,4(sp)
    d474:	df000017 	ldw	fp,0(sp)
    d478:	dec00204 	addi	sp,sp,8
    d47c:	f800283a 	ret

0000d480 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    d480:	defffd04 	addi	sp,sp,-12
    d484:	dfc00215 	stw	ra,8(sp)
    d488:	df000115 	stw	fp,4(sp)
    d48c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    d490:	00bfff04 	movi	r2,-4
    d494:	00c00074 	movhi	r3,1
    d498:	18fa0604 	addi	r3,r3,-6120
    d49c:	1885883a 	add	r2,r3,r2
    d4a0:	e0bfff15 	stw	r2,-4(fp)
    d4a4:	00000606 	br	d4c0 <_do_ctors+0x40>
        (*ctor) (); 
    d4a8:	e0bfff17 	ldw	r2,-4(fp)
    d4ac:	10800017 	ldw	r2,0(r2)
    d4b0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    d4b4:	e0bfff17 	ldw	r2,-4(fp)
    d4b8:	10bfff04 	addi	r2,r2,-4
    d4bc:	e0bfff15 	stw	r2,-4(fp)
    d4c0:	e0ffff17 	ldw	r3,-4(fp)
    d4c4:	00800074 	movhi	r2,1
    d4c8:	10ba0504 	addi	r2,r2,-6124
    d4cc:	18bff62e 	bgeu	r3,r2,d4a8 <_do_ctors+0x28>
        (*ctor) (); 
}
    d4d0:	e037883a 	mov	sp,fp
    d4d4:	dfc00117 	ldw	ra,4(sp)
    d4d8:	df000017 	ldw	fp,0(sp)
    d4dc:	dec00204 	addi	sp,sp,8
    d4e0:	f800283a 	ret

0000d4e4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    d4e4:	defffd04 	addi	sp,sp,-12
    d4e8:	dfc00215 	stw	ra,8(sp)
    d4ec:	df000115 	stw	fp,4(sp)
    d4f0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    d4f4:	00bfff04 	movi	r2,-4
    d4f8:	00c00074 	movhi	r3,1
    d4fc:	18fa0604 	addi	r3,r3,-6120
    d500:	1885883a 	add	r2,r3,r2
    d504:	e0bfff15 	stw	r2,-4(fp)
    d508:	00000606 	br	d524 <_do_dtors+0x40>
        (*dtor) (); 
    d50c:	e0bfff17 	ldw	r2,-4(fp)
    d510:	10800017 	ldw	r2,0(r2)
    d514:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    d518:	e0bfff17 	ldw	r2,-4(fp)
    d51c:	10bfff04 	addi	r2,r2,-4
    d520:	e0bfff15 	stw	r2,-4(fp)
    d524:	e0ffff17 	ldw	r3,-4(fp)
    d528:	00800074 	movhi	r2,1
    d52c:	10ba0604 	addi	r2,r2,-6120
    d530:	18bff62e 	bgeu	r3,r2,d50c <_do_dtors+0x28>
        (*dtor) (); 
}
    d534:	e037883a 	mov	sp,fp
    d538:	dfc00117 	ldw	ra,4(sp)
    d53c:	df000017 	ldw	fp,0(sp)
    d540:	dec00204 	addi	sp,sp,8
    d544:	f800283a 	ret

0000d548 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
    d548:	defffb04 	addi	sp,sp,-20
    d54c:	dfc00415 	stw	ra,16(sp)
    d550:	df000315 	stw	fp,12(sp)
    d554:	df000304 	addi	fp,sp,12
    d558:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
    d55c:	e13ffe17 	ldw	r4,-8(fp)
    d560:	d1600d04 	addi	r5,gp,-32716
    d564:	000e1100 	call	e110 <alt_find_dev>
    d568:	e0bffd15 	stw	r2,-12(fp)

  if ((dev) && dev->open)
    d56c:	e0bffd17 	ldw	r2,-12(fp)
    d570:	1005003a 	cmpeq	r2,r2,zero
    d574:	10000b1e 	bne	r2,zero,d5a4 <alt_flash_open_dev+0x5c>
    d578:	e0bffd17 	ldw	r2,-12(fp)
    d57c:	10800317 	ldw	r2,12(r2)
    d580:	1005003a 	cmpeq	r2,r2,zero
    d584:	1000071e 	bne	r2,zero,d5a4 <alt_flash_open_dev+0x5c>
  {
    return dev->open(dev, name);
    d588:	e0bffd17 	ldw	r2,-12(fp)
    d58c:	10800317 	ldw	r2,12(r2)
    d590:	e13ffd17 	ldw	r4,-12(fp)
    d594:	e17ffe17 	ldw	r5,-8(fp)
    d598:	103ee83a 	callr	r2
    d59c:	e0bfff15 	stw	r2,-4(fp)
    d5a0:	00000206 	br	d5ac <alt_flash_open_dev+0x64>
  }

  return dev;
    d5a4:	e0bffd17 	ldw	r2,-12(fp)
    d5a8:	e0bfff15 	stw	r2,-4(fp)
    d5ac:	e0bfff17 	ldw	r2,-4(fp)
}
    d5b0:	e037883a 	mov	sp,fp
    d5b4:	dfc00117 	ldw	ra,4(sp)
    d5b8:	df000017 	ldw	fp,0(sp)
    d5bc:	dec00204 	addi	sp,sp,8
    d5c0:	f800283a 	ret

0000d5c4 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
    d5c4:	defffd04 	addi	sp,sp,-12
    d5c8:	dfc00215 	stw	ra,8(sp)
    d5cc:	df000115 	stw	fp,4(sp)
    d5d0:	df000104 	addi	fp,sp,4
    d5d4:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
    d5d8:	e0bfff17 	ldw	r2,-4(fp)
    d5dc:	1005003a 	cmpeq	r2,r2,zero
    d5e0:	1000081e 	bne	r2,zero,d604 <alt_flash_close_dev+0x40>
    d5e4:	e0bfff17 	ldw	r2,-4(fp)
    d5e8:	10800417 	ldw	r2,16(r2)
    d5ec:	1005003a 	cmpeq	r2,r2,zero
    d5f0:	1000041e 	bne	r2,zero,d604 <alt_flash_close_dev+0x40>
  {
    fd->close(fd);
    d5f4:	e0bfff17 	ldw	r2,-4(fp)
    d5f8:	10800417 	ldw	r2,16(r2)
    d5fc:	e13fff17 	ldw	r4,-4(fp)
    d600:	103ee83a 	callr	r2
  }
  return;
}
    d604:	e037883a 	mov	sp,fp
    d608:	dfc00117 	ldw	ra,4(sp)
    d60c:	df000017 	ldw	fp,0(sp)
    d610:	dec00204 	addi	sp,sp,8
    d614:	f800283a 	ret

0000d618 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    d618:	defffe04 	addi	sp,sp,-8
    d61c:	dfc00115 	stw	ra,4(sp)
    d620:	df000015 	stw	fp,0(sp)
    d624:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    d628:	0009883a 	mov	r4,zero
    d62c:	01410004 	movi	r5,1024
    d630:	000e37c0 	call	e37c <alt_icache_flush>
#endif
}
    d634:	e037883a 	mov	sp,fp
    d638:	dfc00117 	ldw	ra,4(sp)
    d63c:	df000017 	ldw	fp,0(sp)
    d640:	dec00204 	addi	sp,sp,8
    d644:	f800283a 	ret

0000d648 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    d648:	defff904 	addi	sp,sp,-28
    d64c:	dfc00615 	stw	ra,24(sp)
    d650:	df000515 	stw	fp,20(sp)
    d654:	df000504 	addi	fp,sp,20
    d658:	e13ffc15 	stw	r4,-16(fp)
    d65c:	e17ffd15 	stw	r5,-12(fp)
    d660:	e1bffe15 	stw	r6,-8(fp)
    d664:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    d668:	e0800217 	ldw	r2,8(fp)
    d66c:	d8800015 	stw	r2,0(sp)
    d670:	e13ffc17 	ldw	r4,-16(fp)
    d674:	e17ffd17 	ldw	r5,-12(fp)
    d678:	e1bffe17 	ldw	r6,-8(fp)
    d67c:	e1ffff17 	ldw	r7,-4(fp)
    d680:	000d81c0 	call	d81c <alt_iic_isr_register>
}  
    d684:	e037883a 	mov	sp,fp
    d688:	dfc00117 	ldw	ra,4(sp)
    d68c:	df000017 	ldw	fp,0(sp)
    d690:	dec00204 	addi	sp,sp,8
    d694:	f800283a 	ret

0000d698 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    d698:	defff904 	addi	sp,sp,-28
    d69c:	df000615 	stw	fp,24(sp)
    d6a0:	df000604 	addi	fp,sp,24
    d6a4:	e13ffe15 	stw	r4,-8(fp)
    d6a8:	e17fff15 	stw	r5,-4(fp)
    d6ac:	e0bfff17 	ldw	r2,-4(fp)
    d6b0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d6b4:	0005303a 	rdctl	r2,status
    d6b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d6bc:	e0fffb17 	ldw	r3,-20(fp)
    d6c0:	00bfff84 	movi	r2,-2
    d6c4:	1884703a 	and	r2,r3,r2
    d6c8:	1001703a 	wrctl	status,r2
  
  return context;
    d6cc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    d6d0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    d6d4:	e0fffc17 	ldw	r3,-16(fp)
    d6d8:	00800044 	movi	r2,1
    d6dc:	10c4983a 	sll	r2,r2,r3
    d6e0:	1007883a 	mov	r3,r2
    d6e4:	00800074 	movhi	r2,1
    d6e8:	1088b104 	addi	r2,r2,8900
    d6ec:	10800017 	ldw	r2,0(r2)
    d6f0:	1886b03a 	or	r3,r3,r2
    d6f4:	00800074 	movhi	r2,1
    d6f8:	1088b104 	addi	r2,r2,8900
    d6fc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    d700:	00800074 	movhi	r2,1
    d704:	1088b104 	addi	r2,r2,8900
    d708:	10800017 	ldw	r2,0(r2)
    d70c:	100170fa 	wrctl	ienable,r2
    d710:	e0bffd17 	ldw	r2,-12(fp)
    d714:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d718:	e0bffa17 	ldw	r2,-24(fp)
    d71c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    d720:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    d724:	e037883a 	mov	sp,fp
    d728:	df000017 	ldw	fp,0(sp)
    d72c:	dec00104 	addi	sp,sp,4
    d730:	f800283a 	ret

0000d734 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    d734:	defff904 	addi	sp,sp,-28
    d738:	df000615 	stw	fp,24(sp)
    d73c:	df000604 	addi	fp,sp,24
    d740:	e13ffe15 	stw	r4,-8(fp)
    d744:	e17fff15 	stw	r5,-4(fp)
    d748:	e0bfff17 	ldw	r2,-4(fp)
    d74c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d750:	0005303a 	rdctl	r2,status
    d754:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d758:	e0fffb17 	ldw	r3,-20(fp)
    d75c:	00bfff84 	movi	r2,-2
    d760:	1884703a 	and	r2,r3,r2
    d764:	1001703a 	wrctl	status,r2
  
  return context;
    d768:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    d76c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    d770:	e0fffc17 	ldw	r3,-16(fp)
    d774:	00800044 	movi	r2,1
    d778:	10c4983a 	sll	r2,r2,r3
    d77c:	0084303a 	nor	r2,zero,r2
    d780:	1007883a 	mov	r3,r2
    d784:	00800074 	movhi	r2,1
    d788:	1088b104 	addi	r2,r2,8900
    d78c:	10800017 	ldw	r2,0(r2)
    d790:	1886703a 	and	r3,r3,r2
    d794:	00800074 	movhi	r2,1
    d798:	1088b104 	addi	r2,r2,8900
    d79c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    d7a0:	00800074 	movhi	r2,1
    d7a4:	1088b104 	addi	r2,r2,8900
    d7a8:	10800017 	ldw	r2,0(r2)
    d7ac:	100170fa 	wrctl	ienable,r2
    d7b0:	e0bffd17 	ldw	r2,-12(fp)
    d7b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d7b8:	e0bffa17 	ldw	r2,-24(fp)
    d7bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    d7c0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    d7c4:	e037883a 	mov	sp,fp
    d7c8:	df000017 	ldw	fp,0(sp)
    d7cc:	dec00104 	addi	sp,sp,4
    d7d0:	f800283a 	ret

0000d7d4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    d7d4:	defffc04 	addi	sp,sp,-16
    d7d8:	df000315 	stw	fp,12(sp)
    d7dc:	df000304 	addi	fp,sp,12
    d7e0:	e13ffe15 	stw	r4,-8(fp)
    d7e4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    d7e8:	000530fa 	rdctl	r2,ienable
    d7ec:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    d7f0:	e0ffff17 	ldw	r3,-4(fp)
    d7f4:	00800044 	movi	r2,1
    d7f8:	10c4983a 	sll	r2,r2,r3
    d7fc:	1007883a 	mov	r3,r2
    d800:	e0bffd17 	ldw	r2,-12(fp)
    d804:	1884703a 	and	r2,r3,r2
    d808:	1004c03a 	cmpne	r2,r2,zero
}
    d80c:	e037883a 	mov	sp,fp
    d810:	df000017 	ldw	fp,0(sp)
    d814:	dec00104 	addi	sp,sp,4
    d818:	f800283a 	ret

0000d81c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    d81c:	defff404 	addi	sp,sp,-48
    d820:	dfc00b15 	stw	ra,44(sp)
    d824:	df000a15 	stw	fp,40(sp)
    d828:	df000a04 	addi	fp,sp,40
    d82c:	e13ffb15 	stw	r4,-20(fp)
    d830:	e17ffc15 	stw	r5,-16(fp)
    d834:	e1bffd15 	stw	r6,-12(fp)
    d838:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    d83c:	00bffa84 	movi	r2,-22
    d840:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    d844:	e0bffc17 	ldw	r2,-16(fp)
    d848:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    d84c:	e0bff917 	ldw	r2,-28(fp)
    d850:	10800808 	cmpgei	r2,r2,32
    d854:	1000291e 	bne	r2,zero,d8fc <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d858:	0005303a 	rdctl	r2,status
    d85c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d860:	e0fff717 	ldw	r3,-36(fp)
    d864:	00bfff84 	movi	r2,-2
    d868:	1884703a 	and	r2,r3,r2
    d86c:	1001703a 	wrctl	status,r2
  
  return context;
    d870:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    d874:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    d878:	e0bff917 	ldw	r2,-28(fp)
    d87c:	00c00074 	movhi	r3,1
    d880:	18c8d704 	addi	r3,r3,9052
    d884:	100490fa 	slli	r2,r2,3
    d888:	10c7883a 	add	r3,r2,r3
    d88c:	e0bffd17 	ldw	r2,-12(fp)
    d890:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    d894:	e0bff917 	ldw	r2,-28(fp)
    d898:	00c00074 	movhi	r3,1
    d89c:	18c8d704 	addi	r3,r3,9052
    d8a0:	100490fa 	slli	r2,r2,3
    d8a4:	10c5883a 	add	r2,r2,r3
    d8a8:	10c00104 	addi	r3,r2,4
    d8ac:	e0bffe17 	ldw	r2,-8(fp)
    d8b0:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    d8b4:	e0bffd17 	ldw	r2,-12(fp)
    d8b8:	1005003a 	cmpeq	r2,r2,zero
    d8bc:	1000051e 	bne	r2,zero,d8d4 <alt_iic_isr_register+0xb8>
    d8c0:	e17ff917 	ldw	r5,-28(fp)
    d8c4:	e13ffb17 	ldw	r4,-20(fp)
    d8c8:	000d6980 	call	d698 <alt_ic_irq_enable>
    d8cc:	e0bfff15 	stw	r2,-4(fp)
    d8d0:	00000406 	br	d8e4 <alt_iic_isr_register+0xc8>
    d8d4:	e17ff917 	ldw	r5,-28(fp)
    d8d8:	e13ffb17 	ldw	r4,-20(fp)
    d8dc:	000d7340 	call	d734 <alt_ic_irq_disable>
    d8e0:	e0bfff15 	stw	r2,-4(fp)
    d8e4:	e0bfff17 	ldw	r2,-4(fp)
    d8e8:	e0bffa15 	stw	r2,-24(fp)
    d8ec:	e0bff817 	ldw	r2,-32(fp)
    d8f0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d8f4:	e0bff617 	ldw	r2,-40(fp)
    d8f8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    d8fc:	e0bffa17 	ldw	r2,-24(fp)
}
    d900:	e037883a 	mov	sp,fp
    d904:	dfc00117 	ldw	ra,4(sp)
    d908:	df000017 	ldw	fp,0(sp)
    d90c:	dec00204 	addi	sp,sp,8
    d910:	f800283a 	ret

0000d914 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    d914:	defff904 	addi	sp,sp,-28
    d918:	dfc00615 	stw	ra,24(sp)
    d91c:	df000515 	stw	fp,20(sp)
    d920:	df000504 	addi	fp,sp,20
    d924:	e13ffc15 	stw	r4,-16(fp)
    d928:	e17ffd15 	stw	r5,-12(fp)
    d92c:	e1bffe15 	stw	r6,-8(fp)
    d930:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    d934:	e13ffd17 	ldw	r4,-12(fp)
    d938:	e17ffe17 	ldw	r5,-8(fp)
    d93c:	e1bfff17 	ldw	r6,-4(fp)
    d940:	000db2c0 	call	db2c <open>
    d944:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    d948:	e0bffb17 	ldw	r2,-20(fp)
    d94c:	1004803a 	cmplt	r2,r2,zero
    d950:	10001c1e 	bne	r2,zero,d9c4 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    d954:	e0bffb17 	ldw	r2,-20(fp)
    d958:	00c00074 	movhi	r3,1
    d95c:	18fd0904 	addi	r3,r3,-3036
    d960:	10800324 	muli	r2,r2,12
    d964:	10c5883a 	add	r2,r2,r3
    d968:	10c00017 	ldw	r3,0(r2)
    d96c:	e0bffc17 	ldw	r2,-16(fp)
    d970:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    d974:	e0bffb17 	ldw	r2,-20(fp)
    d978:	00c00074 	movhi	r3,1
    d97c:	18fd0904 	addi	r3,r3,-3036
    d980:	10800324 	muli	r2,r2,12
    d984:	10c5883a 	add	r2,r2,r3
    d988:	10800104 	addi	r2,r2,4
    d98c:	10c00017 	ldw	r3,0(r2)
    d990:	e0bffc17 	ldw	r2,-16(fp)
    d994:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    d998:	e0bffb17 	ldw	r2,-20(fp)
    d99c:	00c00074 	movhi	r3,1
    d9a0:	18fd0904 	addi	r3,r3,-3036
    d9a4:	10800324 	muli	r2,r2,12
    d9a8:	10c5883a 	add	r2,r2,r3
    d9ac:	10800204 	addi	r2,r2,8
    d9b0:	10c00017 	ldw	r3,0(r2)
    d9b4:	e0bffc17 	ldw	r2,-16(fp)
    d9b8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    d9bc:	e13ffb17 	ldw	r4,-20(fp)
    d9c0:	000b2040 	call	b204 <alt_release_fd>
  }
} 
    d9c4:	e037883a 	mov	sp,fp
    d9c8:	dfc00117 	ldw	ra,4(sp)
    d9cc:	df000017 	ldw	fp,0(sp)
    d9d0:	dec00204 	addi	sp,sp,8
    d9d4:	f800283a 	ret

0000d9d8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    d9d8:	defffb04 	addi	sp,sp,-20
    d9dc:	dfc00415 	stw	ra,16(sp)
    d9e0:	df000315 	stw	fp,12(sp)
    d9e4:	df000304 	addi	fp,sp,12
    d9e8:	e13ffd15 	stw	r4,-12(fp)
    d9ec:	e17ffe15 	stw	r5,-8(fp)
    d9f0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    d9f4:	01000074 	movhi	r4,1
    d9f8:	213d0c04 	addi	r4,r4,-3024
    d9fc:	e17ffd17 	ldw	r5,-12(fp)
    da00:	01800044 	movi	r6,1
    da04:	01c07fc4 	movi	r7,511
    da08:	000d9140 	call	d914 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    da0c:	01000074 	movhi	r4,1
    da10:	213d0904 	addi	r4,r4,-3036
    da14:	e17ffe17 	ldw	r5,-8(fp)
    da18:	000d883a 	mov	r6,zero
    da1c:	01c07fc4 	movi	r7,511
    da20:	000d9140 	call	d914 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    da24:	01000074 	movhi	r4,1
    da28:	213d0f04 	addi	r4,r4,-3012
    da2c:	e17fff17 	ldw	r5,-4(fp)
    da30:	01800044 	movi	r6,1
    da34:	01c07fc4 	movi	r7,511
    da38:	000d9140 	call	d914 <alt_open_fd>
}  
    da3c:	e037883a 	mov	sp,fp
    da40:	dfc00117 	ldw	ra,4(sp)
    da44:	df000017 	ldw	fp,0(sp)
    da48:	dec00204 	addi	sp,sp,8
    da4c:	f800283a 	ret

0000da50 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    da50:	defffc04 	addi	sp,sp,-16
    da54:	df000315 	stw	fp,12(sp)
    da58:	df000304 	addi	fp,sp,12
    da5c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    da60:	e0bffe17 	ldw	r2,-8(fp)
    da64:	10800217 	ldw	r2,8(r2)
    da68:	10d00034 	orhi	r3,r2,16384
    da6c:	e0bffe17 	ldw	r2,-8(fp)
    da70:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    da74:	e03ffd15 	stw	zero,-12(fp)
    da78:	00002006 	br	dafc <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    da7c:	e0bffd17 	ldw	r2,-12(fp)
    da80:	00c00074 	movhi	r3,1
    da84:	18fd0904 	addi	r3,r3,-3036
    da88:	10800324 	muli	r2,r2,12
    da8c:	10c5883a 	add	r2,r2,r3
    da90:	10c00017 	ldw	r3,0(r2)
    da94:	e0bffe17 	ldw	r2,-8(fp)
    da98:	10800017 	ldw	r2,0(r2)
    da9c:	1880141e 	bne	r3,r2,daf0 <alt_file_locked+0xa0>
    daa0:	e0bffd17 	ldw	r2,-12(fp)
    daa4:	00c00074 	movhi	r3,1
    daa8:	18fd0904 	addi	r3,r3,-3036
    daac:	10800324 	muli	r2,r2,12
    dab0:	10c5883a 	add	r2,r2,r3
    dab4:	10800204 	addi	r2,r2,8
    dab8:	10800017 	ldw	r2,0(r2)
    dabc:	1004403a 	cmpge	r2,r2,zero
    dac0:	10000b1e 	bne	r2,zero,daf0 <alt_file_locked+0xa0>
    dac4:	e0bffd17 	ldw	r2,-12(fp)
    dac8:	10800324 	muli	r2,r2,12
    dacc:	1007883a 	mov	r3,r2
    dad0:	00800074 	movhi	r2,1
    dad4:	10bd0904 	addi	r2,r2,-3036
    dad8:	1887883a 	add	r3,r3,r2
    dadc:	e0bffe17 	ldw	r2,-8(fp)
    dae0:	18800326 	beq	r3,r2,daf0 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    dae4:	00bffcc4 	movi	r2,-13
    dae8:	e0bfff15 	stw	r2,-4(fp)
    daec:	00000a06 	br	db18 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    daf0:	e0bffd17 	ldw	r2,-12(fp)
    daf4:	10800044 	addi	r2,r2,1
    daf8:	e0bffd15 	stw	r2,-12(fp)
    dafc:	00800074 	movhi	r2,1
    db00:	1081bd04 	addi	r2,r2,1780
    db04:	10800017 	ldw	r2,0(r2)
    db08:	1007883a 	mov	r3,r2
    db0c:	e0bffd17 	ldw	r2,-12(fp)
    db10:	18bfda2e 	bgeu	r3,r2,da7c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    db14:	e03fff15 	stw	zero,-4(fp)
    db18:	e0bfff17 	ldw	r2,-4(fp)
}
    db1c:	e037883a 	mov	sp,fp
    db20:	df000017 	ldw	fp,0(sp)
    db24:	dec00104 	addi	sp,sp,4
    db28:	f800283a 	ret

0000db2c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    db2c:	defff404 	addi	sp,sp,-48
    db30:	dfc00b15 	stw	ra,44(sp)
    db34:	df000a15 	stw	fp,40(sp)
    db38:	df000a04 	addi	fp,sp,40
    db3c:	e13ffb15 	stw	r4,-20(fp)
    db40:	e17ffc15 	stw	r5,-16(fp)
    db44:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    db48:	00bfffc4 	movi	r2,-1
    db4c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    db50:	00bffb44 	movi	r2,-19
    db54:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    db58:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    db5c:	e13ffb17 	ldw	r4,-20(fp)
    db60:	01400074 	movhi	r5,1
    db64:	2941bb04 	addi	r5,r5,1772
    db68:	000e1100 	call	e110 <alt_find_dev>
    db6c:	e0bffa15 	stw	r2,-24(fp)
    db70:	e0bffa17 	ldw	r2,-24(fp)
    db74:	1004c03a 	cmpne	r2,r2,zero
    db78:	1000051e 	bne	r2,zero,db90 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    db7c:	e13ffb17 	ldw	r4,-20(fp)
    db80:	000e1a40 	call	e1a4 <alt_find_file>
    db84:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    db88:	00800044 	movi	r2,1
    db8c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    db90:	e0bffa17 	ldw	r2,-24(fp)
    db94:	1005003a 	cmpeq	r2,r2,zero
    db98:	1000301e 	bne	r2,zero,dc5c <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    db9c:	e13ffa17 	ldw	r4,-24(fp)
    dba0:	000e2c40 	call	e2c4 <alt_get_fd>
    dba4:	e0bff815 	stw	r2,-32(fp)
    dba8:	e0bff817 	ldw	r2,-32(fp)
    dbac:	1004403a 	cmpge	r2,r2,zero
    dbb0:	1000031e 	bne	r2,zero,dbc0 <open+0x94>
    {
      status = index;
    dbb4:	e0bff817 	ldw	r2,-32(fp)
    dbb8:	e0bff715 	stw	r2,-36(fp)
    dbbc:	00002906 	br	dc64 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    dbc0:	e0bff817 	ldw	r2,-32(fp)
    dbc4:	10800324 	muli	r2,r2,12
    dbc8:	1007883a 	mov	r3,r2
    dbcc:	00800074 	movhi	r2,1
    dbd0:	10bd0904 	addi	r2,r2,-3036
    dbd4:	1885883a 	add	r2,r3,r2
    dbd8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    dbdc:	e0fffc17 	ldw	r3,-16(fp)
    dbe0:	00900034 	movhi	r2,16384
    dbe4:	10bfffc4 	addi	r2,r2,-1
    dbe8:	1886703a 	and	r3,r3,r2
    dbec:	e0bff917 	ldw	r2,-28(fp)
    dbf0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    dbf4:	e0bff617 	ldw	r2,-40(fp)
    dbf8:	1004c03a 	cmpne	r2,r2,zero
    dbfc:	1000061e 	bne	r2,zero,dc18 <open+0xec>
    dc00:	e13ff917 	ldw	r4,-28(fp)
    dc04:	000da500 	call	da50 <alt_file_locked>
    dc08:	e0bff715 	stw	r2,-36(fp)
    dc0c:	e0bff717 	ldw	r2,-36(fp)
    dc10:	1004803a 	cmplt	r2,r2,zero
    dc14:	1000131e 	bne	r2,zero,dc64 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    dc18:	e0bffa17 	ldw	r2,-24(fp)
    dc1c:	10800317 	ldw	r2,12(r2)
    dc20:	1005003a 	cmpeq	r2,r2,zero
    dc24:	1000091e 	bne	r2,zero,dc4c <open+0x120>
    dc28:	e0bffa17 	ldw	r2,-24(fp)
    dc2c:	10800317 	ldw	r2,12(r2)
    dc30:	e13ff917 	ldw	r4,-28(fp)
    dc34:	e17ffb17 	ldw	r5,-20(fp)
    dc38:	e1bffc17 	ldw	r6,-16(fp)
    dc3c:	e1fffd17 	ldw	r7,-12(fp)
    dc40:	103ee83a 	callr	r2
    dc44:	e0bfff15 	stw	r2,-4(fp)
    dc48:	00000106 	br	dc50 <open+0x124>
    dc4c:	e03fff15 	stw	zero,-4(fp)
    dc50:	e0bfff17 	ldw	r2,-4(fp)
    dc54:	e0bff715 	stw	r2,-36(fp)
    dc58:	00000206 	br	dc64 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    dc5c:	00bffb44 	movi	r2,-19
    dc60:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    dc64:	e0bff717 	ldw	r2,-36(fp)
    dc68:	1004403a 	cmpge	r2,r2,zero
    dc6c:	1000091e 	bne	r2,zero,dc94 <open+0x168>
  {
    alt_release_fd (index);  
    dc70:	e13ff817 	ldw	r4,-32(fp)
    dc74:	000b2040 	call	b204 <alt_release_fd>
    ALT_ERRNO = -status;
    dc78:	000dcb40 	call	dcb4 <alt_get_errno>
    dc7c:	e0fff717 	ldw	r3,-36(fp)
    dc80:	00c7c83a 	sub	r3,zero,r3
    dc84:	10c00015 	stw	r3,0(r2)
    return -1;
    dc88:	00bfffc4 	movi	r2,-1
    dc8c:	e0bffe15 	stw	r2,-8(fp)
    dc90:	00000206 	br	dc9c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    dc94:	e0bff817 	ldw	r2,-32(fp)
    dc98:	e0bffe15 	stw	r2,-8(fp)
    dc9c:	e0bffe17 	ldw	r2,-8(fp)
}
    dca0:	e037883a 	mov	sp,fp
    dca4:	dfc00117 	ldw	ra,4(sp)
    dca8:	df000017 	ldw	fp,0(sp)
    dcac:	dec00204 	addi	sp,sp,8
    dcb0:	f800283a 	ret

0000dcb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dcb4:	defffd04 	addi	sp,sp,-12
    dcb8:	dfc00215 	stw	ra,8(sp)
    dcbc:	df000115 	stw	fp,4(sp)
    dcc0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    dcc4:	00800074 	movhi	r2,1
    dcc8:	1081be04 	addi	r2,r2,1784
    dccc:	10800017 	ldw	r2,0(r2)
    dcd0:	1005003a 	cmpeq	r2,r2,zero
    dcd4:	1000061e 	bne	r2,zero,dcf0 <alt_get_errno+0x3c>
    dcd8:	00800074 	movhi	r2,1
    dcdc:	1081be04 	addi	r2,r2,1784
    dce0:	10800017 	ldw	r2,0(r2)
    dce4:	103ee83a 	callr	r2
    dce8:	e0bfff15 	stw	r2,-4(fp)
    dcec:	00000306 	br	dcfc <alt_get_errno+0x48>
    dcf0:	00800074 	movhi	r2,1
    dcf4:	1088ad04 	addi	r2,r2,8884
    dcf8:	e0bfff15 	stw	r2,-4(fp)
    dcfc:	e0bfff17 	ldw	r2,-4(fp)
}
    dd00:	e037883a 	mov	sp,fp
    dd04:	dfc00117 	ldw	ra,4(sp)
    dd08:	df000017 	ldw	fp,0(sp)
    dd0c:	dec00204 	addi	sp,sp,8
    dd10:	f800283a 	ret

0000dd14 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    dd14:	defffa04 	addi	sp,sp,-24
    dd18:	df000515 	stw	fp,20(sp)
    dd1c:	df000504 	addi	fp,sp,20
    dd20:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dd24:	0005303a 	rdctl	r2,status
    dd28:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dd2c:	e0fffd17 	ldw	r3,-12(fp)
    dd30:	00bfff84 	movi	r2,-2
    dd34:	1884703a 	and	r2,r3,r2
    dd38:	1001703a 	wrctl	status,r2
  
  return context;
    dd3c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    dd40:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    dd44:	e0bfff17 	ldw	r2,-4(fp)
    dd48:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    dd4c:	e0bffc17 	ldw	r2,-16(fp)
    dd50:	10c00017 	ldw	r3,0(r2)
    dd54:	e0bffc17 	ldw	r2,-16(fp)
    dd58:	10800117 	ldw	r2,4(r2)
    dd5c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    dd60:	e0bffc17 	ldw	r2,-16(fp)
    dd64:	10c00117 	ldw	r3,4(r2)
    dd68:	e0bffc17 	ldw	r2,-16(fp)
    dd6c:	10800017 	ldw	r2,0(r2)
    dd70:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    dd74:	e0fffc17 	ldw	r3,-16(fp)
    dd78:	e0bffc17 	ldw	r2,-16(fp)
    dd7c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    dd80:	e0fffc17 	ldw	r3,-16(fp)
    dd84:	e0bffc17 	ldw	r2,-16(fp)
    dd88:	18800015 	stw	r2,0(r3)
    dd8c:	e0bffe17 	ldw	r2,-8(fp)
    dd90:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dd94:	e0bffb17 	ldw	r2,-20(fp)
    dd98:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    dd9c:	e037883a 	mov	sp,fp
    dda0:	df000017 	ldw	fp,0(sp)
    dda4:	dec00104 	addi	sp,sp,4
    dda8:	f800283a 	ret

0000ddac <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    ddac:	defffb04 	addi	sp,sp,-20
    ddb0:	dfc00415 	stw	ra,16(sp)
    ddb4:	df000315 	stw	fp,12(sp)
    ddb8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    ddbc:	d0a01017 	ldw	r2,-32704(gp)
    ddc0:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    ddc4:	d0a70017 	ldw	r2,-25600(gp)
    ddc8:	10800044 	addi	r2,r2,1
    ddcc:	d0a70015 	stw	r2,-25600(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    ddd0:	00003106 	br	de98 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    ddd4:	e0bffe17 	ldw	r2,-8(fp)
    ddd8:	10800017 	ldw	r2,0(r2)
    dddc:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    dde0:	e0bffe17 	ldw	r2,-8(fp)
    dde4:	10800403 	ldbu	r2,16(r2)
    dde8:	10803fcc 	andi	r2,r2,255
    ddec:	1005003a 	cmpeq	r2,r2,zero
    ddf0:	1000051e 	bne	r2,zero,de08 <alt_tick+0x5c>
    ddf4:	d0a70017 	ldw	r2,-25600(gp)
    ddf8:	1004c03a 	cmpne	r2,r2,zero
    ddfc:	1000021e 	bne	r2,zero,de08 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    de00:	e0bffe17 	ldw	r2,-8(fp)
    de04:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    de08:	e0bffe17 	ldw	r2,-8(fp)
    de0c:	10c00217 	ldw	r3,8(r2)
    de10:	d0a70017 	ldw	r2,-25600(gp)
    de14:	10c01e36 	bltu	r2,r3,de90 <alt_tick+0xe4>
    de18:	e0bffe17 	ldw	r2,-8(fp)
    de1c:	10800403 	ldbu	r2,16(r2)
    de20:	10803fcc 	andi	r2,r2,255
    de24:	1004c03a 	cmpne	r2,r2,zero
    de28:	1000191e 	bne	r2,zero,de90 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    de2c:	e0bffe17 	ldw	r2,-8(fp)
    de30:	10c00317 	ldw	r3,12(r2)
    de34:	e0bffe17 	ldw	r2,-8(fp)
    de38:	11000517 	ldw	r4,20(r2)
    de3c:	183ee83a 	callr	r3
    de40:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    de44:	e0bffd17 	ldw	r2,-12(fp)
    de48:	1004c03a 	cmpne	r2,r2,zero
    de4c:	1000031e 	bne	r2,zero,de5c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    de50:	e13ffe17 	ldw	r4,-8(fp)
    de54:	000dd140 	call	dd14 <alt_alarm_stop>
    de58:	00000d06 	br	de90 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    de5c:	e0bffe17 	ldw	r2,-8(fp)
    de60:	10c00217 	ldw	r3,8(r2)
    de64:	e0bffd17 	ldw	r2,-12(fp)
    de68:	1887883a 	add	r3,r3,r2
    de6c:	e0bffe17 	ldw	r2,-8(fp)
    de70:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    de74:	e0bffe17 	ldw	r2,-8(fp)
    de78:	10c00217 	ldw	r3,8(r2)
    de7c:	d0a70017 	ldw	r2,-25600(gp)
    de80:	1880032e 	bgeu	r3,r2,de90 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    de84:	e0fffe17 	ldw	r3,-8(fp)
    de88:	00800044 	movi	r2,1
    de8c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    de90:	e0bfff17 	ldw	r2,-4(fp)
    de94:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    de98:	d0e01004 	addi	r3,gp,-32704
    de9c:	e0bffe17 	ldw	r2,-8(fp)
    dea0:	10ffcc1e 	bne	r2,r3,ddd4 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    dea4:	e037883a 	mov	sp,fp
    dea8:	dfc00117 	ldw	ra,4(sp)
    deac:	df000017 	ldw	fp,0(sp)
    deb0:	dec00204 	addi	sp,sp,8
    deb4:	f800283a 	ret

0000deb8 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    deb8:	deffff04 	addi	sp,sp,-4
    debc:	df000015 	stw	fp,0(sp)
    dec0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    dec4:	000170fa 	wrctl	ienable,zero
}
    dec8:	e037883a 	mov	sp,fp
    decc:	df000017 	ldw	fp,0(sp)
    ded0:	dec00104 	addi	sp,sp,4
    ded4:	f800283a 	ret

0000ded8 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
    ded8:	defff404 	addi	sp,sp,-48
    dedc:	df000b15 	stw	fp,44(sp)
    dee0:	df000b04 	addi	fp,sp,44
    dee4:	e13ffc15 	stw	r4,-16(fp)
    dee8:	e17ffd15 	stw	r5,-12(fp)
    deec:	e1bffe15 	stw	r6,-8(fp)
    def0:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
    def4:	e0fffe17 	ldw	r3,-8(fp)
    def8:	e0bfff17 	ldw	r2,-4(fp)
    defc:	10c5883a 	add	r2,r2,r3
    df00:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
    df04:	e0c00117 	ldw	r3,4(fp)
    df08:	e0800217 	ldw	r2,8(fp)
    df0c:	10c5883a 	add	r2,r2,r3
    df10:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
    df14:	e0800117 	ldw	r2,4(fp)
    df18:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
    df1c:	e0bffe17 	ldw	r2,-8(fp)
    df20:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
    df24:	00800044 	movi	r2,1
    df28:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    df2c:	e0bffc17 	ldw	r2,-16(fp)
    df30:	11000504 	addi	r4,r2,20
    df34:	e0fffd17 	ldw	r3,-12(fp)
    df38:	00800044 	movi	r2,1
    df3c:	10c6983a 	sll	r3,r2,r3
    df40:	2005883a 	mov	r2,r4
    df44:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
    df48:	e0800317 	ldw	r2,12(fp)
    df4c:	1080008c 	andi	r2,r2,2
    df50:	1004c03a 	cmpne	r2,r2,zero
    df54:	1000051e 	bne	r2,zero,df6c <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
    df58:	e0bffc17 	ldw	r2,-16(fp)
    df5c:	10800304 	addi	r2,r2,12
    df60:	1007883a 	mov	r3,r2
    df64:	00810004 	movi	r2,1024
    df68:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
    df6c:	e0bffc17 	ldw	r2,-16(fp)
    df70:	10800037 	ldwio	r2,0(r2)
    df74:	00000006 	br	df78 <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    df78:	e0bffc17 	ldw	r2,-16(fp)
    df7c:	10800204 	addi	r2,r2,8
    df80:	10800037 	ldwio	r2,0(r2)
    df84:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    df88:	e0bff717 	ldw	r2,-36(fp)
    df8c:	1080100c 	andi	r2,r2,64
    df90:	1005003a 	cmpeq	r2,r2,zero
    df94:	1000031e 	bne	r2,zero,dfa4 <alt_avalon_spi_command+0xcc>
    df98:	e0bff617 	ldw	r2,-40(fp)
    df9c:	1004c03a 	cmpne	r2,r2,zero
    dfa0:	1000041e 	bne	r2,zero,dfb4 <alt_avalon_spi_command+0xdc>
    dfa4:	e0bff717 	ldw	r2,-36(fp)
    dfa8:	1080200c 	andi	r2,r2,128
    dfac:	1005003a 	cmpeq	r2,r2,zero
    dfb0:	103ff11e 	bne	r2,zero,df78 <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
    dfb4:	e0bff717 	ldw	r2,-36(fp)
    dfb8:	1080100c 	andi	r2,r2,64
    dfbc:	1005003a 	cmpeq	r2,r2,zero
    dfc0:	1000201e 	bne	r2,zero,e044 <alt_avalon_spi_command+0x16c>
    dfc4:	e0bff617 	ldw	r2,-40(fp)
    dfc8:	10800050 	cmplti	r2,r2,1
    dfcc:	10001d1e 	bne	r2,zero,e044 <alt_avalon_spi_command+0x16c>
    {
      credits--;
    dfd0:	e0bff617 	ldw	r2,-40(fp)
    dfd4:	10bfffc4 	addi	r2,r2,-1
    dfd8:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
    dfdc:	e0ffff17 	ldw	r3,-4(fp)
    dfe0:	e0bffb17 	ldw	r2,-20(fp)
    dfe4:	18800b2e 	bgeu	r3,r2,e014 <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
    dfe8:	e0bffc17 	ldw	r2,-16(fp)
    dfec:	11000104 	addi	r4,r2,4
    dff0:	e0bfff17 	ldw	r2,-4(fp)
    dff4:	10800003 	ldbu	r2,0(r2)
    dff8:	10c03fcc 	andi	r3,r2,255
    dffc:	e0bfff17 	ldw	r2,-4(fp)
    e000:	10800044 	addi	r2,r2,1
    e004:	e0bfff15 	stw	r2,-4(fp)
    e008:	2005883a 	mov	r2,r4
    e00c:	10c00035 	stwio	r3,0(r2)
    e010:	00000c06 	br	e044 <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
    e014:	e0bff917 	ldw	r2,-28(fp)
    e018:	1005003a 	cmpeq	r2,r2,zero
    e01c:	1000071e 	bne	r2,zero,e03c <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
    e020:	e0bff917 	ldw	r2,-28(fp)
    e024:	10bfffc4 	addi	r2,r2,-1
    e028:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
    e02c:	e0bffc17 	ldw	r2,-16(fp)
    e030:	10800104 	addi	r2,r2,4
    e034:	10000035 	stwio	zero,0(r2)
    e038:	00000206 	br	e044 <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
    e03c:	00bf0004 	movi	r2,-1024
    e040:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
    e044:	e0bff717 	ldw	r2,-36(fp)
    e048:	1080200c 	andi	r2,r2,128
    e04c:	1005003a 	cmpeq	r2,r2,zero
    e050:	103fc91e 	bne	r2,zero,df78 <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
    e054:	e0bffc17 	ldw	r2,-16(fp)
    e058:	10800037 	ldwio	r2,0(r2)
    e05c:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
    e060:	e0bff817 	ldw	r2,-32(fp)
    e064:	1005003a 	cmpeq	r2,r2,zero
    e068:	1000041e 	bne	r2,zero,e07c <alt_avalon_spi_command+0x1a4>
        read_ignore--;
    e06c:	e0bff817 	ldw	r2,-32(fp)
    e070:	10bfffc4 	addi	r2,r2,-1
    e074:	e0bff815 	stw	r2,-32(fp)
    e078:	00000706 	br	e098 <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
    e07c:	e0bff517 	ldw	r2,-44(fp)
    e080:	1007883a 	mov	r3,r2
    e084:	e0800217 	ldw	r2,8(fp)
    e088:	10c00005 	stb	r3,0(r2)
    e08c:	e0800217 	ldw	r2,8(fp)
    e090:	10800044 	addi	r2,r2,1
    e094:	e0800215 	stw	r2,8(fp)
      credits++;
    e098:	e0bff617 	ldw	r2,-40(fp)
    e09c:	10800044 	addi	r2,r2,1
    e0a0:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
    e0a4:	e0bff817 	ldw	r2,-32(fp)
    e0a8:	1004c03a 	cmpne	r2,r2,zero
    e0ac:	103fb21e 	bne	r2,zero,df78 <alt_avalon_spi_command+0xa0>
    e0b0:	e0c00217 	ldw	r3,8(fp)
    e0b4:	e0bffa17 	ldw	r2,-24(fp)
    e0b8:	18800126 	beq	r3,r2,e0c0 <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
    e0bc:	003fae06 	br	df78 <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    e0c0:	e0bffc17 	ldw	r2,-16(fp)
    e0c4:	10800204 	addi	r2,r2,8
    e0c8:	10800037 	ldwio	r2,0(r2)
    e0cc:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
    e0d0:	e0bff717 	ldw	r2,-36(fp)
    e0d4:	1080080c 	andi	r2,r2,32
    e0d8:	1005003a 	cmpeq	r2,r2,zero
    e0dc:	103ff81e 	bne	r2,zero,e0c0 <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    e0e0:	e0800317 	ldw	r2,12(fp)
    e0e4:	1080004c 	andi	r2,r2,1
    e0e8:	1004c03a 	cmpne	r2,r2,zero
    e0ec:	1000031e 	bne	r2,zero,e0fc <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
    e0f0:	e0bffc17 	ldw	r2,-16(fp)
    e0f4:	10800304 	addi	r2,r2,12
    e0f8:	10000035 	stwio	zero,0(r2)

  return read_length;
    e0fc:	e0800117 	ldw	r2,4(fp)
}
    e100:	e037883a 	mov	sp,fp
    e104:	df000017 	ldw	fp,0(sp)
    e108:	dec00104 	addi	sp,sp,4
    e10c:	f800283a 	ret

0000e110 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    e110:	defff904 	addi	sp,sp,-28
    e114:	dfc00615 	stw	ra,24(sp)
    e118:	df000515 	stw	fp,20(sp)
    e11c:	df000504 	addi	fp,sp,20
    e120:	e13ffd15 	stw	r4,-12(fp)
    e124:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    e128:	e0bffe17 	ldw	r2,-8(fp)
    e12c:	10800017 	ldw	r2,0(r2)
    e130:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    e134:	e13ffd17 	ldw	r4,-12(fp)
    e138:	000160c0 	call	160c <strlen>
    e13c:	10800044 	addi	r2,r2,1
    e140:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    e144:	00000d06 	br	e17c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    e148:	e0bffc17 	ldw	r2,-16(fp)
    e14c:	11000217 	ldw	r4,8(r2)
    e150:	e1bffb17 	ldw	r6,-20(fp)
    e154:	e17ffd17 	ldw	r5,-12(fp)
    e158:	000e4580 	call	e458 <memcmp>
    e15c:	1004c03a 	cmpne	r2,r2,zero
    e160:	1000031e 	bne	r2,zero,e170 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    e164:	e0bffc17 	ldw	r2,-16(fp)
    e168:	e0bfff15 	stw	r2,-4(fp)
    e16c:	00000706 	br	e18c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    e170:	e0bffc17 	ldw	r2,-16(fp)
    e174:	10800017 	ldw	r2,0(r2)
    e178:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    e17c:	e0fffe17 	ldw	r3,-8(fp)
    e180:	e0bffc17 	ldw	r2,-16(fp)
    e184:	10fff01e 	bne	r2,r3,e148 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    e188:	e03fff15 	stw	zero,-4(fp)
    e18c:	e0bfff17 	ldw	r2,-4(fp)
}
    e190:	e037883a 	mov	sp,fp
    e194:	dfc00117 	ldw	ra,4(sp)
    e198:	df000017 	ldw	fp,0(sp)
    e19c:	dec00204 	addi	sp,sp,8
    e1a0:	f800283a 	ret

0000e1a4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    e1a4:	defffa04 	addi	sp,sp,-24
    e1a8:	dfc00515 	stw	ra,20(sp)
    e1ac:	df000415 	stw	fp,16(sp)
    e1b0:	df000404 	addi	fp,sp,16
    e1b4:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    e1b8:	00800074 	movhi	r2,1
    e1bc:	1081b904 	addi	r2,r2,1764
    e1c0:	10800017 	ldw	r2,0(r2)
    e1c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    e1c8:	00003306 	br	e298 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    e1cc:	e0bffd17 	ldw	r2,-12(fp)
    e1d0:	11000217 	ldw	r4,8(r2)
    e1d4:	000160c0 	call	160c <strlen>
    e1d8:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    e1dc:	e0bffd17 	ldw	r2,-12(fp)
    e1e0:	10c00217 	ldw	r3,8(r2)
    e1e4:	e0bffc17 	ldw	r2,-16(fp)
    e1e8:	1885883a 	add	r2,r3,r2
    e1ec:	10bfffc4 	addi	r2,r2,-1
    e1f0:	10800003 	ldbu	r2,0(r2)
    e1f4:	10803fcc 	andi	r2,r2,255
    e1f8:	1080201c 	xori	r2,r2,128
    e1fc:	10bfe004 	addi	r2,r2,-128
    e200:	10800bd8 	cmpnei	r2,r2,47
    e204:	1000031e 	bne	r2,zero,e214 <alt_find_file+0x70>
    {
      len -= 1;
    e208:	e0bffc17 	ldw	r2,-16(fp)
    e20c:	10bfffc4 	addi	r2,r2,-1
    e210:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    e214:	e0bffc17 	ldw	r2,-16(fp)
    e218:	1007883a 	mov	r3,r2
    e21c:	e0bffe17 	ldw	r2,-8(fp)
    e220:	1885883a 	add	r2,r3,r2
    e224:	10800003 	ldbu	r2,0(r2)
    e228:	10803fcc 	andi	r2,r2,255
    e22c:	1080201c 	xori	r2,r2,128
    e230:	10bfe004 	addi	r2,r2,-128
    e234:	10800be0 	cmpeqi	r2,r2,47
    e238:	10000a1e 	bne	r2,zero,e264 <alt_find_file+0xc0>
    e23c:	e0bffc17 	ldw	r2,-16(fp)
    e240:	1007883a 	mov	r3,r2
    e244:	e0bffe17 	ldw	r2,-8(fp)
    e248:	1885883a 	add	r2,r3,r2
    e24c:	10800003 	ldbu	r2,0(r2)
    e250:	10803fcc 	andi	r2,r2,255
    e254:	1080201c 	xori	r2,r2,128
    e258:	10bfe004 	addi	r2,r2,-128
    e25c:	1004c03a 	cmpne	r2,r2,zero
    e260:	10000a1e 	bne	r2,zero,e28c <alt_find_file+0xe8>
    e264:	e0bffd17 	ldw	r2,-12(fp)
    e268:	11000217 	ldw	r4,8(r2)
    e26c:	e1bffc17 	ldw	r6,-16(fp)
    e270:	e17ffe17 	ldw	r5,-8(fp)
    e274:	000e4580 	call	e458 <memcmp>
    e278:	1004c03a 	cmpne	r2,r2,zero
    e27c:	1000031e 	bne	r2,zero,e28c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    e280:	e0bffd17 	ldw	r2,-12(fp)
    e284:	e0bfff15 	stw	r2,-4(fp)
    e288:	00000806 	br	e2ac <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    e28c:	e0bffd17 	ldw	r2,-12(fp)
    e290:	10800017 	ldw	r2,0(r2)
    e294:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    e298:	00c00074 	movhi	r3,1
    e29c:	18c1b904 	addi	r3,r3,1764
    e2a0:	e0bffd17 	ldw	r2,-12(fp)
    e2a4:	10ffc91e 	bne	r2,r3,e1cc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    e2a8:	e03fff15 	stw	zero,-4(fp)
    e2ac:	e0bfff17 	ldw	r2,-4(fp)
}
    e2b0:	e037883a 	mov	sp,fp
    e2b4:	dfc00117 	ldw	ra,4(sp)
    e2b8:	df000017 	ldw	fp,0(sp)
    e2bc:	dec00204 	addi	sp,sp,8
    e2c0:	f800283a 	ret

0000e2c4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    e2c4:	defffc04 	addi	sp,sp,-16
    e2c8:	df000315 	stw	fp,12(sp)
    e2cc:	df000304 	addi	fp,sp,12
    e2d0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    e2d4:	00bffa04 	movi	r2,-24
    e2d8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    e2dc:	e03ffe15 	stw	zero,-8(fp)
    e2e0:	00001e06 	br	e35c <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    e2e4:	e0bffe17 	ldw	r2,-8(fp)
    e2e8:	00c00074 	movhi	r3,1
    e2ec:	18fd0904 	addi	r3,r3,-3036
    e2f0:	10800324 	muli	r2,r2,12
    e2f4:	10c5883a 	add	r2,r2,r3
    e2f8:	10800017 	ldw	r2,0(r2)
    e2fc:	1004c03a 	cmpne	r2,r2,zero
    e300:	1000131e 	bne	r2,zero,e350 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    e304:	e0bffe17 	ldw	r2,-8(fp)
    e308:	00c00074 	movhi	r3,1
    e30c:	18fd0904 	addi	r3,r3,-3036
    e310:	10800324 	muli	r2,r2,12
    e314:	10c7883a 	add	r3,r2,r3
    e318:	e0bfff17 	ldw	r2,-4(fp)
    e31c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    e320:	00800074 	movhi	r2,1
    e324:	1081bd04 	addi	r2,r2,1780
    e328:	10c00017 	ldw	r3,0(r2)
    e32c:	e0bffe17 	ldw	r2,-8(fp)
    e330:	1880040e 	bge	r3,r2,e344 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    e334:	00c00074 	movhi	r3,1
    e338:	18c1bd04 	addi	r3,r3,1780
    e33c:	e0bffe17 	ldw	r2,-8(fp)
    e340:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    e344:	e0bffe17 	ldw	r2,-8(fp)
    e348:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    e34c:	00000606 	br	e368 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    e350:	e0bffe17 	ldw	r2,-8(fp)
    e354:	10800044 	addi	r2,r2,1
    e358:	e0bffe15 	stw	r2,-8(fp)
    e35c:	e0bffe17 	ldw	r2,-8(fp)
    e360:	10800810 	cmplti	r2,r2,32
    e364:	103fdf1e 	bne	r2,zero,e2e4 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    e368:	e0bffd17 	ldw	r2,-12(fp)
}
    e36c:	e037883a 	mov	sp,fp
    e370:	df000017 	ldw	fp,0(sp)
    e374:	dec00104 	addi	sp,sp,4
    e378:	f800283a 	ret

0000e37c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    e37c:	defffb04 	addi	sp,sp,-20
    e380:	df000415 	stw	fp,16(sp)
    e384:	df000404 	addi	fp,sp,16
    e388:	e13ffe15 	stw	r4,-8(fp)
    e38c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    e390:	e0bfff17 	ldw	r2,-4(fp)
    e394:	10810070 	cmpltui	r2,r2,1025
    e398:	1000021e 	bne	r2,zero,e3a4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    e39c:	00810004 	movi	r2,1024
    e3a0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    e3a4:	e0fffe17 	ldw	r3,-8(fp)
    e3a8:	e0bfff17 	ldw	r2,-4(fp)
    e3ac:	1885883a 	add	r2,r3,r2
    e3b0:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    e3b4:	e0bffe17 	ldw	r2,-8(fp)
    e3b8:	e0bffd15 	stw	r2,-12(fp)
    e3bc:	00000506 	br	e3d4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    e3c0:	e0bffd17 	ldw	r2,-12(fp)
    e3c4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    e3c8:	e0bffd17 	ldw	r2,-12(fp)
    e3cc:	10800804 	addi	r2,r2,32
    e3d0:	e0bffd15 	stw	r2,-12(fp)
    e3d4:	e0fffd17 	ldw	r3,-12(fp)
    e3d8:	e0bffc17 	ldw	r2,-16(fp)
    e3dc:	18bff836 	bltu	r3,r2,e3c0 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    e3e0:	e0bffe17 	ldw	r2,-8(fp)
    e3e4:	108007cc 	andi	r2,r2,31
    e3e8:	1005003a 	cmpeq	r2,r2,zero
    e3ec:	1000021e 	bne	r2,zero,e3f8 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    e3f0:	e0bffd17 	ldw	r2,-12(fp)
    e3f4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    e3f8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    e3fc:	e037883a 	mov	sp,fp
    e400:	df000017 	ldw	fp,0(sp)
    e404:	dec00104 	addi	sp,sp,4
    e408:	f800283a 	ret

0000e40c <atexit>:
    e40c:	200b883a 	mov	r5,r4
    e410:	000d883a 	mov	r6,zero
    e414:	0009883a 	mov	r4,zero
    e418:	000f883a 	mov	r7,zero
    e41c:	000e4cc1 	jmpi	e4cc <__register_exitproc>

0000e420 <exit>:
    e420:	defffe04 	addi	sp,sp,-8
    e424:	000b883a 	mov	r5,zero
    e428:	dc000015 	stw	r16,0(sp)
    e42c:	dfc00115 	stw	ra,4(sp)
    e430:	2021883a 	mov	r16,r4
    e434:	000e6040 	call	e604 <__call_exitprocs>
    e438:	00800074 	movhi	r2,1
    e43c:	1081b404 	addi	r2,r2,1744
    e440:	11000017 	ldw	r4,0(r2)
    e444:	20800f17 	ldw	r2,60(r4)
    e448:	10000126 	beq	r2,zero,e450 <exit+0x30>
    e44c:	103ee83a 	callr	r2
    e450:	8009883a 	mov	r4,r16
    e454:	000e7f40 	call	e7f4 <_exit>

0000e458 <memcmp>:
    e458:	00c000c4 	movi	r3,3
    e45c:	1980032e 	bgeu	r3,r6,e46c <memcmp+0x14>
    e460:	2144b03a 	or	r2,r4,r5
    e464:	10c4703a 	and	r2,r2,r3
    e468:	10000f26 	beq	r2,zero,e4a8 <memcmp+0x50>
    e46c:	31ffffc4 	addi	r7,r6,-1
    e470:	3000061e 	bne	r6,zero,e48c <memcmp+0x34>
    e474:	00000a06 	br	e4a0 <memcmp+0x48>
    e478:	39ffffc4 	addi	r7,r7,-1
    e47c:	00bfffc4 	movi	r2,-1
    e480:	21000044 	addi	r4,r4,1
    e484:	29400044 	addi	r5,r5,1
    e488:	38800526 	beq	r7,r2,e4a0 <memcmp+0x48>
    e48c:	20c00003 	ldbu	r3,0(r4)
    e490:	28800003 	ldbu	r2,0(r5)
    e494:	18bff826 	beq	r3,r2,e478 <memcmp+0x20>
    e498:	1885c83a 	sub	r2,r3,r2
    e49c:	f800283a 	ret
    e4a0:	0005883a 	mov	r2,zero
    e4a4:	f800283a 	ret
    e4a8:	180f883a 	mov	r7,r3
    e4ac:	20c00017 	ldw	r3,0(r4)
    e4b0:	28800017 	ldw	r2,0(r5)
    e4b4:	18bfed1e 	bne	r3,r2,e46c <memcmp+0x14>
    e4b8:	31bfff04 	addi	r6,r6,-4
    e4bc:	21000104 	addi	r4,r4,4
    e4c0:	29400104 	addi	r5,r5,4
    e4c4:	39bff936 	bltu	r7,r6,e4ac <memcmp+0x54>
    e4c8:	003fe806 	br	e46c <memcmp+0x14>

0000e4cc <__register_exitproc>:
    e4cc:	defffa04 	addi	sp,sp,-24
    e4d0:	00800074 	movhi	r2,1
    e4d4:	1081b404 	addi	r2,r2,1744
    e4d8:	dc000015 	stw	r16,0(sp)
    e4dc:	14000017 	ldw	r16,0(r2)
    e4e0:	dd000415 	stw	r20,16(sp)
    e4e4:	2829883a 	mov	r20,r5
    e4e8:	81405217 	ldw	r5,328(r16)
    e4ec:	dcc00315 	stw	r19,12(sp)
    e4f0:	dc800215 	stw	r18,8(sp)
    e4f4:	dc400115 	stw	r17,4(sp)
    e4f8:	dfc00515 	stw	ra,20(sp)
    e4fc:	2023883a 	mov	r17,r4
    e500:	3027883a 	mov	r19,r6
    e504:	3825883a 	mov	r18,r7
    e508:	28002526 	beq	r5,zero,e5a0 <__register_exitproc+0xd4>
    e50c:	29000117 	ldw	r4,4(r5)
    e510:	008007c4 	movi	r2,31
    e514:	11002716 	blt	r2,r4,e5b4 <__register_exitproc+0xe8>
    e518:	8800101e 	bne	r17,zero,e55c <__register_exitproc+0x90>
    e51c:	2105883a 	add	r2,r4,r4
    e520:	1085883a 	add	r2,r2,r2
    e524:	20c00044 	addi	r3,r4,1
    e528:	1145883a 	add	r2,r2,r5
    e52c:	0009883a 	mov	r4,zero
    e530:	15000215 	stw	r20,8(r2)
    e534:	28c00115 	stw	r3,4(r5)
    e538:	2005883a 	mov	r2,r4
    e53c:	dfc00517 	ldw	ra,20(sp)
    e540:	dd000417 	ldw	r20,16(sp)
    e544:	dcc00317 	ldw	r19,12(sp)
    e548:	dc800217 	ldw	r18,8(sp)
    e54c:	dc400117 	ldw	r17,4(sp)
    e550:	dc000017 	ldw	r16,0(sp)
    e554:	dec00604 	addi	sp,sp,24
    e558:	f800283a 	ret
    e55c:	29802204 	addi	r6,r5,136
    e560:	00800044 	movi	r2,1
    e564:	110e983a 	sll	r7,r2,r4
    e568:	30c04017 	ldw	r3,256(r6)
    e56c:	2105883a 	add	r2,r4,r4
    e570:	1085883a 	add	r2,r2,r2
    e574:	1185883a 	add	r2,r2,r6
    e578:	19c6b03a 	or	r3,r3,r7
    e57c:	14802015 	stw	r18,128(r2)
    e580:	14c00015 	stw	r19,0(r2)
    e584:	00800084 	movi	r2,2
    e588:	30c04015 	stw	r3,256(r6)
    e58c:	88bfe31e 	bne	r17,r2,e51c <__register_exitproc+0x50>
    e590:	30804117 	ldw	r2,260(r6)
    e594:	11c4b03a 	or	r2,r2,r7
    e598:	30804115 	stw	r2,260(r6)
    e59c:	003fdf06 	br	e51c <__register_exitproc+0x50>
    e5a0:	00800074 	movhi	r2,1
    e5a4:	10891704 	addi	r2,r2,9308
    e5a8:	100b883a 	mov	r5,r2
    e5ac:	80805215 	stw	r2,328(r16)
    e5b0:	003fd606 	br	e50c <__register_exitproc+0x40>
    e5b4:	00800034 	movhi	r2,0
    e5b8:	10800004 	addi	r2,r2,0
    e5bc:	1000021e 	bne	r2,zero,e5c8 <__register_exitproc+0xfc>
    e5c0:	013fffc4 	movi	r4,-1
    e5c4:	003fdc06 	br	e538 <__register_exitproc+0x6c>
    e5c8:	01006404 	movi	r4,400
    e5cc:	103ee83a 	callr	r2
    e5d0:	1007883a 	mov	r3,r2
    e5d4:	103ffa26 	beq	r2,zero,e5c0 <__register_exitproc+0xf4>
    e5d8:	80805217 	ldw	r2,328(r16)
    e5dc:	180b883a 	mov	r5,r3
    e5e0:	18000115 	stw	zero,4(r3)
    e5e4:	18800015 	stw	r2,0(r3)
    e5e8:	80c05215 	stw	r3,328(r16)
    e5ec:	18006215 	stw	zero,392(r3)
    e5f0:	18006315 	stw	zero,396(r3)
    e5f4:	0009883a 	mov	r4,zero
    e5f8:	883fc826 	beq	r17,zero,e51c <__register_exitproc+0x50>
    e5fc:	003fd706 	br	e55c <__register_exitproc+0x90>

0000e600 <register_fini>:
    e600:	f800283a 	ret

0000e604 <__call_exitprocs>:
    e604:	00800074 	movhi	r2,1
    e608:	1081b404 	addi	r2,r2,1744
    e60c:	10800017 	ldw	r2,0(r2)
    e610:	defff304 	addi	sp,sp,-52
    e614:	df000b15 	stw	fp,44(sp)
    e618:	d8800115 	stw	r2,4(sp)
    e61c:	00800034 	movhi	r2,0
    e620:	10800004 	addi	r2,r2,0
    e624:	1005003a 	cmpeq	r2,r2,zero
    e628:	d8800215 	stw	r2,8(sp)
    e62c:	d8800117 	ldw	r2,4(sp)
    e630:	dd400815 	stw	r21,32(sp)
    e634:	dd000715 	stw	r20,28(sp)
    e638:	10805204 	addi	r2,r2,328
    e63c:	dfc00c15 	stw	ra,48(sp)
    e640:	ddc00a15 	stw	r23,40(sp)
    e644:	dd800915 	stw	r22,36(sp)
    e648:	dcc00615 	stw	r19,24(sp)
    e64c:	dc800515 	stw	r18,20(sp)
    e650:	dc400415 	stw	r17,16(sp)
    e654:	dc000315 	stw	r16,12(sp)
    e658:	282b883a 	mov	r21,r5
    e65c:	2039883a 	mov	fp,r4
    e660:	d8800015 	stw	r2,0(sp)
    e664:	2829003a 	cmpeq	r20,r5,zero
    e668:	d8800117 	ldw	r2,4(sp)
    e66c:	14405217 	ldw	r17,328(r2)
    e670:	88001026 	beq	r17,zero,e6b4 <__call_exitprocs+0xb0>
    e674:	ddc00017 	ldw	r23,0(sp)
    e678:	88800117 	ldw	r2,4(r17)
    e67c:	8c802204 	addi	r18,r17,136
    e680:	143fffc4 	addi	r16,r2,-1
    e684:	80000916 	blt	r16,zero,e6ac <__call_exitprocs+0xa8>
    e688:	05bfffc4 	movi	r22,-1
    e68c:	a000151e 	bne	r20,zero,e6e4 <__call_exitprocs+0xe0>
    e690:	8409883a 	add	r4,r16,r16
    e694:	2105883a 	add	r2,r4,r4
    e698:	1485883a 	add	r2,r2,r18
    e69c:	10c02017 	ldw	r3,128(r2)
    e6a0:	a8c01126 	beq	r21,r3,e6e8 <__call_exitprocs+0xe4>
    e6a4:	843fffc4 	addi	r16,r16,-1
    e6a8:	85bff81e 	bne	r16,r22,e68c <__call_exitprocs+0x88>
    e6ac:	d8800217 	ldw	r2,8(sp)
    e6b0:	10003126 	beq	r2,zero,e778 <__call_exitprocs+0x174>
    e6b4:	dfc00c17 	ldw	ra,48(sp)
    e6b8:	df000b17 	ldw	fp,44(sp)
    e6bc:	ddc00a17 	ldw	r23,40(sp)
    e6c0:	dd800917 	ldw	r22,36(sp)
    e6c4:	dd400817 	ldw	r21,32(sp)
    e6c8:	dd000717 	ldw	r20,28(sp)
    e6cc:	dcc00617 	ldw	r19,24(sp)
    e6d0:	dc800517 	ldw	r18,20(sp)
    e6d4:	dc400417 	ldw	r17,16(sp)
    e6d8:	dc000317 	ldw	r16,12(sp)
    e6dc:	dec00d04 	addi	sp,sp,52
    e6e0:	f800283a 	ret
    e6e4:	8409883a 	add	r4,r16,r16
    e6e8:	88c00117 	ldw	r3,4(r17)
    e6ec:	2105883a 	add	r2,r4,r4
    e6f0:	1445883a 	add	r2,r2,r17
    e6f4:	18ffffc4 	addi	r3,r3,-1
    e6f8:	11800217 	ldw	r6,8(r2)
    e6fc:	1c001526 	beq	r3,r16,e754 <__call_exitprocs+0x150>
    e700:	10000215 	stw	zero,8(r2)
    e704:	303fe726 	beq	r6,zero,e6a4 <__call_exitprocs+0xa0>
    e708:	00c00044 	movi	r3,1
    e70c:	1c06983a 	sll	r3,r3,r16
    e710:	90804017 	ldw	r2,256(r18)
    e714:	8cc00117 	ldw	r19,4(r17)
    e718:	1884703a 	and	r2,r3,r2
    e71c:	10001426 	beq	r2,zero,e770 <__call_exitprocs+0x16c>
    e720:	90804117 	ldw	r2,260(r18)
    e724:	1884703a 	and	r2,r3,r2
    e728:	10000c1e 	bne	r2,zero,e75c <__call_exitprocs+0x158>
    e72c:	2105883a 	add	r2,r4,r4
    e730:	1485883a 	add	r2,r2,r18
    e734:	11400017 	ldw	r5,0(r2)
    e738:	e009883a 	mov	r4,fp
    e73c:	303ee83a 	callr	r6
    e740:	88800117 	ldw	r2,4(r17)
    e744:	98bfc81e 	bne	r19,r2,e668 <__call_exitprocs+0x64>
    e748:	b8800017 	ldw	r2,0(r23)
    e74c:	147fd526 	beq	r2,r17,e6a4 <__call_exitprocs+0xa0>
    e750:	003fc506 	br	e668 <__call_exitprocs+0x64>
    e754:	8c000115 	stw	r16,4(r17)
    e758:	003fea06 	br	e704 <__call_exitprocs+0x100>
    e75c:	2105883a 	add	r2,r4,r4
    e760:	1485883a 	add	r2,r2,r18
    e764:	11000017 	ldw	r4,0(r2)
    e768:	303ee83a 	callr	r6
    e76c:	003ff406 	br	e740 <__call_exitprocs+0x13c>
    e770:	303ee83a 	callr	r6
    e774:	003ff206 	br	e740 <__call_exitprocs+0x13c>
    e778:	88800117 	ldw	r2,4(r17)
    e77c:	1000081e 	bne	r2,zero,e7a0 <__call_exitprocs+0x19c>
    e780:	89000017 	ldw	r4,0(r17)
    e784:	20000726 	beq	r4,zero,e7a4 <__call_exitprocs+0x1a0>
    e788:	b9000015 	stw	r4,0(r23)
    e78c:	8809883a 	mov	r4,r17
    e790:	00000000 	call	0 <__alt_mem_sdram>
    e794:	bc400017 	ldw	r17,0(r23)
    e798:	883fb71e 	bne	r17,zero,e678 <__call_exitprocs+0x74>
    e79c:	003fc506 	br	e6b4 <__call_exitprocs+0xb0>
    e7a0:	89000017 	ldw	r4,0(r17)
    e7a4:	882f883a 	mov	r23,r17
    e7a8:	2023883a 	mov	r17,r4
    e7ac:	883fb21e 	bne	r17,zero,e678 <__call_exitprocs+0x74>
    e7b0:	003fc006 	br	e6b4 <__call_exitprocs+0xb0>

0000e7b4 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    e7b4:	defffd04 	addi	sp,sp,-12
    e7b8:	df000215 	stw	fp,8(sp)
    e7bc:	df000204 	addi	fp,sp,8
    e7c0:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    e7c4:	e0bfff17 	ldw	r2,-4(fp)
    e7c8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    e7cc:	e0bffe17 	ldw	r2,-8(fp)
    e7d0:	1005003a 	cmpeq	r2,r2,zero
    e7d4:	1000021e 	bne	r2,zero,e7e0 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    e7d8:	002af070 	cmpltui	zero,zero,43969
    e7dc:	00000106 	br	e7e4 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    e7e0:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    e7e4:	e037883a 	mov	sp,fp
    e7e8:	df000017 	ldw	fp,0(sp)
    e7ec:	dec00104 	addi	sp,sp,4
    e7f0:	f800283a 	ret

0000e7f4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    e7f4:	defffd04 	addi	sp,sp,-12
    e7f8:	dfc00215 	stw	ra,8(sp)
    e7fc:	df000115 	stw	fp,4(sp)
    e800:	df000104 	addi	fp,sp,4
    e804:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    e808:	e13fff17 	ldw	r4,-4(fp)
    e80c:	000e7b40 	call	e7b4 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    e810:	003fff06 	br	e810 <_exit+0x1c>
    e814:	0000e600 	call	e60 <__fixsfsi+0x8>
