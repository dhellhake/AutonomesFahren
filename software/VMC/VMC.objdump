
VMC.elf:     file format elf32-littlenios2
VMC.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00017f18 memsz 0x00017f18 flags r-x
    LOAD off    0x00018f38 vaddr 0x00017f38 paddr 0x00019aec align 2**12
         filesz 0x00001bb4 memsz 0x00001bb4 flags rw-
    LOAD off    0x0001b6a0 vaddr 0x0001b6a0 paddr 0x0001b6a0 align 2**12
         filesz 0x00000000 memsz 0x00007634 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00017860  000001bc  000001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000051c  00017a1c  00017a1c  00018a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bb4  00017f38  00019aec  00018f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00007634  0001b6a0  0001b6a0  0001b6a0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0001aaec  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001038  00000000  00000000  0001ab18  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002a04  00000000  00000000  0001bb50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00033d0d  00000000  00000000  0001e554  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000aa7f  00000000  00000000  00052261  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001d559  00000000  00000000  0005cce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002a64  00000000  00000000  0007a23c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000257f  00000000  00000000  0007cca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000dd3e  00000000  00000000  0007f21f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0008cf60  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b08  00000000  00000000  0008cf90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  00092c18  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00092c1e  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00092c21  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000009  00000000  00000000  00092c22  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000009  00000000  00000000  00092c2b  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000009  00000000  00000000  00092c34  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 0000000d  00000000  00000000  00092c3d  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 0000001f  00000000  00000000  00092c4a  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     000a7c45  00000000  00000000  00092c69  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001bc l    d  .text	00000000 .text
00017a1c l    d  .rodata	00000000 .rodata
00017f38 l    d  .rwdata	00000000 .rwdata
0001b6a0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000204 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 mpu6050.c
00000000 l    df *ABS*	00000000 VMC.c
00000000 l    df *ABS*	00000000 head.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000b08 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
000013cc l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00001908 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00002428 l     F .text	00000058 __sprint_r
00017c52 l     O .rodata	00000010 blanks.3452
00017c42 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000448c l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00005e88 l     F .text	00000058 std
00005f94 l     F .text	00000008 __fp_lock
00005f9c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00017f38 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
00019a34 l     O .rwdata	00000004 charset
00017c88 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00017dd0 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0000af14 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000af74 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000b074 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000b194 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000b274 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000b3d0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0000b618 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00019a58 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000b8b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00019a5c l     O .rwdata	00000004 lockid
0001b728 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00019a60 l     O .rwdata	00000004 lockid
0001b730 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0000d2ec l     F .text	00000044 OS_InitMisc
0000d330 l     F .text	0000006c OS_InitRdyList
0000d494 l     F .text	000000e0 OS_InitTCBList
0000d210 l     F .text	000000dc OS_InitEventList
0000d39c l     F .text	0000007c OS_InitTaskIdle
0000d418 l     F .text	0000007c OS_InitTaskStat
0000d708 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0000f628 l     F .text	00000110 OS_FlagTaskRdy
0000f380 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000188f4 l     O .rwdata	000000c8 epcs
000189bc l     O .rwdata	0000106c jtag_uart
00013f58 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0001401c l     F .text	00000288 alt_epcs_flash_query
00013fe4 l     F .text	00000038 alt_flash_device_register
000142a4 l     F .text	00000108 alt_epcs_flash_memcmp
0001472c l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00014bf4 l     F .text	000002c4 altera_avalon_jtag_uart_irq
00014eb8 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000156d0 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 epcs_commands.c
00015928 l     F .text	00000038 epcs_await_wip_released
00015960 l     F .text	00000038 epcs_test_wip
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000160f0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000165e4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00016720 l     F .text	000000dc alt_file_locked
00016984 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000177f8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
000179ac l     F .text	00000040 alt_sim_halt
00007c44 g     F .text	00000094 _mprec_log10
00019aae g     O .rwdata	00000002 OSTaskNameSize
0001b6a0 g     O .bss	00000004 pI2CDataAvailable
0001462c g     F .text	00000090 alt_epcs_flash_get_info
00007d30 g     F .text	00000088 __any_on
0000943c g     F .text	00000070 _isatty_r
00017da8 g     O .rodata	00000028 __mprec_tinytens
0000b430 g     F .text	000000c8 alt_main
00002300 g     F .text	000000a0 _puts_r
00022a44 g     O .bss	00000100 alt_irq
000094ac g     F .text	00000078 _lseek_r
0000ff1c g     F .text	000000d0 OS_MemInit
00019aec g       *ABS*	00000000 __flash_rwdata_start
00013e5c g     F .text	00000064 OSTimeSet
0000a744 g     F .text	00000088 __eqdf2
0000be68 g     F .text	000006b4 OSEventPendMulti
00022cd4 g       *ABS*	00000000 __alt_heap_start
00016f8c g     F .text	00000020 OSTaskCreateHook
00002288 g     F .text	00000044 printf
00019a86 g     O .rwdata	00000002 OSMboxEn
0000c570 g     F .text	0000007c OSIntEnter
00008f08 g     F .text	00000068 __sseek
00005ef0 g     F .text	000000a4 __sinit
00019a96 g     O .rwdata	00000002 OSQEn
00006bc8 g     F .text	00000084 _setlocale_r
00005ff0 g     F .text	00000068 __sfmoreglue
0000bb24 g     F .text	000000d0 __malloc_unlock
00016fe8 g     F .text	0000001c OSTaskStatHook
0001b738 g     O .bss	00000001 OSLockNesting
00000fa0 g     F .text	00000174 __divsf3
00019ad4 g     O .rwdata	00000002 OSDataSize
0001b739 g     O .bss	00000001 OSRunning
000076c0 g     F .text	000000e0 memmove
00017020 g     F .text	0000001c OSInitHookBegin
00019acc g     O .rwdata	00000002 OSTmrSize
00005fe0 g     F .text	00000010 _cleanup
0001b6a4 g     O .bss	00000004 pRearRightEncRead
00007db8 g     F .text	000000bc _Balloc
00001224 g     F .text	00000094 __fixsfsi
0001b73c g     O .bss	00000004 OSIdleCtr
0000a854 g     F .text	00000088 __gtdf2
00016c58 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0000da3c g     F .text	000002e0 OS_TCBInit
00015830 g     F .text	000000f8 epcs_sector_erase
00000000 g     F .entry	0000001c __reset
00019ad2 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
00019a72 g     O .rwdata	00000002 OSEventSize
0001b740 g     O .bss	00000001 OSPrioHighRdy
000093c8 g     F .text	00000074 _fstat_r
00016fac g     F .text	00000020 OSTaskDelHook
0001b714 g     O .bss	00000004 errno
000018d0 g     F .text	00000038 __make_dp
00016c38 g       .text	00000000 OSStartHighRdy
00012630 g     F .text	00000200 OSTaskCreateExt
0000ee9c g     F .text	00000068 OSFlagPendGetFlagsRdy
00019ab2 g     O .rwdata	00000002 OSTaskStatStkSize
0001b6a8 g     O .bss	00000004 pFrontLeftEncRead
0000dea8 g     F .text	00000334 OSFlagAccept
00010654 g     F .text	000000c8 OSQFlush
0000ffec g     F .text	00000154 OSQAccept
0001b720 g     O .bss	00000004 alt_argv
00021a28 g       *ABS*	00000000 _gp
00000cec g     F .text	00000070 __subsf3
0001245c g     F .text	000001d4 OSTaskCreate
00011ee8 g     F .text	00000574 OSTaskChangePrio
0001b734 g     O .bss	00000004 alt_heapsem
0000dd1c g     F .text	0000018c OSDebugInit
00012830 g     F .text	0000040c OSTaskDel
00018774 g     O .rwdata	00000180 alt_fd_list
0001f820 g     O .bss	00000370 OSFlagTbl
0001b6ac g     O .bss	00000004 pHc_sr04
000009ec g     F .text	000000ac I2CRead
0000cfec g     F .text	000000b8 OS_EventTaskRemove
00015b34 g     F .text	00000064 epcs_write_status_register
000172cc g     F .text	00000094 alt_find_dev
00007620 g     F .text	000000a0 memcpy
00019a9c g     O .rwdata	00000002 OSRdyTblSize
0000089c g     F .text	0000006c set_duty_cycle
00005fd4 g     F .text	0000000c _cleanup_r
0000a9ec g     F .text	000000f8 __floatsidf
000166a8 g     F .text	00000078 alt_io_redirect
0000a964 g     F .text	00000088 __ltdf2
00017a1c g       *ABS*	00000000 __DTOR_END__
000023a0 g     F .text	00000014 puts
0000bbf4 g     F .text	00000130 OSEventNameGet
00019a80 g     O .rwdata	00000002 OSFlagMax
00016b8c g     F .text	00000020 altera_nios2_irq_init
000147c0 g     F .text	0000011c alt_epcs_flash_write_block
00007b94 g     F .text	000000b0 __ratio
0000c5ec g     F .text	00000100 OSIntExit
00019aba g     O .rwdata	00000002 OSTCBSize
0001b741 g     O .bss	00000001 OSPrioCur
00015134 g     F .text	000002c0 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000022cc g     F .text	00000034 _printf_r
00001a44 g     F .text	00000008 __udivsi3
0000b0d4 g     F .text	000000c0 isatty
00019aa0 g     O .rwdata	00000002 OSStkWidth
00017cb8 g     O .rodata	000000c8 __mprec_tens
00019a94 g     O .rwdata	00000002 OSPtrSize
00006ba4 g     F .text	00000008 __locale_charset
0001b6b0 g     O .bss	00000004 pFrontRightDutySet
00019a74 g     O .rwdata	00000002 OSEventTblSize
00016bac g       .text	00000000 OSCtxSw
00017574 g     F .text	00000090 alt_icache_flush
0001b708 g     O .bss	00000004 __malloc_top_pad
0001b744 g     O .bss	00000004 OSTCBList
0001b718 g     O .bss	00000004 alt_fd_list_lock
00019a30 g     O .rwdata	00000004 __mb_cur_max
00006bac g     F .text	0000000c _localeconv_r
000084b0 g     F .text	0000003c __i2b
00006588 g     F .text	0000049c __sfvwrite_r
0001fb90 g     O .bss	00000c30 OSMemTbl
0001b748 g     O .bss	00000001 OSTickStepState
00008e90 g     F .text	00000070 _sbrk_r
00019a98 g     O .rwdata	00000002 OSQMax
0001b820 g     O .bss	00002000 drivingTask_stk
000207c0 g     O .bss	00000800 OSTaskStatStk
0000fb04 g     F .text	0000010c OSMemNameGet
00019a78 g     O .rwdata	00000002 OSFlagEn
00009524 g     F .text	00000078 _read_r
00019abe g     O .rwdata	00000002 OSTimeTickHookEn
00010bb8 g     F .text	00000180 OSQPost
0000f738 g     F .text	000000ac OS_FlagUnlink
00018338 g     O .rwdata	0000000c __lc_ctype
00019a50 g     O .rwdata	00000004 alt_max_fd
0000d5c8 g     F .text	0000006c OS_MemCopy
0000d634 g     F .text	000000d4 OS_Sched
00002150 g     F .text	00000138 __unpack_d
000092a4 g     F .text	00000110 _fclose_r
0000fa00 g     F .text	00000104 OSMemGet
02005000 g       *ABS*	00000000 __alt_mem_state_cmd_memory
00012f64 g     F .text	000001c4 OSTaskNameSet
00005e54 g     F .text	00000034 fflush
0001b70c g     O .bss	00000004 __malloc_max_sbrked_mem
0001b74c g     O .bss	00000004 OSCtxSwCtr
00017004 g     F .text	0000001c OSTimeTickHook
00019a82 g     O .rwdata	00000002 OSFlagNameSize
000012b8 g     F .text	00000054 __extendsfdf2
0000d0a4 g     F .text	00000104 OS_EventTaskRemoveMulti
0000185c g     F .text	00000074 __adddf3
0000ce98 g     F .text	00000154 OS_EventTaskWaitMulti
000146bc g     F .text	00000070 alt_epcs_flash_erase_block
00007a74 g     F .text	00000120 __b2d
00019a9a g     O .rwdata	00000002 OSQSize
00009b78 g     F .text	000005b0 __umoddi3
0000b2e0 g     F .text	000000f0 lseek
00011794 g     F .text	0000027c OSSemPend
00019a2c g     O .rwdata	00000004 _global_impure_ptr
00015e4c g     F .text	00000058 epcs_exit_4_bytes_mode
0000882c g     F .text	000005f4 _realloc_r
00019a84 g     O .rwdata	00000002 OSLowestPrio
00022cd4 g       *ABS*	00000000 __bss_end
000164ec g     F .text	000000f8 alt_iic_isr_register
00017074 g     F .text	00000020 OSTCBInitHook
00019aca g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00016a7c g     F .text	00000110 alt_tick
0000959c g     F .text	000005dc __udivdi3
00019a6c g     O .rwdata	00000002 OSEventEn
00017d80 g     O .rodata	00000028 __mprec_bigtens
0000870c g     F .text	00000120 __s2b
00019ac6 g     O .rwdata	00000002 OSTmrCfgNameSize
0000abbc g     F .text	00000194 __floatunsidf
00007994 g     F .text	00000060 __mcmp
00005fbc g     F .text	00000018 __fp_lock_all
000164a4 g     F .text	00000048 alt_ic_irq_enabled
0000f544 g     F .text	000000e4 OS_FlagInit
000169e4 g     F .text	00000098 alt_alarm_stop
00019aa8 g     O .rwdata	00000002 OSTaskIdleStkSize
0001b788 g     O .bss	00000004 alt_irq_active
00011320 g     F .text	000000c0 OSSemAccept
0000fd30 g     F .text	000000f0 OSMemPut
0000f7e4 g     F .text	0000021c OSMemCreate
0001b750 g     O .bss	00000004 OSIdleCtrMax
000000ec g     F .exceptions	000000d0 alt_irq_handler
0001874c g     O .rwdata	00000028 alt_dev_null
00019abc g     O .rwdata	00000002 OSTicksPerSec
00001ccc g     F .text	000000c8 __unpack_f
00016bac g       .text	00000000 OSIntCtxSw
00015ff8 g     F .text	00000044 alt_dcache_flush_all
00007860 g     F .text	00000070 __hi0bits
0000aae4 g     F .text	000000d8 __fixdfsi
0001b754 g     O .bss	00000004 OSTCBFreeList
00019aec g       *ABS*	00000000 __ram_rwdata_end
00011a10 g     F .text	0000017c OSSemPendAbort
00019a48 g     O .rwdata	00000008 alt_dev_list
0000b794 g     F .text	00000120 write
00019ac0 g     O .rwdata	00000002 OSVersionNbr
00017f38 g       *ABS*	00000000 __ram_rodata_end
0000afa0 g     F .text	000000d4 fstat
00000908 g     F .text	00000080 MeasureDistance
00019a68 g     O .rwdata	00000004 OSEndiannessTest
000085ec g     F .text	00000120 __pow5mult
0001b6fc g     O .bss	00000004 __nlocale_changed
00001a4c g     F .text	00000008 __umodsi3
00015d08 g     F .text	0000006c epcs_read_electronic_signature
00019a7a g     O .rwdata	00000002 OSFlagGrpSize
00022cd4 g       *ABS*	00000000 end
00001b6c g     F .text	00000160 __pack_f
00014abc g     F .text	00000138 altera_avalon_jtag_uart_init
0000d8ac g     F .text	000000c8 OS_TaskStat
0001b6b4 g     O .bss	00000004 pRearRightEncSet
00017a18 g       *ABS*	00000000 __CTOR_LIST__
01100000 g       *ABS*	00000000 __alt_stack_pointer
00015740 g     F .text	00000090 alt_avalon_timer_sc_init
00001aec g     F .text	00000080 __clzsi2
000153f4 g     F .text	000002dc altera_avalon_jtag_uart_write
00005ee0 g     F .text	00000004 __sfp_lock_acquire
0000753c g     F .text	000000e4 memchr
0000d574 g     F .text	00000054 OS_MemClr
00002480 g     F .text	00001eac ___vfprintf_internal_r
00016c7c g     F .text	00000310 OSTaskStkInit
00006274 g     F .text	00000314 _free_r
0001b6b8 g     O .bss	00000004 pI2CRegWriteData
0000cbf4 g     F .text	00000194 OS_EventTaskRdy
000177fc g     F .text	000001b0 __call_exitprocs
0001b758 g     O .bss	00000001 OSCPUUsage
0001b700 g     O .bss	00000004 __mlocale_changed
00019a3c g     O .rwdata	00000004 __malloc_sbrk_base
000001bc g     F .text	0000004c _start
0001b78c g     O .bss	00000004 _alt_tick_rate
0001071c g     F .text	00000320 OSQPend
00013928 g     F .text	0000014c OSTimeDly
0000817c g     F .text	0000014c __lshift
00017094 g     F .text	00000238 alt_avalon_spi_command
0001b790 g     O .bss	00000004 _alt_nticks
0000b4f8 g     F .text	00000120 read
00013ef4 g     F .text	00000064 alt_sys_init
0000118c g     F .text	00000098 __floatsisf
000176c4 g     F .text	00000134 __register_exitproc
0001b759 g     O .bss	00000001 OSTaskCtr
00013a74 g     F .text	00000174 OSTimeDlyHMSM
000082c8 g     F .text	000001e8 __multiply
00014fcc g     F .text	00000074 altera_avalon_jtag_uart_close
00017f38 g       *ABS*	00000000 __ram_rwdata_start
00017a1c g       *ABS*	00000000 __ram_rodata_start
0001b794 g     O .bss	00000028 __malloc_current_mallinfo
00019a6e g     O .rwdata	00000002 OSEventMax
00007e74 g     F .text	0000017c __d2b
00011b8c g     F .text	00000128 OSSemPost
000157d0 g     F .text	00000060 epcs_read_status_register
0001b6bc g     O .bss	00000001 c
0000c778 g     F .text	000000e4 OSSchedUnlock
00014974 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00017480 g     F .text	000000f4 alt_get_fd
0001b75c g     O .bss	00000004 OSMemFreeList
0000c8cc g     F .text	000000ac OSStatInit
0000f2ac g     F .text	000000d4 OSFlagQuery
0000ad50 g     F .text	000000c8 __fpcmp_parts_d
0001b6c0 g     O .bss	00000004 pUltraSoundArray
00019aa4 g     O .rwdata	00000002 OSTaskCreateExtEn
00009234 g     F .text	00000070 _close_r
0001b6c4 g     O .bss	00000004 pFrontLeftEncSet
00015d74 g     F .text	00000080 epcs_read_device_id
00017650 g     F .text	00000074 memcmp
0000cbd8 g     F .text	0000001c OS_Dummy
00014a24 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00022cd4 g       *ABS*	00000000 __alt_stack_base
00014a6c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00004350 g     F .text	0000013c __swsetup_r
00000740 g     F .text	00000120 init
00020fc0 g     O .bss	000001e0 OSQTbl
0000a4ec g     F .text	00000258 __divdf3
0001b7bc g     O .bss	00000064 versionName
00006058 g     F .text	000000f0 __sfp
00007cd8 g     F .text	00000058 __copybits
00018344 g     O .rwdata	00000408 __malloc_av_
00005eec g     F .text	00000004 __sinit_lock_release
0001b760 g     O .bss	00000004 OSTCBHighRdy
0000a128 g     F .text	000003c4 __muldf3
00008fec g     F .text	00000060 __sread
00017abc g     O .rodata	00000010 __thenan_sf
0001b764 g     O .bss	00000004 OSQFreeList
00017360 g     F .text	00000120 alt_find_file
0001603c g     F .text	000000b4 alt_dev_llist_insert
0000ba1c g     F .text	00000108 __malloc_lock
0000b6d8 g     F .text	000000bc sbrk
0000bd24 g     F .text	00000144 OSEventNameSet
00005c58 g     F .text	000001fc _fflush_r
00009180 g     F .text	000000b4 _calloc_r
0001b768 g     O .bss	00000001 OSRdyGrp
00019ad8 g     O .rwdata	00000008 alt_flash_dev_list
0001b6c8 g     O .bss	00000004 pFrontRightEncRead
0001b6a0 g       *ABS*	00000000 __bss_start
000077a0 g     F .text	00000098 memset
00000690 g     F .text	000000b0 main
0001b724 g     O .bss	00000004 alt_envp
0001b710 g     O .bss	00000004 __malloc_max_total_mem
000149cc g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00017df8 g     O .rodata	00000100 OSUnMapTbl
00019a9e g     O .rwdata	00000002 OSSemEn
0000ef04 g     F .text	000003a8 OSFlagPost
00008f00 g     F .text	00000008 __sclose
01100000 g       *ABS*	00000000 __alt_heap_limit
000093b4 g     F .text	00000014 fclose
0000cd88 g     F .text	00000110 OS_EventTaskWait
0000d974 g     F .text	000000c8 OS_TaskStatStkChk
00022b44 g     O .bss	00000190 _atexit0
00012c3c g     F .text	00000170 OSTaskDelReq
000046a4 g     F .text	000015b4 _dtoa_r
00006dfc g     F .text	00000740 _malloc_r
00000208 g     F .text	00000040 getDeviceID
00019a54 g     O .rwdata	00000004 alt_errno
0001b6cc g     O .bss	00000004 pI2CDataLen
02004000 g       *ABS*	00000000 __alt_mem_manuer_queue
00000988 g     F .text	00000064 I2CWrite
0000c85c g     F .text	00000070 OSStart
0000b9c0 g     F .text	0000005c __env_unlock
00006aec g     F .text	000000b8 _fwalk
00013128 g     F .text	00000218 OSTaskResume
0000fe20 g     F .text	000000fc OSMemQuery
00019ab0 g     O .rwdata	00000002 OSTaskStatEn
00019a8a g     O .rwdata	00000002 OSMemMax
00010d38 g     F .text	00000188 OSQPostFront
00001984 g     F .text	00000060 __divsi3
0001b769 g     O .bss	00000003 OSRdyTbl
00019a64 g     O .rwdata	00000002 OSDebugEn
00017acc g     O .rodata	00000014 __thenan_df
00006148 g     F .text	0000012c _malloc_trim_r
00017a1c g       *ABS*	00000000 __CTOR_END__
00000dc0 g     F .text	000001e0 __mulsf3
00019a7c g     O .rwdata	00000002 OSFlagNodeSize
00019ac4 g     O .rwdata	00000002 OSTmrCfgMax
0001d820 g     O .bss	00002000 sensorCollector_stk
000143ac g     F .text	00000280 alt_epcs_flash_write
0000904c g     F .text	000000bc strcmp
00010140 g     F .text	00000214 OSQCreate
00012dac g     F .text	000001b8 OSTaskNameGet
00017a1c g       *ABS*	00000000 __flash_rodata_start
00010ec0 g     F .text	00000234 OSQPostOpt
0000c978 g     F .text	00000240 OSTimeTick
00019aac g     O .rwdata	00000002 OSTaskMax
00017a1c g       *ABS*	00000000 __DTOR_LIST__
0001b6d0 g     O .bss	00000004 uPwmPeriod
000113e0 g     F .text	00000114 OSSemCreate
00019ad0 g     O .rwdata	00000002 OSTmrWheelSize
0001b6d4 g     O .bss	00000004 pFrontLeftDutySet
00000860 g     F .text	0000003c delay
0000a7cc g     F .text	00000088 __nedf2
00019aa6 g     O .rwdata	00000002 OSTaskDelEn
00011cb4 g     F .text	00000130 OSSemQuery
00010354 g     F .text	00000300 OSQDel
00010a3c g     F .text	0000017c OSQPendAbort
0001b6d8 g     O .bss	00000004 pI2C
00013ec0 g     F .text	00000034 alt_irq_init
0000b678 g     F .text	00000060 alt_release_fd
00017ae0 g     O .rodata	00000100 __clz_tab
0001b704 g     O .bss	00000004 _PathLocale
00017604 g     F .text	00000014 atexit
00001114 g     F .text	00000078 __gesf2
00009108 g     F .text	00000078 _write_r
0000c6ec g     F .text	0000008c OSSchedLock
00006c4c g     F .text	0000001c setlocale
0000e1dc g     F .text	0000013c OSFlagCreate
00019a28 g     O .rwdata	00000004 _impure_ptr
0001b6dc g     O .bss	00000004 pRearLeftEncSet
0001b6e0 g     O .bss	00000004 pFrontRightEncSet
0001b71c g     O .bss	00000004 alt_argc
000161b4 g     F .text	00000064 _do_dtors
00019a76 g     O .rwdata	00000002 OSEventMultiEn
0000e318 g     F .text	000002a8 OSFlagDel
0001b76c g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
0001b6e4 g     O .bss	00000004 pRearLeftEncRead
000079f4 g     F .text	00000080 __ulp
00008e20 g     F .text	00000040 __isinfd
0000e858 g     F .text	00000644 OSFlagPend
00019ac2 g     O .rwdata	00000002 OSTmrEn
00005fa4 g     F .text	00000018 __fp_unlock_all
00019a40 g     O .rwdata	00000008 alt_fs_list
0000d778 g     F .text	00000080 OS_StrCopy
00019a8c g     O .rwdata	00000002 OSMemNameSize
0001703c g     F .text	0000001c OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
00019ab8 g     O .rwdata	00000002 OSTCBPrioTblMax
00006bb8 g     F .text	00000010 localeconv
00015998 g     F .text	0000014c epcs_read_buffer
00019ab4 g     O .rwdata	00000002 OSTaskStatStkChkEn
00013f90 g     F .text	00000054 alt_epcs_flash_init
00016318 g     F .text	00000050 alt_ic_isr_register
00019a88 g     O .rwdata	00000002 OSMemEn
00019a92 g     O .rwdata	00000002 OSMutexEn
00019aec g       *ABS*	00000000 _edata
00022cd4 g       *ABS*	00000000 _end
0001b6e8 g     O .bss	00000004 pRearLeftDutySet
00016218 g     F .text	0000007c alt_flash_open_dev
0001b770 g     O .bss	00000001 OSIntNesting
000001bc g       *ABS*	00000000 __ram_exceptions_end
00015040 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00013be8 g     F .text	00000210 OSTimeDlyResume
0000e704 g     F .text	00000154 OSFlagNameSet
00000248 g     F .text	00000390 sensorCollector
00013340 g     F .text	000001fc OSTaskStkChk
00016404 g     F .text	000000a0 alt_ic_irq_disable
00015df4 g     F .text	00000058 epcs_enter_4_bytes_mode
00019a8e g     O .rwdata	00000002 OSMemSize
00008f70 g     F .text	0000007c __swrite
00019a38 g     O .rwdata	00000004 __malloc_trim_threshold
000005d8 g     F .text	000000b8 drivingTask
0001b774 g     O .bss	00000004 OSTCBCur
00017618 g     F .text	00000038 exit
00019a90 g     O .rwdata	00000002 OSMemTblSize
00006a24 g     F .text	000000c8 _fwalk_reent
0000130c g     F .text	000000c0 __floatunsisf
00007ff0 g     F .text	0000018c __mdiff
00016294 g     F .text	00000054 alt_flash_close_dev
000019e4 g     F .text	00000060 __modsi3
01100000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00005ee4 g     F .text	00000004 __sfp_lock_release
0000c51c g     F .text	00000054 OSInit
00000000 g       *ABS*	00000000 __alt_mem_sdram
00013768 g     F .text	00000144 OSTaskQuery
0001b6ec g     O .bss	00000004 pRearRightDutySet
00011274 g     F .text	000000ac OS_QInit
0000d7f8 g     F .text	00000058 OS_StrLen
0000fc10 g     F .text	00000120 OSMemNameSet
0001b6f0 g     O .bss	00000004 pwm_enable
00019aaa g     O .rwdata	00000002 OSTaskProfileEn
0001b778 g     O .bss	00000004 OSTime
00000a98 g     F .text	00000070 __fixunssfsi
00001d94 g     F .text	000000a8 __fpcmp_parts_f
000211a0 g     O .bss	00000800 OSTaskIdleStk
000179ec g     F .text	0000002c _exit
00008e60 g     F .text	00000030 __isnand
00015ea4 g     F .text	00000154 alt_alarm_start
0000e5c0 g     F .text	00000144 OSFlagNameGet
00013df8 g     F .text	00000064 OSTimeGet
00001a54 g     F .text	00000098 __muldi3
00006c68 g     F .text	00000194 __smakebuf_r
000023b4 g     F .text	00000074 strlen
00015ae4 g     F .text	00000050 epcs_write_enable
00016fcc g     F .text	0000001c OSTaskSwHook
000167fc g     F .text	00000188 open
000219a0 g     O .bss	00000b40 OSEventTbl
0000a8dc g     F .text	00000088 __gedf2
000224e0 g     O .bss	00000510 OSTCBTbl
00011de4 g     F .text	00000104 OSSemSet
000162e8 g     F .text	00000030 alt_icache_flush_all
0001b6f4 g     O .bss	00000004 pI2CCmd
00019ae0 g     O .rwdata	00000004 alt_priority_mask
000114f4 g     F .text	000002a0 OSSemDel
0001b77c g     O .bss	00000004 OSFlagFreeList
00016368 g     F .text	0000009c alt_ic_irq_enable
00019a70 g     O .rwdata	00000002 OSEventNameSize
0000432c g     F .text	00000024 __vfprintf_internal
0001b780 g     O .bss	00000001 OSStatRdy
02000000 g       *ABS*	00000000 __alt_mem_epcs
000229f0 g     O .bss	00000054 OSTCBPrioTbl
0000b914 g     F .text	000000ac __env_lock
00019ab6 g     O .rwdata	00000002 OSTaskSwHookEn
000017dc g     F .text	00000080 __subdf3
000148dc g     F .text	00000098 alt_epcs_flash_read
000078d0 g     F .text	000000c4 __lo0bits
00019ae4 g     O .rwdata	00000008 alt_alarm_list
00019a7e g     O .rwdata	00000002 OSFlagWidth
00016150 g     F .text	00000064 _do_ctors
0000ae18 g     F .text	000000fc close
00000d5c g     F .text	00000064 __addsf3
0001b72c g     O .bss	00000004 alt_envsem
0001b784 g     O .bss	00000004 OSIdleCtrRun
0000cbb8 g     F .text	00000020 OSVersion
00019ac8 g     O .rwdata	00000002 OSTmrCfgWheelSize
0000b1f4 g     F .text	00000080 alt_load
000138ac g     F .text	0000007c OS_TaskStkClr
00001e3c g     F .text	00000314 __pack_d
00019aa2 g     O .rwdata	00000002 OSTaskCreateEn
0000d1a8 g     F .text	00000068 OS_EventWaitListInit
00017058 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
00005ee8 g     F .text	00000004 __sinit_lock_acquire
00015b98 g     F .text	00000170 epcs_write_buffer
000084ec g     F .text	00000100 __multadd
0001353c g     F .text	0000022c OSTaskSuspend
00007838 g     F .text	00000028 _Bfree
0001b6f8 g     O .bss	00000004 pI2CReg
0000d850 g     F .text	0000005c OS_TaskIdle
00019ace g     O .rwdata	00000002 OSTmrTblSize
000110f4 g     F .text	00000180 OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00810014 	movui	r2,1024
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406f14 	ori	at,at,444
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <OSCtxSw_SWITCH_PC+0x58>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	000c5700 	call	c570 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0ffff17 	ldw	r3,-4(fp)
 120:	e0bffe17 	ldw	r2,-8(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	1005003a 	cmpeq	r2,r2,zero
 12c:	1000161e 	bne	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 130:	e0bffd17 	ldw	r2,-12(fp)
 134:	00c000b4 	movhi	r3,2
 138:	18ca9104 	addi	r3,r3,10820
 13c:	100490fa 	slli	r2,r2,3
 140:	10c5883a 	add	r2,r2,r3
 144:	11400017 	ldw	r5,0(r2)
 148:	e0bffd17 	ldw	r2,-12(fp)
 14c:	00c000b4 	movhi	r3,2
 150:	18ca9104 	addi	r3,r3,10820
 154:	100490fa 	slli	r2,r2,3
 158:	10c5883a 	add	r2,r2,r3
 15c:	10800104 	addi	r2,r2,4
 160:	11000017 	ldw	r4,0(r2)
 164:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 168:	0005313a 	rdctl	r2,ipending
 16c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 178:	e0bfff17 	ldw	r2,-4(fp)
 17c:	1004c03a 	cmpne	r2,r2,zero
 180:	103fe31e 	bne	r2,zero,110 <alt_irq_handler+0x24>
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffe17 	ldw	r2,-8(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fde06 	br	11c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a4:	000c5ec0 	call	c5ec <OSIntExit>
}
 1a8:	e037883a 	mov	sp,fp
 1ac:	dfc00117 	ldw	ra,4(sp)
 1b0:	df000017 	ldw	fp,0(sp)
 1b4:	dec00204 	addi	sp,sp,8
 1b8:	f800283a 	ret

Disassembly of section .text:

000001bc <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     1bc:	00810014 	movui	r2,1024
#endif

0:
    initd 0(r2)
     1c0:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     1c4:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
     1c8:	00bffd16 	blt	zero,r2,1c0 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1cc:	06c04434 	movhi	sp,272
    ori sp, sp, %lo(__alt_stack_pointer)
     1d0:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1d4:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     1d8:	d6868a14 	ori	gp,gp,6696
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1dc:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1e0:	10ada814 	ori	r2,r2,46752

    movhi r3, %hi(__bss_end)
     1e4:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     1e8:	18cb3514 	ori	r3,r3,11476

    beq r2, r3, 1f
     1ec:	10c00326 	beq	r2,r3,1fc <_start+0x40>

0:
    stw zero, (r2)
     1f0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1f4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1f8:	10fffd36 	bltu	r2,r3,1f0 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1fc:	000b1f40 	call	b1f4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     200:	000b4300 	call	b430 <alt_main>

00000204 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     204:	003fff06 	br	204 <alt_after_alt_main>

00000208 <getDeviceID>:
 */

#include "mpu6050.h"

unsigned char getDeviceID()
{
     208:	defffd04 	addi	sp,sp,-12
     20c:	dfc00215 	stw	ra,8(sp)
     210:	df000115 	stw	fp,4(sp)
     214:	df000104 	addi	fp,sp,4
	char cBuff[MPU6050_WHO_AM_I_LENGTH];

	I2CRead(MPU_SLAVE_ADDRESS, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_LENGTH, cBuff);
     218:	01001a04 	movi	r4,104
     21c:	01401d44 	movi	r5,117
     220:	01800044 	movi	r6,1
     224:	e1ffff04 	addi	r7,fp,-4
     228:	00009ec0 	call	9ec <I2CRead>
	return cBuff[0];
     22c:	e0bfff03 	ldbu	r2,-4(fp)
     230:	10803fcc 	andi	r2,r2,255
}
     234:	e037883a 	mov	sp,fp
     238:	dfc00117 	ldw	ra,4(sp)
     23c:	df000017 	ldw	fp,0(sp)
     240:	dec00204 	addi	sp,sp,8
     244:	f800283a 	ret

00000248 <sensorCollector>:
#define TASK1_PRIORITY      1
#define TASK2_PRIORITY      2

/* Prints "Hello World" and sleeps for three seconds */
void sensorCollector(void* pdata)
{
     248:	deffeb04 	addi	sp,sp,-84
     24c:	dfc01415 	stw	ra,80(sp)
     250:	df001315 	stw	fp,76(sp)
     254:	df001304 	addi	fp,sp,76
     258:	e13fff15 	stw	r4,-4(fp)
	unsigned int i = 0;
     25c:	e03ff615 	stw	zero,-40(fp)
			unsigned int uiGapStartEnc = 0;
     260:	e03ff515 	stw	zero,-44(fp)
			unsigned int uiSouthEastDis = 0;
     264:	e03ff415 	stw	zero,-48(fp)
			short AcX, AcY, AcZ, Tmp, GyX, GyY, GyZ, x, y, z;
			char cBuff[32];
			bool_t bGapStarted = false;
     268:	00800044 	movi	r2,1
     26c:	e0bfee15 	stw	r2,-72(fp)
			ParkingStateType_t cs = Ready;
     270:	e03fed15 	stw	zero,-76(fp)
			*pwm_enable = 0;
     274:	d0a73217 	ldw	r2,-25400(gp)
     278:	10000015 	stw	zero,0(r2)

	I2CWrite(MPU_SLAVE_ADDRESS, 0x6b, 0x0);
     27c:	01001a04 	movi	r4,104
     280:	01401ac4 	movi	r5,107
     284:	000d883a 	mov	r6,zero
     288:	00009880 	call	988 <I2CWrite>
	I2CRead(MPU_SLAVE_ADDRESS, 0x75, 1, cBuff);
     28c:	e1fff704 	addi	r7,fp,-36
     290:	01001a04 	movi	r4,104
     294:	01401d44 	movi	r5,117
     298:	01800044 	movi	r6,1
     29c:	00009ec0 	call	9ec <I2CRead>
	printf("WhoAmI = %x\n", (unsigned int)cBuff[0]);
     2a0:	e0bff703 	ldbu	r2,-36(fp)
     2a4:	11403fcc 	andi	r5,r2,255
     2a8:	2940201c 	xori	r5,r5,128
     2ac:	297fe004 	addi	r5,r5,-128
     2b0:	01000074 	movhi	r4,1
     2b4:	211e8704 	addi	r4,r4,31260
     2b8:	00022880 	call	2288 <printf>
	while (1)
	{
		// HC_SR04
		printf("new\n");
     2bc:	01000074 	movhi	r4,1
     2c0:	211e8b04 	addi	r4,r4,31276
     2c4:	00023a00 	call	23a0 <puts>
		while (*pHc_sr04 != 0xff);
     2c8:	d0a72117 	ldw	r2,-25468(gp)
     2cc:	10800017 	ldw	r2,0(r2)
     2d0:	10803fd8 	cmpnei	r2,r2,255
     2d4:	103ffc1e 	bne	r2,zero,2c8 <sensorCollector+0x80>

		//printf("2\n");
		*pHc_sr04 = 0xC7;
     2d8:	d0e72117 	ldw	r3,-25468(gp)
     2dc:	008031c4 	movi	r2,199
     2e0:	18800015 	stw	r2,0(r3)

		//printf("3\n");
		while (*pHc_sr04 != 0xff);
     2e4:	d0a72117 	ldw	r2,-25468(gp)
     2e8:	10800017 	ldw	r2,0(r2)
     2ec:	10803fd8 	cmpnei	r2,r2,255
     2f0:	103ffc1e 	bne	r2,zero,2e4 <sensorCollector+0x9c>
		//delay(10000000);

		for (i = 0; i < NUMBER_OF_ULTRA_SOUND_DEVICES; i++)
     2f4:	e03ff615 	stw	zero,-40(fp)
     2f8:	00000a06 	br	324 <sensorCollector+0xdc>
		{

			printf("%u = %u\n",i, MeasureDistance(i));
     2fc:	e13ff617 	ldw	r4,-40(fp)
     300:	00009080 	call	908 <MeasureDistance>
     304:	100d883a 	mov	r6,r2
     308:	01000074 	movhi	r4,1
     30c:	211e8c04 	addi	r4,r4,31280
     310:	e17ff617 	ldw	r5,-40(fp)
     314:	00022880 	call	2288 <printf>

		//printf("3\n");
		while (*pHc_sr04 != 0xff);
		//delay(10000000);

		for (i = 0; i < NUMBER_OF_ULTRA_SOUND_DEVICES; i++)
     318:	e0bff617 	ldw	r2,-40(fp)
     31c:	10800044 	addi	r2,r2,1
     320:	e0bff615 	stw	r2,-40(fp)
     324:	e0bff617 	ldw	r2,-40(fp)
     328:	10800230 	cmpltui	r2,r2,8
     32c:	103ff31e 	bne	r2,zero,2fc <sensorCollector+0xb4>
		{

			printf("%u = %u\n",i, MeasureDistance(i));
		}
		printf("\n\n");
     330:	01000074 	movhi	r4,1
     334:	211e8f04 	addi	r4,r4,31292
     338:	00023a00 	call	23a0 <puts>
		//delay(10000000);
		//printf("4\n");;



			AcX = AcY = AcZ = Tmp = GyX = GyY = GyZ = 0;
     33c:	e03ff08d 	sth	zero,-62(fp)
     340:	e0bff08b 	ldhu	r2,-62(fp)
     344:	e0bff10d 	sth	r2,-60(fp)
     348:	e0bff10b 	ldhu	r2,-60(fp)
     34c:	e0bff18d 	sth	r2,-58(fp)
     350:	e0bff18b 	ldhu	r2,-58(fp)
     354:	e0bff20d 	sth	r2,-56(fp)
     358:	e0bff20b 	ldhu	r2,-56(fp)
     35c:	e0bff28d 	sth	r2,-54(fp)
     360:	e0bff28b 	ldhu	r2,-54(fp)
     364:	e0bff30d 	sth	r2,-52(fp)
     368:	e0bff30b 	ldhu	r2,-52(fp)
     36c:	e0bff38d 	sth	r2,-50(fp)

			I2CRead(MPU_SLAVE_ADDRESS, 0x3B, 14, cBuff);
     370:	e1fff704 	addi	r7,fp,-36
     374:	01001a04 	movi	r4,104
     378:	01400ec4 	movi	r5,59
     37c:	01800384 	movi	r6,14
     380:	00009ec0 	call	9ec <I2CRead>

			AcX = (cBuff[0] << 8) | (cBuff[1] & 0xff);
     384:	e0bff703 	ldbu	r2,-36(fp)
     388:	10803fcc 	andi	r2,r2,255
     38c:	1080201c 	xori	r2,r2,128
     390:	10bfe004 	addi	r2,r2,-128
     394:	1004923a 	slli	r2,r2,8
     398:	1007883a 	mov	r3,r2
     39c:	e0bff743 	ldbu	r2,-35(fp)
     3a0:	10803fcc 	andi	r2,r2,255
     3a4:	1080201c 	xori	r2,r2,128
     3a8:	10bfe004 	addi	r2,r2,-128
     3ac:	10803fcc 	andi	r2,r2,255
     3b0:	1884b03a 	or	r2,r3,r2
     3b4:	e0bff38d 	sth	r2,-50(fp)
			AcY = (cBuff[2] << 8) | (cBuff[3] & 0xff);
     3b8:	e0bff783 	ldbu	r2,-34(fp)
     3bc:	10803fcc 	andi	r2,r2,255
     3c0:	1080201c 	xori	r2,r2,128
     3c4:	10bfe004 	addi	r2,r2,-128
     3c8:	1004923a 	slli	r2,r2,8
     3cc:	1007883a 	mov	r3,r2
     3d0:	e0bff7c3 	ldbu	r2,-33(fp)
     3d4:	10803fcc 	andi	r2,r2,255
     3d8:	1080201c 	xori	r2,r2,128
     3dc:	10bfe004 	addi	r2,r2,-128
     3e0:	10803fcc 	andi	r2,r2,255
     3e4:	1884b03a 	or	r2,r3,r2
     3e8:	e0bff30d 	sth	r2,-52(fp)
			AcZ = cBuff[4] << 8 | (cBuff[5] & 0xff);
     3ec:	e0bff803 	ldbu	r2,-32(fp)
     3f0:	10803fcc 	andi	r2,r2,255
     3f4:	1080201c 	xori	r2,r2,128
     3f8:	10bfe004 	addi	r2,r2,-128
     3fc:	1004923a 	slli	r2,r2,8
     400:	1007883a 	mov	r3,r2
     404:	e0bff843 	ldbu	r2,-31(fp)
     408:	10803fcc 	andi	r2,r2,255
     40c:	1080201c 	xori	r2,r2,128
     410:	10bfe004 	addi	r2,r2,-128
     414:	10803fcc 	andi	r2,r2,255
     418:	1884b03a 	or	r2,r3,r2
     41c:	e0bff28d 	sth	r2,-54(fp)
			//AcZ = cBuff[5];

			Tmp = (cBuff[6] << 8) | (cBuff[7] & 0xff);
     420:	e0bff883 	ldbu	r2,-30(fp)
     424:	10803fcc 	andi	r2,r2,255
     428:	1080201c 	xori	r2,r2,128
     42c:	10bfe004 	addi	r2,r2,-128
     430:	1004923a 	slli	r2,r2,8
     434:	1007883a 	mov	r3,r2
     438:	e0bff8c3 	ldbu	r2,-29(fp)
     43c:	10803fcc 	andi	r2,r2,255
     440:	1080201c 	xori	r2,r2,128
     444:	10bfe004 	addi	r2,r2,-128
     448:	10803fcc 	andi	r2,r2,255
     44c:	1884b03a 	or	r2,r3,r2
     450:	e0bff20d 	sth	r2,-56(fp)

			GyX = (cBuff[8] << 8) | (cBuff[9] & 0xff);
     454:	e0bff903 	ldbu	r2,-28(fp)
     458:	10803fcc 	andi	r2,r2,255
     45c:	1080201c 	xori	r2,r2,128
     460:	10bfe004 	addi	r2,r2,-128
     464:	1004923a 	slli	r2,r2,8
     468:	1007883a 	mov	r3,r2
     46c:	e0bff943 	ldbu	r2,-27(fp)
     470:	10803fcc 	andi	r2,r2,255
     474:	1080201c 	xori	r2,r2,128
     478:	10bfe004 	addi	r2,r2,-128
     47c:	10803fcc 	andi	r2,r2,255
     480:	1884b03a 	or	r2,r3,r2
     484:	e0bff18d 	sth	r2,-58(fp)
			GyY = (cBuff[10] << 8) | (cBuff[11] & 0xff);
     488:	e0bff983 	ldbu	r2,-26(fp)
     48c:	10803fcc 	andi	r2,r2,255
     490:	1080201c 	xori	r2,r2,128
     494:	10bfe004 	addi	r2,r2,-128
     498:	1004923a 	slli	r2,r2,8
     49c:	1007883a 	mov	r3,r2
     4a0:	e0bff9c3 	ldbu	r2,-25(fp)
     4a4:	10803fcc 	andi	r2,r2,255
     4a8:	1080201c 	xori	r2,r2,128
     4ac:	10bfe004 	addi	r2,r2,-128
     4b0:	10803fcc 	andi	r2,r2,255
     4b4:	1884b03a 	or	r2,r3,r2
     4b8:	e0bff10d 	sth	r2,-60(fp)
			GyZ = (cBuff[12] << 8) | (cBuff[13] & 0xff);
     4bc:	e0bffa03 	ldbu	r2,-24(fp)
     4c0:	10803fcc 	andi	r2,r2,255
     4c4:	1080201c 	xori	r2,r2,128
     4c8:	10bfe004 	addi	r2,r2,-128
     4cc:	1004923a 	slli	r2,r2,8
     4d0:	1007883a 	mov	r3,r2
     4d4:	e0bffa43 	ldbu	r2,-23(fp)
     4d8:	10803fcc 	andi	r2,r2,255
     4dc:	1080201c 	xori	r2,r2,128
     4e0:	10bfe004 	addi	r2,r2,-128
     4e4:	10803fcc 	andi	r2,r2,255
     4e8:	1884b03a 	or	r2,r3,r2
     4ec:	e0bff08d 	sth	r2,-62(fp)

			printf("AcX = %d\n", AcX);
     4f0:	e17ff38f 	ldh	r5,-50(fp)
     4f4:	01000074 	movhi	r4,1
     4f8:	211e9004 	addi	r4,r4,31296
     4fc:	00022880 	call	2288 <printf>
			printf("AcY = %d\n", AcY);
     500:	e17ff30f 	ldh	r5,-52(fp)
     504:	01000074 	movhi	r4,1
     508:	211e9304 	addi	r4,r4,31308
     50c:	00022880 	call	2288 <printf>
			printf("AcZ = %d\n", AcZ);
     510:	e17ff28f 	ldh	r5,-54(fp)
     514:	01000074 	movhi	r4,1
     518:	211e9604 	addi	r4,r4,31320
     51c:	00022880 	call	2288 <printf>
	//		printf("%u,%u\n", cBuff[4], (cBuff[5] & 0xff));

			printf("Tmp = %f\n", (float)Tmp/340 + 36.53);
     520:	e13ff20f 	ldh	r4,-56(fp)
     524:	000118c0 	call	118c <__floatsisf>
     528:	1009883a 	mov	r4,r2
     52c:	0150eab4 	movhi	r5,17322
     530:	0000fa00 	call	fa0 <__divsf3>
     534:	1009883a 	mov	r4,r2
     538:	00012b80 	call	12b8 <__extendsfdf2>
     53c:	100b883a 	mov	r5,r2
     540:	180d883a 	mov	r6,r3
     544:	2809883a 	mov	r4,r5
     548:	300b883a 	mov	r5,r6
     54c:	01828f74 	movhi	r6,2621
     550:	319c2904 	addi	r6,r6,28836
     554:	01d010b4 	movhi	r7,16450
     558:	39d0f5c4 	addi	r7,r7,17367
     55c:	000185c0 	call	185c <__adddf3>
     560:	1009883a 	mov	r4,r2
     564:	180b883a 	mov	r5,r3
     568:	2005883a 	mov	r2,r4
     56c:	2807883a 	mov	r3,r5
     570:	01000074 	movhi	r4,1
     574:	211e9904 	addi	r4,r4,31332
     578:	100b883a 	mov	r5,r2
     57c:	180d883a 	mov	r6,r3
     580:	00022880 	call	2288 <printf>

			printf("GyX = %d\n", GyX);
     584:	e17ff18f 	ldh	r5,-58(fp)
     588:	01000074 	movhi	r4,1
     58c:	211e9c04 	addi	r4,r4,31344
     590:	00022880 	call	2288 <printf>
			printf("GyY = %d\n", GyY);
     594:	e17ff10f 	ldh	r5,-60(fp)
     598:	01000074 	movhi	r4,1
     59c:	211e9f04 	addi	r4,r4,31356
     5a0:	00022880 	call	2288 <printf>
			printf("GyZ = %d\n", GyZ);
     5a4:	e17ff08f 	ldh	r5,-62(fp)
     5a8:	01000074 	movhi	r4,1
     5ac:	211ea204 	addi	r4,r4,31368
     5b0:	00022880 	call	2288 <printf>

			//delay(10000000);


	printf("Hello from task sensorCollector\n");
     5b4:	01000074 	movhi	r4,1
     5b8:	211ea504 	addi	r4,r4,31380
     5bc:	00023a00 	call	23a0 <puts>
	OSTimeDlyHMSM(0, 0, 3, 0);
     5c0:	0009883a 	mov	r4,zero
     5c4:	000b883a 	mov	r5,zero
     5c8:	018000c4 	movi	r6,3
     5cc:	000f883a 	mov	r7,zero
     5d0:	0013a740 	call	13a74 <OSTimeDlyHMSM>
  }
     5d4:	003f3906 	br	2bc <sensorCollector+0x74>

000005d8 <drivingTask>:
}
/* Prints "Hello World" and sleeps for three seconds */
void drivingTask(void* pdata)
{
     5d8:	defffc04 	addi	sp,sp,-16
     5dc:	dfc00315 	stw	ra,12(sp)
     5e0:	df000215 	stw	fp,8(sp)
     5e4:	df000204 	addi	fp,sp,8
     5e8:	e13fff15 	stw	r4,-4(fp)
	unsigned int i = 10;
     5ec:	00800284 	movi	r2,10
     5f0:	e0bffe15 	stw	r2,-8(fp)

	OSTimeDlyHMSM(0, 0, 1, 0);
     5f4:	0009883a 	mov	r4,zero
     5f8:	000b883a 	mov	r5,zero
     5fc:	01800044 	movi	r6,1
     600:	000f883a 	mov	r7,zero
     604:	0013a740 	call	13a74 <OSTimeDlyHMSM>

	while (1)
	{
		if(i>=100)
     608:	e0bffe17 	ldw	r2,-8(fp)
     60c:	10801930 	cmpltui	r2,r2,100
     610:	1000021e 	bne	r2,zero,61c <drivingTask+0x44>
			i = 0;
     614:	e03ffe15 	stw	zero,-8(fp)
     618:	00000306 	br	628 <drivingTask+0x50>
		else
			i+=10;
     61c:	e0bffe17 	ldw	r2,-8(fp)
     620:	10800284 	addi	r2,r2,10
     624:	e0bffe15 	stw	r2,-8(fp)

		OSTimeDlyHMSM(0, 0, 1, 0);
     628:	0009883a 	mov	r4,zero
     62c:	000b883a 	mov	r5,zero
     630:	01800044 	movi	r6,1
     634:	000f883a 	mov	r7,zero
     638:	0013a740 	call	13a74 <OSTimeDlyHMSM>

		printf("PWM: %d", i);
     63c:	01000074 	movhi	r4,1
     640:	211ead04 	addi	r4,r4,31412
     644:	e17ffe17 	ldw	r5,-8(fp)
     648:	00022880 	call	2288 <printf>

		set_duty_cycle(pFrontRightDutySet, i);
     64c:	d1272217 	ldw	r4,-25464(gp)
     650:	e17ffe17 	ldw	r5,-8(fp)
     654:	000089c0 	call	89c <set_duty_cycle>
		set_duty_cycle(pRearRightDutySet, i);
     658:	d1273117 	ldw	r4,-25404(gp)
     65c:	e17ffe17 	ldw	r5,-8(fp)
     660:	000089c0 	call	89c <set_duty_cycle>
		set_duty_cycle(pRearLeftDutySet, i);
     664:	d1273017 	ldw	r4,-25408(gp)
     668:	e17ffe17 	ldw	r5,-8(fp)
     66c:	000089c0 	call	89c <set_duty_cycle>
		set_duty_cycle(pFrontLeftDutySet, i);
     670:	d1272b17 	ldw	r4,-25428(gp)
     674:	e17ffe17 	ldw	r5,-8(fp)
     678:	000089c0 	call	89c <set_duty_cycle>

		*pwm_enable = (ALL_WHEEL_FWD_MASK | ENABLE_ENC_MASK );
     67c:	d0e73217 	ldw	r3,-25400(gp)
     680:	00800074 	movhi	r2,1
     684:	10801544 	addi	r2,r2,85
     688:	18800015 	stw	r2,0(r3)

	}
     68c:	003fde06 	br	608 <drivingTask+0x30>

00000690 <main>:
	}
}*/

/* The main function creates two task and starts multi-tasking */
int main(void)
{
     690:	defff904 	addi	sp,sp,-28
     694:	dfc00615 	stw	ra,24(sp)
     698:	df000515 	stw	fp,20(sp)
     69c:	df000504 	addi	fp,sp,20
  
  init();
     6a0:	00007400 	call	740 <init>

  OSTaskCreateExt(sensorCollector,
     6a4:	018000b4 	movhi	r6,2
     6a8:	31be0704 	addi	r6,r6,-2020
     6ac:	00800044 	movi	r2,1
     6b0:	d8800015 	stw	r2,0(sp)
     6b4:	008000b4 	movhi	r2,2
     6b8:	10b60804 	addi	r2,r2,-10208
     6bc:	d8800115 	stw	r2,4(sp)
     6c0:	00820004 	movi	r2,2048
     6c4:	d8800215 	stw	r2,8(sp)
     6c8:	d8000315 	stw	zero,12(sp)
     6cc:	d8000415 	stw	zero,16(sp)
     6d0:	01000034 	movhi	r4,0
     6d4:	21009204 	addi	r4,r4,584
     6d8:	000b883a 	mov	r5,zero
     6dc:	01c00044 	movi	r7,1
     6e0:	00126300 	call	12630 <OSTaskCreateExt>
                      sensorCollector_stk,
                      TASK_STACKSIZE,
                      NULL,
                      0);
               
  OSTaskCreateExt(drivingTask,
     6e4:	018000b4 	movhi	r6,2
     6e8:	31b60704 	addi	r6,r6,-10212
     6ec:	00800084 	movi	r2,2
     6f0:	d8800015 	stw	r2,0(sp)
     6f4:	008000b4 	movhi	r2,2
     6f8:	10ae0804 	addi	r2,r2,-18400
     6fc:	d8800115 	stw	r2,4(sp)
     700:	00820004 	movi	r2,2048
     704:	d8800215 	stw	r2,8(sp)
     708:	d8000315 	stw	zero,12(sp)
     70c:	d8000415 	stw	zero,16(sp)
     710:	01000034 	movhi	r4,0
     714:	21017604 	addi	r4,r4,1496
     718:	000b883a 	mov	r5,zero
     71c:	01c00084 	movi	r7,2
     720:	00126300 	call	12630 <OSTaskCreateExt>
                  drivingTask_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSStart();
     724:	000c85c0 	call	c85c <OSStart>
  return 0;
     728:	0005883a 	mov	r2,zero
}
     72c:	e037883a 	mov	sp,fp
     730:	dfc00117 	ldw	ra,4(sp)
     734:	df000017 	ldw	fp,0(sp)
     738:	dec00204 	addi	sp,sp,8
     73c:	f800283a 	ret

00000740 <init>:

#include "head.h"

void init(void)
{
     740:	deffff04 	addi	sp,sp,-4
     744:	df000015 	stw	fp,0(sp)
     748:	d839883a 	mov	fp,sp
	//c = 33;
	//versionName[100] = "Nano Board Version 1.0\n";
	pwm_enable = (volatile unsigned int*)(0x80000000 | PWM_ENABLE);
     74c:	00a10034 	movhi	r2,33792
     750:	10841004 	addi	r2,r2,4160
     754:	d0a73215 	stw	r2,-25400(gp)

	pFrontRightDutySet = (volatile unsigned int*)(0x80000000 | FRONT_RIGHT_DUTY_SET);
     758:	00a10034 	movhi	r2,33792
     75c:	10841104 	addi	r2,r2,4164
     760:	d0a72215 	stw	r2,-25464(gp)
	pRearRightDutySet = (volatile unsigned int*)(0x80000000 | REAR_RIGHT_DUTY_SET);
     764:	00a10034 	movhi	r2,33792
     768:	10841204 	addi	r2,r2,4168
     76c:	d0a73115 	stw	r2,-25404(gp)
	pRearLeftDutySet = (volatile unsigned int*)(0x80000000 | REAR_LEFT_DUTY_SET);
     770:	00a10034 	movhi	r2,33792
     774:	10841304 	addi	r2,r2,4172
     778:	d0a73015 	stw	r2,-25408(gp)
	pFrontLeftDutySet = (volatile unsigned int*)(0x80000000 | FRONT_LEFT_DUTY_SET);
     77c:	00a10034 	movhi	r2,33792
     780:	10841404 	addi	r2,r2,4176
     784:	d0a72b15 	stw	r2,-25428(gp)

	pFrontRightEncSet = (volatile unsigned int*)(0x80000000 |FRONT_RIGHT_ENC_SET);
     788:	00a10034 	movhi	r2,33792
     78c:	10841504 	addi	r2,r2,4180
     790:	d0a72e15 	stw	r2,-25416(gp)
	pRearRightEncSet = (volatile unsigned int*)(0x80000000 | REAR_RIGHT_ENC_SET);
     794:	00a10034 	movhi	r2,33792
     798:	10841604 	addi	r2,r2,4184
     79c:	d0a72315 	stw	r2,-25460(gp)
	pRearLeftEncSet = (volatile unsigned int*)(0x80000000 | REAR_LEFT_ENC_SET);
     7a0:	00a10034 	movhi	r2,33792
     7a4:	10841704 	addi	r2,r2,4188
     7a8:	d0a72d15 	stw	r2,-25420(gp)
	pFrontLeftEncSet = (volatile unsigned int*)(0x80000000 | FRONT_LEFT_ENC_SET);
     7ac:	00a10034 	movhi	r2,33792
     7b0:	10841804 	addi	r2,r2,4192
     7b4:	d0a72715 	stw	r2,-25444(gp)

	pFrontRightEncRead = (volatile unsigned int*)(0x80000000 |FRONT_RIGHT_ENC_READ);
     7b8:	00a10034 	movhi	r2,33792
     7bc:	10841904 	addi	r2,r2,4196
     7c0:	d0a72815 	stw	r2,-25440(gp)
	pRearRightEncRead = (volatile unsigned int*)(0x80000000 |REAR_RIGHT_ENC_READ);
     7c4:	00a10034 	movhi	r2,33792
     7c8:	10841a04 	addi	r2,r2,4200
     7cc:	d0a71f15 	stw	r2,-25476(gp)
	pRearLeftEncRead = (volatile unsigned int*)(0x80000000 |REAR_LEFT_ENC_READ);
     7d0:	00a10034 	movhi	r2,33792
     7d4:	10841b04 	addi	r2,r2,4204
     7d8:	d0a72f15 	stw	r2,-25412(gp)
	pFrontLeftEncRead = (volatile unsigned int*)(0x80000000 | FRONT_LEFT_ENC_READ);
     7dc:	00a10034 	movhi	r2,33792
     7e0:	10841c04 	addi	r2,r2,4208
     7e4:	d0a72015 	stw	r2,-25472(gp)

	uPwmPeriod = NIOS2_CPU_FREQ/PWM_RESOLUTION;
     7e8:	0089c404 	movi	r2,10000
     7ec:	d0a72a15 	stw	r2,-25432(gp)

	pHc_sr04 = (volatile unsigned int*)(HC_SR04_0_BASE | 0x80000000);
     7f0:	00a10034 	movhi	r2,33792
     7f4:	10840004 	addi	r2,r2,4096
     7f8:	d0a72115 	stw	r2,-25468(gp)
	pUltraSoundArray = (volatile unsigned int*)(ULTRA_SOUND_0_READING_ADDR | 0x80000000);
     7fc:	00a10034 	movhi	r2,33792
     800:	10840104 	addi	r2,r2,4100
     804:	d0a72615 	stw	r2,-25448(gp)

    pI2C = (volatile unsigned char*)(I2C_SLAVE_ADDR);
     808:	00a10034 	movhi	r2,33792
     80c:	10842004 	addi	r2,r2,4224
     810:	d0a72c15 	stw	r2,-25424(gp)
    pI2CReg = (volatile unsigned char*)(I2C_REG_ADDR);
     814:	00a10034 	movhi	r2,33792
     818:	10842044 	addi	r2,r2,4225
     81c:	d0a73415 	stw	r2,-25392(gp)
    pI2CRegWriteData = (volatile unsigned char*)(I2C_REG_WRITE_DATA);
     820:	00a10034 	movhi	r2,33792
     824:	10842084 	addi	r2,r2,4226
     828:	d0a72415 	stw	r2,-25456(gp)
    pI2CDataLen = (volatile unsigned char*)(I2C_DATALENGTH_ADDR);
     82c:	00a10034 	movhi	r2,33792
     830:	108420c4 	addi	r2,r2,4227
     834:	d0a72915 	stw	r2,-25436(gp)
    pI2CCmd = (volatile unsigned char*)(I2C_CMD_ADDR);
     838:	00a10034 	movhi	r2,33792
     83c:	10842104 	addi	r2,r2,4228
     840:	d0a73315 	stw	r2,-25396(gp)
    pI2CDataAvailable = (volatile unsigned char*)(I2C_DATA_AVAILABLE_ADDR);
     844:	00a10034 	movhi	r2,33792
     848:	10842204 	addi	r2,r2,4232
     84c:	d0a71e15 	stw	r2,-25480(gp)
}
     850:	e037883a 	mov	sp,fp
     854:	df000017 	ldw	fp,0(sp)
     858:	dec00104 	addi	sp,sp,4
     85c:	f800283a 	ret

00000860 <delay>:


void delay (volatile unsigned int del)
{
     860:	defffe04 	addi	sp,sp,-8
     864:	df000115 	stw	fp,4(sp)
     868:	df000104 	addi	fp,sp,4
     86c:	e13fff15 	stw	r4,-4(fp)
	while (del != 0)
     870:	00000306 	br	880 <delay+0x20>
	{
		del --;
     874:	e0bfff17 	ldw	r2,-4(fp)
     878:	10bfffc4 	addi	r2,r2,-1
     87c:	e0bfff15 	stw	r2,-4(fp)
}


void delay (volatile unsigned int del)
{
	while (del != 0)
     880:	e0bfff17 	ldw	r2,-4(fp)
     884:	1004c03a 	cmpne	r2,r2,zero
     888:	103ffa1e 	bne	r2,zero,874 <delay+0x14>
	{
		del --;
	}
}
     88c:	e037883a 	mov	sp,fp
     890:	df000017 	ldw	fp,0(sp)
     894:	dec00104 	addi	sp,sp,4
     898:	f800283a 	ret

0000089c <set_duty_cycle>:

unsigned int set_duty_cycle(volatile unsigned int *pTargetedWheel, unsigned int duty)
{
     89c:	defffb04 	addi	sp,sp,-20
     8a0:	dfc00415 	stw	ra,16(sp)
     8a4:	df000315 	stw	fp,12(sp)
     8a8:	df000304 	addi	fp,sp,12
     8ac:	e13ffd15 	stw	r4,-12(fp)
     8b0:	e17ffe15 	stw	r5,-8(fp)
	if (duty > 100 || duty < 0) return(0);
     8b4:	e0bffe17 	ldw	r2,-8(fp)
     8b8:	10801970 	cmpltui	r2,r2,101
     8bc:	1000031e 	bne	r2,zero,8cc <set_duty_cycle+0x30>
     8c0:	0005883a 	mov	r2,zero
     8c4:	e0bfff15 	stw	r2,-4(fp)
     8c8:	00000906 	br	8f0 <set_duty_cycle+0x54>

	*pTargetedWheel = (uPwmPeriod/100) * duty; // duty is a positive number. Divide by 100 to consider percentage
     8cc:	d1272a17 	ldw	r4,-25432(gp)
     8d0:	01401904 	movi	r5,100
     8d4:	0001a440 	call	1a44 <__udivsi3>
     8d8:	1007883a 	mov	r3,r2
     8dc:	e0bffe17 	ldw	r2,-8(fp)
     8e0:	1887383a 	mul	r3,r3,r2
     8e4:	e0bffd17 	ldw	r2,-12(fp)
     8e8:	10c00015 	stw	r3,0(r2)
}
     8ec:	00000106 	br	8f4 <set_duty_cycle+0x58>
     8f0:	e0bfff17 	ldw	r2,-4(fp)
     8f4:	e037883a 	mov	sp,fp
     8f8:	dfc00117 	ldw	ra,4(sp)
     8fc:	df000017 	ldw	fp,0(sp)
     900:	dec00204 	addi	sp,sp,8
     904:	f800283a 	ret

00000908 <MeasureDistance>:

unsigned int MeasureDistance(unsigned int ch)
{
     908:	defffc04 	addi	sp,sp,-16
     90c:	dfc00315 	stw	ra,12(sp)
     910:	df000215 	stw	fp,8(sp)
     914:	df000204 	addi	fp,sp,8
     918:	e13fff15 	stw	r4,-4(fp)
	float x = (float)pUltraSoundArray[ch] * 330000/ALT_CPU_FREQ;
     91c:	e0bfff17 	ldw	r2,-4(fp)
     920:	1085883a 	add	r2,r2,r2
     924:	1085883a 	add	r2,r2,r2
     928:	1007883a 	mov	r3,r2
     92c:	d0a72617 	ldw	r2,-25448(gp)
     930:	1885883a 	add	r2,r3,r2
     934:	11000017 	ldw	r4,0(r2)
     938:	000130c0 	call	130c <__floatunsisf>
     93c:	1009883a 	mov	r4,r2
     940:	01522874 	movhi	r5,18593
     944:	29488004 	addi	r5,r5,8704
     948:	0000dc00 	call	dc0 <__mulsf3>
     94c:	1009883a 	mov	r4,r2
     950:	01532ff4 	movhi	r5,19647
     954:	296f0804 	addi	r5,r5,-17376
     958:	0000fa00 	call	fa0 <__divsf3>
     95c:	e0bffe15 	stw	r2,-8(fp)
	return( (unsigned int)(x/2) );
     960:	e13ffe17 	ldw	r4,-8(fp)
     964:	01500034 	movhi	r5,16384
     968:	0000fa00 	call	fa0 <__divsf3>
     96c:	1009883a 	mov	r4,r2
     970:	0000a980 	call	a98 <__fixunssfsi>
}
     974:	e037883a 	mov	sp,fp
     978:	dfc00117 	ldw	ra,4(sp)
     97c:	df000017 	ldw	fp,0(sp)
     980:	dec00204 	addi	sp,sp,8
     984:	f800283a 	ret

00000988 <I2CWrite>:

void I2CWrite(unsigned char I2CAddr, unsigned char RegAddr, unsigned char data)
{
     988:	defffc04 	addi	sp,sp,-16
     98c:	df000315 	stw	fp,12(sp)
     990:	df000304 	addi	fp,sp,12
     994:	e13ffd05 	stb	r4,-12(fp)
     998:	e17ffe05 	stb	r5,-8(fp)
     99c:	e1bfff05 	stb	r6,-4(fp)
	*pI2C = I2CAddr; // FIrst write which I2C module is being addressed. MPU or HMC
     9a0:	d0e72c17 	ldw	r3,-25424(gp)
     9a4:	e0bffd03 	ldbu	r2,-12(fp)
     9a8:	18800005 	stb	r2,0(r3)
	*pI2CReg = RegAddr; // write the address of register to which you want to write
     9ac:	d0e73417 	ldw	r3,-25392(gp)
     9b0:	e0bffe03 	ldbu	r2,-8(fp)
     9b4:	18800005 	stb	r2,0(r3)
	*pI2CRegWriteData = data; // write the data
     9b8:	d0e72417 	ldw	r3,-25456(gp)
     9bc:	e0bfff03 	ldbu	r2,-4(fp)
     9c0:	18800005 	stb	r2,0(r3)
	*pI2CDataLen = 1; // currently only 1 is supported for write access
     9c4:	d0e72917 	ldw	r3,-25436(gp)
     9c8:	00800044 	movi	r2,1
     9cc:	18800005 	stb	r2,0(r3)
	*pI2CCmd = (I2C_WRITE_CMD_MASK | I2C_START_CMD_MASK); // give write+start command
     9d0:	d0e73317 	ldw	r3,-25396(gp)
     9d4:	00800084 	movi	r2,2
     9d8:	18800005 	stb	r2,0(r3)
}
     9dc:	e037883a 	mov	sp,fp
     9e0:	df000017 	ldw	fp,0(sp)
     9e4:	dec00104 	addi	sp,sp,4
     9e8:	f800283a 	ret

000009ec <I2CRead>:

void I2CRead(unsigned char I2CAddr, unsigned char RegAddr, unsigned int len, char* cBuff)
{
     9ec:	defffa04 	addi	sp,sp,-24
     9f0:	df000515 	stw	fp,20(sp)
     9f4:	df000504 	addi	fp,sp,20
     9f8:	e1bffe15 	stw	r6,-8(fp)
     9fc:	e1ffff15 	stw	r7,-4(fp)
     a00:	e13ffc05 	stb	r4,-16(fp)
     a04:	e17ffd05 	stb	r5,-12(fp)
	unsigned int i = 0;
     a08:	e03ffb15 	stw	zero,-20(fp)

	*pI2C = I2CAddr; //FIrst write which I2C module is being addressed. MPU or HMC
     a0c:	d0e72c17 	ldw	r3,-25424(gp)
     a10:	e0bffc03 	ldbu	r2,-16(fp)
     a14:	18800005 	stb	r2,0(r3)
	*pI2CReg = RegAddr; // give the address of register from which you want to read in burst fashion
     a18:	d0e73417 	ldw	r3,-25392(gp)
     a1c:	e0bffd03 	ldbu	r2,-12(fp)
     a20:	18800005 	stb	r2,0(r3)
	*pI2CDataLen = len; // number of bytes you want to read
     a24:	d0e72917 	ldw	r3,-25436(gp)
     a28:	e0bffe17 	ldw	r2,-8(fp)
     a2c:	18800005 	stb	r2,0(r3)
	*pI2CCmd = (I2C_READ_CMD_MASK | I2C_START_CMD_MASK); // give read+start command
     a30:	d0e73317 	ldw	r3,-25396(gp)
     a34:	008000c4 	movi	r2,3
     a38:	18800005 	stb	r2,0(r3)

	/*The CPU is free to do its work until the following flag is set. The HW module will do a burst access and read the number of requested bytes
	 * from the slow I2C slave and keep it onchip in a FIFO. Once the flag is set, the data can be read from the FIFO rapidly*/
	while((*pI2CDataAvailable != 0x1));
     a3c:	d0a71e17 	ldw	r2,-25480(gp)
     a40:	10800003 	ldbu	r2,0(r2)
     a44:	10803fcc 	andi	r2,r2,255
     a48:	10800058 	cmpnei	r2,r2,1
     a4c:	103ffb1e 	bne	r2,zero,a3c <I2CRead+0x50>

	for (i = 0; i < len; i++)
     a50:	e03ffb15 	stw	zero,-20(fp)
     a54:	00000906 	br	a7c <I2CRead+0x90>
	{
		cBuff[i] = *pI2C;
     a58:	e0fffb17 	ldw	r3,-20(fp)
     a5c:	e0bfff17 	ldw	r2,-4(fp)
     a60:	1887883a 	add	r3,r3,r2
     a64:	d0a72c17 	ldw	r2,-25424(gp)
     a68:	10800003 	ldbu	r2,0(r2)
     a6c:	18800005 	stb	r2,0(r3)

	/*The CPU is free to do its work until the following flag is set. The HW module will do a burst access and read the number of requested bytes
	 * from the slow I2C slave and keep it onchip in a FIFO. Once the flag is set, the data can be read from the FIFO rapidly*/
	while((*pI2CDataAvailable != 0x1));

	for (i = 0; i < len; i++)
     a70:	e0bffb17 	ldw	r2,-20(fp)
     a74:	10800044 	addi	r2,r2,1
     a78:	e0bffb15 	stw	r2,-20(fp)
     a7c:	e0fffb17 	ldw	r3,-20(fp)
     a80:	e0bffe17 	ldw	r2,-8(fp)
     a84:	18bff436 	bltu	r3,r2,a58 <I2CRead+0x6c>
	{
		cBuff[i] = *pI2C;
	}

	return;
}
     a88:	e037883a 	mov	sp,fp
     a8c:	df000017 	ldw	fp,0(sp)
     a90:	dec00104 	addi	sp,sp,4
     a94:	f800283a 	ret

00000a98 <__fixunssfsi>:
     a98:	defffd04 	addi	sp,sp,-12
     a9c:	dc000015 	stw	r16,0(sp)
     aa0:	0413c034 	movhi	r16,20224
     aa4:	800b883a 	mov	r5,r16
     aa8:	dc400115 	stw	r17,4(sp)
     aac:	dfc00215 	stw	ra,8(sp)
     ab0:	2023883a 	mov	r17,r4
     ab4:	00011140 	call	1114 <__gesf2>
     ab8:	800b883a 	mov	r5,r16
     abc:	8809883a 	mov	r4,r17
     ac0:	10000a16 	blt	r2,zero,aec <__fixunssfsi+0x54>
     ac4:	0000cec0 	call	cec <__subsf3>
     ac8:	1009883a 	mov	r4,r2
     acc:	00012240 	call	1224 <__fixsfsi>
     ad0:	00e00034 	movhi	r3,32768
     ad4:	10c5883a 	add	r2,r2,r3
     ad8:	dfc00217 	ldw	ra,8(sp)
     adc:	dc400117 	ldw	r17,4(sp)
     ae0:	dc000017 	ldw	r16,0(sp)
     ae4:	dec00304 	addi	sp,sp,12
     ae8:	f800283a 	ret
     aec:	8809883a 	mov	r4,r17
     af0:	00012240 	call	1224 <__fixsfsi>
     af4:	dfc00217 	ldw	ra,8(sp)
     af8:	dc400117 	ldw	r17,4(sp)
     afc:	dc000017 	ldw	r16,0(sp)
     b00:	dec00304 	addi	sp,sp,12
     b04:	f800283a 	ret

00000b08 <_fpadd_parts>:
     b08:	21c00017 	ldw	r7,0(r4)
     b0c:	02000044 	movi	r8,1
     b10:	41c0332e 	bgeu	r8,r7,be0 <_fpadd_parts+0xd8>
     b14:	28800017 	ldw	r2,0(r5)
     b18:	4080462e 	bgeu	r8,r2,c34 <_fpadd_parts+0x12c>
     b1c:	00c00104 	movi	r3,4
     b20:	38c06b26 	beq	r7,r3,cd0 <_fpadd_parts+0x1c8>
     b24:	10c04326 	beq	r2,r3,c34 <_fpadd_parts+0x12c>
     b28:	00c00084 	movi	r3,2
     b2c:	10c02e26 	beq	r2,r3,be8 <_fpadd_parts+0xe0>
     b30:	38c04026 	beq	r7,r3,c34 <_fpadd_parts+0x12c>
     b34:	22800217 	ldw	r10,8(r4)
     b38:	28c00217 	ldw	r3,8(r5)
     b3c:	23000317 	ldw	r12,12(r4)
     b40:	2a400317 	ldw	r9,12(r5)
     b44:	50cfc83a 	sub	r7,r10,r3
     b48:	3817883a 	mov	r11,r7
     b4c:	38004f16 	blt	r7,zero,c8c <_fpadd_parts+0x184>
     b50:	008007c4 	movi	r2,31
     b54:	11c03316 	blt	r2,r7,c24 <_fpadd_parts+0x11c>
     b58:	02c0540e 	bge	zero,r11,cac <_fpadd_parts+0x1a4>
     b5c:	41c4983a 	sll	r2,r8,r7
     b60:	49c6d83a 	srl	r3,r9,r7
     b64:	10bfffc4 	addi	r2,r2,-1
     b68:	4884703a 	and	r2,r9,r2
     b6c:	1004c03a 	cmpne	r2,r2,zero
     b70:	1892b03a 	or	r9,r3,r2
     b74:	20c00117 	ldw	r3,4(r4)
     b78:	28800117 	ldw	r2,4(r5)
     b7c:	18803c26 	beq	r3,r2,c70 <_fpadd_parts+0x168>
     b80:	18002f26 	beq	r3,zero,c40 <_fpadd_parts+0x138>
     b84:	4b05c83a 	sub	r2,r9,r12
     b88:	10004216 	blt	r2,zero,c94 <_fpadd_parts+0x18c>
     b8c:	32800215 	stw	r10,8(r6)
     b90:	30800315 	stw	r2,12(r6)
     b94:	30000115 	stw	zero,4(r6)
     b98:	31000317 	ldw	r4,12(r6)
     b9c:	01d00034 	movhi	r7,16384
     ba0:	39ffff84 	addi	r7,r7,-2
     ba4:	20bfffc4 	addi	r2,r4,-1
     ba8:	2007883a 	mov	r3,r4
     bac:	38800836 	bltu	r7,r2,bd0 <_fpadd_parts+0xc8>
     bb0:	31400217 	ldw	r5,8(r6)
     bb4:	18c9883a 	add	r4,r3,r3
     bb8:	20bfffc4 	addi	r2,r4,-1
     bbc:	297fffc4 	addi	r5,r5,-1
     bc0:	2007883a 	mov	r3,r4
     bc4:	38bffb2e 	bgeu	r7,r2,bb4 <_fpadd_parts+0xac>
     bc8:	31400215 	stw	r5,8(r6)
     bcc:	31000315 	stw	r4,12(r6)
     bd0:	008000c4 	movi	r2,3
     bd4:	30800015 	stw	r2,0(r6)
     bd8:	20001b16 	blt	r4,zero,c48 <_fpadd_parts+0x140>
     bdc:	3009883a 	mov	r4,r6
     be0:	2005883a 	mov	r2,r4
     be4:	f800283a 	ret
     be8:	38fffd1e 	bne	r7,r3,be0 <_fpadd_parts+0xd8>
     bec:	31c00015 	stw	r7,0(r6)
     bf0:	20800117 	ldw	r2,4(r4)
     bf4:	30800115 	stw	r2,4(r6)
     bf8:	20c00217 	ldw	r3,8(r4)
     bfc:	30c00215 	stw	r3,8(r6)
     c00:	20800317 	ldw	r2,12(r4)
     c04:	30800315 	stw	r2,12(r6)
     c08:	20c00117 	ldw	r3,4(r4)
     c0c:	28800117 	ldw	r2,4(r5)
     c10:	3009883a 	mov	r4,r6
     c14:	1886703a 	and	r3,r3,r2
     c18:	2005883a 	mov	r2,r4
     c1c:	30c00115 	stw	r3,4(r6)
     c20:	f800283a 	ret
     c24:	1a801716 	blt	r3,r10,c84 <_fpadd_parts+0x17c>
     c28:	1815883a 	mov	r10,r3
     c2c:	0019883a 	mov	r12,zero
     c30:	003fd006 	br	b74 <_fpadd_parts+0x6c>
     c34:	2809883a 	mov	r4,r5
     c38:	2005883a 	mov	r2,r4
     c3c:	f800283a 	ret
     c40:	6245c83a 	sub	r2,r12,r9
     c44:	003fd006 	br	b88 <_fpadd_parts+0x80>
     c48:	30800217 	ldw	r2,8(r6)
     c4c:	2006d07a 	srli	r3,r4,1
     c50:	2100004c 	andi	r4,r4,1
     c54:	10800044 	addi	r2,r2,1
     c58:	1906b03a 	or	r3,r3,r4
     c5c:	3009883a 	mov	r4,r6
     c60:	30800215 	stw	r2,8(r6)
     c64:	2005883a 	mov	r2,r4
     c68:	30c00315 	stw	r3,12(r6)
     c6c:	f800283a 	ret
     c70:	4b09883a 	add	r4,r9,r12
     c74:	30c00115 	stw	r3,4(r6)
     c78:	32800215 	stw	r10,8(r6)
     c7c:	31000315 	stw	r4,12(r6)
     c80:	003fd306 	br	bd0 <_fpadd_parts+0xc8>
     c84:	0013883a 	mov	r9,zero
     c88:	003fba06 	br	b74 <_fpadd_parts+0x6c>
     c8c:	01cfc83a 	sub	r7,zero,r7
     c90:	003faf06 	br	b50 <_fpadd_parts+0x48>
     c94:	0089c83a 	sub	r4,zero,r2
     c98:	00800044 	movi	r2,1
     c9c:	30800115 	stw	r2,4(r6)
     ca0:	32800215 	stw	r10,8(r6)
     ca4:	31000315 	stw	r4,12(r6)
     ca8:	003fbb06 	br	b98 <_fpadd_parts+0x90>
     cac:	583fb126 	beq	r11,zero,b74 <_fpadd_parts+0x6c>
     cb0:	41c4983a 	sll	r2,r8,r7
     cb4:	61c6d83a 	srl	r3,r12,r7
     cb8:	51d5883a 	add	r10,r10,r7
     cbc:	10bfffc4 	addi	r2,r2,-1
     cc0:	6084703a 	and	r2,r12,r2
     cc4:	1004c03a 	cmpne	r2,r2,zero
     cc8:	1898b03a 	or	r12,r3,r2
     ccc:	003fa906 	br	b74 <_fpadd_parts+0x6c>
     cd0:	11ffc31e 	bne	r2,r7,be0 <_fpadd_parts+0xd8>
     cd4:	28c00117 	ldw	r3,4(r5)
     cd8:	20800117 	ldw	r2,4(r4)
     cdc:	10ffc026 	beq	r2,r3,be0 <_fpadd_parts+0xd8>
     ce0:	01000074 	movhi	r4,1
     ce4:	211eaf04 	addi	r4,r4,31420
     ce8:	003fbd06 	br	be0 <_fpadd_parts+0xd8>

00000cec <__subsf3>:
     cec:	deffef04 	addi	sp,sp,-68
     cf0:	dcc00f15 	stw	r19,60(sp)
     cf4:	dcc00204 	addi	r19,sp,8
     cf8:	dc400e15 	stw	r17,56(sp)
     cfc:	d9000015 	stw	r4,0(sp)
     d00:	d9400115 	stw	r5,4(sp)
     d04:	d809883a 	mov	r4,sp
     d08:	980b883a 	mov	r5,r19
     d0c:	dc400604 	addi	r17,sp,24
     d10:	dfc01015 	stw	ra,64(sp)
     d14:	0001ccc0 	call	1ccc <__unpack_f>
     d18:	d9000104 	addi	r4,sp,4
     d1c:	880b883a 	mov	r5,r17
     d20:	0001ccc0 	call	1ccc <__unpack_f>
     d24:	d8800717 	ldw	r2,28(sp)
     d28:	9809883a 	mov	r4,r19
     d2c:	880b883a 	mov	r5,r17
     d30:	d9800a04 	addi	r6,sp,40
     d34:	1080005c 	xori	r2,r2,1
     d38:	d8800715 	stw	r2,28(sp)
     d3c:	0000b080 	call	b08 <_fpadd_parts>
     d40:	1009883a 	mov	r4,r2
     d44:	0001b6c0 	call	1b6c <__pack_f>
     d48:	dfc01017 	ldw	ra,64(sp)
     d4c:	dcc00f17 	ldw	r19,60(sp)
     d50:	dc400e17 	ldw	r17,56(sp)
     d54:	dec01104 	addi	sp,sp,68
     d58:	f800283a 	ret

00000d5c <__addsf3>:
     d5c:	deffef04 	addi	sp,sp,-68
     d60:	dcc00f15 	stw	r19,60(sp)
     d64:	dcc00204 	addi	r19,sp,8
     d68:	dc400e15 	stw	r17,56(sp)
     d6c:	d9000015 	stw	r4,0(sp)
     d70:	d9400115 	stw	r5,4(sp)
     d74:	d809883a 	mov	r4,sp
     d78:	980b883a 	mov	r5,r19
     d7c:	dc400604 	addi	r17,sp,24
     d80:	dfc01015 	stw	ra,64(sp)
     d84:	0001ccc0 	call	1ccc <__unpack_f>
     d88:	d9000104 	addi	r4,sp,4
     d8c:	880b883a 	mov	r5,r17
     d90:	0001ccc0 	call	1ccc <__unpack_f>
     d94:	d9800a04 	addi	r6,sp,40
     d98:	9809883a 	mov	r4,r19
     d9c:	880b883a 	mov	r5,r17
     da0:	0000b080 	call	b08 <_fpadd_parts>
     da4:	1009883a 	mov	r4,r2
     da8:	0001b6c0 	call	1b6c <__pack_f>
     dac:	dfc01017 	ldw	ra,64(sp)
     db0:	dcc00f17 	ldw	r19,60(sp)
     db4:	dc400e17 	ldw	r17,56(sp)
     db8:	dec01104 	addi	sp,sp,68
     dbc:	f800283a 	ret

00000dc0 <__mulsf3>:
     dc0:	deffef04 	addi	sp,sp,-68
     dc4:	dc400f15 	stw	r17,60(sp)
     dc8:	dc400204 	addi	r17,sp,8
     dcc:	dc000e15 	stw	r16,56(sp)
     dd0:	d9000015 	stw	r4,0(sp)
     dd4:	d9400115 	stw	r5,4(sp)
     dd8:	d809883a 	mov	r4,sp
     ddc:	880b883a 	mov	r5,r17
     de0:	dc000604 	addi	r16,sp,24
     de4:	dfc01015 	stw	ra,64(sp)
     de8:	0001ccc0 	call	1ccc <__unpack_f>
     dec:	d9000104 	addi	r4,sp,4
     df0:	800b883a 	mov	r5,r16
     df4:	0001ccc0 	call	1ccc <__unpack_f>
     df8:	d9000217 	ldw	r4,8(sp)
     dfc:	00800044 	movi	r2,1
     e00:	01400104 	movi	r5,4
     e04:	1100142e 	bgeu	r2,r4,e58 <__mulsf3+0x98>
     e08:	d8c00617 	ldw	r3,24(sp)
     e0c:	10c0052e 	bgeu	r2,r3,e24 <__mulsf3+0x64>
     e10:	21400f26 	beq	r4,r5,e50 <__mulsf3+0x90>
     e14:	19405d26 	beq	r3,r5,f8c <__mulsf3+0x1cc>
     e18:	00800084 	movi	r2,2
     e1c:	20800e26 	beq	r4,r2,e58 <__mulsf3+0x98>
     e20:	1880181e 	bne	r3,r2,e84 <__mulsf3+0xc4>
     e24:	d8c00717 	ldw	r3,28(sp)
     e28:	d8800317 	ldw	r2,12(sp)
     e2c:	8009883a 	mov	r4,r16
     e30:	10c4c03a 	cmpne	r2,r2,r3
     e34:	d8800715 	stw	r2,28(sp)
     e38:	0001b6c0 	call	1b6c <__pack_f>
     e3c:	dfc01017 	ldw	ra,64(sp)
     e40:	dc400f17 	ldw	r17,60(sp)
     e44:	dc000e17 	ldw	r16,56(sp)
     e48:	dec01104 	addi	sp,sp,68
     e4c:	f800283a 	ret
     e50:	00800084 	movi	r2,2
     e54:	18804f26 	beq	r3,r2,f94 <__mulsf3+0x1d4>
     e58:	d8800317 	ldw	r2,12(sp)
     e5c:	d8c00717 	ldw	r3,28(sp)
     e60:	8809883a 	mov	r4,r17
     e64:	10c4c03a 	cmpne	r2,r2,r3
     e68:	d8800315 	stw	r2,12(sp)
     e6c:	0001b6c0 	call	1b6c <__pack_f>
     e70:	dfc01017 	ldw	ra,64(sp)
     e74:	dc400f17 	ldw	r17,60(sp)
     e78:	dc000e17 	ldw	r16,56(sp)
     e7c:	dec01104 	addi	sp,sp,68
     e80:	f800283a 	ret
     e84:	d8800517 	ldw	r2,20(sp)
     e88:	da000917 	ldw	r8,36(sp)
     e8c:	0013883a 	mov	r9,zero
     e90:	0007883a 	mov	r3,zero
     e94:	480f883a 	mov	r7,r9
     e98:	180b883a 	mov	r5,r3
     e9c:	400d883a 	mov	r6,r8
     ea0:	1009883a 	mov	r4,r2
     ea4:	0001a540 	call	1a54 <__muldi3>
     ea8:	da800417 	ldw	r10,16(sp)
     eac:	d9800817 	ldw	r6,32(sp)
     eb0:	da400317 	ldw	r9,12(sp)
     eb4:	52800084 	addi	r10,r10,2
     eb8:	3295883a 	add	r10,r6,r10
     ebc:	d9800717 	ldw	r6,28(sp)
     ec0:	180b883a 	mov	r5,r3
     ec4:	180f883a 	mov	r7,r3
     ec8:	4992c03a 	cmpne	r9,r9,r6
     ecc:	da400b15 	stw	r9,44(sp)
     ed0:	1007883a 	mov	r3,r2
     ed4:	da800c15 	stw	r10,48(sp)
     ed8:	2800070e 	bge	r5,zero,ef8 <__mulsf3+0x138>
     edc:	2880004c 	andi	r2,r5,1
     ee0:	1005003a 	cmpeq	r2,r2,zero
     ee4:	500d883a 	mov	r6,r10
     ee8:	10001e26 	beq	r2,zero,f64 <__mulsf3+0x1a4>
     eec:	380ed07a 	srli	r7,r7,1
     ef0:	31800044 	addi	r6,r6,1
     ef4:	d9800c15 	stw	r6,48(sp)
     ef8:	01100034 	movhi	r4,16384
     efc:	213fffc4 	addi	r4,r4,-1
     f00:	21c00b36 	bltu	r4,r7,f30 <__mulsf3+0x170>
     f04:	d8800c17 	ldw	r2,48(sp)
     f08:	00000206 	br	f14 <__mulsf3+0x154>
     f0c:	18c7883a 	add	r3,r3,r3
     f10:	21c00636 	bltu	r4,r7,f2c <__mulsf3+0x16c>
     f14:	10bfffc4 	addi	r2,r2,-1
     f18:	39cf883a 	add	r7,r7,r7
     f1c:	183ffb0e 	bge	r3,zero,f0c <__mulsf3+0x14c>
     f20:	39c00054 	ori	r7,r7,1
     f24:	18c7883a 	add	r3,r3,r3
     f28:	21fffa2e 	bgeu	r4,r7,f14 <__mulsf3+0x154>
     f2c:	d8800c15 	stw	r2,48(sp)
     f30:	39001fcc 	andi	r4,r7,127
     f34:	00801004 	movi	r2,64
     f38:	20800d26 	beq	r4,r2,f70 <__mulsf3+0x1b0>
     f3c:	008000c4 	movi	r2,3
     f40:	d9000a04 	addi	r4,sp,40
     f44:	d9c00d15 	stw	r7,52(sp)
     f48:	d8800a15 	stw	r2,40(sp)
     f4c:	0001b6c0 	call	1b6c <__pack_f>
     f50:	dfc01017 	ldw	ra,64(sp)
     f54:	dc400f17 	ldw	r17,60(sp)
     f58:	dc000e17 	ldw	r16,56(sp)
     f5c:	dec01104 	addi	sp,sp,68
     f60:	f800283a 	ret
     f64:	1804d07a 	srli	r2,r3,1
     f68:	10e00034 	orhi	r3,r2,32768
     f6c:	003fdf06 	br	eec <__mulsf3+0x12c>
     f70:	3880200c 	andi	r2,r7,128
     f74:	103ff11e 	bne	r2,zero,f3c <__mulsf3+0x17c>
     f78:	183ff026 	beq	r3,zero,f3c <__mulsf3+0x17c>
     f7c:	3907883a 	add	r3,r7,r4
     f80:	00bfe004 	movi	r2,-128
     f84:	188e703a 	and	r7,r3,r2
     f88:	003fec06 	br	f3c <__mulsf3+0x17c>
     f8c:	00800084 	movi	r2,2
     f90:	20bfa41e 	bne	r4,r2,e24 <__mulsf3+0x64>
     f94:	01000074 	movhi	r4,1
     f98:	211eaf04 	addi	r4,r4,31420
     f9c:	003fb306 	br	e6c <__mulsf3+0xac>

00000fa0 <__divsf3>:
     fa0:	defff304 	addi	sp,sp,-52
     fa4:	dc400b15 	stw	r17,44(sp)
     fa8:	dc400204 	addi	r17,sp,8
     fac:	dc000a15 	stw	r16,40(sp)
     fb0:	d9000015 	stw	r4,0(sp)
     fb4:	d9400115 	stw	r5,4(sp)
     fb8:	d809883a 	mov	r4,sp
     fbc:	880b883a 	mov	r5,r17
     fc0:	dc000604 	addi	r16,sp,24
     fc4:	dfc00c15 	stw	ra,48(sp)
     fc8:	0001ccc0 	call	1ccc <__unpack_f>
     fcc:	d9000104 	addi	r4,sp,4
     fd0:	800b883a 	mov	r5,r16
     fd4:	0001ccc0 	call	1ccc <__unpack_f>
     fd8:	d9000217 	ldw	r4,8(sp)
     fdc:	00800044 	movi	r2,1
     fe0:	01800104 	movi	r6,4
     fe4:	11000a2e 	bgeu	r2,r4,1010 <__divsf3+0x70>
     fe8:	d9400617 	ldw	r5,24(sp)
     fec:	1140432e 	bgeu	r2,r5,10fc <__divsf3+0x15c>
     ff0:	d8800317 	ldw	r2,12(sp)
     ff4:	d8c00717 	ldw	r3,28(sp)
     ff8:	10c4f03a 	xor	r2,r2,r3
     ffc:	d8800315 	stw	r2,12(sp)
    1000:	21800226 	beq	r4,r6,100c <__divsf3+0x6c>
    1004:	00800084 	movi	r2,2
    1008:	2080101e 	bne	r4,r2,104c <__divsf3+0xac>
    100c:	29000726 	beq	r5,r4,102c <__divsf3+0x8c>
    1010:	8809883a 	mov	r4,r17
    1014:	0001b6c0 	call	1b6c <__pack_f>
    1018:	dfc00c17 	ldw	ra,48(sp)
    101c:	dc400b17 	ldw	r17,44(sp)
    1020:	dc000a17 	ldw	r16,40(sp)
    1024:	dec00d04 	addi	sp,sp,52
    1028:	f800283a 	ret
    102c:	01000074 	movhi	r4,1
    1030:	211eaf04 	addi	r4,r4,31420
    1034:	0001b6c0 	call	1b6c <__pack_f>
    1038:	dfc00c17 	ldw	ra,48(sp)
    103c:	dc400b17 	ldw	r17,44(sp)
    1040:	dc000a17 	ldw	r16,40(sp)
    1044:	dec00d04 	addi	sp,sp,52
    1048:	f800283a 	ret
    104c:	29802d26 	beq	r5,r6,1104 <__divsf3+0x164>
    1050:	28801a26 	beq	r5,r2,10bc <__divsf3+0x11c>
    1054:	d8c00417 	ldw	r3,16(sp)
    1058:	d8800817 	ldw	r2,32(sp)
    105c:	d9000517 	ldw	r4,20(sp)
    1060:	d9800917 	ldw	r6,36(sp)
    1064:	1885c83a 	sub	r2,r3,r2
    1068:	d8800415 	stw	r2,16(sp)
    106c:	2180032e 	bgeu	r4,r6,107c <__divsf3+0xdc>
    1070:	10bfffc4 	addi	r2,r2,-1
    1074:	d8800415 	stw	r2,16(sp)
    1078:	2109883a 	add	r4,r4,r4
    107c:	01500034 	movhi	r5,16384
    1080:	0007883a 	mov	r3,zero
    1084:	0005883a 	mov	r2,zero
    1088:	01c007c4 	movi	r7,31
    108c:	10800044 	addi	r2,r2,1
    1090:	21800236 	bltu	r4,r6,109c <__divsf3+0xfc>
    1094:	1946b03a 	or	r3,r3,r5
    1098:	2189c83a 	sub	r4,r4,r6
    109c:	280ad07a 	srli	r5,r5,1
    10a0:	2109883a 	add	r4,r4,r4
    10a4:	11fff91e 	bne	r2,r7,108c <__divsf3+0xec>
    10a8:	19401fcc 	andi	r5,r3,127
    10ac:	00801004 	movi	r2,64
    10b0:	28800a26 	beq	r5,r2,10dc <__divsf3+0x13c>
    10b4:	d8c00515 	stw	r3,20(sp)
    10b8:	003fd506 	br	1010 <__divsf3+0x70>
    10bc:	8809883a 	mov	r4,r17
    10c0:	d9800215 	stw	r6,8(sp)
    10c4:	0001b6c0 	call	1b6c <__pack_f>
    10c8:	dfc00c17 	ldw	ra,48(sp)
    10cc:	dc400b17 	ldw	r17,44(sp)
    10d0:	dc000a17 	ldw	r16,40(sp)
    10d4:	dec00d04 	addi	sp,sp,52
    10d8:	f800283a 	ret
    10dc:	1880200c 	andi	r2,r3,128
    10e0:	103ff41e 	bne	r2,zero,10b4 <__divsf3+0x114>
    10e4:	203ff326 	beq	r4,zero,10b4 <__divsf3+0x114>
    10e8:	1947883a 	add	r3,r3,r5
    10ec:	00bfe004 	movi	r2,-128
    10f0:	1886703a 	and	r3,r3,r2
    10f4:	d8c00515 	stw	r3,20(sp)
    10f8:	003fc506 	br	1010 <__divsf3+0x70>
    10fc:	8009883a 	mov	r4,r16
    1100:	003fc406 	br	1014 <__divsf3+0x74>
    1104:	8809883a 	mov	r4,r17
    1108:	d8000515 	stw	zero,20(sp)
    110c:	d8000415 	stw	zero,16(sp)
    1110:	003fc006 	br	1014 <__divsf3+0x74>

00001114 <__gesf2>:
    1114:	defff304 	addi	sp,sp,-52
    1118:	dc400b15 	stw	r17,44(sp)
    111c:	dc400204 	addi	r17,sp,8
    1120:	dc000a15 	stw	r16,40(sp)
    1124:	d9000015 	stw	r4,0(sp)
    1128:	d9400115 	stw	r5,4(sp)
    112c:	d809883a 	mov	r4,sp
    1130:	880b883a 	mov	r5,r17
    1134:	dc000604 	addi	r16,sp,24
    1138:	dfc00c15 	stw	ra,48(sp)
    113c:	0001ccc0 	call	1ccc <__unpack_f>
    1140:	d9000104 	addi	r4,sp,4
    1144:	800b883a 	mov	r5,r16
    1148:	0001ccc0 	call	1ccc <__unpack_f>
    114c:	d8800217 	ldw	r2,8(sp)
    1150:	00c00044 	movi	r3,1
    1154:	01bfffc4 	movi	r6,-1
    1158:	1880062e 	bgeu	r3,r2,1174 <__gesf2+0x60>
    115c:	d8800617 	ldw	r2,24(sp)
    1160:	8809883a 	mov	r4,r17
    1164:	800b883a 	mov	r5,r16
    1168:	1880022e 	bgeu	r3,r2,1174 <__gesf2+0x60>
    116c:	0001d940 	call	1d94 <__fpcmp_parts_f>
    1170:	100d883a 	mov	r6,r2
    1174:	3005883a 	mov	r2,r6
    1178:	dfc00c17 	ldw	ra,48(sp)
    117c:	dc400b17 	ldw	r17,44(sp)
    1180:	dc000a17 	ldw	r16,40(sp)
    1184:	dec00d04 	addi	sp,sp,52
    1188:	f800283a 	ret

0000118c <__floatsisf>:
    118c:	2006d7fa 	srli	r3,r4,31
    1190:	defffa04 	addi	sp,sp,-24
    1194:	008000c4 	movi	r2,3
    1198:	dfc00515 	stw	ra,20(sp)
    119c:	dc000415 	stw	r16,16(sp)
    11a0:	d8800015 	stw	r2,0(sp)
    11a4:	d8c00115 	stw	r3,4(sp)
    11a8:	2000081e 	bne	r4,zero,11cc <__floatsisf+0x40>
    11ac:	00800084 	movi	r2,2
    11b0:	d8800015 	stw	r2,0(sp)
    11b4:	d809883a 	mov	r4,sp
    11b8:	0001b6c0 	call	1b6c <__pack_f>
    11bc:	dfc00517 	ldw	ra,20(sp)
    11c0:	dc000417 	ldw	r16,16(sp)
    11c4:	dec00604 	addi	sp,sp,24
    11c8:	f800283a 	ret
    11cc:	00800784 	movi	r2,30
    11d0:	1807003a 	cmpeq	r3,r3,zero
    11d4:	d8800215 	stw	r2,8(sp)
    11d8:	18000e1e 	bne	r3,zero,1214 <__floatsisf+0x88>
    11dc:	00a00034 	movhi	r2,32768
    11e0:	20800e26 	beq	r4,r2,121c <__floatsisf+0x90>
    11e4:	0121c83a 	sub	r16,zero,r4
    11e8:	8009883a 	mov	r4,r16
    11ec:	dc000315 	stw	r16,12(sp)
    11f0:	0001aec0 	call	1aec <__clzsi2>
    11f4:	117fffc4 	addi	r5,r2,-1
    11f8:	017fee0e 	bge	zero,r5,11b4 <__floatsisf+0x28>
    11fc:	d8800217 	ldw	r2,8(sp)
    1200:	8146983a 	sll	r3,r16,r5
    1204:	1145c83a 	sub	r2,r2,r5
    1208:	d8c00315 	stw	r3,12(sp)
    120c:	d8800215 	stw	r2,8(sp)
    1210:	003fe806 	br	11b4 <__floatsisf+0x28>
    1214:	2021883a 	mov	r16,r4
    1218:	003ff306 	br	11e8 <__floatsisf+0x5c>
    121c:	00b3c034 	movhi	r2,52992
    1220:	003fe606 	br	11bc <__floatsisf+0x30>

00001224 <__fixsfsi>:
    1224:	defffa04 	addi	sp,sp,-24
    1228:	d9000015 	stw	r4,0(sp)
    122c:	d9400104 	addi	r5,sp,4
    1230:	d809883a 	mov	r4,sp
    1234:	dfc00515 	stw	ra,20(sp)
    1238:	0001ccc0 	call	1ccc <__unpack_f>
    123c:	d8c00117 	ldw	r3,4(sp)
    1240:	00800084 	movi	r2,2
    1244:	1880041e 	bne	r3,r2,1258 <__fixsfsi+0x34>
    1248:	0005883a 	mov	r2,zero
    124c:	dfc00517 	ldw	ra,20(sp)
    1250:	dec00604 	addi	sp,sp,24
    1254:	f800283a 	ret
    1258:	00800044 	movi	r2,1
    125c:	10fffa2e 	bgeu	r2,r3,1248 <__fixsfsi+0x24>
    1260:	00800104 	movi	r2,4
    1264:	18800426 	beq	r3,r2,1278 <__fixsfsi+0x54>
    1268:	d8800317 	ldw	r2,12(sp)
    126c:	103ff616 	blt	r2,zero,1248 <__fixsfsi+0x24>
    1270:	00c00784 	movi	r3,30
    1274:	1880070e 	bge	r3,r2,1294 <__fixsfsi+0x70>
    1278:	d8800217 	ldw	r2,8(sp)
    127c:	10000c1e 	bne	r2,zero,12b0 <__fixsfsi+0x8c>
    1280:	00a00034 	movhi	r2,32768
    1284:	10bfffc4 	addi	r2,r2,-1
    1288:	dfc00517 	ldw	ra,20(sp)
    128c:	dec00604 	addi	sp,sp,24
    1290:	f800283a 	ret
    1294:	1885c83a 	sub	r2,r3,r2
    1298:	d9000217 	ldw	r4,8(sp)
    129c:	d8c00417 	ldw	r3,16(sp)
    12a0:	1884d83a 	srl	r2,r3,r2
    12a4:	203fe926 	beq	r4,zero,124c <__fixsfsi+0x28>
    12a8:	0085c83a 	sub	r2,zero,r2
    12ac:	003fe706 	br	124c <__fixsfsi+0x28>
    12b0:	00a00034 	movhi	r2,32768
    12b4:	003fe506 	br	124c <__fixsfsi+0x28>

000012b8 <__extendsfdf2>:
    12b8:	defff904 	addi	sp,sp,-28
    12bc:	d9000115 	stw	r4,4(sp)
    12c0:	d9400204 	addi	r5,sp,8
    12c4:	d9000104 	addi	r4,sp,4
    12c8:	dfc00615 	stw	ra,24(sp)
    12cc:	0001ccc0 	call	1ccc <__unpack_f>
    12d0:	d9c00517 	ldw	r7,20(sp)
    12d4:	0011883a 	mov	r8,zero
    12d8:	400697ba 	slli	r3,r8,30
    12dc:	3812d0ba 	srli	r9,r7,2
    12e0:	380497ba 	slli	r2,r7,30
    12e4:	d9000217 	ldw	r4,8(sp)
    12e8:	d9400317 	ldw	r5,12(sp)
    12ec:	d9800417 	ldw	r6,16(sp)
    12f0:	48c6b03a 	or	r3,r9,r3
    12f4:	100f883a 	mov	r7,r2
    12f8:	d8c00015 	stw	r3,0(sp)
    12fc:	00018d00 	call	18d0 <__make_dp>
    1300:	dfc00617 	ldw	ra,24(sp)
    1304:	dec00704 	addi	sp,sp,28
    1308:	f800283a 	ret

0000130c <__floatunsisf>:
    130c:	defff904 	addi	sp,sp,-28
    1310:	dc400515 	stw	r17,20(sp)
    1314:	dc000415 	stw	r16,16(sp)
    1318:	dfc00615 	stw	ra,24(sp)
    131c:	04400784 	movi	r17,30
    1320:	2021883a 	mov	r16,r4
    1324:	d8000115 	stw	zero,4(sp)
    1328:	2000091e 	bne	r4,zero,1350 <__floatunsisf+0x44>
    132c:	00800084 	movi	r2,2
    1330:	d8800015 	stw	r2,0(sp)
    1334:	d809883a 	mov	r4,sp
    1338:	0001b6c0 	call	1b6c <__pack_f>
    133c:	dfc00617 	ldw	ra,24(sp)
    1340:	dc400517 	ldw	r17,20(sp)
    1344:	dc000417 	ldw	r16,16(sp)
    1348:	dec00704 	addi	sp,sp,28
    134c:	f800283a 	ret
    1350:	008000c4 	movi	r2,3
    1354:	d9000315 	stw	r4,12(sp)
    1358:	d8800015 	stw	r2,0(sp)
    135c:	dc400215 	stw	r17,8(sp)
    1360:	0001aec0 	call	1aec <__clzsi2>
    1364:	117fffc4 	addi	r5,r2,-1
    1368:	0147c83a 	sub	r3,zero,r5
    136c:	00800044 	movi	r2,1
    1370:	10c4983a 	sll	r2,r2,r3
    1374:	80c6d83a 	srl	r3,r16,r3
    1378:	8949c83a 	sub	r4,r17,r5
    137c:	10bfffc4 	addi	r2,r2,-1
    1380:	8084703a 	and	r2,r16,r2
    1384:	1004c03a 	cmpne	r2,r2,zero
    1388:	1886b03a 	or	r3,r3,r2
    138c:	28000c16 	blt	r5,zero,13c0 <__floatunsisf+0xb4>
    1390:	8144983a 	sll	r2,r16,r5
    1394:	8947c83a 	sub	r3,r17,r5
    1398:	283fe626 	beq	r5,zero,1334 <__floatunsisf+0x28>
    139c:	d809883a 	mov	r4,sp
    13a0:	d8800315 	stw	r2,12(sp)
    13a4:	d8c00215 	stw	r3,8(sp)
    13a8:	0001b6c0 	call	1b6c <__pack_f>
    13ac:	dfc00617 	ldw	ra,24(sp)
    13b0:	dc400517 	ldw	r17,20(sp)
    13b4:	dc000417 	ldw	r16,16(sp)
    13b8:	dec00704 	addi	sp,sp,28
    13bc:	f800283a 	ret
    13c0:	d8c00315 	stw	r3,12(sp)
    13c4:	d9000215 	stw	r4,8(sp)
    13c8:	003fda06 	br	1334 <__floatunsisf+0x28>

000013cc <_fpadd_parts>:
    13cc:	defff804 	addi	sp,sp,-32
    13d0:	dcc00315 	stw	r19,12(sp)
    13d4:	2027883a 	mov	r19,r4
    13d8:	21000017 	ldw	r4,0(r4)
    13dc:	00c00044 	movi	r3,1
    13e0:	dd400515 	stw	r21,20(sp)
    13e4:	dd000415 	stw	r20,16(sp)
    13e8:	ddc00715 	stw	r23,28(sp)
    13ec:	dd800615 	stw	r22,24(sp)
    13f0:	dc800215 	stw	r18,8(sp)
    13f4:	dc400115 	stw	r17,4(sp)
    13f8:	dc000015 	stw	r16,0(sp)
    13fc:	282b883a 	mov	r21,r5
    1400:	3029883a 	mov	r20,r6
    1404:	1900632e 	bgeu	r3,r4,1594 <_fpadd_parts+0x1c8>
    1408:	28800017 	ldw	r2,0(r5)
    140c:	1880812e 	bgeu	r3,r2,1614 <_fpadd_parts+0x248>
    1410:	00c00104 	movi	r3,4
    1414:	20c0dc26 	beq	r4,r3,1788 <_fpadd_parts+0x3bc>
    1418:	10c07e26 	beq	r2,r3,1614 <_fpadd_parts+0x248>
    141c:	00c00084 	movi	r3,2
    1420:	10c06726 	beq	r2,r3,15c0 <_fpadd_parts+0x1f4>
    1424:	20c07b26 	beq	r4,r3,1614 <_fpadd_parts+0x248>
    1428:	9dc00217 	ldw	r23,8(r19)
    142c:	28c00217 	ldw	r3,8(r5)
    1430:	9c400317 	ldw	r17,12(r19)
    1434:	2bc00317 	ldw	r15,12(r5)
    1438:	b8cdc83a 	sub	r6,r23,r3
    143c:	9c800417 	ldw	r18,16(r19)
    1440:	2c000417 	ldw	r16,16(r5)
    1444:	3009883a 	mov	r4,r6
    1448:	30009716 	blt	r6,zero,16a8 <_fpadd_parts+0x2dc>
    144c:	00800fc4 	movi	r2,63
    1450:	11806b16 	blt	r2,r6,1600 <_fpadd_parts+0x234>
    1454:	0100a40e 	bge	zero,r4,16e8 <_fpadd_parts+0x31c>
    1458:	35bff804 	addi	r22,r6,-32
    145c:	b000bc16 	blt	r22,zero,1750 <_fpadd_parts+0x384>
    1460:	8596d83a 	srl	r11,r16,r22
    1464:	0019883a 	mov	r12,zero
    1468:	0013883a 	mov	r9,zero
    146c:	01000044 	movi	r4,1
    1470:	0015883a 	mov	r10,zero
    1474:	b000be16 	blt	r22,zero,1770 <_fpadd_parts+0x3a4>
    1478:	2590983a 	sll	r8,r4,r22
    147c:	000f883a 	mov	r7,zero
    1480:	00bfffc4 	movi	r2,-1
    1484:	3889883a 	add	r4,r7,r2
    1488:	408b883a 	add	r5,r8,r2
    148c:	21cd803a 	cmpltu	r6,r4,r7
    1490:	314b883a 	add	r5,r6,r5
    1494:	7904703a 	and	r2,r15,r4
    1498:	8146703a 	and	r3,r16,r5
    149c:	10c4b03a 	or	r2,r2,r3
    14a0:	10000226 	beq	r2,zero,14ac <_fpadd_parts+0xe0>
    14a4:	02400044 	movi	r9,1
    14a8:	0015883a 	mov	r10,zero
    14ac:	5a5eb03a 	or	r15,r11,r9
    14b0:	62a0b03a 	or	r16,r12,r10
    14b4:	99400117 	ldw	r5,4(r19)
    14b8:	a8800117 	ldw	r2,4(r21)
    14bc:	28806e26 	beq	r5,r2,1678 <_fpadd_parts+0x2ac>
    14c0:	28006626 	beq	r5,zero,165c <_fpadd_parts+0x290>
    14c4:	7c45c83a 	sub	r2,r15,r17
    14c8:	7889803a 	cmpltu	r4,r15,r2
    14cc:	8487c83a 	sub	r3,r16,r18
    14d0:	1909c83a 	sub	r4,r3,r4
    14d4:	100d883a 	mov	r6,r2
    14d8:	200f883a 	mov	r7,r4
    14dc:	38007716 	blt	r7,zero,16bc <_fpadd_parts+0x2f0>
    14e0:	a5c00215 	stw	r23,8(r20)
    14e4:	a1c00415 	stw	r7,16(r20)
    14e8:	a0000115 	stw	zero,4(r20)
    14ec:	a1800315 	stw	r6,12(r20)
    14f0:	a2000317 	ldw	r8,12(r20)
    14f4:	a2400417 	ldw	r9,16(r20)
    14f8:	00bfffc4 	movi	r2,-1
    14fc:	408b883a 	add	r5,r8,r2
    1500:	2a09803a 	cmpltu	r4,r5,r8
    1504:	488d883a 	add	r6,r9,r2
    1508:	01c40034 	movhi	r7,4096
    150c:	39ffffc4 	addi	r7,r7,-1
    1510:	218d883a 	add	r6,r4,r6
    1514:	39801736 	bltu	r7,r6,1574 <_fpadd_parts+0x1a8>
    1518:	31c06526 	beq	r6,r7,16b0 <_fpadd_parts+0x2e4>
    151c:	a3000217 	ldw	r12,8(r20)
    1520:	4209883a 	add	r4,r8,r8
    1524:	00bfffc4 	movi	r2,-1
    1528:	220f803a 	cmpltu	r7,r4,r8
    152c:	4a4b883a 	add	r5,r9,r9
    1530:	394f883a 	add	r7,r7,r5
    1534:	2095883a 	add	r10,r4,r2
    1538:	3897883a 	add	r11,r7,r2
    153c:	510d803a 	cmpltu	r6,r10,r4
    1540:	6099883a 	add	r12,r12,r2
    1544:	32d7883a 	add	r11,r6,r11
    1548:	00840034 	movhi	r2,4096
    154c:	10bfffc4 	addi	r2,r2,-1
    1550:	2011883a 	mov	r8,r4
    1554:	3813883a 	mov	r9,r7
    1558:	a1000315 	stw	r4,12(r20)
    155c:	a1c00415 	stw	r7,16(r20)
    1560:	a3000215 	stw	r12,8(r20)
    1564:	12c00336 	bltu	r2,r11,1574 <_fpadd_parts+0x1a8>
    1568:	58bfed1e 	bne	r11,r2,1520 <_fpadd_parts+0x154>
    156c:	00bfff84 	movi	r2,-2
    1570:	12bfeb2e 	bgeu	r2,r10,1520 <_fpadd_parts+0x154>
    1574:	a2800417 	ldw	r10,16(r20)
    1578:	008000c4 	movi	r2,3
    157c:	00c80034 	movhi	r3,8192
    1580:	18ffffc4 	addi	r3,r3,-1
    1584:	a2400317 	ldw	r9,12(r20)
    1588:	a0800015 	stw	r2,0(r20)
    158c:	1a802336 	bltu	r3,r10,161c <_fpadd_parts+0x250>
    1590:	a027883a 	mov	r19,r20
    1594:	9805883a 	mov	r2,r19
    1598:	ddc00717 	ldw	r23,28(sp)
    159c:	dd800617 	ldw	r22,24(sp)
    15a0:	dd400517 	ldw	r21,20(sp)
    15a4:	dd000417 	ldw	r20,16(sp)
    15a8:	dcc00317 	ldw	r19,12(sp)
    15ac:	dc800217 	ldw	r18,8(sp)
    15b0:	dc400117 	ldw	r17,4(sp)
    15b4:	dc000017 	ldw	r16,0(sp)
    15b8:	dec00804 	addi	sp,sp,32
    15bc:	f800283a 	ret
    15c0:	20fff41e 	bne	r4,r3,1594 <_fpadd_parts+0x1c8>
    15c4:	31000015 	stw	r4,0(r6)
    15c8:	98800117 	ldw	r2,4(r19)
    15cc:	30800115 	stw	r2,4(r6)
    15d0:	98c00217 	ldw	r3,8(r19)
    15d4:	30c00215 	stw	r3,8(r6)
    15d8:	98800317 	ldw	r2,12(r19)
    15dc:	30800315 	stw	r2,12(r6)
    15e0:	98c00417 	ldw	r3,16(r19)
    15e4:	30c00415 	stw	r3,16(r6)
    15e8:	98800117 	ldw	r2,4(r19)
    15ec:	28c00117 	ldw	r3,4(r5)
    15f0:	3027883a 	mov	r19,r6
    15f4:	10c4703a 	and	r2,r2,r3
    15f8:	30800115 	stw	r2,4(r6)
    15fc:	003fe506 	br	1594 <_fpadd_parts+0x1c8>
    1600:	1dc02616 	blt	r3,r23,169c <_fpadd_parts+0x2d0>
    1604:	0023883a 	mov	r17,zero
    1608:	182f883a 	mov	r23,r3
    160c:	0025883a 	mov	r18,zero
    1610:	003fa806 	br	14b4 <_fpadd_parts+0xe8>
    1614:	a827883a 	mov	r19,r21
    1618:	003fde06 	br	1594 <_fpadd_parts+0x1c8>
    161c:	01800044 	movi	r6,1
    1620:	500497fa 	slli	r2,r10,31
    1624:	4808d07a 	srli	r4,r9,1
    1628:	518ad83a 	srl	r5,r10,r6
    162c:	a2000217 	ldw	r8,8(r20)
    1630:	1108b03a 	or	r4,r2,r4
    1634:	0007883a 	mov	r3,zero
    1638:	4984703a 	and	r2,r9,r6
    163c:	208cb03a 	or	r6,r4,r2
    1640:	28ceb03a 	or	r7,r5,r3
    1644:	42000044 	addi	r8,r8,1
    1648:	a027883a 	mov	r19,r20
    164c:	a1c00415 	stw	r7,16(r20)
    1650:	a2000215 	stw	r8,8(r20)
    1654:	a1800315 	stw	r6,12(r20)
    1658:	003fce06 	br	1594 <_fpadd_parts+0x1c8>
    165c:	8bc5c83a 	sub	r2,r17,r15
    1660:	8889803a 	cmpltu	r4,r17,r2
    1664:	9407c83a 	sub	r3,r18,r16
    1668:	1909c83a 	sub	r4,r3,r4
    166c:	100d883a 	mov	r6,r2
    1670:	200f883a 	mov	r7,r4
    1674:	003f9906 	br	14dc <_fpadd_parts+0x110>
    1678:	7c45883a 	add	r2,r15,r17
    167c:	13c9803a 	cmpltu	r4,r2,r15
    1680:	8487883a 	add	r3,r16,r18
    1684:	20c9883a 	add	r4,r4,r3
    1688:	a1400115 	stw	r5,4(r20)
    168c:	a5c00215 	stw	r23,8(r20)
    1690:	a0800315 	stw	r2,12(r20)
    1694:	a1000415 	stw	r4,16(r20)
    1698:	003fb606 	br	1574 <_fpadd_parts+0x1a8>
    169c:	001f883a 	mov	r15,zero
    16a0:	0021883a 	mov	r16,zero
    16a4:	003f8306 	br	14b4 <_fpadd_parts+0xe8>
    16a8:	018dc83a 	sub	r6,zero,r6
    16ac:	003f6706 	br	144c <_fpadd_parts+0x80>
    16b0:	00bfff84 	movi	r2,-2
    16b4:	117faf36 	bltu	r2,r5,1574 <_fpadd_parts+0x1a8>
    16b8:	003f9806 	br	151c <_fpadd_parts+0x150>
    16bc:	0005883a 	mov	r2,zero
    16c0:	1189c83a 	sub	r4,r2,r6
    16c4:	1105803a 	cmpltu	r2,r2,r4
    16c8:	01cbc83a 	sub	r5,zero,r7
    16cc:	2885c83a 	sub	r2,r5,r2
    16d0:	01800044 	movi	r6,1
    16d4:	a1800115 	stw	r6,4(r20)
    16d8:	a5c00215 	stw	r23,8(r20)
    16dc:	a1000315 	stw	r4,12(r20)
    16e0:	a0800415 	stw	r2,16(r20)
    16e4:	003f8206 	br	14f0 <_fpadd_parts+0x124>
    16e8:	203f7226 	beq	r4,zero,14b4 <_fpadd_parts+0xe8>
    16ec:	35bff804 	addi	r22,r6,-32
    16f0:	b9af883a 	add	r23,r23,r6
    16f4:	b0003116 	blt	r22,zero,17bc <_fpadd_parts+0x3f0>
    16f8:	959ad83a 	srl	r13,r18,r22
    16fc:	001d883a 	mov	r14,zero
    1700:	000f883a 	mov	r7,zero
    1704:	01000044 	movi	r4,1
    1708:	0011883a 	mov	r8,zero
    170c:	b0002516 	blt	r22,zero,17a4 <_fpadd_parts+0x3d8>
    1710:	2594983a 	sll	r10,r4,r22
    1714:	0013883a 	mov	r9,zero
    1718:	00bfffc4 	movi	r2,-1
    171c:	4889883a 	add	r4,r9,r2
    1720:	508b883a 	add	r5,r10,r2
    1724:	224d803a 	cmpltu	r6,r4,r9
    1728:	314b883a 	add	r5,r6,r5
    172c:	8904703a 	and	r2,r17,r4
    1730:	9146703a 	and	r3,r18,r5
    1734:	10c4b03a 	or	r2,r2,r3
    1738:	10000226 	beq	r2,zero,1744 <_fpadd_parts+0x378>
    173c:	01c00044 	movi	r7,1
    1740:	0011883a 	mov	r8,zero
    1744:	69e2b03a 	or	r17,r13,r7
    1748:	7224b03a 	or	r18,r14,r8
    174c:	003f5906 	br	14b4 <_fpadd_parts+0xe8>
    1750:	8407883a 	add	r3,r16,r16
    1754:	008007c4 	movi	r2,31
    1758:	1185c83a 	sub	r2,r2,r6
    175c:	1886983a 	sll	r3,r3,r2
    1760:	7996d83a 	srl	r11,r15,r6
    1764:	8198d83a 	srl	r12,r16,r6
    1768:	1ad6b03a 	or	r11,r3,r11
    176c:	003f3e06 	br	1468 <_fpadd_parts+0x9c>
    1770:	2006d07a 	srli	r3,r4,1
    1774:	008007c4 	movi	r2,31
    1778:	1185c83a 	sub	r2,r2,r6
    177c:	1890d83a 	srl	r8,r3,r2
    1780:	218e983a 	sll	r7,r4,r6
    1784:	003f3e06 	br	1480 <_fpadd_parts+0xb4>
    1788:	113f821e 	bne	r2,r4,1594 <_fpadd_parts+0x1c8>
    178c:	28c00117 	ldw	r3,4(r5)
    1790:	98800117 	ldw	r2,4(r19)
    1794:	10ff7f26 	beq	r2,r3,1594 <_fpadd_parts+0x1c8>
    1798:	04c00074 	movhi	r19,1
    179c:	9cdeb304 	addi	r19,r19,31436
    17a0:	003f7c06 	br	1594 <_fpadd_parts+0x1c8>
    17a4:	2006d07a 	srli	r3,r4,1
    17a8:	008007c4 	movi	r2,31
    17ac:	1185c83a 	sub	r2,r2,r6
    17b0:	1894d83a 	srl	r10,r3,r2
    17b4:	2192983a 	sll	r9,r4,r6
    17b8:	003fd706 	br	1718 <_fpadd_parts+0x34c>
    17bc:	9487883a 	add	r3,r18,r18
    17c0:	008007c4 	movi	r2,31
    17c4:	1185c83a 	sub	r2,r2,r6
    17c8:	1886983a 	sll	r3,r3,r2
    17cc:	899ad83a 	srl	r13,r17,r6
    17d0:	919cd83a 	srl	r14,r18,r6
    17d4:	1b5ab03a 	or	r13,r3,r13
    17d8:	003fc906 	br	1700 <_fpadd_parts+0x334>

000017dc <__subdf3>:
    17dc:	deffea04 	addi	sp,sp,-88
    17e0:	dcc01415 	stw	r19,80(sp)
    17e4:	dcc00404 	addi	r19,sp,16
    17e8:	2011883a 	mov	r8,r4
    17ec:	2813883a 	mov	r9,r5
    17f0:	dc401315 	stw	r17,76(sp)
    17f4:	d809883a 	mov	r4,sp
    17f8:	980b883a 	mov	r5,r19
    17fc:	dc400904 	addi	r17,sp,36
    1800:	dfc01515 	stw	ra,84(sp)
    1804:	da400115 	stw	r9,4(sp)
    1808:	d9c00315 	stw	r7,12(sp)
    180c:	da000015 	stw	r8,0(sp)
    1810:	d9800215 	stw	r6,8(sp)
    1814:	00021500 	call	2150 <__unpack_d>
    1818:	d9000204 	addi	r4,sp,8
    181c:	880b883a 	mov	r5,r17
    1820:	00021500 	call	2150 <__unpack_d>
    1824:	d8800a17 	ldw	r2,40(sp)
    1828:	880b883a 	mov	r5,r17
    182c:	9809883a 	mov	r4,r19
    1830:	d9800e04 	addi	r6,sp,56
    1834:	1080005c 	xori	r2,r2,1
    1838:	d8800a15 	stw	r2,40(sp)
    183c:	00013cc0 	call	13cc <_fpadd_parts>
    1840:	1009883a 	mov	r4,r2
    1844:	0001e3c0 	call	1e3c <__pack_d>
    1848:	dfc01517 	ldw	ra,84(sp)
    184c:	dcc01417 	ldw	r19,80(sp)
    1850:	dc401317 	ldw	r17,76(sp)
    1854:	dec01604 	addi	sp,sp,88
    1858:	f800283a 	ret

0000185c <__adddf3>:
    185c:	deffea04 	addi	sp,sp,-88
    1860:	dcc01415 	stw	r19,80(sp)
    1864:	dcc00404 	addi	r19,sp,16
    1868:	2011883a 	mov	r8,r4
    186c:	2813883a 	mov	r9,r5
    1870:	dc401315 	stw	r17,76(sp)
    1874:	d809883a 	mov	r4,sp
    1878:	980b883a 	mov	r5,r19
    187c:	dc400904 	addi	r17,sp,36
    1880:	dfc01515 	stw	ra,84(sp)
    1884:	da400115 	stw	r9,4(sp)
    1888:	d9c00315 	stw	r7,12(sp)
    188c:	da000015 	stw	r8,0(sp)
    1890:	d9800215 	stw	r6,8(sp)
    1894:	00021500 	call	2150 <__unpack_d>
    1898:	d9000204 	addi	r4,sp,8
    189c:	880b883a 	mov	r5,r17
    18a0:	00021500 	call	2150 <__unpack_d>
    18a4:	d9800e04 	addi	r6,sp,56
    18a8:	9809883a 	mov	r4,r19
    18ac:	880b883a 	mov	r5,r17
    18b0:	00013cc0 	call	13cc <_fpadd_parts>
    18b4:	1009883a 	mov	r4,r2
    18b8:	0001e3c0 	call	1e3c <__pack_d>
    18bc:	dfc01517 	ldw	ra,84(sp)
    18c0:	dcc01417 	ldw	r19,80(sp)
    18c4:	dc401317 	ldw	r17,76(sp)
    18c8:	dec01604 	addi	sp,sp,88
    18cc:	f800283a 	ret

000018d0 <__make_dp>:
    18d0:	defff904 	addi	sp,sp,-28
    18d4:	d8c00717 	ldw	r3,28(sp)
    18d8:	d9000015 	stw	r4,0(sp)
    18dc:	d809883a 	mov	r4,sp
    18e0:	dfc00515 	stw	ra,20(sp)
    18e4:	d9c00615 	stw	r7,24(sp)
    18e8:	d9400115 	stw	r5,4(sp)
    18ec:	d9800215 	stw	r6,8(sp)
    18f0:	d8c00415 	stw	r3,16(sp)
    18f4:	d9c00315 	stw	r7,12(sp)
    18f8:	0001e3c0 	call	1e3c <__pack_d>
    18fc:	dfc00517 	ldw	ra,20(sp)
    1900:	dec00704 	addi	sp,sp,28
    1904:	f800283a 	ret

00001908 <udivmodsi4>:
    1908:	29001b2e 	bgeu	r5,r4,1978 <udivmodsi4+0x70>
    190c:	28001a16 	blt	r5,zero,1978 <udivmodsi4+0x70>
    1910:	00800044 	movi	r2,1
    1914:	0007883a 	mov	r3,zero
    1918:	01c007c4 	movi	r7,31
    191c:	00000306 	br	192c <udivmodsi4+0x24>
    1920:	19c01326 	beq	r3,r7,1970 <udivmodsi4+0x68>
    1924:	18c00044 	addi	r3,r3,1
    1928:	28000416 	blt	r5,zero,193c <udivmodsi4+0x34>
    192c:	294b883a 	add	r5,r5,r5
    1930:	1085883a 	add	r2,r2,r2
    1934:	293ffa36 	bltu	r5,r4,1920 <udivmodsi4+0x18>
    1938:	10000d26 	beq	r2,zero,1970 <udivmodsi4+0x68>
    193c:	0007883a 	mov	r3,zero
    1940:	21400236 	bltu	r4,r5,194c <udivmodsi4+0x44>
    1944:	2149c83a 	sub	r4,r4,r5
    1948:	1886b03a 	or	r3,r3,r2
    194c:	1004d07a 	srli	r2,r2,1
    1950:	280ad07a 	srli	r5,r5,1
    1954:	103ffa1e 	bne	r2,zero,1940 <udivmodsi4+0x38>
    1958:	30000226 	beq	r6,zero,1964 <udivmodsi4+0x5c>
    195c:	2005883a 	mov	r2,r4
    1960:	f800283a 	ret
    1964:	1809883a 	mov	r4,r3
    1968:	2005883a 	mov	r2,r4
    196c:	f800283a 	ret
    1970:	0007883a 	mov	r3,zero
    1974:	003ff806 	br	1958 <udivmodsi4+0x50>
    1978:	00800044 	movi	r2,1
    197c:	0007883a 	mov	r3,zero
    1980:	003fef06 	br	1940 <udivmodsi4+0x38>

00001984 <__divsi3>:
    1984:	defffe04 	addi	sp,sp,-8
    1988:	dc000015 	stw	r16,0(sp)
    198c:	dfc00115 	stw	ra,4(sp)
    1990:	0021883a 	mov	r16,zero
    1994:	20000c16 	blt	r4,zero,19c8 <__divsi3+0x44>
    1998:	000d883a 	mov	r6,zero
    199c:	28000e16 	blt	r5,zero,19d8 <__divsi3+0x54>
    19a0:	00019080 	call	1908 <udivmodsi4>
    19a4:	1007883a 	mov	r3,r2
    19a8:	8005003a 	cmpeq	r2,r16,zero
    19ac:	1000011e 	bne	r2,zero,19b4 <__divsi3+0x30>
    19b0:	00c7c83a 	sub	r3,zero,r3
    19b4:	1805883a 	mov	r2,r3
    19b8:	dfc00117 	ldw	ra,4(sp)
    19bc:	dc000017 	ldw	r16,0(sp)
    19c0:	dec00204 	addi	sp,sp,8
    19c4:	f800283a 	ret
    19c8:	0109c83a 	sub	r4,zero,r4
    19cc:	04000044 	movi	r16,1
    19d0:	000d883a 	mov	r6,zero
    19d4:	283ff20e 	bge	r5,zero,19a0 <__divsi3+0x1c>
    19d8:	014bc83a 	sub	r5,zero,r5
    19dc:	8021003a 	cmpeq	r16,r16,zero
    19e0:	003fef06 	br	19a0 <__divsi3+0x1c>

000019e4 <__modsi3>:
    19e4:	deffff04 	addi	sp,sp,-4
    19e8:	dfc00015 	stw	ra,0(sp)
    19ec:	01800044 	movi	r6,1
    19f0:	2807883a 	mov	r3,r5
    19f4:	20000416 	blt	r4,zero,1a08 <__modsi3+0x24>
    19f8:	28000c16 	blt	r5,zero,1a2c <__modsi3+0x48>
    19fc:	dfc00017 	ldw	ra,0(sp)
    1a00:	dec00104 	addi	sp,sp,4
    1a04:	00019081 	jmpi	1908 <udivmodsi4>
    1a08:	0109c83a 	sub	r4,zero,r4
    1a0c:	28000b16 	blt	r5,zero,1a3c <__modsi3+0x58>
    1a10:	180b883a 	mov	r5,r3
    1a14:	01800044 	movi	r6,1
    1a18:	00019080 	call	1908 <udivmodsi4>
    1a1c:	0085c83a 	sub	r2,zero,r2
    1a20:	dfc00017 	ldw	ra,0(sp)
    1a24:	dec00104 	addi	sp,sp,4
    1a28:	f800283a 	ret
    1a2c:	014bc83a 	sub	r5,zero,r5
    1a30:	dfc00017 	ldw	ra,0(sp)
    1a34:	dec00104 	addi	sp,sp,4
    1a38:	00019081 	jmpi	1908 <udivmodsi4>
    1a3c:	0147c83a 	sub	r3,zero,r5
    1a40:	003ff306 	br	1a10 <__modsi3+0x2c>

00001a44 <__udivsi3>:
    1a44:	000d883a 	mov	r6,zero
    1a48:	00019081 	jmpi	1908 <udivmodsi4>

00001a4c <__umodsi3>:
    1a4c:	01800044 	movi	r6,1
    1a50:	00019081 	jmpi	1908 <udivmodsi4>

00001a54 <__muldi3>:
    1a54:	2011883a 	mov	r8,r4
    1a58:	427fffcc 	andi	r9,r8,65535
    1a5c:	4018d43a 	srli	r12,r8,16
    1a60:	32bfffcc 	andi	r10,r6,65535
    1a64:	3016d43a 	srli	r11,r6,16
    1a68:	4a85383a 	mul	r2,r9,r10
    1a6c:	6295383a 	mul	r10,r12,r10
    1a70:	4ad3383a 	mul	r9,r9,r11
    1a74:	113fffcc 	andi	r4,r2,65535
    1a78:	1004d43a 	srli	r2,r2,16
    1a7c:	4a93883a 	add	r9,r9,r10
    1a80:	3807883a 	mov	r3,r7
    1a84:	1245883a 	add	r2,r2,r9
    1a88:	280f883a 	mov	r7,r5
    1a8c:	180b883a 	mov	r5,r3
    1a90:	1006943a 	slli	r3,r2,16
    1a94:	defffd04 	addi	sp,sp,-12
    1a98:	dc800215 	stw	r18,8(sp)
    1a9c:	1907883a 	add	r3,r3,r4
    1aa0:	dc400115 	stw	r17,4(sp)
    1aa4:	dc000015 	stw	r16,0(sp)
    1aa8:	4165383a 	mul	r18,r8,r5
    1aac:	31e3383a 	mul	r17,r6,r7
    1ab0:	1012d43a 	srli	r9,r2,16
    1ab4:	62d9383a 	mul	r12,r12,r11
    1ab8:	181f883a 	mov	r15,r3
    1abc:	1280022e 	bgeu	r2,r10,1ac8 <__muldi3+0x74>
    1ac0:	00800074 	movhi	r2,1
    1ac4:	6099883a 	add	r12,r12,r2
    1ac8:	624d883a 	add	r6,r12,r9
    1acc:	9187883a 	add	r3,r18,r6
    1ad0:	88c7883a 	add	r3,r17,r3
    1ad4:	7805883a 	mov	r2,r15
    1ad8:	dc800217 	ldw	r18,8(sp)
    1adc:	dc400117 	ldw	r17,4(sp)
    1ae0:	dc000017 	ldw	r16,0(sp)
    1ae4:	dec00304 	addi	sp,sp,12
    1ae8:	f800283a 	ret

00001aec <__clzsi2>:
    1aec:	00bfffd4 	movui	r2,65535
    1af0:	11000e36 	bltu	r2,r4,1b2c <__clzsi2+0x40>
    1af4:	00803fc4 	movi	r2,255
    1af8:	01400204 	movi	r5,8
    1afc:	0007883a 	mov	r3,zero
    1b00:	11001036 	bltu	r2,r4,1b44 <__clzsi2+0x58>
    1b04:	000b883a 	mov	r5,zero
    1b08:	20c6d83a 	srl	r3,r4,r3
    1b0c:	00800074 	movhi	r2,1
    1b10:	109eb804 	addi	r2,r2,31456
    1b14:	1887883a 	add	r3,r3,r2
    1b18:	18800003 	ldbu	r2,0(r3)
    1b1c:	00c00804 	movi	r3,32
    1b20:	2885883a 	add	r2,r5,r2
    1b24:	1885c83a 	sub	r2,r3,r2
    1b28:	f800283a 	ret
    1b2c:	01400404 	movi	r5,16
    1b30:	00804034 	movhi	r2,256
    1b34:	10bfffc4 	addi	r2,r2,-1
    1b38:	2807883a 	mov	r3,r5
    1b3c:	113ff22e 	bgeu	r2,r4,1b08 <__clzsi2+0x1c>
    1b40:	01400604 	movi	r5,24
    1b44:	2807883a 	mov	r3,r5
    1b48:	20c6d83a 	srl	r3,r4,r3
    1b4c:	00800074 	movhi	r2,1
    1b50:	109eb804 	addi	r2,r2,31456
    1b54:	1887883a 	add	r3,r3,r2
    1b58:	18800003 	ldbu	r2,0(r3)
    1b5c:	00c00804 	movi	r3,32
    1b60:	2885883a 	add	r2,r5,r2
    1b64:	1885c83a 	sub	r2,r3,r2
    1b68:	f800283a 	ret

00001b6c <__pack_f>:
    1b6c:	20c00017 	ldw	r3,0(r4)
    1b70:	01c00044 	movi	r7,1
    1b74:	21800317 	ldw	r6,12(r4)
    1b78:	21400117 	ldw	r5,4(r4)
    1b7c:	38c02d2e 	bgeu	r7,r3,1c34 <__pack_f+0xc8>
    1b80:	00800104 	movi	r2,4
    1b84:	18802826 	beq	r3,r2,1c28 <__pack_f+0xbc>
    1b88:	00800084 	movi	r2,2
    1b8c:	18800126 	beq	r3,r2,1b94 <__pack_f+0x28>
    1b90:	3000101e 	bne	r6,zero,1bd4 <__pack_f+0x68>
    1b94:	000d883a 	mov	r6,zero
    1b98:	0007883a 	mov	r3,zero
    1b9c:	19003fcc 	andi	r4,r3,255
    1ba0:	200895fa 	slli	r4,r4,23
    1ba4:	00c02034 	movhi	r3,128
    1ba8:	18ffffc4 	addi	r3,r3,-1
    1bac:	30c6703a 	and	r3,r6,r3
    1bb0:	10a0002c 	andhi	r2,r2,32768
    1bb4:	10c4b03a 	or	r2,r2,r3
    1bb8:	280a97fa 	slli	r5,r5,31
    1bbc:	1104b03a 	or	r2,r2,r4
    1bc0:	00e00034 	movhi	r3,32768
    1bc4:	18ffffc4 	addi	r3,r3,-1
    1bc8:	10c4703a 	and	r2,r2,r3
    1bcc:	1144b03a 	or	r2,r2,r5
    1bd0:	f800283a 	ret
    1bd4:	21000217 	ldw	r4,8(r4)
    1bd8:	00bfe084 	movi	r2,-126
    1bdc:	20801b16 	blt	r4,r2,1c4c <__pack_f+0xe0>
    1be0:	00801fc4 	movi	r2,127
    1be4:	11001016 	blt	r2,r4,1c28 <__pack_f+0xbc>
    1be8:	308e703a 	and	r7,r6,r2
    1bec:	2087883a 	add	r3,r4,r2
    1bf0:	00801004 	movi	r2,64
    1bf4:	38800526 	beq	r7,r2,1c0c <__pack_f+0xa0>
    1bf8:	31800fc4 	addi	r6,r6,63
    1bfc:	30000716 	blt	r6,zero,1c1c <__pack_f+0xb0>
    1c00:	300490ba 	slli	r2,r6,2
    1c04:	100cd27a 	srli	r6,r2,9
    1c08:	003fe406 	br	1b9c <__pack_f+0x30>
    1c0c:	3080200c 	andi	r2,r6,128
    1c10:	103ffa26 	beq	r2,zero,1bfc <__pack_f+0x90>
    1c14:	31cd883a 	add	r6,r6,r7
    1c18:	003ff806 	br	1bfc <__pack_f+0x90>
    1c1c:	300cd07a 	srli	r6,r6,1
    1c20:	18c00044 	addi	r3,r3,1
    1c24:	003ff606 	br	1c00 <__pack_f+0x94>
    1c28:	000d883a 	mov	r6,zero
    1c2c:	00ffffc4 	movi	r3,-1
    1c30:	003fda06 	br	1b9c <__pack_f+0x30>
    1c34:	31800434 	orhi	r6,r6,16
    1c38:	00802034 	movhi	r2,128
    1c3c:	10bfffc4 	addi	r2,r2,-1
    1c40:	308c703a 	and	r6,r6,r2
    1c44:	00ffffc4 	movi	r3,-1
    1c48:	003fd406 	br	1b9c <__pack_f+0x30>
    1c4c:	1109c83a 	sub	r4,r2,r4
    1c50:	00800644 	movi	r2,25
    1c54:	11001216 	blt	r2,r4,1ca0 <__pack_f+0x134>
    1c58:	3904983a 	sll	r2,r7,r4
    1c5c:	3106d83a 	srl	r3,r6,r4
    1c60:	10bfffc4 	addi	r2,r2,-1
    1c64:	3084703a 	and	r2,r6,r2
    1c68:	1004c03a 	cmpne	r2,r2,zero
    1c6c:	1886b03a 	or	r3,r3,r2
    1c70:	19001fcc 	andi	r4,r3,127
    1c74:	00801004 	movi	r2,64
    1c78:	20800c26 	beq	r4,r2,1cac <__pack_f+0x140>
    1c7c:	18c00fc4 	addi	r3,r3,63
    1c80:	00900034 	movhi	r2,16384
    1c84:	10bfffc4 	addi	r2,r2,-1
    1c88:	180cd1fa 	srli	r6,r3,7
    1c8c:	10c7803a 	cmpltu	r3,r2,r3
    1c90:	00802034 	movhi	r2,128
    1c94:	10bfffc4 	addi	r2,r2,-1
    1c98:	308c703a 	and	r6,r6,r2
    1c9c:	003fbf06 	br	1b9c <__pack_f+0x30>
    1ca0:	0007883a 	mov	r3,zero
    1ca4:	000d883a 	mov	r6,zero
    1ca8:	003ff906 	br	1c90 <__pack_f+0x124>
    1cac:	1880200c 	andi	r2,r3,128
    1cb0:	10000126 	beq	r2,zero,1cb8 <__pack_f+0x14c>
    1cb4:	1907883a 	add	r3,r3,r4
    1cb8:	180cd1fa 	srli	r6,r3,7
    1cbc:	00900034 	movhi	r2,16384
    1cc0:	10bfffc4 	addi	r2,r2,-1
    1cc4:	10c7803a 	cmpltu	r3,r2,r3
    1cc8:	003ff106 	br	1c90 <__pack_f+0x124>

00001ccc <__unpack_f>:
    1ccc:	21800017 	ldw	r6,0(r4)
    1cd0:	00c02034 	movhi	r3,128
    1cd4:	18ffffc4 	addi	r3,r3,-1
    1cd8:	3004d5fa 	srli	r2,r6,23
    1cdc:	3008d7fa 	srli	r4,r6,31
    1ce0:	30ce703a 	and	r7,r6,r3
    1ce4:	10c03fcc 	andi	r3,r2,255
    1ce8:	29000115 	stw	r4,4(r5)
    1cec:	1800131e 	bne	r3,zero,1d3c <__unpack_f+0x70>
    1cf0:	38000f26 	beq	r7,zero,1d30 <__unpack_f+0x64>
    1cf4:	380691fa 	slli	r3,r7,7
    1cf8:	01bfe084 	movi	r6,-126
    1cfc:	008000c4 	movi	r2,3
    1d00:	01100034 	movhi	r4,16384
    1d04:	213fffc4 	addi	r4,r4,-1
    1d08:	28800015 	stw	r2,0(r5)
    1d0c:	29800215 	stw	r6,8(r5)
    1d10:	20c00536 	bltu	r4,r3,1d28 <__unpack_f+0x5c>
    1d14:	3005883a 	mov	r2,r6
    1d18:	18c7883a 	add	r3,r3,r3
    1d1c:	10bfffc4 	addi	r2,r2,-1
    1d20:	20fffd2e 	bgeu	r4,r3,1d18 <__unpack_f+0x4c>
    1d24:	28800215 	stw	r2,8(r5)
    1d28:	28c00315 	stw	r3,12(r5)
    1d2c:	f800283a 	ret
    1d30:	00800084 	movi	r2,2
    1d34:	28800015 	stw	r2,0(r5)
    1d38:	f800283a 	ret
    1d3c:	00803fc4 	movi	r2,255
    1d40:	18800826 	beq	r3,r2,1d64 <__unpack_f+0x98>
    1d44:	380491fa 	slli	r2,r7,7
    1d48:	18ffe044 	addi	r3,r3,-127
    1d4c:	28c00215 	stw	r3,8(r5)
    1d50:	10900034 	orhi	r2,r2,16384
    1d54:	28800315 	stw	r2,12(r5)
    1d58:	008000c4 	movi	r2,3
    1d5c:	28800015 	stw	r2,0(r5)
    1d60:	f800283a 	ret
    1d64:	3800031e 	bne	r7,zero,1d74 <__unpack_f+0xa8>
    1d68:	00800104 	movi	r2,4
    1d6c:	28800015 	stw	r2,0(r5)
    1d70:	f800283a 	ret
    1d74:	3080042c 	andhi	r2,r6,16
    1d78:	10000426 	beq	r2,zero,1d8c <__unpack_f+0xc0>
    1d7c:	00800044 	movi	r2,1
    1d80:	28800015 	stw	r2,0(r5)
    1d84:	29c00315 	stw	r7,12(r5)
    1d88:	f800283a 	ret
    1d8c:	28000015 	stw	zero,0(r5)
    1d90:	003ffc06 	br	1d84 <__unpack_f+0xb8>

00001d94 <__fpcmp_parts_f>:
    1d94:	21800017 	ldw	r6,0(r4)
    1d98:	00c00044 	movi	r3,1
    1d9c:	19800a2e 	bgeu	r3,r6,1dc8 <__fpcmp_parts_f+0x34>
    1da0:	28800017 	ldw	r2,0(r5)
    1da4:	1880082e 	bgeu	r3,r2,1dc8 <__fpcmp_parts_f+0x34>
    1da8:	00c00104 	movi	r3,4
    1dac:	30c01e26 	beq	r6,r3,1e28 <__fpcmp_parts_f+0x94>
    1db0:	10c01a26 	beq	r2,r3,1e1c <__fpcmp_parts_f+0x88>
    1db4:	00c00084 	movi	r3,2
    1db8:	30c00526 	beq	r6,r3,1dd0 <__fpcmp_parts_f+0x3c>
    1dbc:	10c0071e 	bne	r2,r3,1ddc <__fpcmp_parts_f+0x48>
    1dc0:	20800117 	ldw	r2,4(r4)
    1dc4:	1000091e 	bne	r2,zero,1dec <__fpcmp_parts_f+0x58>
    1dc8:	00800044 	movi	r2,1
    1dcc:	f800283a 	ret
    1dd0:	10c0121e 	bne	r2,r3,1e1c <__fpcmp_parts_f+0x88>
    1dd4:	0005883a 	mov	r2,zero
    1dd8:	f800283a 	ret
    1ddc:	20c00117 	ldw	r3,4(r4)
    1de0:	28800117 	ldw	r2,4(r5)
    1de4:	18800326 	beq	r3,r2,1df4 <__fpcmp_parts_f+0x60>
    1de8:	183ff726 	beq	r3,zero,1dc8 <__fpcmp_parts_f+0x34>
    1dec:	00bfffc4 	movi	r2,-1
    1df0:	f800283a 	ret
    1df4:	21800217 	ldw	r6,8(r4)
    1df8:	28800217 	ldw	r2,8(r5)
    1dfc:	11bffa16 	blt	r2,r6,1de8 <__fpcmp_parts_f+0x54>
    1e00:	30800416 	blt	r6,r2,1e14 <__fpcmp_parts_f+0x80>
    1e04:	21000317 	ldw	r4,12(r4)
    1e08:	29400317 	ldw	r5,12(r5)
    1e0c:	293ff636 	bltu	r5,r4,1de8 <__fpcmp_parts_f+0x54>
    1e10:	217ff02e 	bgeu	r4,r5,1dd4 <__fpcmp_parts_f+0x40>
    1e14:	183fec1e 	bne	r3,zero,1dc8 <__fpcmp_parts_f+0x34>
    1e18:	003ff406 	br	1dec <__fpcmp_parts_f+0x58>
    1e1c:	28800117 	ldw	r2,4(r5)
    1e20:	103fe91e 	bne	r2,zero,1dc8 <__fpcmp_parts_f+0x34>
    1e24:	003ff106 	br	1dec <__fpcmp_parts_f+0x58>
    1e28:	11bfe51e 	bne	r2,r6,1dc0 <__fpcmp_parts_f+0x2c>
    1e2c:	28c00117 	ldw	r3,4(r5)
    1e30:	20800117 	ldw	r2,4(r4)
    1e34:	1885c83a 	sub	r2,r3,r2
    1e38:	f800283a 	ret

00001e3c <__pack_d>:
    1e3c:	20c00017 	ldw	r3,0(r4)
    1e40:	defffd04 	addi	sp,sp,-12
    1e44:	dc000015 	stw	r16,0(sp)
    1e48:	dc800215 	stw	r18,8(sp)
    1e4c:	dc400115 	stw	r17,4(sp)
    1e50:	00800044 	movi	r2,1
    1e54:	22000317 	ldw	r8,12(r4)
    1e58:	001f883a 	mov	r15,zero
    1e5c:	22400417 	ldw	r9,16(r4)
    1e60:	24000117 	ldw	r16,4(r4)
    1e64:	10c0552e 	bgeu	r2,r3,1fbc <__pack_d+0x180>
    1e68:	00800104 	movi	r2,4
    1e6c:	18804f26 	beq	r3,r2,1fac <__pack_d+0x170>
    1e70:	00800084 	movi	r2,2
    1e74:	18800226 	beq	r3,r2,1e80 <__pack_d+0x44>
    1e78:	4244b03a 	or	r2,r8,r9
    1e7c:	10001a1e 	bne	r2,zero,1ee8 <__pack_d+0xac>
    1e80:	000d883a 	mov	r6,zero
    1e84:	000f883a 	mov	r7,zero
    1e88:	0011883a 	mov	r8,zero
    1e8c:	00800434 	movhi	r2,16
    1e90:	10bfffc4 	addi	r2,r2,-1
    1e94:	301d883a 	mov	r14,r6
    1e98:	3884703a 	and	r2,r7,r2
    1e9c:	400a953a 	slli	r5,r8,20
    1ea0:	79bffc2c 	andhi	r6,r15,65520
    1ea4:	308cb03a 	or	r6,r6,r2
    1ea8:	00e00434 	movhi	r3,32784
    1eac:	18ffffc4 	addi	r3,r3,-1
    1eb0:	800497fa 	slli	r2,r16,31
    1eb4:	30c6703a 	and	r3,r6,r3
    1eb8:	1946b03a 	or	r3,r3,r5
    1ebc:	01600034 	movhi	r5,32768
    1ec0:	297fffc4 	addi	r5,r5,-1
    1ec4:	194a703a 	and	r5,r3,r5
    1ec8:	288ab03a 	or	r5,r5,r2
    1ecc:	2807883a 	mov	r3,r5
    1ed0:	7005883a 	mov	r2,r14
    1ed4:	dc800217 	ldw	r18,8(sp)
    1ed8:	dc400117 	ldw	r17,4(sp)
    1edc:	dc000017 	ldw	r16,0(sp)
    1ee0:	dec00304 	addi	sp,sp,12
    1ee4:	f800283a 	ret
    1ee8:	21000217 	ldw	r4,8(r4)
    1eec:	00bf0084 	movi	r2,-1022
    1ef0:	20803f16 	blt	r4,r2,1ff0 <__pack_d+0x1b4>
    1ef4:	0080ffc4 	movi	r2,1023
    1ef8:	11002c16 	blt	r2,r4,1fac <__pack_d+0x170>
    1efc:	00803fc4 	movi	r2,255
    1f00:	408c703a 	and	r6,r8,r2
    1f04:	00802004 	movi	r2,128
    1f08:	0007883a 	mov	r3,zero
    1f0c:	000f883a 	mov	r7,zero
    1f10:	2280ffc4 	addi	r10,r4,1023
    1f14:	30801e26 	beq	r6,r2,1f90 <__pack_d+0x154>
    1f18:	00801fc4 	movi	r2,127
    1f1c:	4089883a 	add	r4,r8,r2
    1f20:	220d803a 	cmpltu	r6,r4,r8
    1f24:	324d883a 	add	r6,r6,r9
    1f28:	2011883a 	mov	r8,r4
    1f2c:	3013883a 	mov	r9,r6
    1f30:	00880034 	movhi	r2,8192
    1f34:	10bfffc4 	addi	r2,r2,-1
    1f38:	12400d36 	bltu	r2,r9,1f70 <__pack_d+0x134>
    1f3c:	4804963a 	slli	r2,r9,24
    1f40:	400cd23a 	srli	r6,r8,8
    1f44:	480ed23a 	srli	r7,r9,8
    1f48:	013fffc4 	movi	r4,-1
    1f4c:	118cb03a 	or	r6,r2,r6
    1f50:	01400434 	movhi	r5,16
    1f54:	297fffc4 	addi	r5,r5,-1
    1f58:	3104703a 	and	r2,r6,r4
    1f5c:	3946703a 	and	r3,r7,r5
    1f60:	5201ffcc 	andi	r8,r10,2047
    1f64:	100d883a 	mov	r6,r2
    1f68:	180f883a 	mov	r7,r3
    1f6c:	003fc706 	br	1e8c <__pack_d+0x50>
    1f70:	480897fa 	slli	r4,r9,31
    1f74:	4004d07a 	srli	r2,r8,1
    1f78:	4806d07a 	srli	r3,r9,1
    1f7c:	52800044 	addi	r10,r10,1
    1f80:	2084b03a 	or	r2,r4,r2
    1f84:	1011883a 	mov	r8,r2
    1f88:	1813883a 	mov	r9,r3
    1f8c:	003feb06 	br	1f3c <__pack_d+0x100>
    1f90:	383fe11e 	bne	r7,zero,1f18 <__pack_d+0xdc>
    1f94:	01004004 	movi	r4,256
    1f98:	4104703a 	and	r2,r8,r4
    1f9c:	10c4b03a 	or	r2,r2,r3
    1fa0:	103fe326 	beq	r2,zero,1f30 <__pack_d+0xf4>
    1fa4:	3005883a 	mov	r2,r6
    1fa8:	003fdc06 	br	1f1c <__pack_d+0xe0>
    1fac:	000d883a 	mov	r6,zero
    1fb0:	000f883a 	mov	r7,zero
    1fb4:	0201ffc4 	movi	r8,2047
    1fb8:	003fb406 	br	1e8c <__pack_d+0x50>
    1fbc:	0005883a 	mov	r2,zero
    1fc0:	00c00234 	movhi	r3,8
    1fc4:	408cb03a 	or	r6,r8,r2
    1fc8:	48ceb03a 	or	r7,r9,r3
    1fcc:	013fffc4 	movi	r4,-1
    1fd0:	01400434 	movhi	r5,16
    1fd4:	297fffc4 	addi	r5,r5,-1
    1fd8:	3104703a 	and	r2,r6,r4
    1fdc:	3946703a 	and	r3,r7,r5
    1fe0:	100d883a 	mov	r6,r2
    1fe4:	180f883a 	mov	r7,r3
    1fe8:	0201ffc4 	movi	r8,2047
    1fec:	003fa706 	br	1e8c <__pack_d+0x50>
    1ff0:	1109c83a 	sub	r4,r2,r4
    1ff4:	00800e04 	movi	r2,56
    1ff8:	11004316 	blt	r2,r4,2108 <__pack_d+0x2cc>
    1ffc:	21fff804 	addi	r7,r4,-32
    2000:	38004516 	blt	r7,zero,2118 <__pack_d+0x2dc>
    2004:	49d8d83a 	srl	r12,r9,r7
    2008:	001b883a 	mov	r13,zero
    200c:	0023883a 	mov	r17,zero
    2010:	01400044 	movi	r5,1
    2014:	0025883a 	mov	r18,zero
    2018:	38004716 	blt	r7,zero,2138 <__pack_d+0x2fc>
    201c:	29d6983a 	sll	r11,r5,r7
    2020:	0015883a 	mov	r10,zero
    2024:	00bfffc4 	movi	r2,-1
    2028:	5089883a 	add	r4,r10,r2
    202c:	588b883a 	add	r5,r11,r2
    2030:	228d803a 	cmpltu	r6,r4,r10
    2034:	314b883a 	add	r5,r6,r5
    2038:	4104703a 	and	r2,r8,r4
    203c:	4946703a 	and	r3,r9,r5
    2040:	10c4b03a 	or	r2,r2,r3
    2044:	10000226 	beq	r2,zero,2050 <__pack_d+0x214>
    2048:	04400044 	movi	r17,1
    204c:	0025883a 	mov	r18,zero
    2050:	00803fc4 	movi	r2,255
    2054:	644eb03a 	or	r7,r12,r17
    2058:	3892703a 	and	r9,r7,r2
    205c:	00802004 	movi	r2,128
    2060:	6c90b03a 	or	r8,r13,r18
    2064:	0015883a 	mov	r10,zero
    2068:	48801626 	beq	r9,r2,20c4 <__pack_d+0x288>
    206c:	01001fc4 	movi	r4,127
    2070:	3905883a 	add	r2,r7,r4
    2074:	11cd803a 	cmpltu	r6,r2,r7
    2078:	320d883a 	add	r6,r6,r8
    207c:	100f883a 	mov	r7,r2
    2080:	00840034 	movhi	r2,4096
    2084:	10bfffc4 	addi	r2,r2,-1
    2088:	3011883a 	mov	r8,r6
    208c:	0007883a 	mov	r3,zero
    2090:	11801b36 	bltu	r2,r6,2100 <__pack_d+0x2c4>
    2094:	4004963a 	slli	r2,r8,24
    2098:	3808d23a 	srli	r4,r7,8
    209c:	400ad23a 	srli	r5,r8,8
    20a0:	1813883a 	mov	r9,r3
    20a4:	1108b03a 	or	r4,r2,r4
    20a8:	00bfffc4 	movi	r2,-1
    20ac:	00c00434 	movhi	r3,16
    20b0:	18ffffc4 	addi	r3,r3,-1
    20b4:	208c703a 	and	r6,r4,r2
    20b8:	28ce703a 	and	r7,r5,r3
    20bc:	4a01ffcc 	andi	r8,r9,2047
    20c0:	003f7206 	br	1e8c <__pack_d+0x50>
    20c4:	503fe91e 	bne	r10,zero,206c <__pack_d+0x230>
    20c8:	01004004 	movi	r4,256
    20cc:	3904703a 	and	r2,r7,r4
    20d0:	0007883a 	mov	r3,zero
    20d4:	10c4b03a 	or	r2,r2,r3
    20d8:	10000626 	beq	r2,zero,20f4 <__pack_d+0x2b8>
    20dc:	3a45883a 	add	r2,r7,r9
    20e0:	11cd803a 	cmpltu	r6,r2,r7
    20e4:	320d883a 	add	r6,r6,r8
    20e8:	100f883a 	mov	r7,r2
    20ec:	3011883a 	mov	r8,r6
    20f0:	0007883a 	mov	r3,zero
    20f4:	00840034 	movhi	r2,4096
    20f8:	10bfffc4 	addi	r2,r2,-1
    20fc:	123fe52e 	bgeu	r2,r8,2094 <__pack_d+0x258>
    2100:	00c00044 	movi	r3,1
    2104:	003fe306 	br	2094 <__pack_d+0x258>
    2108:	0009883a 	mov	r4,zero
    210c:	0013883a 	mov	r9,zero
    2110:	000b883a 	mov	r5,zero
    2114:	003fe406 	br	20a8 <__pack_d+0x26c>
    2118:	4a47883a 	add	r3,r9,r9
    211c:	008007c4 	movi	r2,31
    2120:	1105c83a 	sub	r2,r2,r4
    2124:	1886983a 	sll	r3,r3,r2
    2128:	4118d83a 	srl	r12,r8,r4
    212c:	491ad83a 	srl	r13,r9,r4
    2130:	1b18b03a 	or	r12,r3,r12
    2134:	003fb506 	br	200c <__pack_d+0x1d0>
    2138:	2806d07a 	srli	r3,r5,1
    213c:	008007c4 	movi	r2,31
    2140:	1105c83a 	sub	r2,r2,r4
    2144:	1896d83a 	srl	r11,r3,r2
    2148:	2914983a 	sll	r10,r5,r4
    214c:	003fb506 	br	2024 <__pack_d+0x1e8>

00002150 <__unpack_d>:
    2150:	20c00117 	ldw	r3,4(r4)
    2154:	22400017 	ldw	r9,0(r4)
    2158:	00800434 	movhi	r2,16
    215c:	10bfffc4 	addi	r2,r2,-1
    2160:	1808d53a 	srli	r4,r3,20
    2164:	180cd7fa 	srli	r6,r3,31
    2168:	1894703a 	and	r10,r3,r2
    216c:	2201ffcc 	andi	r8,r4,2047
    2170:	281b883a 	mov	r13,r5
    2174:	4817883a 	mov	r11,r9
    2178:	29800115 	stw	r6,4(r5)
    217c:	5019883a 	mov	r12,r10
    2180:	40001e1e 	bne	r8,zero,21fc <__unpack_d+0xac>
    2184:	4a84b03a 	or	r2,r9,r10
    2188:	10001926 	beq	r2,zero,21f0 <__unpack_d+0xa0>
    218c:	4804d63a 	srli	r2,r9,24
    2190:	500c923a 	slli	r6,r10,8
    2194:	013f0084 	movi	r4,-1022
    2198:	00c40034 	movhi	r3,4096
    219c:	18ffffc4 	addi	r3,r3,-1
    21a0:	118cb03a 	or	r6,r2,r6
    21a4:	008000c4 	movi	r2,3
    21a8:	480a923a 	slli	r5,r9,8
    21ac:	68800015 	stw	r2,0(r13)
    21b0:	69000215 	stw	r4,8(r13)
    21b4:	19800b36 	bltu	r3,r6,21e4 <__unpack_d+0x94>
    21b8:	200f883a 	mov	r7,r4
    21bc:	1811883a 	mov	r8,r3
    21c0:	2945883a 	add	r2,r5,r5
    21c4:	1149803a 	cmpltu	r4,r2,r5
    21c8:	3187883a 	add	r3,r6,r6
    21cc:	20c9883a 	add	r4,r4,r3
    21d0:	100b883a 	mov	r5,r2
    21d4:	200d883a 	mov	r6,r4
    21d8:	39ffffc4 	addi	r7,r7,-1
    21dc:	413ff82e 	bgeu	r8,r4,21c0 <__unpack_d+0x70>
    21e0:	69c00215 	stw	r7,8(r13)
    21e4:	69800415 	stw	r6,16(r13)
    21e8:	69400315 	stw	r5,12(r13)
    21ec:	f800283a 	ret
    21f0:	00800084 	movi	r2,2
    21f4:	28800015 	stw	r2,0(r5)
    21f8:	f800283a 	ret
    21fc:	0081ffc4 	movi	r2,2047
    2200:	40800f26 	beq	r8,r2,2240 <__unpack_d+0xf0>
    2204:	480cd63a 	srli	r6,r9,24
    2208:	5006923a 	slli	r3,r10,8
    220c:	4804923a 	slli	r2,r9,8
    2210:	0009883a 	mov	r4,zero
    2214:	30c6b03a 	or	r3,r6,r3
    2218:	01440034 	movhi	r5,4096
    221c:	110cb03a 	or	r6,r2,r4
    2220:	423f0044 	addi	r8,r8,-1023
    2224:	194eb03a 	or	r7,r3,r5
    2228:	008000c4 	movi	r2,3
    222c:	69c00415 	stw	r7,16(r13)
    2230:	6a000215 	stw	r8,8(r13)
    2234:	68800015 	stw	r2,0(r13)
    2238:	69800315 	stw	r6,12(r13)
    223c:	f800283a 	ret
    2240:	4a84b03a 	or	r2,r9,r10
    2244:	1000031e 	bne	r2,zero,2254 <__unpack_d+0x104>
    2248:	00800104 	movi	r2,4
    224c:	28800015 	stw	r2,0(r5)
    2250:	f800283a 	ret
    2254:	0009883a 	mov	r4,zero
    2258:	01400234 	movhi	r5,8
    225c:	4904703a 	and	r2,r9,r4
    2260:	5146703a 	and	r3,r10,r5
    2264:	10c4b03a 	or	r2,r2,r3
    2268:	10000526 	beq	r2,zero,2280 <__unpack_d+0x130>
    226c:	00800044 	movi	r2,1
    2270:	68800015 	stw	r2,0(r13)
    2274:	6b000415 	stw	r12,16(r13)
    2278:	6ac00315 	stw	r11,12(r13)
    227c:	f800283a 	ret
    2280:	68000015 	stw	zero,0(r13)
    2284:	003ffb06 	br	2274 <__unpack_d+0x124>

00002288 <printf>:
    2288:	defffb04 	addi	sp,sp,-20
    228c:	dfc00115 	stw	ra,4(sp)
    2290:	d9400215 	stw	r5,8(sp)
    2294:	d9800315 	stw	r6,12(sp)
    2298:	d9c00415 	stw	r7,16(sp)
    229c:	008000b4 	movhi	r2,2
    22a0:	10a68a04 	addi	r2,r2,-26072
    22a4:	10c00017 	ldw	r3,0(r2)
    22a8:	200b883a 	mov	r5,r4
    22ac:	d8800204 	addi	r2,sp,8
    22b0:	19000217 	ldw	r4,8(r3)
    22b4:	100d883a 	mov	r6,r2
    22b8:	d8800015 	stw	r2,0(sp)
    22bc:	000432c0 	call	432c <__vfprintf_internal>
    22c0:	dfc00117 	ldw	ra,4(sp)
    22c4:	dec00504 	addi	sp,sp,20
    22c8:	f800283a 	ret

000022cc <_printf_r>:
    22cc:	defffc04 	addi	sp,sp,-16
    22d0:	dfc00115 	stw	ra,4(sp)
    22d4:	d9800215 	stw	r6,8(sp)
    22d8:	d9c00315 	stw	r7,12(sp)
    22dc:	280d883a 	mov	r6,r5
    22e0:	21400217 	ldw	r5,8(r4)
    22e4:	d8c00204 	addi	r3,sp,8
    22e8:	180f883a 	mov	r7,r3
    22ec:	d8c00015 	stw	r3,0(sp)
    22f0:	00024800 	call	2480 <___vfprintf_internal_r>
    22f4:	dfc00117 	ldw	ra,4(sp)
    22f8:	dec00404 	addi	sp,sp,16
    22fc:	f800283a 	ret

00002300 <_puts_r>:
    2300:	defff604 	addi	sp,sp,-40
    2304:	dc400715 	stw	r17,28(sp)
    2308:	2023883a 	mov	r17,r4
    230c:	2809883a 	mov	r4,r5
    2310:	dfc00915 	stw	ra,36(sp)
    2314:	dcc00815 	stw	r19,32(sp)
    2318:	2827883a 	mov	r19,r5
    231c:	00023b40 	call	23b4 <strlen>
    2320:	89400217 	ldw	r5,8(r17)
    2324:	00c00074 	movhi	r3,1
    2328:	18def804 	addi	r3,r3,31712
    232c:	01c00044 	movi	r7,1
    2330:	12000044 	addi	r8,r2,1
    2334:	d8c00515 	stw	r3,20(sp)
    2338:	d9c00615 	stw	r7,24(sp)
    233c:	d8c00304 	addi	r3,sp,12
    2340:	01c00084 	movi	r7,2
    2344:	8809883a 	mov	r4,r17
    2348:	d80d883a 	mov	r6,sp
    234c:	d8c00015 	stw	r3,0(sp)
    2350:	dcc00315 	stw	r19,12(sp)
    2354:	da000215 	stw	r8,8(sp)
    2358:	d9c00115 	stw	r7,4(sp)
    235c:	d8800415 	stw	r2,16(sp)
    2360:	00065880 	call	6588 <__sfvwrite_r>
    2364:	00ffffc4 	movi	r3,-1
    2368:	10000626 	beq	r2,zero,2384 <_puts_r+0x84>
    236c:	1805883a 	mov	r2,r3
    2370:	dfc00917 	ldw	ra,36(sp)
    2374:	dcc00817 	ldw	r19,32(sp)
    2378:	dc400717 	ldw	r17,28(sp)
    237c:	dec00a04 	addi	sp,sp,40
    2380:	f800283a 	ret
    2384:	00c00284 	movi	r3,10
    2388:	1805883a 	mov	r2,r3
    238c:	dfc00917 	ldw	ra,36(sp)
    2390:	dcc00817 	ldw	r19,32(sp)
    2394:	dc400717 	ldw	r17,28(sp)
    2398:	dec00a04 	addi	sp,sp,40
    239c:	f800283a 	ret

000023a0 <puts>:
    23a0:	008000b4 	movhi	r2,2
    23a4:	10a68a04 	addi	r2,r2,-26072
    23a8:	200b883a 	mov	r5,r4
    23ac:	11000017 	ldw	r4,0(r2)
    23b0:	00023001 	jmpi	2300 <_puts_r>

000023b4 <strlen>:
    23b4:	208000cc 	andi	r2,r4,3
    23b8:	2011883a 	mov	r8,r4
    23bc:	1000161e 	bne	r2,zero,2418 <strlen+0x64>
    23c0:	20c00017 	ldw	r3,0(r4)
    23c4:	017fbff4 	movhi	r5,65279
    23c8:	297fbfc4 	addi	r5,r5,-257
    23cc:	01e02074 	movhi	r7,32897
    23d0:	39e02004 	addi	r7,r7,-32640
    23d4:	1945883a 	add	r2,r3,r5
    23d8:	11c4703a 	and	r2,r2,r7
    23dc:	00c6303a 	nor	r3,zero,r3
    23e0:	1886703a 	and	r3,r3,r2
    23e4:	18000c1e 	bne	r3,zero,2418 <strlen+0x64>
    23e8:	280d883a 	mov	r6,r5
    23ec:	380b883a 	mov	r5,r7
    23f0:	21000104 	addi	r4,r4,4
    23f4:	20800017 	ldw	r2,0(r4)
    23f8:	1187883a 	add	r3,r2,r6
    23fc:	1946703a 	and	r3,r3,r5
    2400:	0084303a 	nor	r2,zero,r2
    2404:	10c4703a 	and	r2,r2,r3
    2408:	103ff926 	beq	r2,zero,23f0 <strlen+0x3c>
    240c:	20800007 	ldb	r2,0(r4)
    2410:	10000326 	beq	r2,zero,2420 <strlen+0x6c>
    2414:	21000044 	addi	r4,r4,1
    2418:	20800007 	ldb	r2,0(r4)
    241c:	103ffd1e 	bne	r2,zero,2414 <strlen+0x60>
    2420:	2205c83a 	sub	r2,r4,r8
    2424:	f800283a 	ret

00002428 <__sprint_r>:
    2428:	30800217 	ldw	r2,8(r6)
    242c:	defffe04 	addi	sp,sp,-8
    2430:	dc000015 	stw	r16,0(sp)
    2434:	dfc00115 	stw	ra,4(sp)
    2438:	3021883a 	mov	r16,r6
    243c:	0007883a 	mov	r3,zero
    2440:	1000061e 	bne	r2,zero,245c <__sprint_r+0x34>
    2444:	1805883a 	mov	r2,r3
    2448:	30000115 	stw	zero,4(r6)
    244c:	dfc00117 	ldw	ra,4(sp)
    2450:	dc000017 	ldw	r16,0(sp)
    2454:	dec00204 	addi	sp,sp,8
    2458:	f800283a 	ret
    245c:	00065880 	call	6588 <__sfvwrite_r>
    2460:	1007883a 	mov	r3,r2
    2464:	1805883a 	mov	r2,r3
    2468:	80000115 	stw	zero,4(r16)
    246c:	80000215 	stw	zero,8(r16)
    2470:	dfc00117 	ldw	ra,4(sp)
    2474:	dc000017 	ldw	r16,0(sp)
    2478:	dec00204 	addi	sp,sp,8
    247c:	f800283a 	ret

00002480 <___vfprintf_internal_r>:
    2480:	defea404 	addi	sp,sp,-1392
    2484:	dd815815 	stw	r22,1376(sp)
    2488:	dc015215 	stw	r16,1352(sp)
    248c:	d9c15115 	stw	r7,1348(sp)
    2490:	dfc15b15 	stw	ra,1388(sp)
    2494:	df015a15 	stw	fp,1384(sp)
    2498:	ddc15915 	stw	r23,1380(sp)
    249c:	dd415715 	stw	r21,1372(sp)
    24a0:	dd015615 	stw	r20,1368(sp)
    24a4:	dcc15515 	stw	r19,1364(sp)
    24a8:	dc815415 	stw	r18,1360(sp)
    24ac:	dc415315 	stw	r17,1356(sp)
    24b0:	282d883a 	mov	r22,r5
    24b4:	3021883a 	mov	r16,r6
    24b8:	d9014f15 	stw	r4,1340(sp)
    24bc:	0006bac0 	call	6bac <_localeconv_r>
    24c0:	10800017 	ldw	r2,0(r2)
    24c4:	d9c15117 	ldw	r7,1348(sp)
    24c8:	d8814915 	stw	r2,1316(sp)
    24cc:	d8814f17 	ldw	r2,1340(sp)
    24d0:	10000226 	beq	r2,zero,24dc <___vfprintf_internal_r+0x5c>
    24d4:	10800e17 	ldw	r2,56(r2)
    24d8:	10020d26 	beq	r2,zero,2d10 <___vfprintf_internal_r+0x890>
    24dc:	b080030b 	ldhu	r2,12(r22)
    24e0:	1080020c 	andi	r2,r2,8
    24e4:	10020e26 	beq	r2,zero,2d20 <___vfprintf_internal_r+0x8a0>
    24e8:	b0800417 	ldw	r2,16(r22)
    24ec:	10020c26 	beq	r2,zero,2d20 <___vfprintf_internal_r+0x8a0>
    24f0:	b200030b 	ldhu	r8,12(r22)
    24f4:	00800284 	movi	r2,10
    24f8:	40c0068c 	andi	r3,r8,26
    24fc:	18802f1e 	bne	r3,r2,25bc <___vfprintf_internal_r+0x13c>
    2500:	b080038f 	ldh	r2,14(r22)
    2504:	10002d16 	blt	r2,zero,25bc <___vfprintf_internal_r+0x13c>
    2508:	b240038b 	ldhu	r9,14(r22)
    250c:	b2800717 	ldw	r10,28(r22)
    2510:	b2c00917 	ldw	r11,36(r22)
    2514:	d9014f17 	ldw	r4,1340(sp)
    2518:	dc402904 	addi	r17,sp,164
    251c:	d8804004 	addi	r2,sp,256
    2520:	00c10004 	movi	r3,1024
    2524:	423fff4c 	andi	r8,r8,65533
    2528:	800d883a 	mov	r6,r16
    252c:	880b883a 	mov	r5,r17
    2530:	da002c0d 	sth	r8,176(sp)
    2534:	da402c8d 	sth	r9,178(sp)
    2538:	da803015 	stw	r10,192(sp)
    253c:	dac03215 	stw	r11,200(sp)
    2540:	d8802d15 	stw	r2,180(sp)
    2544:	d8c02e15 	stw	r3,184(sp)
    2548:	d8802915 	stw	r2,164(sp)
    254c:	d8c02b15 	stw	r3,172(sp)
    2550:	d8002f15 	stw	zero,188(sp)
    2554:	00024800 	call	2480 <___vfprintf_internal_r>
    2558:	d8814b15 	stw	r2,1324(sp)
    255c:	10000416 	blt	r2,zero,2570 <___vfprintf_internal_r+0xf0>
    2560:	d9014f17 	ldw	r4,1340(sp)
    2564:	880b883a 	mov	r5,r17
    2568:	0005c580 	call	5c58 <_fflush_r>
    256c:	1002321e 	bne	r2,zero,2e38 <___vfprintf_internal_r+0x9b8>
    2570:	d8802c0b 	ldhu	r2,176(sp)
    2574:	1080100c 	andi	r2,r2,64
    2578:	10000326 	beq	r2,zero,2588 <___vfprintf_internal_r+0x108>
    257c:	b080030b 	ldhu	r2,12(r22)
    2580:	10801014 	ori	r2,r2,64
    2584:	b080030d 	sth	r2,12(r22)
    2588:	d8814b17 	ldw	r2,1324(sp)
    258c:	dfc15b17 	ldw	ra,1388(sp)
    2590:	df015a17 	ldw	fp,1384(sp)
    2594:	ddc15917 	ldw	r23,1380(sp)
    2598:	dd815817 	ldw	r22,1376(sp)
    259c:	dd415717 	ldw	r21,1372(sp)
    25a0:	dd015617 	ldw	r20,1368(sp)
    25a4:	dcc15517 	ldw	r19,1364(sp)
    25a8:	dc815417 	ldw	r18,1360(sp)
    25ac:	dc415317 	ldw	r17,1356(sp)
    25b0:	dc015217 	ldw	r16,1352(sp)
    25b4:	dec15c04 	addi	sp,sp,1392
    25b8:	f800283a 	ret
    25bc:	0005883a 	mov	r2,zero
    25c0:	0007883a 	mov	r3,zero
    25c4:	dd401904 	addi	r21,sp,100
    25c8:	d8814215 	stw	r2,1288(sp)
    25cc:	802f883a 	mov	r23,r16
    25d0:	d8c14315 	stw	r3,1292(sp)
    25d4:	d8014b15 	stw	zero,1324(sp)
    25d8:	d8014815 	stw	zero,1312(sp)
    25dc:	d8014415 	stw	zero,1296(sp)
    25e0:	d8014715 	stw	zero,1308(sp)
    25e4:	dd400c15 	stw	r21,48(sp)
    25e8:	d8000e15 	stw	zero,56(sp)
    25ec:	d8000d15 	stw	zero,52(sp)
    25f0:	b8800007 	ldb	r2,0(r23)
    25f4:	10001926 	beq	r2,zero,265c <___vfprintf_internal_r+0x1dc>
    25f8:	00c00944 	movi	r3,37
    25fc:	10c01726 	beq	r2,r3,265c <___vfprintf_internal_r+0x1dc>
    2600:	b821883a 	mov	r16,r23
    2604:	00000106 	br	260c <___vfprintf_internal_r+0x18c>
    2608:	10c00326 	beq	r2,r3,2618 <___vfprintf_internal_r+0x198>
    260c:	84000044 	addi	r16,r16,1
    2610:	80800007 	ldb	r2,0(r16)
    2614:	103ffc1e 	bne	r2,zero,2608 <___vfprintf_internal_r+0x188>
    2618:	85e7c83a 	sub	r19,r16,r23
    261c:	98000e26 	beq	r19,zero,2658 <___vfprintf_internal_r+0x1d8>
    2620:	dc800e17 	ldw	r18,56(sp)
    2624:	dc400d17 	ldw	r17,52(sp)
    2628:	008001c4 	movi	r2,7
    262c:	94e5883a 	add	r18,r18,r19
    2630:	8c400044 	addi	r17,r17,1
    2634:	adc00015 	stw	r23,0(r21)
    2638:	dc800e15 	stw	r18,56(sp)
    263c:	acc00115 	stw	r19,4(r21)
    2640:	dc400d15 	stw	r17,52(sp)
    2644:	14428b16 	blt	r2,r17,3074 <___vfprintf_internal_r+0xbf4>
    2648:	ad400204 	addi	r21,r21,8
    264c:	d9014b17 	ldw	r4,1324(sp)
    2650:	24c9883a 	add	r4,r4,r19
    2654:	d9014b15 	stw	r4,1324(sp)
    2658:	802f883a 	mov	r23,r16
    265c:	b8800007 	ldb	r2,0(r23)
    2660:	10013c26 	beq	r2,zero,2b54 <___vfprintf_internal_r+0x6d4>
    2664:	bdc00044 	addi	r23,r23,1
    2668:	d8000405 	stb	zero,16(sp)
    266c:	b8c00007 	ldb	r3,0(r23)
    2670:	04ffffc4 	movi	r19,-1
    2674:	d8014c15 	stw	zero,1328(sp)
    2678:	d8014a15 	stw	zero,1320(sp)
    267c:	d8c14d15 	stw	r3,1332(sp)
    2680:	bdc00044 	addi	r23,r23,1
    2684:	d9414d17 	ldw	r5,1332(sp)
    2688:	00801604 	movi	r2,88
    268c:	28fff804 	addi	r3,r5,-32
    2690:	10c06036 	bltu	r2,r3,2814 <___vfprintf_internal_r+0x394>
    2694:	18c5883a 	add	r2,r3,r3
    2698:	1085883a 	add	r2,r2,r2
    269c:	00c00034 	movhi	r3,0
    26a0:	18c9ac04 	addi	r3,r3,9904
    26a4:	10c5883a 	add	r2,r2,r3
    26a8:	11000017 	ldw	r4,0(r2)
    26ac:	2000683a 	jmp	r4
    26b0:	00003624 	muli	zero,zero,216
    26b4:	00002814 	movui	zero,160
    26b8:	00002814 	movui	zero,160
    26bc:	00003610 	cmplti	zero,zero,216
    26c0:	00002814 	movui	zero,160
    26c4:	00002814 	movui	zero,160
    26c8:	00002814 	movui	zero,160
    26cc:	00002814 	movui	zero,160
    26d0:	00002814 	movui	zero,160
    26d4:	00002814 	movui	zero,160
    26d8:	000033f0 	cmpltui	zero,zero,207
    26dc:	00003600 	call	360 <sensorCollector+0x118>
    26e0:	00002814 	movui	zero,160
    26e4:	00003408 	cmpgei	zero,zero,208
    26e8:	0000369c 	xori	zero,zero,218
    26ec:	00002814 	movui	zero,160
    26f0:	00003688 	cmpgei	zero,zero,218
    26f4:	00003650 	cmplti	zero,zero,217
    26f8:	00003650 	cmplti	zero,zero,217
    26fc:	00003650 	cmplti	zero,zero,217
    2700:	00003650 	cmplti	zero,zero,217
    2704:	00003650 	cmplti	zero,zero,217
    2708:	00003650 	cmplti	zero,zero,217
    270c:	00003650 	cmplti	zero,zero,217
    2710:	00003650 	cmplti	zero,zero,217
    2714:	00003650 	cmplti	zero,zero,217
    2718:	00002814 	movui	zero,160
    271c:	00002814 	movui	zero,160
    2720:	00002814 	movui	zero,160
    2724:	00002814 	movui	zero,160
    2728:	00002814 	movui	zero,160
    272c:	00002814 	movui	zero,160
    2730:	00002814 	movui	zero,160
    2734:	00002814 	movui	zero,160
    2738:	00002814 	movui	zero,160
    273c:	00002814 	movui	zero,160
    2740:	00002e6c 	andhi	zero,zero,185
    2744:	000034d8 	cmpnei	zero,zero,211
    2748:	00002814 	movui	zero,160
    274c:	000034d8 	cmpnei	zero,zero,211
    2750:	00002814 	movui	zero,160
    2754:	00002814 	movui	zero,160
    2758:	00002814 	movui	zero,160
    275c:	00002814 	movui	zero,160
    2760:	0000363c 	xorhi	zero,zero,216
    2764:	00002814 	movui	zero,160
    2768:	00002814 	movui	zero,160
    276c:	00002f20 	cmpeqi	zero,zero,188
    2770:	00002814 	movui	zero,160
    2774:	00002814 	movui	zero,160
    2778:	00002814 	movui	zero,160
    277c:	00002814 	movui	zero,160
    2780:	00002814 	movui	zero,160
    2784:	00002f6c 	andhi	zero,zero,189
    2788:	00002814 	movui	zero,160
    278c:	00002814 	movui	zero,160
    2790:	0000358c 	andi	zero,zero,214
    2794:	00002814 	movui	zero,160
    2798:	00002814 	movui	zero,160
    279c:	00002814 	movui	zero,160
    27a0:	00002814 	movui	zero,160
    27a4:	00002814 	movui	zero,160
    27a8:	00002814 	movui	zero,160
    27ac:	00002814 	movui	zero,160
    27b0:	00002814 	movui	zero,160
    27b4:	00002814 	movui	zero,160
    27b8:	00002814 	movui	zero,160
    27bc:	00003560 	cmpeqi	zero,zero,213
    27c0:	00002e78 	rdprs	zero,zero,185
    27c4:	000034d8 	cmpnei	zero,zero,211
    27c8:	000034d8 	cmpnei	zero,zero,211
    27cc:	000034d8 	cmpnei	zero,zero,211
    27d0:	000034c4 	movi	zero,211
    27d4:	00002e78 	rdprs	zero,zero,185
    27d8:	00002814 	movui	zero,160
    27dc:	00002814 	movui	zero,160
    27e0:	0000344c 	andi	zero,zero,209
    27e4:	00002814 	movui	zero,160
    27e8:	0000341c 	xori	zero,zero,208
    27ec:	00002f2c 	andhi	zero,zero,188
    27f0:	0000347c 	xorhi	zero,zero,209
    27f4:	00003468 	cmpgeui	zero,zero,209
    27f8:	00002814 	movui	zero,160
    27fc:	000036f8 	rdprs	zero,zero,219
    2800:	00002814 	movui	zero,160
    2804:	00002f78 	rdprs	zero,zero,189
    2808:	00002814 	movui	zero,160
    280c:	00002814 	movui	zero,160
    2810:	000035f0 	cmpltui	zero,zero,215
    2814:	d9014d17 	ldw	r4,1332(sp)
    2818:	2000ce26 	beq	r4,zero,2b54 <___vfprintf_internal_r+0x6d4>
    281c:	01400044 	movi	r5,1
    2820:	d9800f04 	addi	r6,sp,60
    2824:	d9c14015 	stw	r7,1280(sp)
    2828:	d9414515 	stw	r5,1300(sp)
    282c:	d9814115 	stw	r6,1284(sp)
    2830:	280f883a 	mov	r7,r5
    2834:	d9000f05 	stb	r4,60(sp)
    2838:	d8000405 	stb	zero,16(sp)
    283c:	d8014615 	stw	zero,1304(sp)
    2840:	d8c14c17 	ldw	r3,1328(sp)
    2844:	1880008c 	andi	r2,r3,2
    2848:	1005003a 	cmpeq	r2,r2,zero
    284c:	d8815015 	stw	r2,1344(sp)
    2850:	1000031e 	bne	r2,zero,2860 <___vfprintf_internal_r+0x3e0>
    2854:	d9014517 	ldw	r4,1300(sp)
    2858:	21000084 	addi	r4,r4,2
    285c:	d9014515 	stw	r4,1300(sp)
    2860:	d9414c17 	ldw	r5,1328(sp)
    2864:	2940210c 	andi	r5,r5,132
    2868:	d9414e15 	stw	r5,1336(sp)
    286c:	28002d1e 	bne	r5,zero,2924 <___vfprintf_internal_r+0x4a4>
    2870:	d9814a17 	ldw	r6,1320(sp)
    2874:	d8814517 	ldw	r2,1300(sp)
    2878:	30a1c83a 	sub	r16,r6,r2
    287c:	0400290e 	bge	zero,r16,2924 <___vfprintf_internal_r+0x4a4>
    2880:	00800404 	movi	r2,16
    2884:	1404580e 	bge	r2,r16,39e8 <___vfprintf_internal_r+0x1568>
    2888:	dc800e17 	ldw	r18,56(sp)
    288c:	dc400d17 	ldw	r17,52(sp)
    2890:	1027883a 	mov	r19,r2
    2894:	07000074 	movhi	fp,1
    2898:	e71f1484 	addi	fp,fp,31826
    289c:	050001c4 	movi	r20,7
    28a0:	00000306 	br	28b0 <___vfprintf_internal_r+0x430>
    28a4:	843ffc04 	addi	r16,r16,-16
    28a8:	ad400204 	addi	r21,r21,8
    28ac:	9c00130e 	bge	r19,r16,28fc <___vfprintf_internal_r+0x47c>
    28b0:	94800404 	addi	r18,r18,16
    28b4:	8c400044 	addi	r17,r17,1
    28b8:	af000015 	stw	fp,0(r21)
    28bc:	acc00115 	stw	r19,4(r21)
    28c0:	dc800e15 	stw	r18,56(sp)
    28c4:	dc400d15 	stw	r17,52(sp)
    28c8:	a47ff60e 	bge	r20,r17,28a4 <___vfprintf_internal_r+0x424>
    28cc:	d9014f17 	ldw	r4,1340(sp)
    28d0:	b00b883a 	mov	r5,r22
    28d4:	d9800c04 	addi	r6,sp,48
    28d8:	d9c15115 	stw	r7,1348(sp)
    28dc:	00024280 	call	2428 <__sprint_r>
    28e0:	d9c15117 	ldw	r7,1348(sp)
    28e4:	10009e1e 	bne	r2,zero,2b60 <___vfprintf_internal_r+0x6e0>
    28e8:	843ffc04 	addi	r16,r16,-16
    28ec:	dc800e17 	ldw	r18,56(sp)
    28f0:	dc400d17 	ldw	r17,52(sp)
    28f4:	dd401904 	addi	r21,sp,100
    28f8:	9c3fed16 	blt	r19,r16,28b0 <___vfprintf_internal_r+0x430>
    28fc:	9425883a 	add	r18,r18,r16
    2900:	8c400044 	addi	r17,r17,1
    2904:	008001c4 	movi	r2,7
    2908:	af000015 	stw	fp,0(r21)
    290c:	ac000115 	stw	r16,4(r21)
    2910:	dc800e15 	stw	r18,56(sp)
    2914:	dc400d15 	stw	r17,52(sp)
    2918:	1441f516 	blt	r2,r17,30f0 <___vfprintf_internal_r+0xc70>
    291c:	ad400204 	addi	r21,r21,8
    2920:	00000206 	br	292c <___vfprintf_internal_r+0x4ac>
    2924:	dc800e17 	ldw	r18,56(sp)
    2928:	dc400d17 	ldw	r17,52(sp)
    292c:	d8800407 	ldb	r2,16(sp)
    2930:	10000b26 	beq	r2,zero,2960 <___vfprintf_internal_r+0x4e0>
    2934:	00800044 	movi	r2,1
    2938:	94800044 	addi	r18,r18,1
    293c:	8c400044 	addi	r17,r17,1
    2940:	a8800115 	stw	r2,4(r21)
    2944:	d8c00404 	addi	r3,sp,16
    2948:	008001c4 	movi	r2,7
    294c:	a8c00015 	stw	r3,0(r21)
    2950:	dc800e15 	stw	r18,56(sp)
    2954:	dc400d15 	stw	r17,52(sp)
    2958:	1441da16 	blt	r2,r17,30c4 <___vfprintf_internal_r+0xc44>
    295c:	ad400204 	addi	r21,r21,8
    2960:	d9015017 	ldw	r4,1344(sp)
    2964:	20000b1e 	bne	r4,zero,2994 <___vfprintf_internal_r+0x514>
    2968:	d8800444 	addi	r2,sp,17
    296c:	94800084 	addi	r18,r18,2
    2970:	8c400044 	addi	r17,r17,1
    2974:	a8800015 	stw	r2,0(r21)
    2978:	00c00084 	movi	r3,2
    297c:	008001c4 	movi	r2,7
    2980:	a8c00115 	stw	r3,4(r21)
    2984:	dc800e15 	stw	r18,56(sp)
    2988:	dc400d15 	stw	r17,52(sp)
    298c:	1441c216 	blt	r2,r17,3098 <___vfprintf_internal_r+0xc18>
    2990:	ad400204 	addi	r21,r21,8
    2994:	d9414e17 	ldw	r5,1336(sp)
    2998:	00802004 	movi	r2,128
    299c:	2880b126 	beq	r5,r2,2c64 <___vfprintf_internal_r+0x7e4>
    29a0:	d8c14617 	ldw	r3,1304(sp)
    29a4:	19e1c83a 	sub	r16,r3,r7
    29a8:	0400260e 	bge	zero,r16,2a44 <___vfprintf_internal_r+0x5c4>
    29ac:	00800404 	movi	r2,16
    29b0:	1403c90e 	bge	r2,r16,38d8 <___vfprintf_internal_r+0x1458>
    29b4:	1027883a 	mov	r19,r2
    29b8:	07000074 	movhi	fp,1
    29bc:	e71f1084 	addi	fp,fp,31810
    29c0:	050001c4 	movi	r20,7
    29c4:	00000306 	br	29d4 <___vfprintf_internal_r+0x554>
    29c8:	843ffc04 	addi	r16,r16,-16
    29cc:	ad400204 	addi	r21,r21,8
    29d0:	9c00130e 	bge	r19,r16,2a20 <___vfprintf_internal_r+0x5a0>
    29d4:	94800404 	addi	r18,r18,16
    29d8:	8c400044 	addi	r17,r17,1
    29dc:	af000015 	stw	fp,0(r21)
    29e0:	acc00115 	stw	r19,4(r21)
    29e4:	dc800e15 	stw	r18,56(sp)
    29e8:	dc400d15 	stw	r17,52(sp)
    29ec:	a47ff60e 	bge	r20,r17,29c8 <___vfprintf_internal_r+0x548>
    29f0:	d9014f17 	ldw	r4,1340(sp)
    29f4:	b00b883a 	mov	r5,r22
    29f8:	d9800c04 	addi	r6,sp,48
    29fc:	d9c15115 	stw	r7,1348(sp)
    2a00:	00024280 	call	2428 <__sprint_r>
    2a04:	d9c15117 	ldw	r7,1348(sp)
    2a08:	1000551e 	bne	r2,zero,2b60 <___vfprintf_internal_r+0x6e0>
    2a0c:	843ffc04 	addi	r16,r16,-16
    2a10:	dc800e17 	ldw	r18,56(sp)
    2a14:	dc400d17 	ldw	r17,52(sp)
    2a18:	dd401904 	addi	r21,sp,100
    2a1c:	9c3fed16 	blt	r19,r16,29d4 <___vfprintf_internal_r+0x554>
    2a20:	9425883a 	add	r18,r18,r16
    2a24:	8c400044 	addi	r17,r17,1
    2a28:	008001c4 	movi	r2,7
    2a2c:	af000015 	stw	fp,0(r21)
    2a30:	ac000115 	stw	r16,4(r21)
    2a34:	dc800e15 	stw	r18,56(sp)
    2a38:	dc400d15 	stw	r17,52(sp)
    2a3c:	14418216 	blt	r2,r17,3048 <___vfprintf_internal_r+0xbc8>
    2a40:	ad400204 	addi	r21,r21,8
    2a44:	d9014c17 	ldw	r4,1328(sp)
    2a48:	2080400c 	andi	r2,r4,256
    2a4c:	10004a1e 	bne	r2,zero,2b78 <___vfprintf_internal_r+0x6f8>
    2a50:	d9414117 	ldw	r5,1284(sp)
    2a54:	91e5883a 	add	r18,r18,r7
    2a58:	8c400044 	addi	r17,r17,1
    2a5c:	008001c4 	movi	r2,7
    2a60:	a9400015 	stw	r5,0(r21)
    2a64:	a9c00115 	stw	r7,4(r21)
    2a68:	dc800e15 	stw	r18,56(sp)
    2a6c:	dc400d15 	stw	r17,52(sp)
    2a70:	14416716 	blt	r2,r17,3010 <___vfprintf_internal_r+0xb90>
    2a74:	a8c00204 	addi	r3,r21,8
    2a78:	d9814c17 	ldw	r6,1328(sp)
    2a7c:	3080010c 	andi	r2,r6,4
    2a80:	10002826 	beq	r2,zero,2b24 <___vfprintf_internal_r+0x6a4>
    2a84:	d8814a17 	ldw	r2,1320(sp)
    2a88:	d9014517 	ldw	r4,1300(sp)
    2a8c:	1121c83a 	sub	r16,r2,r4
    2a90:	0400240e 	bge	zero,r16,2b24 <___vfprintf_internal_r+0x6a4>
    2a94:	00800404 	movi	r2,16
    2a98:	14044f0e 	bge	r2,r16,3bd8 <___vfprintf_internal_r+0x1758>
    2a9c:	dc400d17 	ldw	r17,52(sp)
    2aa0:	1027883a 	mov	r19,r2
    2aa4:	07000074 	movhi	fp,1
    2aa8:	e71f1484 	addi	fp,fp,31826
    2aac:	050001c4 	movi	r20,7
    2ab0:	00000306 	br	2ac0 <___vfprintf_internal_r+0x640>
    2ab4:	843ffc04 	addi	r16,r16,-16
    2ab8:	18c00204 	addi	r3,r3,8
    2abc:	9c00110e 	bge	r19,r16,2b04 <___vfprintf_internal_r+0x684>
    2ac0:	94800404 	addi	r18,r18,16
    2ac4:	8c400044 	addi	r17,r17,1
    2ac8:	1f000015 	stw	fp,0(r3)
    2acc:	1cc00115 	stw	r19,4(r3)
    2ad0:	dc800e15 	stw	r18,56(sp)
    2ad4:	dc400d15 	stw	r17,52(sp)
    2ad8:	a47ff60e 	bge	r20,r17,2ab4 <___vfprintf_internal_r+0x634>
    2adc:	d9014f17 	ldw	r4,1340(sp)
    2ae0:	b00b883a 	mov	r5,r22
    2ae4:	d9800c04 	addi	r6,sp,48
    2ae8:	00024280 	call	2428 <__sprint_r>
    2aec:	10001c1e 	bne	r2,zero,2b60 <___vfprintf_internal_r+0x6e0>
    2af0:	843ffc04 	addi	r16,r16,-16
    2af4:	dc800e17 	ldw	r18,56(sp)
    2af8:	dc400d17 	ldw	r17,52(sp)
    2afc:	d8c01904 	addi	r3,sp,100
    2b00:	9c3fef16 	blt	r19,r16,2ac0 <___vfprintf_internal_r+0x640>
    2b04:	9425883a 	add	r18,r18,r16
    2b08:	8c400044 	addi	r17,r17,1
    2b0c:	008001c4 	movi	r2,7
    2b10:	1f000015 	stw	fp,0(r3)
    2b14:	1c000115 	stw	r16,4(r3)
    2b18:	dc800e15 	stw	r18,56(sp)
    2b1c:	dc400d15 	stw	r17,52(sp)
    2b20:	1440cb16 	blt	r2,r17,2e50 <___vfprintf_internal_r+0x9d0>
    2b24:	d8814a17 	ldw	r2,1320(sp)
    2b28:	d9414517 	ldw	r5,1300(sp)
    2b2c:	1140010e 	bge	r2,r5,2b34 <___vfprintf_internal_r+0x6b4>
    2b30:	2805883a 	mov	r2,r5
    2b34:	d9814b17 	ldw	r6,1324(sp)
    2b38:	308d883a 	add	r6,r6,r2
    2b3c:	d9814b15 	stw	r6,1324(sp)
    2b40:	90013b1e 	bne	r18,zero,3030 <___vfprintf_internal_r+0xbb0>
    2b44:	d9c14017 	ldw	r7,1280(sp)
    2b48:	dd401904 	addi	r21,sp,100
    2b4c:	d8000d15 	stw	zero,52(sp)
    2b50:	003ea706 	br	25f0 <___vfprintf_internal_r+0x170>
    2b54:	d8800e17 	ldw	r2,56(sp)
    2b58:	10053f1e 	bne	r2,zero,4058 <___vfprintf_internal_r+0x1bd8>
    2b5c:	d8000d15 	stw	zero,52(sp)
    2b60:	b080030b 	ldhu	r2,12(r22)
    2b64:	1080100c 	andi	r2,r2,64
    2b68:	103e8726 	beq	r2,zero,2588 <___vfprintf_internal_r+0x108>
    2b6c:	00bfffc4 	movi	r2,-1
    2b70:	d8814b15 	stw	r2,1324(sp)
    2b74:	003e8406 	br	2588 <___vfprintf_internal_r+0x108>
    2b78:	d9814d17 	ldw	r6,1332(sp)
    2b7c:	00801944 	movi	r2,101
    2b80:	11806e16 	blt	r2,r6,2d3c <___vfprintf_internal_r+0x8bc>
    2b84:	d9414717 	ldw	r5,1308(sp)
    2b88:	00c00044 	movi	r3,1
    2b8c:	1943430e 	bge	r3,r5,389c <___vfprintf_internal_r+0x141c>
    2b90:	d8814117 	ldw	r2,1284(sp)
    2b94:	94800044 	addi	r18,r18,1
    2b98:	8c400044 	addi	r17,r17,1
    2b9c:	a8800015 	stw	r2,0(r21)
    2ba0:	008001c4 	movi	r2,7
    2ba4:	a8c00115 	stw	r3,4(r21)
    2ba8:	dc800e15 	stw	r18,56(sp)
    2bac:	dc400d15 	stw	r17,52(sp)
    2bb0:	1441ca16 	blt	r2,r17,32dc <___vfprintf_internal_r+0xe5c>
    2bb4:	a8c00204 	addi	r3,r21,8
    2bb8:	d9014917 	ldw	r4,1316(sp)
    2bbc:	00800044 	movi	r2,1
    2bc0:	94800044 	addi	r18,r18,1
    2bc4:	8c400044 	addi	r17,r17,1
    2bc8:	18800115 	stw	r2,4(r3)
    2bcc:	008001c4 	movi	r2,7
    2bd0:	19000015 	stw	r4,0(r3)
    2bd4:	dc800e15 	stw	r18,56(sp)
    2bd8:	dc400d15 	stw	r17,52(sp)
    2bdc:	1441b616 	blt	r2,r17,32b8 <___vfprintf_internal_r+0xe38>
    2be0:	1cc00204 	addi	r19,r3,8
    2be4:	d9014217 	ldw	r4,1288(sp)
    2be8:	d9414317 	ldw	r5,1292(sp)
    2bec:	000d883a 	mov	r6,zero
    2bf0:	000f883a 	mov	r7,zero
    2bf4:	000a7cc0 	call	a7cc <__nedf2>
    2bf8:	10017426 	beq	r2,zero,31cc <___vfprintf_internal_r+0xd4c>
    2bfc:	d9414717 	ldw	r5,1308(sp)
    2c00:	d9814117 	ldw	r6,1284(sp)
    2c04:	8c400044 	addi	r17,r17,1
    2c08:	2c85883a 	add	r2,r5,r18
    2c0c:	14bfffc4 	addi	r18,r2,-1
    2c10:	28bfffc4 	addi	r2,r5,-1
    2c14:	30c00044 	addi	r3,r6,1
    2c18:	98800115 	stw	r2,4(r19)
    2c1c:	008001c4 	movi	r2,7
    2c20:	98c00015 	stw	r3,0(r19)
    2c24:	dc800e15 	stw	r18,56(sp)
    2c28:	dc400d15 	stw	r17,52(sp)
    2c2c:	14418e16 	blt	r2,r17,3268 <___vfprintf_internal_r+0xde8>
    2c30:	9cc00204 	addi	r19,r19,8
    2c34:	d9414817 	ldw	r5,1312(sp)
    2c38:	d8800804 	addi	r2,sp,32
    2c3c:	8c400044 	addi	r17,r17,1
    2c40:	9165883a 	add	r18,r18,r5
    2c44:	98800015 	stw	r2,0(r19)
    2c48:	008001c4 	movi	r2,7
    2c4c:	99400115 	stw	r5,4(r19)
    2c50:	dc800e15 	stw	r18,56(sp)
    2c54:	dc400d15 	stw	r17,52(sp)
    2c58:	1440ed16 	blt	r2,r17,3010 <___vfprintf_internal_r+0xb90>
    2c5c:	98c00204 	addi	r3,r19,8
    2c60:	003f8506 	br	2a78 <___vfprintf_internal_r+0x5f8>
    2c64:	d9814a17 	ldw	r6,1320(sp)
    2c68:	d8814517 	ldw	r2,1300(sp)
    2c6c:	30a1c83a 	sub	r16,r6,r2
    2c70:	043f4b0e 	bge	zero,r16,29a0 <___vfprintf_internal_r+0x520>
    2c74:	00800404 	movi	r2,16
    2c78:	1404340e 	bge	r2,r16,3d4c <___vfprintf_internal_r+0x18cc>
    2c7c:	1027883a 	mov	r19,r2
    2c80:	07000074 	movhi	fp,1
    2c84:	e71f1084 	addi	fp,fp,31810
    2c88:	050001c4 	movi	r20,7
    2c8c:	00000306 	br	2c9c <___vfprintf_internal_r+0x81c>
    2c90:	843ffc04 	addi	r16,r16,-16
    2c94:	ad400204 	addi	r21,r21,8
    2c98:	9c00130e 	bge	r19,r16,2ce8 <___vfprintf_internal_r+0x868>
    2c9c:	94800404 	addi	r18,r18,16
    2ca0:	8c400044 	addi	r17,r17,1
    2ca4:	af000015 	stw	fp,0(r21)
    2ca8:	acc00115 	stw	r19,4(r21)
    2cac:	dc800e15 	stw	r18,56(sp)
    2cb0:	dc400d15 	stw	r17,52(sp)
    2cb4:	a47ff60e 	bge	r20,r17,2c90 <___vfprintf_internal_r+0x810>
    2cb8:	d9014f17 	ldw	r4,1340(sp)
    2cbc:	b00b883a 	mov	r5,r22
    2cc0:	d9800c04 	addi	r6,sp,48
    2cc4:	d9c15115 	stw	r7,1348(sp)
    2cc8:	00024280 	call	2428 <__sprint_r>
    2ccc:	d9c15117 	ldw	r7,1348(sp)
    2cd0:	103fa31e 	bne	r2,zero,2b60 <___vfprintf_internal_r+0x6e0>
    2cd4:	843ffc04 	addi	r16,r16,-16
    2cd8:	dc800e17 	ldw	r18,56(sp)
    2cdc:	dc400d17 	ldw	r17,52(sp)
    2ce0:	dd401904 	addi	r21,sp,100
    2ce4:	9c3fed16 	blt	r19,r16,2c9c <___vfprintf_internal_r+0x81c>
    2ce8:	9425883a 	add	r18,r18,r16
    2cec:	8c400044 	addi	r17,r17,1
    2cf0:	008001c4 	movi	r2,7
    2cf4:	af000015 	stw	fp,0(r21)
    2cf8:	ac000115 	stw	r16,4(r21)
    2cfc:	dc800e15 	stw	r18,56(sp)
    2d00:	dc400d15 	stw	r17,52(sp)
    2d04:	14416116 	blt	r2,r17,328c <___vfprintf_internal_r+0xe0c>
    2d08:	ad400204 	addi	r21,r21,8
    2d0c:	003f2406 	br	29a0 <___vfprintf_internal_r+0x520>
    2d10:	d9014f17 	ldw	r4,1340(sp)
    2d14:	0005ef00 	call	5ef0 <__sinit>
    2d18:	d9c15117 	ldw	r7,1348(sp)
    2d1c:	003def06 	br	24dc <___vfprintf_internal_r+0x5c>
    2d20:	d9014f17 	ldw	r4,1340(sp)
    2d24:	b00b883a 	mov	r5,r22
    2d28:	d9c15115 	stw	r7,1348(sp)
    2d2c:	00043500 	call	4350 <__swsetup_r>
    2d30:	d9c15117 	ldw	r7,1348(sp)
    2d34:	103dee26 	beq	r2,zero,24f0 <___vfprintf_internal_r+0x70>
    2d38:	003f8c06 	br	2b6c <___vfprintf_internal_r+0x6ec>
    2d3c:	d9014217 	ldw	r4,1288(sp)
    2d40:	d9414317 	ldw	r5,1292(sp)
    2d44:	000d883a 	mov	r6,zero
    2d48:	000f883a 	mov	r7,zero
    2d4c:	000a7440 	call	a744 <__eqdf2>
    2d50:	1000f21e 	bne	r2,zero,311c <___vfprintf_internal_r+0xc9c>
    2d54:	00800074 	movhi	r2,1
    2d58:	109f1004 	addi	r2,r2,31808
    2d5c:	94800044 	addi	r18,r18,1
    2d60:	8c400044 	addi	r17,r17,1
    2d64:	a8800015 	stw	r2,0(r21)
    2d68:	00c00044 	movi	r3,1
    2d6c:	008001c4 	movi	r2,7
    2d70:	a8c00115 	stw	r3,4(r21)
    2d74:	dc800e15 	stw	r18,56(sp)
    2d78:	dc400d15 	stw	r17,52(sp)
    2d7c:	1442fa16 	blt	r2,r17,3968 <___vfprintf_internal_r+0x14e8>
    2d80:	a8c00204 	addi	r3,r21,8
    2d84:	d8800517 	ldw	r2,20(sp)
    2d88:	d9014717 	ldw	r4,1308(sp)
    2d8c:	11015c0e 	bge	r2,r4,3300 <___vfprintf_internal_r+0xe80>
    2d90:	dc400d17 	ldw	r17,52(sp)
    2d94:	d9814917 	ldw	r6,1316(sp)
    2d98:	00800044 	movi	r2,1
    2d9c:	94800044 	addi	r18,r18,1
    2da0:	8c400044 	addi	r17,r17,1
    2da4:	18800115 	stw	r2,4(r3)
    2da8:	008001c4 	movi	r2,7
    2dac:	19800015 	stw	r6,0(r3)
    2db0:	dc800e15 	stw	r18,56(sp)
    2db4:	dc400d15 	stw	r17,52(sp)
    2db8:	14431016 	blt	r2,r17,39fc <___vfprintf_internal_r+0x157c>
    2dbc:	18c00204 	addi	r3,r3,8
    2dc0:	d8814717 	ldw	r2,1308(sp)
    2dc4:	143fffc4 	addi	r16,r2,-1
    2dc8:	043f2b0e 	bge	zero,r16,2a78 <___vfprintf_internal_r+0x5f8>
    2dcc:	00800404 	movi	r2,16
    2dd0:	1402a20e 	bge	r2,r16,385c <___vfprintf_internal_r+0x13dc>
    2dd4:	dc400d17 	ldw	r17,52(sp)
    2dd8:	1027883a 	mov	r19,r2
    2ddc:	07000074 	movhi	fp,1
    2de0:	e71f1084 	addi	fp,fp,31810
    2de4:	050001c4 	movi	r20,7
    2de8:	00000306 	br	2df8 <___vfprintf_internal_r+0x978>
    2dec:	18c00204 	addi	r3,r3,8
    2df0:	843ffc04 	addi	r16,r16,-16
    2df4:	9c029c0e 	bge	r19,r16,3868 <___vfprintf_internal_r+0x13e8>
    2df8:	94800404 	addi	r18,r18,16
    2dfc:	8c400044 	addi	r17,r17,1
    2e00:	1f000015 	stw	fp,0(r3)
    2e04:	1cc00115 	stw	r19,4(r3)
    2e08:	dc800e15 	stw	r18,56(sp)
    2e0c:	dc400d15 	stw	r17,52(sp)
    2e10:	a47ff60e 	bge	r20,r17,2dec <___vfprintf_internal_r+0x96c>
    2e14:	d9014f17 	ldw	r4,1340(sp)
    2e18:	b00b883a 	mov	r5,r22
    2e1c:	d9800c04 	addi	r6,sp,48
    2e20:	00024280 	call	2428 <__sprint_r>
    2e24:	103f4e1e 	bne	r2,zero,2b60 <___vfprintf_internal_r+0x6e0>
    2e28:	dc800e17 	ldw	r18,56(sp)
    2e2c:	dc400d17 	ldw	r17,52(sp)
    2e30:	d8c01904 	addi	r3,sp,100
    2e34:	003fee06 	br	2df0 <___vfprintf_internal_r+0x970>
    2e38:	d8802c0b 	ldhu	r2,176(sp)
    2e3c:	00ffffc4 	movi	r3,-1
    2e40:	d8c14b15 	stw	r3,1324(sp)
    2e44:	1080100c 	andi	r2,r2,64
    2e48:	103dcc1e 	bne	r2,zero,257c <___vfprintf_internal_r+0xfc>
    2e4c:	003dce06 	br	2588 <___vfprintf_internal_r+0x108>
    2e50:	d9014f17 	ldw	r4,1340(sp)
    2e54:	b00b883a 	mov	r5,r22
    2e58:	d9800c04 	addi	r6,sp,48
    2e5c:	00024280 	call	2428 <__sprint_r>
    2e60:	103f3f1e 	bne	r2,zero,2b60 <___vfprintf_internal_r+0x6e0>
    2e64:	dc800e17 	ldw	r18,56(sp)
    2e68:	003f2e06 	br	2b24 <___vfprintf_internal_r+0x6a4>
    2e6c:	d9414c17 	ldw	r5,1328(sp)
    2e70:	29400414 	ori	r5,r5,16
    2e74:	d9414c15 	stw	r5,1328(sp)
    2e78:	d9814c17 	ldw	r6,1328(sp)
    2e7c:	3080080c 	andi	r2,r6,32
    2e80:	10014f1e 	bne	r2,zero,33c0 <___vfprintf_internal_r+0xf40>
    2e84:	d8c14c17 	ldw	r3,1328(sp)
    2e88:	1880040c 	andi	r2,r3,16
    2e8c:	1002ea1e 	bne	r2,zero,3a38 <___vfprintf_internal_r+0x15b8>
    2e90:	d9014c17 	ldw	r4,1328(sp)
    2e94:	2080100c 	andi	r2,r4,64
    2e98:	1002e726 	beq	r2,zero,3a38 <___vfprintf_internal_r+0x15b8>
    2e9c:	3880000f 	ldh	r2,0(r7)
    2ea0:	39c00104 	addi	r7,r7,4
    2ea4:	d9c14015 	stw	r7,1280(sp)
    2ea8:	1023d7fa 	srai	r17,r2,31
    2eac:	1021883a 	mov	r16,r2
    2eb0:	88037216 	blt	r17,zero,3c7c <___vfprintf_internal_r+0x17fc>
    2eb4:	01000044 	movi	r4,1
    2eb8:	98000416 	blt	r19,zero,2ecc <___vfprintf_internal_r+0xa4c>
    2ebc:	d8c14c17 	ldw	r3,1328(sp)
    2ec0:	00bfdfc4 	movi	r2,-129
    2ec4:	1886703a 	and	r3,r3,r2
    2ec8:	d8c14c15 	stw	r3,1328(sp)
    2ecc:	8444b03a 	or	r2,r16,r17
    2ed0:	1002261e 	bne	r2,zero,376c <___vfprintf_internal_r+0x12ec>
    2ed4:	9802251e 	bne	r19,zero,376c <___vfprintf_internal_r+0x12ec>
    2ed8:	20803fcc 	andi	r2,r4,255
    2edc:	10029b26 	beq	r2,zero,394c <___vfprintf_internal_r+0x14cc>
    2ee0:	d8c01904 	addi	r3,sp,100
    2ee4:	dd000f04 	addi	r20,sp,60
    2ee8:	d8c14115 	stw	r3,1284(sp)
    2eec:	d8c14117 	ldw	r3,1284(sp)
    2ef0:	dcc14515 	stw	r19,1300(sp)
    2ef4:	a0c5c83a 	sub	r2,r20,r3
    2ef8:	11c00a04 	addi	r7,r2,40
    2efc:	99c0010e 	bge	r19,r7,2f04 <___vfprintf_internal_r+0xa84>
    2f00:	d9c14515 	stw	r7,1300(sp)
    2f04:	dcc14615 	stw	r19,1304(sp)
    2f08:	d8800407 	ldb	r2,16(sp)
    2f0c:	103e4c26 	beq	r2,zero,2840 <___vfprintf_internal_r+0x3c0>
    2f10:	d8814517 	ldw	r2,1300(sp)
    2f14:	10800044 	addi	r2,r2,1
    2f18:	d8814515 	stw	r2,1300(sp)
    2f1c:	003e4806 	br	2840 <___vfprintf_internal_r+0x3c0>
    2f20:	d9814c17 	ldw	r6,1328(sp)
    2f24:	31800414 	ori	r6,r6,16
    2f28:	d9814c15 	stw	r6,1328(sp)
    2f2c:	d8c14c17 	ldw	r3,1328(sp)
    2f30:	1880080c 	andi	r2,r3,32
    2f34:	1001271e 	bne	r2,zero,33d4 <___vfprintf_internal_r+0xf54>
    2f38:	d9414c17 	ldw	r5,1328(sp)
    2f3c:	2880040c 	andi	r2,r5,16
    2f40:	1002b61e 	bne	r2,zero,3a1c <___vfprintf_internal_r+0x159c>
    2f44:	d9814c17 	ldw	r6,1328(sp)
    2f48:	3080100c 	andi	r2,r6,64
    2f4c:	1002b326 	beq	r2,zero,3a1c <___vfprintf_internal_r+0x159c>
    2f50:	3c00000b 	ldhu	r16,0(r7)
    2f54:	0009883a 	mov	r4,zero
    2f58:	39c00104 	addi	r7,r7,4
    2f5c:	0023883a 	mov	r17,zero
    2f60:	d9c14015 	stw	r7,1280(sp)
    2f64:	d8000405 	stb	zero,16(sp)
    2f68:	003fd306 	br	2eb8 <___vfprintf_internal_r+0xa38>
    2f6c:	d9014c17 	ldw	r4,1328(sp)
    2f70:	21000414 	ori	r4,r4,16
    2f74:	d9014c15 	stw	r4,1328(sp)
    2f78:	d9414c17 	ldw	r5,1328(sp)
    2f7c:	2880080c 	andi	r2,r5,32
    2f80:	1001081e 	bne	r2,zero,33a4 <___vfprintf_internal_r+0xf24>
    2f84:	d8c14c17 	ldw	r3,1328(sp)
    2f88:	1880040c 	andi	r2,r3,16
    2f8c:	1002b01e 	bne	r2,zero,3a50 <___vfprintf_internal_r+0x15d0>
    2f90:	d9014c17 	ldw	r4,1328(sp)
    2f94:	2080100c 	andi	r2,r4,64
    2f98:	1002ad26 	beq	r2,zero,3a50 <___vfprintf_internal_r+0x15d0>
    2f9c:	3c00000b 	ldhu	r16,0(r7)
    2fa0:	01000044 	movi	r4,1
    2fa4:	39c00104 	addi	r7,r7,4
    2fa8:	0023883a 	mov	r17,zero
    2fac:	d9c14015 	stw	r7,1280(sp)
    2fb0:	d8000405 	stb	zero,16(sp)
    2fb4:	003fc006 	br	2eb8 <___vfprintf_internal_r+0xa38>
    2fb8:	d9014f17 	ldw	r4,1340(sp)
    2fbc:	b00b883a 	mov	r5,r22
    2fc0:	d9800c04 	addi	r6,sp,48
    2fc4:	00024280 	call	2428 <__sprint_r>
    2fc8:	103ee51e 	bne	r2,zero,2b60 <___vfprintf_internal_r+0x6e0>
    2fcc:	dc800e17 	ldw	r18,56(sp)
    2fd0:	d8c01904 	addi	r3,sp,100
    2fd4:	d9814c17 	ldw	r6,1328(sp)
    2fd8:	3080004c 	andi	r2,r6,1
    2fdc:	1005003a 	cmpeq	r2,r2,zero
    2fe0:	103ea51e 	bne	r2,zero,2a78 <___vfprintf_internal_r+0x5f8>
    2fe4:	00800044 	movi	r2,1
    2fe8:	dc400d17 	ldw	r17,52(sp)
    2fec:	18800115 	stw	r2,4(r3)
    2ff0:	d8814917 	ldw	r2,1316(sp)
    2ff4:	94800044 	addi	r18,r18,1
    2ff8:	8c400044 	addi	r17,r17,1
    2ffc:	18800015 	stw	r2,0(r3)
    3000:	008001c4 	movi	r2,7
    3004:	dc800e15 	stw	r18,56(sp)
    3008:	dc400d15 	stw	r17,52(sp)
    300c:	14421e0e 	bge	r2,r17,3888 <___vfprintf_internal_r+0x1408>
    3010:	d9014f17 	ldw	r4,1340(sp)
    3014:	b00b883a 	mov	r5,r22
    3018:	d9800c04 	addi	r6,sp,48
    301c:	00024280 	call	2428 <__sprint_r>
    3020:	103ecf1e 	bne	r2,zero,2b60 <___vfprintf_internal_r+0x6e0>
    3024:	dc800e17 	ldw	r18,56(sp)
    3028:	d8c01904 	addi	r3,sp,100
    302c:	003e9206 	br	2a78 <___vfprintf_internal_r+0x5f8>
    3030:	d9014f17 	ldw	r4,1340(sp)
    3034:	b00b883a 	mov	r5,r22
    3038:	d9800c04 	addi	r6,sp,48
    303c:	00024280 	call	2428 <__sprint_r>
    3040:	103ec026 	beq	r2,zero,2b44 <___vfprintf_internal_r+0x6c4>
    3044:	003ec606 	br	2b60 <___vfprintf_internal_r+0x6e0>
    3048:	d9014f17 	ldw	r4,1340(sp)
    304c:	b00b883a 	mov	r5,r22
    3050:	d9800c04 	addi	r6,sp,48
    3054:	d9c15115 	stw	r7,1348(sp)
    3058:	00024280 	call	2428 <__sprint_r>
    305c:	d9c15117 	ldw	r7,1348(sp)
    3060:	103ebf1e 	bne	r2,zero,2b60 <___vfprintf_internal_r+0x6e0>
    3064:	dc800e17 	ldw	r18,56(sp)
    3068:	dc400d17 	ldw	r17,52(sp)
    306c:	dd401904 	addi	r21,sp,100
    3070:	003e7406 	br	2a44 <___vfprintf_internal_r+0x5c4>
    3074:	d9014f17 	ldw	r4,1340(sp)
    3078:	b00b883a 	mov	r5,r22
    307c:	d9800c04 	addi	r6,sp,48
    3080:	d9c15115 	stw	r7,1348(sp)
    3084:	00024280 	call	2428 <__sprint_r>
    3088:	d9c15117 	ldw	r7,1348(sp)
    308c:	103eb41e 	bne	r2,zero,2b60 <___vfprintf_internal_r+0x6e0>
    3090:	dd401904 	addi	r21,sp,100
    3094:	003d6d06 	br	264c <___vfprintf_internal_r+0x1cc>
    3098:	d9014f17 	ldw	r4,1340(sp)
    309c:	b00b883a 	mov	r5,r22
    30a0:	d9800c04 	addi	r6,sp,48
    30a4:	d9c15115 	stw	r7,1348(sp)
    30a8:	00024280 	call	2428 <__sprint_r>
    30ac:	d9c15117 	ldw	r7,1348(sp)
    30b0:	103eab1e 	bne	r2,zero,2b60 <___vfprintf_internal_r+0x6e0>
    30b4:	dc800e17 	ldw	r18,56(sp)
    30b8:	dc400d17 	ldw	r17,52(sp)
    30bc:	dd401904 	addi	r21,sp,100
    30c0:	003e3406 	br	2994 <___vfprintf_internal_r+0x514>
    30c4:	d9014f17 	ldw	r4,1340(sp)
    30c8:	b00b883a 	mov	r5,r22
    30cc:	d9800c04 	addi	r6,sp,48
    30d0:	d9c15115 	stw	r7,1348(sp)
    30d4:	00024280 	call	2428 <__sprint_r>
    30d8:	d9c15117 	ldw	r7,1348(sp)
    30dc:	103ea01e 	bne	r2,zero,2b60 <___vfprintf_internal_r+0x6e0>
    30e0:	dc800e17 	ldw	r18,56(sp)
    30e4:	dc400d17 	ldw	r17,52(sp)
    30e8:	dd401904 	addi	r21,sp,100
    30ec:	003e1c06 	br	2960 <___vfprintf_internal_r+0x4e0>
    30f0:	d9014f17 	ldw	r4,1340(sp)
    30f4:	b00b883a 	mov	r5,r22
    30f8:	d9800c04 	addi	r6,sp,48
    30fc:	d9c15115 	stw	r7,1348(sp)
    3100:	00024280 	call	2428 <__sprint_r>
    3104:	d9c15117 	ldw	r7,1348(sp)
    3108:	103e951e 	bne	r2,zero,2b60 <___vfprintf_internal_r+0x6e0>
    310c:	dc800e17 	ldw	r18,56(sp)
    3110:	dc400d17 	ldw	r17,52(sp)
    3114:	dd401904 	addi	r21,sp,100
    3118:	003e0406 	br	292c <___vfprintf_internal_r+0x4ac>
    311c:	d9000517 	ldw	r4,20(sp)
    3120:	0102520e 	bge	zero,r4,3a6c <___vfprintf_internal_r+0x15ec>
    3124:	d9814717 	ldw	r6,1308(sp)
    3128:	21807a16 	blt	r4,r6,3314 <___vfprintf_internal_r+0xe94>
    312c:	d8814117 	ldw	r2,1284(sp)
    3130:	91a5883a 	add	r18,r18,r6
    3134:	8c400044 	addi	r17,r17,1
    3138:	a8800015 	stw	r2,0(r21)
    313c:	008001c4 	movi	r2,7
    3140:	a9800115 	stw	r6,4(r21)
    3144:	dc800e15 	stw	r18,56(sp)
    3148:	dc400d15 	stw	r17,52(sp)
    314c:	1442f616 	blt	r2,r17,3d28 <___vfprintf_internal_r+0x18a8>
    3150:	a8c00204 	addi	r3,r21,8
    3154:	d9414717 	ldw	r5,1308(sp)
    3158:	2161c83a 	sub	r16,r4,r5
    315c:	043f9d0e 	bge	zero,r16,2fd4 <___vfprintf_internal_r+0xb54>
    3160:	00800404 	movi	r2,16
    3164:	1402130e 	bge	r2,r16,39b4 <___vfprintf_internal_r+0x1534>
    3168:	dc400d17 	ldw	r17,52(sp)
    316c:	1027883a 	mov	r19,r2
    3170:	07000074 	movhi	fp,1
    3174:	e71f1084 	addi	fp,fp,31810
    3178:	050001c4 	movi	r20,7
    317c:	00000306 	br	318c <___vfprintf_internal_r+0xd0c>
    3180:	18c00204 	addi	r3,r3,8
    3184:	843ffc04 	addi	r16,r16,-16
    3188:	9c020d0e 	bge	r19,r16,39c0 <___vfprintf_internal_r+0x1540>
    318c:	94800404 	addi	r18,r18,16
    3190:	8c400044 	addi	r17,r17,1
    3194:	1f000015 	stw	fp,0(r3)
    3198:	1cc00115 	stw	r19,4(r3)
    319c:	dc800e15 	stw	r18,56(sp)
    31a0:	dc400d15 	stw	r17,52(sp)
    31a4:	a47ff60e 	bge	r20,r17,3180 <___vfprintf_internal_r+0xd00>
    31a8:	d9014f17 	ldw	r4,1340(sp)
    31ac:	b00b883a 	mov	r5,r22
    31b0:	d9800c04 	addi	r6,sp,48
    31b4:	00024280 	call	2428 <__sprint_r>
    31b8:	103e691e 	bne	r2,zero,2b60 <___vfprintf_internal_r+0x6e0>
    31bc:	dc800e17 	ldw	r18,56(sp)
    31c0:	dc400d17 	ldw	r17,52(sp)
    31c4:	d8c01904 	addi	r3,sp,100
    31c8:	003fee06 	br	3184 <___vfprintf_internal_r+0xd04>
    31cc:	d8814717 	ldw	r2,1308(sp)
    31d0:	143fffc4 	addi	r16,r2,-1
    31d4:	043e970e 	bge	zero,r16,2c34 <___vfprintf_internal_r+0x7b4>
    31d8:	00800404 	movi	r2,16
    31dc:	1400180e 	bge	r2,r16,3240 <___vfprintf_internal_r+0xdc0>
    31e0:	1029883a 	mov	r20,r2
    31e4:	07000074 	movhi	fp,1
    31e8:	e71f1084 	addi	fp,fp,31810
    31ec:	054001c4 	movi	r21,7
    31f0:	00000306 	br	3200 <___vfprintf_internal_r+0xd80>
    31f4:	9cc00204 	addi	r19,r19,8
    31f8:	843ffc04 	addi	r16,r16,-16
    31fc:	a400120e 	bge	r20,r16,3248 <___vfprintf_internal_r+0xdc8>
    3200:	94800404 	addi	r18,r18,16
    3204:	8c400044 	addi	r17,r17,1
    3208:	9f000015 	stw	fp,0(r19)
    320c:	9d000115 	stw	r20,4(r19)
    3210:	dc800e15 	stw	r18,56(sp)
    3214:	dc400d15 	stw	r17,52(sp)
    3218:	ac7ff60e 	bge	r21,r17,31f4 <___vfprintf_internal_r+0xd74>
    321c:	d9014f17 	ldw	r4,1340(sp)
    3220:	b00b883a 	mov	r5,r22
    3224:	d9800c04 	addi	r6,sp,48
    3228:	00024280 	call	2428 <__sprint_r>
    322c:	103e4c1e 	bne	r2,zero,2b60 <___vfprintf_internal_r+0x6e0>
    3230:	dc800e17 	ldw	r18,56(sp)
    3234:	dc400d17 	ldw	r17,52(sp)
    3238:	dcc01904 	addi	r19,sp,100
    323c:	003fee06 	br	31f8 <___vfprintf_internal_r+0xd78>
    3240:	07000074 	movhi	fp,1
    3244:	e71f1084 	addi	fp,fp,31810
    3248:	9425883a 	add	r18,r18,r16
    324c:	8c400044 	addi	r17,r17,1
    3250:	008001c4 	movi	r2,7
    3254:	9f000015 	stw	fp,0(r19)
    3258:	9c000115 	stw	r16,4(r19)
    325c:	dc800e15 	stw	r18,56(sp)
    3260:	dc400d15 	stw	r17,52(sp)
    3264:	147e720e 	bge	r2,r17,2c30 <___vfprintf_internal_r+0x7b0>
    3268:	d9014f17 	ldw	r4,1340(sp)
    326c:	b00b883a 	mov	r5,r22
    3270:	d9800c04 	addi	r6,sp,48
    3274:	00024280 	call	2428 <__sprint_r>
    3278:	103e391e 	bne	r2,zero,2b60 <___vfprintf_internal_r+0x6e0>
    327c:	dc800e17 	ldw	r18,56(sp)
    3280:	dc400d17 	ldw	r17,52(sp)
    3284:	dcc01904 	addi	r19,sp,100
    3288:	003e6a06 	br	2c34 <___vfprintf_internal_r+0x7b4>
    328c:	d9014f17 	ldw	r4,1340(sp)
    3290:	b00b883a 	mov	r5,r22
    3294:	d9800c04 	addi	r6,sp,48
    3298:	d9c15115 	stw	r7,1348(sp)
    329c:	00024280 	call	2428 <__sprint_r>
    32a0:	d9c15117 	ldw	r7,1348(sp)
    32a4:	103e2e1e 	bne	r2,zero,2b60 <___vfprintf_internal_r+0x6e0>
    32a8:	dc800e17 	ldw	r18,56(sp)
    32ac:	dc400d17 	ldw	r17,52(sp)
    32b0:	dd401904 	addi	r21,sp,100
    32b4:	003dba06 	br	29a0 <___vfprintf_internal_r+0x520>
    32b8:	d9014f17 	ldw	r4,1340(sp)
    32bc:	b00b883a 	mov	r5,r22
    32c0:	d9800c04 	addi	r6,sp,48
    32c4:	00024280 	call	2428 <__sprint_r>
    32c8:	103e251e 	bne	r2,zero,2b60 <___vfprintf_internal_r+0x6e0>
    32cc:	dc800e17 	ldw	r18,56(sp)
    32d0:	dc400d17 	ldw	r17,52(sp)
    32d4:	dcc01904 	addi	r19,sp,100
    32d8:	003e4206 	br	2be4 <___vfprintf_internal_r+0x764>
    32dc:	d9014f17 	ldw	r4,1340(sp)
    32e0:	b00b883a 	mov	r5,r22
    32e4:	d9800c04 	addi	r6,sp,48
    32e8:	00024280 	call	2428 <__sprint_r>
    32ec:	103e1c1e 	bne	r2,zero,2b60 <___vfprintf_internal_r+0x6e0>
    32f0:	dc800e17 	ldw	r18,56(sp)
    32f4:	dc400d17 	ldw	r17,52(sp)
    32f8:	d8c01904 	addi	r3,sp,100
    32fc:	003e2e06 	br	2bb8 <___vfprintf_internal_r+0x738>
    3300:	d9414c17 	ldw	r5,1328(sp)
    3304:	2880004c 	andi	r2,r5,1
    3308:	1005003a 	cmpeq	r2,r2,zero
    330c:	103dda1e 	bne	r2,zero,2a78 <___vfprintf_internal_r+0x5f8>
    3310:	003e9f06 	br	2d90 <___vfprintf_internal_r+0x910>
    3314:	d8c14117 	ldw	r3,1284(sp)
    3318:	9125883a 	add	r18,r18,r4
    331c:	8c400044 	addi	r17,r17,1
    3320:	008001c4 	movi	r2,7
    3324:	a8c00015 	stw	r3,0(r21)
    3328:	a9000115 	stw	r4,4(r21)
    332c:	dc800e15 	stw	r18,56(sp)
    3330:	dc400d15 	stw	r17,52(sp)
    3334:	14426616 	blt	r2,r17,3cd0 <___vfprintf_internal_r+0x1850>
    3338:	a8c00204 	addi	r3,r21,8
    333c:	d9414917 	ldw	r5,1316(sp)
    3340:	00800044 	movi	r2,1
    3344:	94800044 	addi	r18,r18,1
    3348:	8c400044 	addi	r17,r17,1
    334c:	18800115 	stw	r2,4(r3)
    3350:	008001c4 	movi	r2,7
    3354:	19400015 	stw	r5,0(r3)
    3358:	dc800e15 	stw	r18,56(sp)
    335c:	dc400d15 	stw	r17,52(sp)
    3360:	2021883a 	mov	r16,r4
    3364:	14425016 	blt	r2,r17,3ca8 <___vfprintf_internal_r+0x1828>
    3368:	19400204 	addi	r5,r3,8
    336c:	d9814717 	ldw	r6,1308(sp)
    3370:	8c400044 	addi	r17,r17,1
    3374:	dc400d15 	stw	r17,52(sp)
    3378:	3107c83a 	sub	r3,r6,r4
    337c:	d9014117 	ldw	r4,1284(sp)
    3380:	90e5883a 	add	r18,r18,r3
    3384:	28c00115 	stw	r3,4(r5)
    3388:	8105883a 	add	r2,r16,r4
    338c:	28800015 	stw	r2,0(r5)
    3390:	008001c4 	movi	r2,7
    3394:	dc800e15 	stw	r18,56(sp)
    3398:	147f1d16 	blt	r2,r17,3010 <___vfprintf_internal_r+0xb90>
    339c:	28c00204 	addi	r3,r5,8
    33a0:	003db506 	br	2a78 <___vfprintf_internal_r+0x5f8>
    33a4:	3c000017 	ldw	r16,0(r7)
    33a8:	3c400117 	ldw	r17,4(r7)
    33ac:	39800204 	addi	r6,r7,8
    33b0:	01000044 	movi	r4,1
    33b4:	d9814015 	stw	r6,1280(sp)
    33b8:	d8000405 	stb	zero,16(sp)
    33bc:	003ebe06 	br	2eb8 <___vfprintf_internal_r+0xa38>
    33c0:	3c000017 	ldw	r16,0(r7)
    33c4:	3c400117 	ldw	r17,4(r7)
    33c8:	38800204 	addi	r2,r7,8
    33cc:	d8814015 	stw	r2,1280(sp)
    33d0:	003eb706 	br	2eb0 <___vfprintf_internal_r+0xa30>
    33d4:	3c000017 	ldw	r16,0(r7)
    33d8:	3c400117 	ldw	r17,4(r7)
    33dc:	39000204 	addi	r4,r7,8
    33e0:	d9014015 	stw	r4,1280(sp)
    33e4:	0009883a 	mov	r4,zero
    33e8:	d8000405 	stb	zero,16(sp)
    33ec:	003eb206 	br	2eb8 <___vfprintf_internal_r+0xa38>
    33f0:	38c00017 	ldw	r3,0(r7)
    33f4:	39c00104 	addi	r7,r7,4
    33f8:	d8c14a15 	stw	r3,1320(sp)
    33fc:	1800d10e 	bge	r3,zero,3744 <___vfprintf_internal_r+0x12c4>
    3400:	00c7c83a 	sub	r3,zero,r3
    3404:	d8c14a15 	stw	r3,1320(sp)
    3408:	d9014c17 	ldw	r4,1328(sp)
    340c:	b8c00007 	ldb	r3,0(r23)
    3410:	21000114 	ori	r4,r4,4
    3414:	d9014c15 	stw	r4,1328(sp)
    3418:	003c9806 	br	267c <___vfprintf_internal_r+0x1fc>
    341c:	d9814c17 	ldw	r6,1328(sp)
    3420:	3080080c 	andi	r2,r6,32
    3424:	1001f026 	beq	r2,zero,3be8 <___vfprintf_internal_r+0x1768>
    3428:	d9014b17 	ldw	r4,1324(sp)
    342c:	38800017 	ldw	r2,0(r7)
    3430:	39c00104 	addi	r7,r7,4
    3434:	d9c14015 	stw	r7,1280(sp)
    3438:	2007d7fa 	srai	r3,r4,31
    343c:	d9c14017 	ldw	r7,1280(sp)
    3440:	11000015 	stw	r4,0(r2)
    3444:	10c00115 	stw	r3,4(r2)
    3448:	003c6906 	br	25f0 <___vfprintf_internal_r+0x170>
    344c:	b8c00007 	ldb	r3,0(r23)
    3450:	00801b04 	movi	r2,108
    3454:	18824f26 	beq	r3,r2,3d94 <___vfprintf_internal_r+0x1914>
    3458:	d9414c17 	ldw	r5,1328(sp)
    345c:	29400414 	ori	r5,r5,16
    3460:	d9414c15 	stw	r5,1328(sp)
    3464:	003c8506 	br	267c <___vfprintf_internal_r+0x1fc>
    3468:	d9814c17 	ldw	r6,1328(sp)
    346c:	b8c00007 	ldb	r3,0(r23)
    3470:	31800814 	ori	r6,r6,32
    3474:	d9814c15 	stw	r6,1328(sp)
    3478:	003c8006 	br	267c <___vfprintf_internal_r+0x1fc>
    347c:	d8814c17 	ldw	r2,1328(sp)
    3480:	3c000017 	ldw	r16,0(r7)
    3484:	00c01e04 	movi	r3,120
    3488:	10800094 	ori	r2,r2,2
    348c:	d8814c15 	stw	r2,1328(sp)
    3490:	39c00104 	addi	r7,r7,4
    3494:	01400074 	movhi	r5,1
    3498:	295ef904 	addi	r5,r5,31716
    349c:	00800c04 	movi	r2,48
    34a0:	0023883a 	mov	r17,zero
    34a4:	01000084 	movi	r4,2
    34a8:	d9c14015 	stw	r7,1280(sp)
    34ac:	d8c14d15 	stw	r3,1332(sp)
    34b0:	d9414415 	stw	r5,1296(sp)
    34b4:	d8800445 	stb	r2,17(sp)
    34b8:	d8c00485 	stb	r3,18(sp)
    34bc:	d8000405 	stb	zero,16(sp)
    34c0:	003e7d06 	br	2eb8 <___vfprintf_internal_r+0xa38>
    34c4:	d8814c17 	ldw	r2,1328(sp)
    34c8:	b8c00007 	ldb	r3,0(r23)
    34cc:	10801014 	ori	r2,r2,64
    34d0:	d8814c15 	stw	r2,1328(sp)
    34d4:	003c6906 	br	267c <___vfprintf_internal_r+0x1fc>
    34d8:	d9414c17 	ldw	r5,1328(sp)
    34dc:	2880020c 	andi	r2,r5,8
    34e0:	1001df26 	beq	r2,zero,3c60 <___vfprintf_internal_r+0x17e0>
    34e4:	39800017 	ldw	r6,0(r7)
    34e8:	38800204 	addi	r2,r7,8
    34ec:	d8814015 	stw	r2,1280(sp)
    34f0:	d9814215 	stw	r6,1288(sp)
    34f4:	39c00117 	ldw	r7,4(r7)
    34f8:	d9c14315 	stw	r7,1292(sp)
    34fc:	d9014217 	ldw	r4,1288(sp)
    3500:	d9414317 	ldw	r5,1292(sp)
    3504:	0008e200 	call	8e20 <__isinfd>
    3508:	10021726 	beq	r2,zero,3d68 <___vfprintf_internal_r+0x18e8>
    350c:	d9014217 	ldw	r4,1288(sp)
    3510:	d9414317 	ldw	r5,1292(sp)
    3514:	000d883a 	mov	r6,zero
    3518:	000f883a 	mov	r7,zero
    351c:	000a9640 	call	a964 <__ltdf2>
    3520:	1002ca16 	blt	r2,zero,404c <___vfprintf_internal_r+0x1bcc>
    3524:	d9414d17 	ldw	r5,1332(sp)
    3528:	008011c4 	movi	r2,71
    352c:	11420a16 	blt	r2,r5,3d58 <___vfprintf_internal_r+0x18d8>
    3530:	01800074 	movhi	r6,1
    3534:	319efe04 	addi	r6,r6,31736
    3538:	d9814115 	stw	r6,1284(sp)
    353c:	d9014c17 	ldw	r4,1328(sp)
    3540:	00c000c4 	movi	r3,3
    3544:	00bfdfc4 	movi	r2,-129
    3548:	2088703a 	and	r4,r4,r2
    354c:	180f883a 	mov	r7,r3
    3550:	d8c14515 	stw	r3,1300(sp)
    3554:	d9014c15 	stw	r4,1328(sp)
    3558:	d8014615 	stw	zero,1304(sp)
    355c:	003e6a06 	br	2f08 <___vfprintf_internal_r+0xa88>
    3560:	38800017 	ldw	r2,0(r7)
    3564:	00c00044 	movi	r3,1
    3568:	39c00104 	addi	r7,r7,4
    356c:	d9c14015 	stw	r7,1280(sp)
    3570:	d9000f04 	addi	r4,sp,60
    3574:	180f883a 	mov	r7,r3
    3578:	d8c14515 	stw	r3,1300(sp)
    357c:	d9014115 	stw	r4,1284(sp)
    3580:	d8800f05 	stb	r2,60(sp)
    3584:	d8000405 	stb	zero,16(sp)
    3588:	003cac06 	br	283c <___vfprintf_internal_r+0x3bc>
    358c:	01400074 	movhi	r5,1
    3590:	295f0404 	addi	r5,r5,31760
    3594:	d9414415 	stw	r5,1296(sp)
    3598:	d9814c17 	ldw	r6,1328(sp)
    359c:	3080080c 	andi	r2,r6,32
    35a0:	1000f926 	beq	r2,zero,3988 <___vfprintf_internal_r+0x1508>
    35a4:	3c000017 	ldw	r16,0(r7)
    35a8:	3c400117 	ldw	r17,4(r7)
    35ac:	38800204 	addi	r2,r7,8
    35b0:	d8814015 	stw	r2,1280(sp)
    35b4:	d9414c17 	ldw	r5,1328(sp)
    35b8:	2880004c 	andi	r2,r5,1
    35bc:	1005003a 	cmpeq	r2,r2,zero
    35c0:	1000b31e 	bne	r2,zero,3890 <___vfprintf_internal_r+0x1410>
    35c4:	8444b03a 	or	r2,r16,r17
    35c8:	1000b126 	beq	r2,zero,3890 <___vfprintf_internal_r+0x1410>
    35cc:	d9814d17 	ldw	r6,1332(sp)
    35d0:	29400094 	ori	r5,r5,2
    35d4:	00800c04 	movi	r2,48
    35d8:	01000084 	movi	r4,2
    35dc:	d9414c15 	stw	r5,1328(sp)
    35e0:	d8800445 	stb	r2,17(sp)
    35e4:	d9800485 	stb	r6,18(sp)
    35e8:	d8000405 	stb	zero,16(sp)
    35ec:	003e3206 	br	2eb8 <___vfprintf_internal_r+0xa38>
    35f0:	01800074 	movhi	r6,1
    35f4:	319ef904 	addi	r6,r6,31716
    35f8:	d9814415 	stw	r6,1296(sp)
    35fc:	003fe606 	br	3598 <___vfprintf_internal_r+0x1118>
    3600:	00800ac4 	movi	r2,43
    3604:	d8800405 	stb	r2,16(sp)
    3608:	b8c00007 	ldb	r3,0(r23)
    360c:	003c1b06 	br	267c <___vfprintf_internal_r+0x1fc>
    3610:	d8814c17 	ldw	r2,1328(sp)
    3614:	b8c00007 	ldb	r3,0(r23)
    3618:	10800054 	ori	r2,r2,1
    361c:	d8814c15 	stw	r2,1328(sp)
    3620:	003c1606 	br	267c <___vfprintf_internal_r+0x1fc>
    3624:	d8800407 	ldb	r2,16(sp)
    3628:	1000461e 	bne	r2,zero,3744 <___vfprintf_internal_r+0x12c4>
    362c:	00800804 	movi	r2,32
    3630:	d8800405 	stb	r2,16(sp)
    3634:	b8c00007 	ldb	r3,0(r23)
    3638:	003c1006 	br	267c <___vfprintf_internal_r+0x1fc>
    363c:	d9814c17 	ldw	r6,1328(sp)
    3640:	b8c00007 	ldb	r3,0(r23)
    3644:	31800214 	ori	r6,r6,8
    3648:	d9814c15 	stw	r6,1328(sp)
    364c:	003c0b06 	br	267c <___vfprintf_internal_r+0x1fc>
    3650:	0007883a 	mov	r3,zero
    3654:	01000244 	movi	r4,9
    3658:	188002a4 	muli	r2,r3,10
    365c:	b8c00007 	ldb	r3,0(r23)
    3660:	d9814d17 	ldw	r6,1332(sp)
    3664:	bdc00044 	addi	r23,r23,1
    3668:	d8c14d15 	stw	r3,1332(sp)
    366c:	d9414d17 	ldw	r5,1332(sp)
    3670:	3085883a 	add	r2,r6,r2
    3674:	10fff404 	addi	r3,r2,-48
    3678:	28bff404 	addi	r2,r5,-48
    367c:	20bff62e 	bgeu	r4,r2,3658 <___vfprintf_internal_r+0x11d8>
    3680:	d8c14a15 	stw	r3,1320(sp)
    3684:	003bff06 	br	2684 <___vfprintf_internal_r+0x204>
    3688:	d9414c17 	ldw	r5,1328(sp)
    368c:	b8c00007 	ldb	r3,0(r23)
    3690:	29402014 	ori	r5,r5,128
    3694:	d9414c15 	stw	r5,1328(sp)
    3698:	003bf806 	br	267c <___vfprintf_internal_r+0x1fc>
    369c:	b8c00007 	ldb	r3,0(r23)
    36a0:	00800a84 	movi	r2,42
    36a4:	bdc00044 	addi	r23,r23,1
    36a8:	18831526 	beq	r3,r2,4300 <___vfprintf_internal_r+0x1e80>
    36ac:	d8c14d15 	stw	r3,1332(sp)
    36b0:	18bff404 	addi	r2,r3,-48
    36b4:	00c00244 	movi	r3,9
    36b8:	18827836 	bltu	r3,r2,409c <___vfprintf_internal_r+0x1c1c>
    36bc:	000d883a 	mov	r6,zero
    36c0:	308002a4 	muli	r2,r6,10
    36c4:	b9800007 	ldb	r6,0(r23)
    36c8:	d9414d17 	ldw	r5,1332(sp)
    36cc:	bdc00044 	addi	r23,r23,1
    36d0:	d9814d15 	stw	r6,1332(sp)
    36d4:	d9014d17 	ldw	r4,1332(sp)
    36d8:	1145883a 	add	r2,r2,r5
    36dc:	11bff404 	addi	r6,r2,-48
    36e0:	20bff404 	addi	r2,r4,-48
    36e4:	18bff62e 	bgeu	r3,r2,36c0 <___vfprintf_internal_r+0x1240>
    36e8:	3027883a 	mov	r19,r6
    36ec:	303be50e 	bge	r6,zero,2684 <___vfprintf_internal_r+0x204>
    36f0:	04ffffc4 	movi	r19,-1
    36f4:	003be306 	br	2684 <___vfprintf_internal_r+0x204>
    36f8:	d8000405 	stb	zero,16(sp)
    36fc:	39800017 	ldw	r6,0(r7)
    3700:	39c00104 	addi	r7,r7,4
    3704:	d9c14015 	stw	r7,1280(sp)
    3708:	d9814115 	stw	r6,1284(sp)
    370c:	3001c926 	beq	r6,zero,3e34 <___vfprintf_internal_r+0x19b4>
    3710:	98000e16 	blt	r19,zero,374c <___vfprintf_internal_r+0x12cc>
    3714:	d9014117 	ldw	r4,1284(sp)
    3718:	000b883a 	mov	r5,zero
    371c:	980d883a 	mov	r6,r19
    3720:	000753c0 	call	753c <memchr>
    3724:	10025926 	beq	r2,zero,408c <___vfprintf_internal_r+0x1c0c>
    3728:	d8c14117 	ldw	r3,1284(sp)
    372c:	10cfc83a 	sub	r7,r2,r3
    3730:	99c19e16 	blt	r19,r7,3dac <___vfprintf_internal_r+0x192c>
    3734:	d9c14515 	stw	r7,1300(sp)
    3738:	38000916 	blt	r7,zero,3760 <___vfprintf_internal_r+0x12e0>
    373c:	d8014615 	stw	zero,1304(sp)
    3740:	003df106 	br	2f08 <___vfprintf_internal_r+0xa88>
    3744:	b8c00007 	ldb	r3,0(r23)
    3748:	003bcc06 	br	267c <___vfprintf_internal_r+0x1fc>
    374c:	d9014117 	ldw	r4,1284(sp)
    3750:	00023b40 	call	23b4 <strlen>
    3754:	d8814515 	stw	r2,1300(sp)
    3758:	100f883a 	mov	r7,r2
    375c:	103ff70e 	bge	r2,zero,373c <___vfprintf_internal_r+0x12bc>
    3760:	d8014515 	stw	zero,1300(sp)
    3764:	d8014615 	stw	zero,1304(sp)
    3768:	003de706 	br	2f08 <___vfprintf_internal_r+0xa88>
    376c:	20c03fcc 	andi	r3,r4,255
    3770:	00800044 	movi	r2,1
    3774:	18802d26 	beq	r3,r2,382c <___vfprintf_internal_r+0x13ac>
    3778:	18800e36 	bltu	r3,r2,37b4 <___vfprintf_internal_r+0x1334>
    377c:	00800084 	movi	r2,2
    3780:	1880fa26 	beq	r3,r2,3b6c <___vfprintf_internal_r+0x16ec>
    3784:	01000074 	movhi	r4,1
    3788:	211f0904 	addi	r4,r4,31780
    378c:	00023b40 	call	23b4 <strlen>
    3790:	100f883a 	mov	r7,r2
    3794:	dcc14515 	stw	r19,1300(sp)
    3798:	9880010e 	bge	r19,r2,37a0 <___vfprintf_internal_r+0x1320>
    379c:	d8814515 	stw	r2,1300(sp)
    37a0:	00800074 	movhi	r2,1
    37a4:	109f0904 	addi	r2,r2,31780
    37a8:	dcc14615 	stw	r19,1304(sp)
    37ac:	d8814115 	stw	r2,1284(sp)
    37b0:	003dd506 	br	2f08 <___vfprintf_internal_r+0xa88>
    37b4:	d9401904 	addi	r5,sp,100
    37b8:	dd000f04 	addi	r20,sp,60
    37bc:	d9414115 	stw	r5,1284(sp)
    37c0:	880a977a 	slli	r5,r17,29
    37c4:	d9814117 	ldw	r6,1284(sp)
    37c8:	8004d0fa 	srli	r2,r16,3
    37cc:	8806d0fa 	srli	r3,r17,3
    37d0:	810001cc 	andi	r4,r16,7
    37d4:	2884b03a 	or	r2,r5,r2
    37d8:	31bfffc4 	addi	r6,r6,-1
    37dc:	21000c04 	addi	r4,r4,48
    37e0:	d9814115 	stw	r6,1284(sp)
    37e4:	10cab03a 	or	r5,r2,r3
    37e8:	31000005 	stb	r4,0(r6)
    37ec:	1021883a 	mov	r16,r2
    37f0:	1823883a 	mov	r17,r3
    37f4:	283ff21e 	bne	r5,zero,37c0 <___vfprintf_internal_r+0x1340>
    37f8:	d8c14c17 	ldw	r3,1328(sp)
    37fc:	1880004c 	andi	r2,r3,1
    3800:	1005003a 	cmpeq	r2,r2,zero
    3804:	103db91e 	bne	r2,zero,2eec <___vfprintf_internal_r+0xa6c>
    3808:	20803fcc 	andi	r2,r4,255
    380c:	1080201c 	xori	r2,r2,128
    3810:	10bfe004 	addi	r2,r2,-128
    3814:	00c00c04 	movi	r3,48
    3818:	10fdb426 	beq	r2,r3,2eec <___vfprintf_internal_r+0xa6c>
    381c:	31bfffc4 	addi	r6,r6,-1
    3820:	d9814115 	stw	r6,1284(sp)
    3824:	30c00005 	stb	r3,0(r6)
    3828:	003db006 	br	2eec <___vfprintf_internal_r+0xa6c>
    382c:	88800068 	cmpgeui	r2,r17,1
    3830:	10002c1e 	bne	r2,zero,38e4 <___vfprintf_internal_r+0x1464>
    3834:	8800021e 	bne	r17,zero,3840 <___vfprintf_internal_r+0x13c0>
    3838:	00800244 	movi	r2,9
    383c:	14002936 	bltu	r2,r16,38e4 <___vfprintf_internal_r+0x1464>
    3840:	d90018c4 	addi	r4,sp,99
    3844:	dd000f04 	addi	r20,sp,60
    3848:	d9014115 	stw	r4,1284(sp)
    384c:	d9014117 	ldw	r4,1284(sp)
    3850:	80800c04 	addi	r2,r16,48
    3854:	20800005 	stb	r2,0(r4)
    3858:	003da406 	br	2eec <___vfprintf_internal_r+0xa6c>
    385c:	dc400d17 	ldw	r17,52(sp)
    3860:	07000074 	movhi	fp,1
    3864:	e71f1084 	addi	fp,fp,31810
    3868:	9425883a 	add	r18,r18,r16
    386c:	8c400044 	addi	r17,r17,1
    3870:	008001c4 	movi	r2,7
    3874:	1f000015 	stw	fp,0(r3)
    3878:	1c000115 	stw	r16,4(r3)
    387c:	dc800e15 	stw	r18,56(sp)
    3880:	dc400d15 	stw	r17,52(sp)
    3884:	147de216 	blt	r2,r17,3010 <___vfprintf_internal_r+0xb90>
    3888:	18c00204 	addi	r3,r3,8
    388c:	003c7a06 	br	2a78 <___vfprintf_internal_r+0x5f8>
    3890:	01000084 	movi	r4,2
    3894:	d8000405 	stb	zero,16(sp)
    3898:	003d8706 	br	2eb8 <___vfprintf_internal_r+0xa38>
    389c:	d9814c17 	ldw	r6,1328(sp)
    38a0:	30c4703a 	and	r2,r6,r3
    38a4:	1005003a 	cmpeq	r2,r2,zero
    38a8:	103cb926 	beq	r2,zero,2b90 <___vfprintf_internal_r+0x710>
    38ac:	d9014117 	ldw	r4,1284(sp)
    38b0:	94800044 	addi	r18,r18,1
    38b4:	8c400044 	addi	r17,r17,1
    38b8:	008001c4 	movi	r2,7
    38bc:	a9000015 	stw	r4,0(r21)
    38c0:	a8c00115 	stw	r3,4(r21)
    38c4:	dc800e15 	stw	r18,56(sp)
    38c8:	dc400d15 	stw	r17,52(sp)
    38cc:	147e6616 	blt	r2,r17,3268 <___vfprintf_internal_r+0xde8>
    38d0:	acc00204 	addi	r19,r21,8
    38d4:	003cd706 	br	2c34 <___vfprintf_internal_r+0x7b4>
    38d8:	07000074 	movhi	fp,1
    38dc:	e71f1084 	addi	fp,fp,31810
    38e0:	003c4f06 	br	2a20 <___vfprintf_internal_r+0x5a0>
    38e4:	dd000f04 	addi	r20,sp,60
    38e8:	dc801904 	addi	r18,sp,100
    38ec:	8009883a 	mov	r4,r16
    38f0:	880b883a 	mov	r5,r17
    38f4:	01800284 	movi	r6,10
    38f8:	000f883a 	mov	r7,zero
    38fc:	0009b780 	call	9b78 <__umoddi3>
    3900:	12000c04 	addi	r8,r2,48
    3904:	94bfffc4 	addi	r18,r18,-1
    3908:	8009883a 	mov	r4,r16
    390c:	880b883a 	mov	r5,r17
    3910:	01800284 	movi	r6,10
    3914:	000f883a 	mov	r7,zero
    3918:	92000005 	stb	r8,0(r18)
    391c:	000959c0 	call	959c <__udivdi3>
    3920:	1009883a 	mov	r4,r2
    3924:	1021883a 	mov	r16,r2
    3928:	18800068 	cmpgeui	r2,r3,1
    392c:	1823883a 	mov	r17,r3
    3930:	103fee1e 	bne	r2,zero,38ec <___vfprintf_internal_r+0x146c>
    3934:	1800021e 	bne	r3,zero,3940 <___vfprintf_internal_r+0x14c0>
    3938:	00800244 	movi	r2,9
    393c:	113feb36 	bltu	r2,r4,38ec <___vfprintf_internal_r+0x146c>
    3940:	94bfffc4 	addi	r18,r18,-1
    3944:	dc814115 	stw	r18,1284(sp)
    3948:	003fc006 	br	384c <___vfprintf_internal_r+0x13cc>
    394c:	d9014c17 	ldw	r4,1328(sp)
    3950:	2080004c 	andi	r2,r4,1
    3954:	10009a1e 	bne	r2,zero,3bc0 <___vfprintf_internal_r+0x1740>
    3958:	d9401904 	addi	r5,sp,100
    395c:	dd000f04 	addi	r20,sp,60
    3960:	d9414115 	stw	r5,1284(sp)
    3964:	003d6106 	br	2eec <___vfprintf_internal_r+0xa6c>
    3968:	d9014f17 	ldw	r4,1340(sp)
    396c:	b00b883a 	mov	r5,r22
    3970:	d9800c04 	addi	r6,sp,48
    3974:	00024280 	call	2428 <__sprint_r>
    3978:	103c791e 	bne	r2,zero,2b60 <___vfprintf_internal_r+0x6e0>
    397c:	dc800e17 	ldw	r18,56(sp)
    3980:	d8c01904 	addi	r3,sp,100
    3984:	003cff06 	br	2d84 <___vfprintf_internal_r+0x904>
    3988:	d8c14c17 	ldw	r3,1328(sp)
    398c:	1880040c 	andi	r2,r3,16
    3990:	1000711e 	bne	r2,zero,3b58 <___vfprintf_internal_r+0x16d8>
    3994:	d9014c17 	ldw	r4,1328(sp)
    3998:	2080100c 	andi	r2,r4,64
    399c:	10006e26 	beq	r2,zero,3b58 <___vfprintf_internal_r+0x16d8>
    39a0:	3c00000b 	ldhu	r16,0(r7)
    39a4:	0023883a 	mov	r17,zero
    39a8:	39c00104 	addi	r7,r7,4
    39ac:	d9c14015 	stw	r7,1280(sp)
    39b0:	003f0006 	br	35b4 <___vfprintf_internal_r+0x1134>
    39b4:	dc400d17 	ldw	r17,52(sp)
    39b8:	07000074 	movhi	fp,1
    39bc:	e71f1084 	addi	fp,fp,31810
    39c0:	9425883a 	add	r18,r18,r16
    39c4:	8c400044 	addi	r17,r17,1
    39c8:	008001c4 	movi	r2,7
    39cc:	1f000015 	stw	fp,0(r3)
    39d0:	1c000115 	stw	r16,4(r3)
    39d4:	dc800e15 	stw	r18,56(sp)
    39d8:	dc400d15 	stw	r17,52(sp)
    39dc:	147d7616 	blt	r2,r17,2fb8 <___vfprintf_internal_r+0xb38>
    39e0:	18c00204 	addi	r3,r3,8
    39e4:	003d7b06 	br	2fd4 <___vfprintf_internal_r+0xb54>
    39e8:	dc800e17 	ldw	r18,56(sp)
    39ec:	dc400d17 	ldw	r17,52(sp)
    39f0:	07000074 	movhi	fp,1
    39f4:	e71f1484 	addi	fp,fp,31826
    39f8:	003bc006 	br	28fc <___vfprintf_internal_r+0x47c>
    39fc:	d9014f17 	ldw	r4,1340(sp)
    3a00:	b00b883a 	mov	r5,r22
    3a04:	d9800c04 	addi	r6,sp,48
    3a08:	00024280 	call	2428 <__sprint_r>
    3a0c:	103c541e 	bne	r2,zero,2b60 <___vfprintf_internal_r+0x6e0>
    3a10:	dc800e17 	ldw	r18,56(sp)
    3a14:	d8c01904 	addi	r3,sp,100
    3a18:	003ce906 	br	2dc0 <___vfprintf_internal_r+0x940>
    3a1c:	3c000017 	ldw	r16,0(r7)
    3a20:	0009883a 	mov	r4,zero
    3a24:	39c00104 	addi	r7,r7,4
    3a28:	0023883a 	mov	r17,zero
    3a2c:	d9c14015 	stw	r7,1280(sp)
    3a30:	d8000405 	stb	zero,16(sp)
    3a34:	003d2006 	br	2eb8 <___vfprintf_internal_r+0xa38>
    3a38:	38800017 	ldw	r2,0(r7)
    3a3c:	39c00104 	addi	r7,r7,4
    3a40:	d9c14015 	stw	r7,1280(sp)
    3a44:	1023d7fa 	srai	r17,r2,31
    3a48:	1021883a 	mov	r16,r2
    3a4c:	003d1806 	br	2eb0 <___vfprintf_internal_r+0xa30>
    3a50:	3c000017 	ldw	r16,0(r7)
    3a54:	01000044 	movi	r4,1
    3a58:	39c00104 	addi	r7,r7,4
    3a5c:	0023883a 	mov	r17,zero
    3a60:	d9c14015 	stw	r7,1280(sp)
    3a64:	d8000405 	stb	zero,16(sp)
    3a68:	003d1306 	br	2eb8 <___vfprintf_internal_r+0xa38>
    3a6c:	00800074 	movhi	r2,1
    3a70:	109f1004 	addi	r2,r2,31808
    3a74:	94800044 	addi	r18,r18,1
    3a78:	8c400044 	addi	r17,r17,1
    3a7c:	a8800015 	stw	r2,0(r21)
    3a80:	00c00044 	movi	r3,1
    3a84:	008001c4 	movi	r2,7
    3a88:	a8c00115 	stw	r3,4(r21)
    3a8c:	dc800e15 	stw	r18,56(sp)
    3a90:	dc400d15 	stw	r17,52(sp)
    3a94:	1440ca16 	blt	r2,r17,3dc0 <___vfprintf_internal_r+0x1940>
    3a98:	a8c00204 	addi	r3,r21,8
    3a9c:	2000061e 	bne	r4,zero,3ab8 <___vfprintf_internal_r+0x1638>
    3aa0:	d9414717 	ldw	r5,1308(sp)
    3aa4:	2800041e 	bne	r5,zero,3ab8 <___vfprintf_internal_r+0x1638>
    3aa8:	d9814c17 	ldw	r6,1328(sp)
    3aac:	3080004c 	andi	r2,r6,1
    3ab0:	1005003a 	cmpeq	r2,r2,zero
    3ab4:	103bf01e 	bne	r2,zero,2a78 <___vfprintf_internal_r+0x5f8>
    3ab8:	00800044 	movi	r2,1
    3abc:	dc400d17 	ldw	r17,52(sp)
    3ac0:	18800115 	stw	r2,4(r3)
    3ac4:	d8814917 	ldw	r2,1316(sp)
    3ac8:	94800044 	addi	r18,r18,1
    3acc:	8c400044 	addi	r17,r17,1
    3ad0:	18800015 	stw	r2,0(r3)
    3ad4:	008001c4 	movi	r2,7
    3ad8:	dc800e15 	stw	r18,56(sp)
    3adc:	dc400d15 	stw	r17,52(sp)
    3ae0:	1440ca16 	blt	r2,r17,3e0c <___vfprintf_internal_r+0x198c>
    3ae4:	18c00204 	addi	r3,r3,8
    3ae8:	0121c83a 	sub	r16,zero,r4
    3aec:	0400500e 	bge	zero,r16,3c30 <___vfprintf_internal_r+0x17b0>
    3af0:	00800404 	movi	r2,16
    3af4:	1400800e 	bge	r2,r16,3cf8 <___vfprintf_internal_r+0x1878>
    3af8:	1027883a 	mov	r19,r2
    3afc:	07000074 	movhi	fp,1
    3b00:	e71f1084 	addi	fp,fp,31810
    3b04:	050001c4 	movi	r20,7
    3b08:	00000306 	br	3b18 <___vfprintf_internal_r+0x1698>
    3b0c:	18c00204 	addi	r3,r3,8
    3b10:	843ffc04 	addi	r16,r16,-16
    3b14:	9c007a0e 	bge	r19,r16,3d00 <___vfprintf_internal_r+0x1880>
    3b18:	94800404 	addi	r18,r18,16
    3b1c:	8c400044 	addi	r17,r17,1
    3b20:	1f000015 	stw	fp,0(r3)
    3b24:	1cc00115 	stw	r19,4(r3)
    3b28:	dc800e15 	stw	r18,56(sp)
    3b2c:	dc400d15 	stw	r17,52(sp)
    3b30:	a47ff60e 	bge	r20,r17,3b0c <___vfprintf_internal_r+0x168c>
    3b34:	d9014f17 	ldw	r4,1340(sp)
    3b38:	b00b883a 	mov	r5,r22
    3b3c:	d9800c04 	addi	r6,sp,48
    3b40:	00024280 	call	2428 <__sprint_r>
    3b44:	103c061e 	bne	r2,zero,2b60 <___vfprintf_internal_r+0x6e0>
    3b48:	dc800e17 	ldw	r18,56(sp)
    3b4c:	dc400d17 	ldw	r17,52(sp)
    3b50:	d8c01904 	addi	r3,sp,100
    3b54:	003fee06 	br	3b10 <___vfprintf_internal_r+0x1690>
    3b58:	3c000017 	ldw	r16,0(r7)
    3b5c:	0023883a 	mov	r17,zero
    3b60:	39c00104 	addi	r7,r7,4
    3b64:	d9c14015 	stw	r7,1280(sp)
    3b68:	003e9206 	br	35b4 <___vfprintf_internal_r+0x1134>
    3b6c:	d9401904 	addi	r5,sp,100
    3b70:	dd000f04 	addi	r20,sp,60
    3b74:	d9414115 	stw	r5,1284(sp)
    3b78:	d9814417 	ldw	r6,1296(sp)
    3b7c:	880a973a 	slli	r5,r17,28
    3b80:	8004d13a 	srli	r2,r16,4
    3b84:	810003cc 	andi	r4,r16,15
    3b88:	3109883a 	add	r4,r6,r4
    3b8c:	2884b03a 	or	r2,r5,r2
    3b90:	21400003 	ldbu	r5,0(r4)
    3b94:	d9014117 	ldw	r4,1284(sp)
    3b98:	8806d13a 	srli	r3,r17,4
    3b9c:	1021883a 	mov	r16,r2
    3ba0:	213fffc4 	addi	r4,r4,-1
    3ba4:	d9014115 	stw	r4,1284(sp)
    3ba8:	d9814117 	ldw	r6,1284(sp)
    3bac:	10c8b03a 	or	r4,r2,r3
    3bb0:	1823883a 	mov	r17,r3
    3bb4:	31400005 	stb	r5,0(r6)
    3bb8:	203fef1e 	bne	r4,zero,3b78 <___vfprintf_internal_r+0x16f8>
    3bbc:	003ccb06 	br	2eec <___vfprintf_internal_r+0xa6c>
    3bc0:	00800c04 	movi	r2,48
    3bc4:	d98018c4 	addi	r6,sp,99
    3bc8:	dd000f04 	addi	r20,sp,60
    3bcc:	d88018c5 	stb	r2,99(sp)
    3bd0:	d9814115 	stw	r6,1284(sp)
    3bd4:	003cc506 	br	2eec <___vfprintf_internal_r+0xa6c>
    3bd8:	dc400d17 	ldw	r17,52(sp)
    3bdc:	07000074 	movhi	fp,1
    3be0:	e71f1484 	addi	fp,fp,31826
    3be4:	003bc706 	br	2b04 <___vfprintf_internal_r+0x684>
    3be8:	d9414c17 	ldw	r5,1328(sp)
    3bec:	2880040c 	andi	r2,r5,16
    3bf0:	10007c26 	beq	r2,zero,3de4 <___vfprintf_internal_r+0x1964>
    3bf4:	38800017 	ldw	r2,0(r7)
    3bf8:	39c00104 	addi	r7,r7,4
    3bfc:	d9c14015 	stw	r7,1280(sp)
    3c00:	d9814b17 	ldw	r6,1324(sp)
    3c04:	d9c14017 	ldw	r7,1280(sp)
    3c08:	11800015 	stw	r6,0(r2)
    3c0c:	003a7806 	br	25f0 <___vfprintf_internal_r+0x170>
    3c10:	d9014f17 	ldw	r4,1340(sp)
    3c14:	b00b883a 	mov	r5,r22
    3c18:	d9800c04 	addi	r6,sp,48
    3c1c:	00024280 	call	2428 <__sprint_r>
    3c20:	103bcf1e 	bne	r2,zero,2b60 <___vfprintf_internal_r+0x6e0>
    3c24:	dc800e17 	ldw	r18,56(sp)
    3c28:	dc400d17 	ldw	r17,52(sp)
    3c2c:	d8c01904 	addi	r3,sp,100
    3c30:	d9014717 	ldw	r4,1308(sp)
    3c34:	d9414117 	ldw	r5,1284(sp)
    3c38:	8c400044 	addi	r17,r17,1
    3c3c:	9125883a 	add	r18,r18,r4
    3c40:	008001c4 	movi	r2,7
    3c44:	19400015 	stw	r5,0(r3)
    3c48:	19000115 	stw	r4,4(r3)
    3c4c:	dc800e15 	stw	r18,56(sp)
    3c50:	dc400d15 	stw	r17,52(sp)
    3c54:	147cee16 	blt	r2,r17,3010 <___vfprintf_internal_r+0xb90>
    3c58:	18c00204 	addi	r3,r3,8
    3c5c:	003b8606 	br	2a78 <___vfprintf_internal_r+0x5f8>
    3c60:	38c00017 	ldw	r3,0(r7)
    3c64:	39000204 	addi	r4,r7,8
    3c68:	d9014015 	stw	r4,1280(sp)
    3c6c:	d8c14215 	stw	r3,1288(sp)
    3c70:	39c00117 	ldw	r7,4(r7)
    3c74:	d9c14315 	stw	r7,1292(sp)
    3c78:	003e2006 	br	34fc <___vfprintf_internal_r+0x107c>
    3c7c:	0005883a 	mov	r2,zero
    3c80:	1409c83a 	sub	r4,r2,r16
    3c84:	1105803a 	cmpltu	r2,r2,r4
    3c88:	044bc83a 	sub	r5,zero,r17
    3c8c:	2885c83a 	sub	r2,r5,r2
    3c90:	2021883a 	mov	r16,r4
    3c94:	1023883a 	mov	r17,r2
    3c98:	01000044 	movi	r4,1
    3c9c:	00800b44 	movi	r2,45
    3ca0:	d8800405 	stb	r2,16(sp)
    3ca4:	003c8406 	br	2eb8 <___vfprintf_internal_r+0xa38>
    3ca8:	d9014f17 	ldw	r4,1340(sp)
    3cac:	b00b883a 	mov	r5,r22
    3cb0:	d9800c04 	addi	r6,sp,48
    3cb4:	00024280 	call	2428 <__sprint_r>
    3cb8:	103ba91e 	bne	r2,zero,2b60 <___vfprintf_internal_r+0x6e0>
    3cbc:	dc800e17 	ldw	r18,56(sp)
    3cc0:	dc400d17 	ldw	r17,52(sp)
    3cc4:	d9000517 	ldw	r4,20(sp)
    3cc8:	d9401904 	addi	r5,sp,100
    3ccc:	003da706 	br	336c <___vfprintf_internal_r+0xeec>
    3cd0:	d9014f17 	ldw	r4,1340(sp)
    3cd4:	b00b883a 	mov	r5,r22
    3cd8:	d9800c04 	addi	r6,sp,48
    3cdc:	00024280 	call	2428 <__sprint_r>
    3ce0:	103b9f1e 	bne	r2,zero,2b60 <___vfprintf_internal_r+0x6e0>
    3ce4:	dc800e17 	ldw	r18,56(sp)
    3ce8:	dc400d17 	ldw	r17,52(sp)
    3cec:	d9000517 	ldw	r4,20(sp)
    3cf0:	d8c01904 	addi	r3,sp,100
    3cf4:	003d9106 	br	333c <___vfprintf_internal_r+0xebc>
    3cf8:	07000074 	movhi	fp,1
    3cfc:	e71f1084 	addi	fp,fp,31810
    3d00:	9425883a 	add	r18,r18,r16
    3d04:	8c400044 	addi	r17,r17,1
    3d08:	008001c4 	movi	r2,7
    3d0c:	1f000015 	stw	fp,0(r3)
    3d10:	1c000115 	stw	r16,4(r3)
    3d14:	dc800e15 	stw	r18,56(sp)
    3d18:	dc400d15 	stw	r17,52(sp)
    3d1c:	147fbc16 	blt	r2,r17,3c10 <___vfprintf_internal_r+0x1790>
    3d20:	18c00204 	addi	r3,r3,8
    3d24:	003fc206 	br	3c30 <___vfprintf_internal_r+0x17b0>
    3d28:	d9014f17 	ldw	r4,1340(sp)
    3d2c:	b00b883a 	mov	r5,r22
    3d30:	d9800c04 	addi	r6,sp,48
    3d34:	00024280 	call	2428 <__sprint_r>
    3d38:	103b891e 	bne	r2,zero,2b60 <___vfprintf_internal_r+0x6e0>
    3d3c:	dc800e17 	ldw	r18,56(sp)
    3d40:	d9000517 	ldw	r4,20(sp)
    3d44:	d8c01904 	addi	r3,sp,100
    3d48:	003d0206 	br	3154 <___vfprintf_internal_r+0xcd4>
    3d4c:	07000074 	movhi	fp,1
    3d50:	e71f1084 	addi	fp,fp,31810
    3d54:	003be406 	br	2ce8 <___vfprintf_internal_r+0x868>
    3d58:	00800074 	movhi	r2,1
    3d5c:	109eff04 	addi	r2,r2,31740
    3d60:	d8814115 	stw	r2,1284(sp)
    3d64:	003df506 	br	353c <___vfprintf_internal_r+0x10bc>
    3d68:	d9014217 	ldw	r4,1288(sp)
    3d6c:	d9414317 	ldw	r5,1292(sp)
    3d70:	0008e600 	call	8e60 <__isnand>
    3d74:	10003926 	beq	r2,zero,3e5c <___vfprintf_internal_r+0x19dc>
    3d78:	d9414d17 	ldw	r5,1332(sp)
    3d7c:	008011c4 	movi	r2,71
    3d80:	1140ce16 	blt	r2,r5,40bc <___vfprintf_internal_r+0x1c3c>
    3d84:	01800074 	movhi	r6,1
    3d88:	319f0004 	addi	r6,r6,31744
    3d8c:	d9814115 	stw	r6,1284(sp)
    3d90:	003dea06 	br	353c <___vfprintf_internal_r+0x10bc>
    3d94:	d9014c17 	ldw	r4,1328(sp)
    3d98:	bdc00044 	addi	r23,r23,1
    3d9c:	b8c00007 	ldb	r3,0(r23)
    3da0:	21000814 	ori	r4,r4,32
    3da4:	d9014c15 	stw	r4,1328(sp)
    3da8:	003a3406 	br	267c <___vfprintf_internal_r+0x1fc>
    3dac:	dcc14515 	stw	r19,1300(sp)
    3db0:	98011016 	blt	r19,zero,41f4 <___vfprintf_internal_r+0x1d74>
    3db4:	980f883a 	mov	r7,r19
    3db8:	d8014615 	stw	zero,1304(sp)
    3dbc:	003c5206 	br	2f08 <___vfprintf_internal_r+0xa88>
    3dc0:	d9014f17 	ldw	r4,1340(sp)
    3dc4:	b00b883a 	mov	r5,r22
    3dc8:	d9800c04 	addi	r6,sp,48
    3dcc:	00024280 	call	2428 <__sprint_r>
    3dd0:	103b631e 	bne	r2,zero,2b60 <___vfprintf_internal_r+0x6e0>
    3dd4:	dc800e17 	ldw	r18,56(sp)
    3dd8:	d9000517 	ldw	r4,20(sp)
    3ddc:	d8c01904 	addi	r3,sp,100
    3de0:	003f2e06 	br	3a9c <___vfprintf_internal_r+0x161c>
    3de4:	d8c14c17 	ldw	r3,1328(sp)
    3de8:	1880100c 	andi	r2,r3,64
    3dec:	1000a026 	beq	r2,zero,4070 <___vfprintf_internal_r+0x1bf0>
    3df0:	38800017 	ldw	r2,0(r7)
    3df4:	39c00104 	addi	r7,r7,4
    3df8:	d9c14015 	stw	r7,1280(sp)
    3dfc:	d9014b17 	ldw	r4,1324(sp)
    3e00:	d9c14017 	ldw	r7,1280(sp)
    3e04:	1100000d 	sth	r4,0(r2)
    3e08:	0039f906 	br	25f0 <___vfprintf_internal_r+0x170>
    3e0c:	d9014f17 	ldw	r4,1340(sp)
    3e10:	b00b883a 	mov	r5,r22
    3e14:	d9800c04 	addi	r6,sp,48
    3e18:	00024280 	call	2428 <__sprint_r>
    3e1c:	103b501e 	bne	r2,zero,2b60 <___vfprintf_internal_r+0x6e0>
    3e20:	dc800e17 	ldw	r18,56(sp)
    3e24:	dc400d17 	ldw	r17,52(sp)
    3e28:	d9000517 	ldw	r4,20(sp)
    3e2c:	d8c01904 	addi	r3,sp,100
    3e30:	003f2d06 	br	3ae8 <___vfprintf_internal_r+0x1668>
    3e34:	00800184 	movi	r2,6
    3e38:	14c09a36 	bltu	r2,r19,40a4 <___vfprintf_internal_r+0x1c24>
    3e3c:	dcc14515 	stw	r19,1300(sp)
    3e40:	9800010e 	bge	r19,zero,3e48 <___vfprintf_internal_r+0x19c8>
    3e44:	d8014515 	stw	zero,1300(sp)
    3e48:	00800074 	movhi	r2,1
    3e4c:	109f0204 	addi	r2,r2,31752
    3e50:	980f883a 	mov	r7,r19
    3e54:	d8814115 	stw	r2,1284(sp)
    3e58:	003a7806 	br	283c <___vfprintf_internal_r+0x3bc>
    3e5c:	00bfffc4 	movi	r2,-1
    3e60:	9880e226 	beq	r19,r2,41ec <___vfprintf_internal_r+0x1d6c>
    3e64:	d9414d17 	ldw	r5,1332(sp)
    3e68:	008019c4 	movi	r2,103
    3e6c:	2880dc26 	beq	r5,r2,41e0 <___vfprintf_internal_r+0x1d60>
    3e70:	008011c4 	movi	r2,71
    3e74:	2880da26 	beq	r5,r2,41e0 <___vfprintf_internal_r+0x1d60>
    3e78:	d9414c17 	ldw	r5,1328(sp)
    3e7c:	d9014317 	ldw	r4,1292(sp)
    3e80:	d9814217 	ldw	r6,1288(sp)
    3e84:	29404014 	ori	r5,r5,256
    3e88:	d9414c15 	stw	r5,1328(sp)
    3e8c:	2000cc16 	blt	r4,zero,41c0 <___vfprintf_internal_r+0x1d40>
    3e90:	3021883a 	mov	r16,r6
    3e94:	2023883a 	mov	r17,r4
    3e98:	0039883a 	mov	fp,zero
    3e9c:	d9414d17 	ldw	r5,1332(sp)
    3ea0:	00801984 	movi	r2,102
    3ea4:	2880b726 	beq	r5,r2,4184 <___vfprintf_internal_r+0x1d04>
    3ea8:	00801184 	movi	r2,70
    3eac:	2880b526 	beq	r5,r2,4184 <___vfprintf_internal_r+0x1d04>
    3eb0:	00801944 	movi	r2,101
    3eb4:	2880c826 	beq	r5,r2,41d8 <___vfprintf_internal_r+0x1d58>
    3eb8:	00801144 	movi	r2,69
    3ebc:	2880c626 	beq	r5,r2,41d8 <___vfprintf_internal_r+0x1d58>
    3ec0:	9829883a 	mov	r20,r19
    3ec4:	d9014f17 	ldw	r4,1340(sp)
    3ec8:	d8800504 	addi	r2,sp,20
    3ecc:	880d883a 	mov	r6,r17
    3ed0:	d8800115 	stw	r2,4(sp)
    3ed4:	d8c00604 	addi	r3,sp,24
    3ed8:	d8800704 	addi	r2,sp,28
    3edc:	800b883a 	mov	r5,r16
    3ee0:	01c00084 	movi	r7,2
    3ee4:	d8c00215 	stw	r3,8(sp)
    3ee8:	d8800315 	stw	r2,12(sp)
    3eec:	dd000015 	stw	r20,0(sp)
    3ef0:	00046a40 	call	46a4 <_dtoa_r>
    3ef4:	d9814d17 	ldw	r6,1332(sp)
    3ef8:	d8814115 	stw	r2,1284(sp)
    3efc:	008019c4 	movi	r2,103
    3f00:	30809526 	beq	r6,r2,4158 <___vfprintf_internal_r+0x1cd8>
    3f04:	d8c14d17 	ldw	r3,1332(sp)
    3f08:	008011c4 	movi	r2,71
    3f0c:	18809226 	beq	r3,r2,4158 <___vfprintf_internal_r+0x1cd8>
    3f10:	d9414117 	ldw	r5,1284(sp)
    3f14:	d9814d17 	ldw	r6,1332(sp)
    3f18:	00801984 	movi	r2,102
    3f1c:	2d25883a 	add	r18,r5,r20
    3f20:	30808626 	beq	r6,r2,413c <___vfprintf_internal_r+0x1cbc>
    3f24:	00801184 	movi	r2,70
    3f28:	30808426 	beq	r6,r2,413c <___vfprintf_internal_r+0x1cbc>
    3f2c:	000d883a 	mov	r6,zero
    3f30:	000f883a 	mov	r7,zero
    3f34:	880b883a 	mov	r5,r17
    3f38:	8009883a 	mov	r4,r16
    3f3c:	000a7440 	call	a744 <__eqdf2>
    3f40:	1000751e 	bne	r2,zero,4118 <___vfprintf_internal_r+0x1c98>
    3f44:	9005883a 	mov	r2,r18
    3f48:	dc800715 	stw	r18,28(sp)
    3f4c:	d9014117 	ldw	r4,1284(sp)
    3f50:	d9414d17 	ldw	r5,1332(sp)
    3f54:	00c019c4 	movi	r3,103
    3f58:	1125c83a 	sub	r18,r2,r4
    3f5c:	28c06826 	beq	r5,r3,4100 <___vfprintf_internal_r+0x1c80>
    3f60:	008011c4 	movi	r2,71
    3f64:	28806626 	beq	r5,r2,4100 <___vfprintf_internal_r+0x1c80>
    3f68:	d9000517 	ldw	r4,20(sp)
    3f6c:	d8c14d17 	ldw	r3,1332(sp)
    3f70:	00801944 	movi	r2,101
    3f74:	10c05516 	blt	r2,r3,40cc <___vfprintf_internal_r+0x1c4c>
    3f78:	213fffc4 	addi	r4,r4,-1
    3f7c:	d9000515 	stw	r4,20(sp)
    3f80:	d8c00805 	stb	r3,32(sp)
    3f84:	2021883a 	mov	r16,r4
    3f88:	2000c116 	blt	r4,zero,4290 <___vfprintf_internal_r+0x1e10>
    3f8c:	00800ac4 	movi	r2,43
    3f90:	d8800845 	stb	r2,33(sp)
    3f94:	00800244 	movi	r2,9
    3f98:	1400af0e 	bge	r2,r16,4258 <___vfprintf_internal_r+0x1dd8>
    3f9c:	1027883a 	mov	r19,r2
    3fa0:	dc400b84 	addi	r17,sp,46
    3fa4:	8009883a 	mov	r4,r16
    3fa8:	01400284 	movi	r5,10
    3fac:	00019e40 	call	19e4 <__modsi3>
    3fb0:	10800c04 	addi	r2,r2,48
    3fb4:	8c7fffc4 	addi	r17,r17,-1
    3fb8:	8009883a 	mov	r4,r16
    3fbc:	01400284 	movi	r5,10
    3fc0:	88800005 	stb	r2,0(r17)
    3fc4:	00019840 	call	1984 <__divsi3>
    3fc8:	1021883a 	mov	r16,r2
    3fcc:	98bff516 	blt	r19,r2,3fa4 <___vfprintf_internal_r+0x1b24>
    3fd0:	10c00c04 	addi	r3,r2,48
    3fd4:	d88009c4 	addi	r2,sp,39
    3fd8:	108001c4 	addi	r2,r2,7
    3fdc:	897fffc4 	addi	r5,r17,-1
    3fe0:	88ffffc5 	stb	r3,-1(r17)
    3fe4:	2880a72e 	bgeu	r5,r2,4284 <___vfprintf_internal_r+0x1e04>
    3fe8:	1009883a 	mov	r4,r2
    3fec:	d9800804 	addi	r6,sp,32
    3ff0:	d8c00884 	addi	r3,sp,34
    3ff4:	28800003 	ldbu	r2,0(r5)
    3ff8:	29400044 	addi	r5,r5,1
    3ffc:	18800005 	stb	r2,0(r3)
    4000:	18c00044 	addi	r3,r3,1
    4004:	293ffb36 	bltu	r5,r4,3ff4 <___vfprintf_internal_r+0x1b74>
    4008:	1987c83a 	sub	r3,r3,r6
    400c:	00800044 	movi	r2,1
    4010:	d8c14815 	stw	r3,1312(sp)
    4014:	90cf883a 	add	r7,r18,r3
    4018:	1480960e 	bge	r2,r18,4274 <___vfprintf_internal_r+0x1df4>
    401c:	39c00044 	addi	r7,r7,1
    4020:	d9c14515 	stw	r7,1300(sp)
    4024:	38003416 	blt	r7,zero,40f8 <___vfprintf_internal_r+0x1c78>
    4028:	e0803fcc 	andi	r2,fp,255
    402c:	1080201c 	xori	r2,r2,128
    4030:	10bfe004 	addi	r2,r2,-128
    4034:	10004e26 	beq	r2,zero,4170 <___vfprintf_internal_r+0x1cf0>
    4038:	00800b44 	movi	r2,45
    403c:	dc814715 	stw	r18,1308(sp)
    4040:	d8014615 	stw	zero,1304(sp)
    4044:	d8800405 	stb	r2,16(sp)
    4048:	003bb106 	br	2f10 <___vfprintf_internal_r+0xa90>
    404c:	00800b44 	movi	r2,45
    4050:	d8800405 	stb	r2,16(sp)
    4054:	003d3306 	br	3524 <___vfprintf_internal_r+0x10a4>
    4058:	d9014f17 	ldw	r4,1340(sp)
    405c:	b00b883a 	mov	r5,r22
    4060:	d9800c04 	addi	r6,sp,48
    4064:	00024280 	call	2428 <__sprint_r>
    4068:	103abd1e 	bne	r2,zero,2b60 <___vfprintf_internal_r+0x6e0>
    406c:	003abb06 	br	2b5c <___vfprintf_internal_r+0x6dc>
    4070:	38800017 	ldw	r2,0(r7)
    4074:	39c00104 	addi	r7,r7,4
    4078:	d9c14015 	stw	r7,1280(sp)
    407c:	d9414b17 	ldw	r5,1324(sp)
    4080:	d9c14017 	ldw	r7,1280(sp)
    4084:	11400015 	stw	r5,0(r2)
    4088:	00395906 	br	25f0 <___vfprintf_internal_r+0x170>
    408c:	980f883a 	mov	r7,r19
    4090:	dcc14515 	stw	r19,1300(sp)
    4094:	d8014615 	stw	zero,1304(sp)
    4098:	003b9b06 	br	2f08 <___vfprintf_internal_r+0xa88>
    409c:	0027883a 	mov	r19,zero
    40a0:	00397806 	br	2684 <___vfprintf_internal_r+0x204>
    40a4:	00c00074 	movhi	r3,1
    40a8:	18df0204 	addi	r3,r3,31752
    40ac:	100f883a 	mov	r7,r2
    40b0:	d8814515 	stw	r2,1300(sp)
    40b4:	d8c14115 	stw	r3,1284(sp)
    40b8:	0039e006 	br	283c <___vfprintf_internal_r+0x3bc>
    40bc:	00800074 	movhi	r2,1
    40c0:	109f0104 	addi	r2,r2,31748
    40c4:	d8814115 	stw	r2,1284(sp)
    40c8:	003d1c06 	br	353c <___vfprintf_internal_r+0x10bc>
    40cc:	d9414d17 	ldw	r5,1332(sp)
    40d0:	00801984 	movi	r2,102
    40d4:	28804926 	beq	r5,r2,41fc <___vfprintf_internal_r+0x1d7c>
    40d8:	200f883a 	mov	r7,r4
    40dc:	24805716 	blt	r4,r18,423c <___vfprintf_internal_r+0x1dbc>
    40e0:	d9414c17 	ldw	r5,1328(sp)
    40e4:	2880004c 	andi	r2,r5,1
    40e8:	10000126 	beq	r2,zero,40f0 <___vfprintf_internal_r+0x1c70>
    40ec:	21c00044 	addi	r7,r4,1
    40f0:	d9c14515 	stw	r7,1300(sp)
    40f4:	383fcc0e 	bge	r7,zero,4028 <___vfprintf_internal_r+0x1ba8>
    40f8:	d8014515 	stw	zero,1300(sp)
    40fc:	003fca06 	br	4028 <___vfprintf_internal_r+0x1ba8>
    4100:	d9000517 	ldw	r4,20(sp)
    4104:	00bfff04 	movi	r2,-4
    4108:	1100480e 	bge	r2,r4,422c <___vfprintf_internal_r+0x1dac>
    410c:	99004716 	blt	r19,r4,422c <___vfprintf_internal_r+0x1dac>
    4110:	d8c14d15 	stw	r3,1332(sp)
    4114:	003ff006 	br	40d8 <___vfprintf_internal_r+0x1c58>
    4118:	d8800717 	ldw	r2,28(sp)
    411c:	14bf8b2e 	bgeu	r2,r18,3f4c <___vfprintf_internal_r+0x1acc>
    4120:	9007883a 	mov	r3,r18
    4124:	01000c04 	movi	r4,48
    4128:	11000005 	stb	r4,0(r2)
    412c:	10800044 	addi	r2,r2,1
    4130:	d8800715 	stw	r2,28(sp)
    4134:	18bffc1e 	bne	r3,r2,4128 <___vfprintf_internal_r+0x1ca8>
    4138:	003f8406 	br	3f4c <___vfprintf_internal_r+0x1acc>
    413c:	d8814117 	ldw	r2,1284(sp)
    4140:	10c00007 	ldb	r3,0(r2)
    4144:	00800c04 	movi	r2,48
    4148:	18805b26 	beq	r3,r2,42b8 <___vfprintf_internal_r+0x1e38>
    414c:	d9000517 	ldw	r4,20(sp)
    4150:	9125883a 	add	r18,r18,r4
    4154:	003f7506 	br	3f2c <___vfprintf_internal_r+0x1aac>
    4158:	d9014c17 	ldw	r4,1328(sp)
    415c:	2080004c 	andi	r2,r4,1
    4160:	1005003a 	cmpeq	r2,r2,zero
    4164:	103f6a26 	beq	r2,zero,3f10 <___vfprintf_internal_r+0x1a90>
    4168:	d8800717 	ldw	r2,28(sp)
    416c:	003f7706 	br	3f4c <___vfprintf_internal_r+0x1acc>
    4170:	d9c14515 	stw	r7,1300(sp)
    4174:	38004d16 	blt	r7,zero,42ac <___vfprintf_internal_r+0x1e2c>
    4178:	dc814715 	stw	r18,1308(sp)
    417c:	d8014615 	stw	zero,1304(sp)
    4180:	003b6106 	br	2f08 <___vfprintf_internal_r+0xa88>
    4184:	d9014f17 	ldw	r4,1340(sp)
    4188:	d8800504 	addi	r2,sp,20
    418c:	d8800115 	stw	r2,4(sp)
    4190:	d8c00604 	addi	r3,sp,24
    4194:	d8800704 	addi	r2,sp,28
    4198:	800b883a 	mov	r5,r16
    419c:	880d883a 	mov	r6,r17
    41a0:	01c000c4 	movi	r7,3
    41a4:	d8c00215 	stw	r3,8(sp)
    41a8:	d8800315 	stw	r2,12(sp)
    41ac:	dcc00015 	stw	r19,0(sp)
    41b0:	9829883a 	mov	r20,r19
    41b4:	00046a40 	call	46a4 <_dtoa_r>
    41b8:	d8814115 	stw	r2,1284(sp)
    41bc:	003f5106 	br	3f04 <___vfprintf_internal_r+0x1a84>
    41c0:	d8c14217 	ldw	r3,1288(sp)
    41c4:	d9014317 	ldw	r4,1292(sp)
    41c8:	07000b44 	movi	fp,45
    41cc:	1821883a 	mov	r16,r3
    41d0:	2460003c 	xorhi	r17,r4,32768
    41d4:	003f3106 	br	3e9c <___vfprintf_internal_r+0x1a1c>
    41d8:	9d000044 	addi	r20,r19,1
    41dc:	003f3906 	br	3ec4 <___vfprintf_internal_r+0x1a44>
    41e0:	983f251e 	bne	r19,zero,3e78 <___vfprintf_internal_r+0x19f8>
    41e4:	04c00044 	movi	r19,1
    41e8:	003f2306 	br	3e78 <___vfprintf_internal_r+0x19f8>
    41ec:	04c00184 	movi	r19,6
    41f0:	003f2106 	br	3e78 <___vfprintf_internal_r+0x19f8>
    41f4:	d8014515 	stw	zero,1300(sp)
    41f8:	003eee06 	br	3db4 <___vfprintf_internal_r+0x1934>
    41fc:	200f883a 	mov	r7,r4
    4200:	0100370e 	bge	zero,r4,42e0 <___vfprintf_internal_r+0x1e60>
    4204:	9800031e 	bne	r19,zero,4214 <___vfprintf_internal_r+0x1d94>
    4208:	d9814c17 	ldw	r6,1328(sp)
    420c:	3080004c 	andi	r2,r6,1
    4210:	103fb726 	beq	r2,zero,40f0 <___vfprintf_internal_r+0x1c70>
    4214:	20800044 	addi	r2,r4,1
    4218:	98a7883a 	add	r19,r19,r2
    421c:	dcc14515 	stw	r19,1300(sp)
    4220:	980f883a 	mov	r7,r19
    4224:	983f800e 	bge	r19,zero,4028 <___vfprintf_internal_r+0x1ba8>
    4228:	003fb306 	br	40f8 <___vfprintf_internal_r+0x1c78>
    422c:	d9814d17 	ldw	r6,1332(sp)
    4230:	31bfff84 	addi	r6,r6,-2
    4234:	d9814d15 	stw	r6,1332(sp)
    4238:	003f4c06 	br	3f6c <___vfprintf_internal_r+0x1aec>
    423c:	0100180e 	bge	zero,r4,42a0 <___vfprintf_internal_r+0x1e20>
    4240:	00800044 	movi	r2,1
    4244:	1485883a 	add	r2,r2,r18
    4248:	d8814515 	stw	r2,1300(sp)
    424c:	100f883a 	mov	r7,r2
    4250:	103f750e 	bge	r2,zero,4028 <___vfprintf_internal_r+0x1ba8>
    4254:	003fa806 	br	40f8 <___vfprintf_internal_r+0x1c78>
    4258:	80c00c04 	addi	r3,r16,48
    425c:	00800c04 	movi	r2,48
    4260:	d8c008c5 	stb	r3,35(sp)
    4264:	d9800804 	addi	r6,sp,32
    4268:	d8c00904 	addi	r3,sp,36
    426c:	d8800885 	stb	r2,34(sp)
    4270:	003f6506 	br	4008 <___vfprintf_internal_r+0x1b88>
    4274:	d9014c17 	ldw	r4,1328(sp)
    4278:	2084703a 	and	r2,r4,r2
    427c:	103f9c26 	beq	r2,zero,40f0 <___vfprintf_internal_r+0x1c70>
    4280:	003f6606 	br	401c <___vfprintf_internal_r+0x1b9c>
    4284:	d9800804 	addi	r6,sp,32
    4288:	d8c00884 	addi	r3,sp,34
    428c:	003f5e06 	br	4008 <___vfprintf_internal_r+0x1b88>
    4290:	00800b44 	movi	r2,45
    4294:	0121c83a 	sub	r16,zero,r4
    4298:	d8800845 	stb	r2,33(sp)
    429c:	003f3d06 	br	3f94 <___vfprintf_internal_r+0x1b14>
    42a0:	00800084 	movi	r2,2
    42a4:	1105c83a 	sub	r2,r2,r4
    42a8:	003fe606 	br	4244 <___vfprintf_internal_r+0x1dc4>
    42ac:	d8014515 	stw	zero,1300(sp)
    42b0:	dc814715 	stw	r18,1308(sp)
    42b4:	003fb106 	br	417c <___vfprintf_internal_r+0x1cfc>
    42b8:	000d883a 	mov	r6,zero
    42bc:	000f883a 	mov	r7,zero
    42c0:	8009883a 	mov	r4,r16
    42c4:	880b883a 	mov	r5,r17
    42c8:	000a7cc0 	call	a7cc <__nedf2>
    42cc:	103f9f26 	beq	r2,zero,414c <___vfprintf_internal_r+0x1ccc>
    42d0:	00800044 	movi	r2,1
    42d4:	1509c83a 	sub	r4,r2,r20
    42d8:	d9000515 	stw	r4,20(sp)
    42dc:	003f9b06 	br	414c <___vfprintf_internal_r+0x1ccc>
    42e0:	98000d1e 	bne	r19,zero,4318 <___vfprintf_internal_r+0x1e98>
    42e4:	d8c14c17 	ldw	r3,1328(sp)
    42e8:	1880004c 	andi	r2,r3,1
    42ec:	10000a1e 	bne	r2,zero,4318 <___vfprintf_internal_r+0x1e98>
    42f0:	01000044 	movi	r4,1
    42f4:	200f883a 	mov	r7,r4
    42f8:	d9014515 	stw	r4,1300(sp)
    42fc:	003f4a06 	br	4028 <___vfprintf_internal_r+0x1ba8>
    4300:	3cc00017 	ldw	r19,0(r7)
    4304:	39c00104 	addi	r7,r7,4
    4308:	983d0e0e 	bge	r19,zero,3744 <___vfprintf_internal_r+0x12c4>
    430c:	b8c00007 	ldb	r3,0(r23)
    4310:	04ffffc4 	movi	r19,-1
    4314:	0038d906 	br	267c <___vfprintf_internal_r+0x1fc>
    4318:	9cc00084 	addi	r19,r19,2
    431c:	dcc14515 	stw	r19,1300(sp)
    4320:	980f883a 	mov	r7,r19
    4324:	983f400e 	bge	r19,zero,4028 <___vfprintf_internal_r+0x1ba8>
    4328:	003f7306 	br	40f8 <___vfprintf_internal_r+0x1c78>

0000432c <__vfprintf_internal>:
    432c:	008000b4 	movhi	r2,2
    4330:	10a68a04 	addi	r2,r2,-26072
    4334:	2013883a 	mov	r9,r4
    4338:	11000017 	ldw	r4,0(r2)
    433c:	2805883a 	mov	r2,r5
    4340:	300f883a 	mov	r7,r6
    4344:	480b883a 	mov	r5,r9
    4348:	100d883a 	mov	r6,r2
    434c:	00024801 	jmpi	2480 <___vfprintf_internal_r>

00004350 <__swsetup_r>:
    4350:	008000b4 	movhi	r2,2
    4354:	10a68a04 	addi	r2,r2,-26072
    4358:	10c00017 	ldw	r3,0(r2)
    435c:	defffd04 	addi	sp,sp,-12
    4360:	dc400115 	stw	r17,4(sp)
    4364:	dc000015 	stw	r16,0(sp)
    4368:	dfc00215 	stw	ra,8(sp)
    436c:	2023883a 	mov	r17,r4
    4370:	2821883a 	mov	r16,r5
    4374:	18000226 	beq	r3,zero,4380 <__swsetup_r+0x30>
    4378:	18800e17 	ldw	r2,56(r3)
    437c:	10001f26 	beq	r2,zero,43fc <__swsetup_r+0xac>
    4380:	8100030b 	ldhu	r4,12(r16)
    4384:	2080020c 	andi	r2,r4,8
    4388:	10002826 	beq	r2,zero,442c <__swsetup_r+0xdc>
    438c:	81400417 	ldw	r5,16(r16)
    4390:	28001d26 	beq	r5,zero,4408 <__swsetup_r+0xb8>
    4394:	2080004c 	andi	r2,r4,1
    4398:	1005003a 	cmpeq	r2,r2,zero
    439c:	10000b26 	beq	r2,zero,43cc <__swsetup_r+0x7c>
    43a0:	2080008c 	andi	r2,r4,2
    43a4:	10001226 	beq	r2,zero,43f0 <__swsetup_r+0xa0>
    43a8:	0005883a 	mov	r2,zero
    43ac:	80800215 	stw	r2,8(r16)
    43b0:	28000b26 	beq	r5,zero,43e0 <__swsetup_r+0x90>
    43b4:	0005883a 	mov	r2,zero
    43b8:	dfc00217 	ldw	ra,8(sp)
    43bc:	dc400117 	ldw	r17,4(sp)
    43c0:	dc000017 	ldw	r16,0(sp)
    43c4:	dec00304 	addi	sp,sp,12
    43c8:	f800283a 	ret
    43cc:	80800517 	ldw	r2,20(r16)
    43d0:	80000215 	stw	zero,8(r16)
    43d4:	0085c83a 	sub	r2,zero,r2
    43d8:	80800615 	stw	r2,24(r16)
    43dc:	283ff51e 	bne	r5,zero,43b4 <__swsetup_r+0x64>
    43e0:	2080200c 	andi	r2,r4,128
    43e4:	103ff326 	beq	r2,zero,43b4 <__swsetup_r+0x64>
    43e8:	00bfffc4 	movi	r2,-1
    43ec:	003ff206 	br	43b8 <__swsetup_r+0x68>
    43f0:	80800517 	ldw	r2,20(r16)
    43f4:	80800215 	stw	r2,8(r16)
    43f8:	003fed06 	br	43b0 <__swsetup_r+0x60>
    43fc:	1809883a 	mov	r4,r3
    4400:	0005ef00 	call	5ef0 <__sinit>
    4404:	003fde06 	br	4380 <__swsetup_r+0x30>
    4408:	20c0a00c 	andi	r3,r4,640
    440c:	00808004 	movi	r2,512
    4410:	18bfe026 	beq	r3,r2,4394 <__swsetup_r+0x44>
    4414:	8809883a 	mov	r4,r17
    4418:	800b883a 	mov	r5,r16
    441c:	0006c680 	call	6c68 <__smakebuf_r>
    4420:	8100030b 	ldhu	r4,12(r16)
    4424:	81400417 	ldw	r5,16(r16)
    4428:	003fda06 	br	4394 <__swsetup_r+0x44>
    442c:	2080040c 	andi	r2,r4,16
    4430:	103fed26 	beq	r2,zero,43e8 <__swsetup_r+0x98>
    4434:	2080010c 	andi	r2,r4,4
    4438:	10001226 	beq	r2,zero,4484 <__swsetup_r+0x134>
    443c:	81400c17 	ldw	r5,48(r16)
    4440:	28000526 	beq	r5,zero,4458 <__swsetup_r+0x108>
    4444:	80801004 	addi	r2,r16,64
    4448:	28800226 	beq	r5,r2,4454 <__swsetup_r+0x104>
    444c:	8809883a 	mov	r4,r17
    4450:	00062740 	call	6274 <_free_r>
    4454:	80000c15 	stw	zero,48(r16)
    4458:	8080030b 	ldhu	r2,12(r16)
    445c:	81400417 	ldw	r5,16(r16)
    4460:	80000115 	stw	zero,4(r16)
    4464:	10bff6cc 	andi	r2,r2,65499
    4468:	8080030d 	sth	r2,12(r16)
    446c:	81400015 	stw	r5,0(r16)
    4470:	8080030b 	ldhu	r2,12(r16)
    4474:	10800214 	ori	r2,r2,8
    4478:	113fffcc 	andi	r4,r2,65535
    447c:	8080030d 	sth	r2,12(r16)
    4480:	003fc306 	br	4390 <__swsetup_r+0x40>
    4484:	81400417 	ldw	r5,16(r16)
    4488:	003ff906 	br	4470 <__swsetup_r+0x120>

0000448c <quorem>:
    448c:	28c00417 	ldw	r3,16(r5)
    4490:	20800417 	ldw	r2,16(r4)
    4494:	defff604 	addi	sp,sp,-40
    4498:	ddc00715 	stw	r23,28(sp)
    449c:	dd400515 	stw	r21,20(sp)
    44a0:	dfc00915 	stw	ra,36(sp)
    44a4:	df000815 	stw	fp,32(sp)
    44a8:	dd800615 	stw	r22,24(sp)
    44ac:	dd000415 	stw	r20,16(sp)
    44b0:	dcc00315 	stw	r19,12(sp)
    44b4:	dc800215 	stw	r18,8(sp)
    44b8:	dc400115 	stw	r17,4(sp)
    44bc:	dc000015 	stw	r16,0(sp)
    44c0:	202f883a 	mov	r23,r4
    44c4:	282b883a 	mov	r21,r5
    44c8:	10c07416 	blt	r2,r3,469c <quorem+0x210>
    44cc:	1c7fffc4 	addi	r17,r3,-1
    44d0:	8c45883a 	add	r2,r17,r17
    44d4:	1085883a 	add	r2,r2,r2
    44d8:	2c000504 	addi	r16,r5,20
    44dc:	24c00504 	addi	r19,r4,20
    44e0:	14ed883a 	add	r22,r2,r19
    44e4:	80a5883a 	add	r18,r16,r2
    44e8:	b7000017 	ldw	fp,0(r22)
    44ec:	91400017 	ldw	r5,0(r18)
    44f0:	e009883a 	mov	r4,fp
    44f4:	29400044 	addi	r5,r5,1
    44f8:	0001a440 	call	1a44 <__udivsi3>
    44fc:	1029883a 	mov	r20,r2
    4500:	10003c1e 	bne	r2,zero,45f4 <quorem+0x168>
    4504:	a80b883a 	mov	r5,r21
    4508:	b809883a 	mov	r4,r23
    450c:	00079940 	call	7994 <__mcmp>
    4510:	10002b16 	blt	r2,zero,45c0 <quorem+0x134>
    4514:	a5000044 	addi	r20,r20,1
    4518:	980f883a 	mov	r7,r19
    451c:	0011883a 	mov	r8,zero
    4520:	0009883a 	mov	r4,zero
    4524:	81400017 	ldw	r5,0(r16)
    4528:	38c00017 	ldw	r3,0(r7)
    452c:	84000104 	addi	r16,r16,4
    4530:	28bfffcc 	andi	r2,r5,65535
    4534:	2085883a 	add	r2,r4,r2
    4538:	11bfffcc 	andi	r6,r2,65535
    453c:	193fffcc 	andi	r4,r3,65535
    4540:	1004d43a 	srli	r2,r2,16
    4544:	280ad43a 	srli	r5,r5,16
    4548:	2189c83a 	sub	r4,r4,r6
    454c:	2209883a 	add	r4,r4,r8
    4550:	1806d43a 	srli	r3,r3,16
    4554:	288b883a 	add	r5,r5,r2
    4558:	200dd43a 	srai	r6,r4,16
    455c:	28bfffcc 	andi	r2,r5,65535
    4560:	1887c83a 	sub	r3,r3,r2
    4564:	1987883a 	add	r3,r3,r6
    4568:	3900000d 	sth	r4,0(r7)
    456c:	38c0008d 	sth	r3,2(r7)
    4570:	2808d43a 	srli	r4,r5,16
    4574:	39c00104 	addi	r7,r7,4
    4578:	1811d43a 	srai	r8,r3,16
    457c:	943fe92e 	bgeu	r18,r16,4524 <quorem+0x98>
    4580:	8c45883a 	add	r2,r17,r17
    4584:	1085883a 	add	r2,r2,r2
    4588:	9885883a 	add	r2,r19,r2
    458c:	10c00017 	ldw	r3,0(r2)
    4590:	18000b1e 	bne	r3,zero,45c0 <quorem+0x134>
    4594:	113fff04 	addi	r4,r2,-4
    4598:	9900082e 	bgeu	r19,r4,45bc <quorem+0x130>
    459c:	10bfff17 	ldw	r2,-4(r2)
    45a0:	10000326 	beq	r2,zero,45b0 <quorem+0x124>
    45a4:	00000506 	br	45bc <quorem+0x130>
    45a8:	20800017 	ldw	r2,0(r4)
    45ac:	1000031e 	bne	r2,zero,45bc <quorem+0x130>
    45b0:	213fff04 	addi	r4,r4,-4
    45b4:	8c7fffc4 	addi	r17,r17,-1
    45b8:	993ffb36 	bltu	r19,r4,45a8 <quorem+0x11c>
    45bc:	bc400415 	stw	r17,16(r23)
    45c0:	a005883a 	mov	r2,r20
    45c4:	dfc00917 	ldw	ra,36(sp)
    45c8:	df000817 	ldw	fp,32(sp)
    45cc:	ddc00717 	ldw	r23,28(sp)
    45d0:	dd800617 	ldw	r22,24(sp)
    45d4:	dd400517 	ldw	r21,20(sp)
    45d8:	dd000417 	ldw	r20,16(sp)
    45dc:	dcc00317 	ldw	r19,12(sp)
    45e0:	dc800217 	ldw	r18,8(sp)
    45e4:	dc400117 	ldw	r17,4(sp)
    45e8:	dc000017 	ldw	r16,0(sp)
    45ec:	dec00a04 	addi	sp,sp,40
    45f0:	f800283a 	ret
    45f4:	980f883a 	mov	r7,r19
    45f8:	8011883a 	mov	r8,r16
    45fc:	0013883a 	mov	r9,zero
    4600:	000d883a 	mov	r6,zero
    4604:	40c00017 	ldw	r3,0(r8)
    4608:	39000017 	ldw	r4,0(r7)
    460c:	42000104 	addi	r8,r8,4
    4610:	18bfffcc 	andi	r2,r3,65535
    4614:	a085383a 	mul	r2,r20,r2
    4618:	1806d43a 	srli	r3,r3,16
    461c:	217fffcc 	andi	r5,r4,65535
    4620:	3085883a 	add	r2,r6,r2
    4624:	11bfffcc 	andi	r6,r2,65535
    4628:	a0c7383a 	mul	r3,r20,r3
    462c:	1004d43a 	srli	r2,r2,16
    4630:	298bc83a 	sub	r5,r5,r6
    4634:	2a4b883a 	add	r5,r5,r9
    4638:	2008d43a 	srli	r4,r4,16
    463c:	1887883a 	add	r3,r3,r2
    4640:	280dd43a 	srai	r6,r5,16
    4644:	18bfffcc 	andi	r2,r3,65535
    4648:	2089c83a 	sub	r4,r4,r2
    464c:	2189883a 	add	r4,r4,r6
    4650:	3900008d 	sth	r4,2(r7)
    4654:	3940000d 	sth	r5,0(r7)
    4658:	180cd43a 	srli	r6,r3,16
    465c:	39c00104 	addi	r7,r7,4
    4660:	2013d43a 	srai	r9,r4,16
    4664:	923fe72e 	bgeu	r18,r8,4604 <quorem+0x178>
    4668:	e03fa61e 	bne	fp,zero,4504 <quorem+0x78>
    466c:	b0ffff04 	addi	r3,r22,-4
    4670:	98c0082e 	bgeu	r19,r3,4694 <quorem+0x208>
    4674:	b0bfff17 	ldw	r2,-4(r22)
    4678:	10000326 	beq	r2,zero,4688 <quorem+0x1fc>
    467c:	00000506 	br	4694 <quorem+0x208>
    4680:	18800017 	ldw	r2,0(r3)
    4684:	1000031e 	bne	r2,zero,4694 <quorem+0x208>
    4688:	18ffff04 	addi	r3,r3,-4
    468c:	8c7fffc4 	addi	r17,r17,-1
    4690:	98fffb36 	bltu	r19,r3,4680 <quorem+0x1f4>
    4694:	bc400415 	stw	r17,16(r23)
    4698:	003f9a06 	br	4504 <quorem+0x78>
    469c:	0005883a 	mov	r2,zero
    46a0:	003fc806 	br	45c4 <quorem+0x138>

000046a4 <_dtoa_r>:
    46a4:	22001017 	ldw	r8,64(r4)
    46a8:	deffda04 	addi	sp,sp,-152
    46ac:	dd402115 	stw	r21,132(sp)
    46b0:	dd002015 	stw	r20,128(sp)
    46b4:	dc801e15 	stw	r18,120(sp)
    46b8:	dc401d15 	stw	r17,116(sp)
    46bc:	dfc02515 	stw	ra,148(sp)
    46c0:	df002415 	stw	fp,144(sp)
    46c4:	ddc02315 	stw	r23,140(sp)
    46c8:	dd802215 	stw	r22,136(sp)
    46cc:	dcc01f15 	stw	r19,124(sp)
    46d0:	dc001c15 	stw	r16,112(sp)
    46d4:	d9001615 	stw	r4,88(sp)
    46d8:	3023883a 	mov	r17,r6
    46dc:	2829883a 	mov	r20,r5
    46e0:	d9c01715 	stw	r7,92(sp)
    46e4:	dc802817 	ldw	r18,160(sp)
    46e8:	302b883a 	mov	r21,r6
    46ec:	40000a26 	beq	r8,zero,4718 <_dtoa_r+0x74>
    46f0:	20801117 	ldw	r2,68(r4)
    46f4:	400b883a 	mov	r5,r8
    46f8:	40800115 	stw	r2,4(r8)
    46fc:	20c01117 	ldw	r3,68(r4)
    4700:	00800044 	movi	r2,1
    4704:	10c4983a 	sll	r2,r2,r3
    4708:	40800215 	stw	r2,8(r8)
    470c:	00078380 	call	7838 <_Bfree>
    4710:	d8c01617 	ldw	r3,88(sp)
    4714:	18001015 	stw	zero,64(r3)
    4718:	8800a316 	blt	r17,zero,49a8 <_dtoa_r+0x304>
    471c:	90000015 	stw	zero,0(r18)
    4720:	a8dffc2c 	andhi	r3,r21,32752
    4724:	009ffc34 	movhi	r2,32752
    4728:	18809126 	beq	r3,r2,4970 <_dtoa_r+0x2cc>
    472c:	000d883a 	mov	r6,zero
    4730:	000f883a 	mov	r7,zero
    4734:	a009883a 	mov	r4,r20
    4738:	a80b883a 	mov	r5,r21
    473c:	dd001215 	stw	r20,72(sp)
    4740:	dd401315 	stw	r21,76(sp)
    4744:	000a7cc0 	call	a7cc <__nedf2>
    4748:	1000171e 	bne	r2,zero,47a8 <_dtoa_r+0x104>
    474c:	d9802717 	ldw	r6,156(sp)
    4750:	00800044 	movi	r2,1
    4754:	30800015 	stw	r2,0(r6)
    4758:	d8802917 	ldw	r2,164(sp)
    475c:	10029b26 	beq	r2,zero,51cc <_dtoa_r+0xb28>
    4760:	d9002917 	ldw	r4,164(sp)
    4764:	00800074 	movhi	r2,1
    4768:	109f1044 	addi	r2,r2,31809
    476c:	10ffffc4 	addi	r3,r2,-1
    4770:	20800015 	stw	r2,0(r4)
    4774:	1805883a 	mov	r2,r3
    4778:	dfc02517 	ldw	ra,148(sp)
    477c:	df002417 	ldw	fp,144(sp)
    4780:	ddc02317 	ldw	r23,140(sp)
    4784:	dd802217 	ldw	r22,136(sp)
    4788:	dd402117 	ldw	r21,132(sp)
    478c:	dd002017 	ldw	r20,128(sp)
    4790:	dcc01f17 	ldw	r19,124(sp)
    4794:	dc801e17 	ldw	r18,120(sp)
    4798:	dc401d17 	ldw	r17,116(sp)
    479c:	dc001c17 	ldw	r16,112(sp)
    47a0:	dec02604 	addi	sp,sp,152
    47a4:	f800283a 	ret
    47a8:	d9001617 	ldw	r4,88(sp)
    47ac:	d9401217 	ldw	r5,72(sp)
    47b0:	d8800104 	addi	r2,sp,4
    47b4:	a80d883a 	mov	r6,r21
    47b8:	d9c00204 	addi	r7,sp,8
    47bc:	d8800015 	stw	r2,0(sp)
    47c0:	0007e740 	call	7e74 <__d2b>
    47c4:	d8800715 	stw	r2,28(sp)
    47c8:	a804d53a 	srli	r2,r21,20
    47cc:	1101ffcc 	andi	r4,r2,2047
    47d0:	20008626 	beq	r4,zero,49ec <_dtoa_r+0x348>
    47d4:	d8c01217 	ldw	r3,72(sp)
    47d8:	00800434 	movhi	r2,16
    47dc:	10bfffc4 	addi	r2,r2,-1
    47e0:	ddc00117 	ldw	r23,4(sp)
    47e4:	a884703a 	and	r2,r21,r2
    47e8:	1811883a 	mov	r8,r3
    47ec:	124ffc34 	orhi	r9,r2,16368
    47f0:	25bf0044 	addi	r22,r4,-1023
    47f4:	d8000815 	stw	zero,32(sp)
    47f8:	0005883a 	mov	r2,zero
    47fc:	00cffe34 	movhi	r3,16376
    4800:	480b883a 	mov	r5,r9
    4804:	4009883a 	mov	r4,r8
    4808:	180f883a 	mov	r7,r3
    480c:	100d883a 	mov	r6,r2
    4810:	00017dc0 	call	17dc <__subdf3>
    4814:	0218dbf4 	movhi	r8,25455
    4818:	4210d844 	addi	r8,r8,17249
    481c:	024ff4f4 	movhi	r9,16339
    4820:	4a61e9c4 	addi	r9,r9,-30809
    4824:	480f883a 	mov	r7,r9
    4828:	400d883a 	mov	r6,r8
    482c:	180b883a 	mov	r5,r3
    4830:	1009883a 	mov	r4,r2
    4834:	000a1280 	call	a128 <__muldf3>
    4838:	0222d874 	movhi	r8,35681
    483c:	42322cc4 	addi	r8,r8,-14157
    4840:	024ff1f4 	movhi	r9,16327
    4844:	4a628a04 	addi	r9,r9,-30168
    4848:	480f883a 	mov	r7,r9
    484c:	400d883a 	mov	r6,r8
    4850:	180b883a 	mov	r5,r3
    4854:	1009883a 	mov	r4,r2
    4858:	000185c0 	call	185c <__adddf3>
    485c:	b009883a 	mov	r4,r22
    4860:	1021883a 	mov	r16,r2
    4864:	1823883a 	mov	r17,r3
    4868:	000a9ec0 	call	a9ec <__floatsidf>
    486c:	021427f4 	movhi	r8,20639
    4870:	421e7ec4 	addi	r8,r8,31227
    4874:	024ff4f4 	movhi	r9,16339
    4878:	4a5104c4 	addi	r9,r9,17427
    487c:	480f883a 	mov	r7,r9
    4880:	400d883a 	mov	r6,r8
    4884:	180b883a 	mov	r5,r3
    4888:	1009883a 	mov	r4,r2
    488c:	000a1280 	call	a128 <__muldf3>
    4890:	180f883a 	mov	r7,r3
    4894:	880b883a 	mov	r5,r17
    4898:	100d883a 	mov	r6,r2
    489c:	8009883a 	mov	r4,r16
    48a0:	000185c0 	call	185c <__adddf3>
    48a4:	1009883a 	mov	r4,r2
    48a8:	180b883a 	mov	r5,r3
    48ac:	1021883a 	mov	r16,r2
    48b0:	1823883a 	mov	r17,r3
    48b4:	000aae40 	call	aae4 <__fixdfsi>
    48b8:	000d883a 	mov	r6,zero
    48bc:	000f883a 	mov	r7,zero
    48c0:	8009883a 	mov	r4,r16
    48c4:	880b883a 	mov	r5,r17
    48c8:	d8800d15 	stw	r2,52(sp)
    48cc:	000a9640 	call	a964 <__ltdf2>
    48d0:	10031716 	blt	r2,zero,5530 <_dtoa_r+0xe8c>
    48d4:	d8c00d17 	ldw	r3,52(sp)
    48d8:	00800584 	movi	r2,22
    48dc:	10c1482e 	bgeu	r2,r3,4e00 <_dtoa_r+0x75c>
    48e0:	01000044 	movi	r4,1
    48e4:	d9000c15 	stw	r4,48(sp)
    48e8:	bd85c83a 	sub	r2,r23,r22
    48ec:	11bfffc4 	addi	r6,r2,-1
    48f0:	30030b16 	blt	r6,zero,5520 <_dtoa_r+0xe7c>
    48f4:	d9800a15 	stw	r6,40(sp)
    48f8:	d8001115 	stw	zero,68(sp)
    48fc:	d8c00d17 	ldw	r3,52(sp)
    4900:	1802ff16 	blt	r3,zero,5500 <_dtoa_r+0xe5c>
    4904:	d9000a17 	ldw	r4,40(sp)
    4908:	d8c00915 	stw	r3,36(sp)
    490c:	d8001015 	stw	zero,64(sp)
    4910:	20c9883a 	add	r4,r4,r3
    4914:	d9000a15 	stw	r4,40(sp)
    4918:	d9001717 	ldw	r4,92(sp)
    491c:	00800244 	movi	r2,9
    4920:	11004636 	bltu	r2,r4,4a3c <_dtoa_r+0x398>
    4924:	00800144 	movi	r2,5
    4928:	11020416 	blt	r2,r4,513c <_dtoa_r+0xa98>
    492c:	04400044 	movi	r17,1
    4930:	d8c01717 	ldw	r3,92(sp)
    4934:	00800144 	movi	r2,5
    4938:	10c1ed36 	bltu	r2,r3,50f0 <_dtoa_r+0xa4c>
    493c:	18c5883a 	add	r2,r3,r3
    4940:	1085883a 	add	r2,r2,r2
    4944:	00c00034 	movhi	r3,0
    4948:	18d25604 	addi	r3,r3,18776
    494c:	10c5883a 	add	r2,r2,r3
    4950:	11000017 	ldw	r4,0(r2)
    4954:	2000683a 	jmp	r4
    4958:	00004a44 	movi	zero,297
    495c:	00004a44 	movi	zero,297
    4960:	00005444 	movi	zero,337
    4964:	0000541c 	xori	zero,zero,336
    4968:	00005460 	cmpeqi	zero,zero,337
    496c:	0000546c 	andhi	zero,zero,337
    4970:	d9002717 	ldw	r4,156(sp)
    4974:	0089c3c4 	movi	r2,9999
    4978:	20800015 	stw	r2,0(r4)
    497c:	a0001026 	beq	r20,zero,49c0 <_dtoa_r+0x31c>
    4980:	00c00074 	movhi	r3,1
    4984:	18df1c04 	addi	r3,r3,31856
    4988:	d9802917 	ldw	r6,164(sp)
    498c:	303f7926 	beq	r6,zero,4774 <_dtoa_r+0xd0>
    4990:	188000c7 	ldb	r2,3(r3)
    4994:	190000c4 	addi	r4,r3,3
    4998:	1000101e 	bne	r2,zero,49dc <_dtoa_r+0x338>
    499c:	d8802917 	ldw	r2,164(sp)
    49a0:	11000015 	stw	r4,0(r2)
    49a4:	003f7306 	br	4774 <_dtoa_r+0xd0>
    49a8:	00a00034 	movhi	r2,32768
    49ac:	10bfffc4 	addi	r2,r2,-1
    49b0:	00c00044 	movi	r3,1
    49b4:	88aa703a 	and	r21,r17,r2
    49b8:	90c00015 	stw	r3,0(r18)
    49bc:	003f5806 	br	4720 <_dtoa_r+0x7c>
    49c0:	00800434 	movhi	r2,16
    49c4:	10bfffc4 	addi	r2,r2,-1
    49c8:	a884703a 	and	r2,r21,r2
    49cc:	103fec1e 	bne	r2,zero,4980 <_dtoa_r+0x2dc>
    49d0:	00c00074 	movhi	r3,1
    49d4:	18df1904 	addi	r3,r3,31844
    49d8:	003feb06 	br	4988 <_dtoa_r+0x2e4>
    49dc:	d8802917 	ldw	r2,164(sp)
    49e0:	19000204 	addi	r4,r3,8
    49e4:	11000015 	stw	r4,0(r2)
    49e8:	003f6206 	br	4774 <_dtoa_r+0xd0>
    49ec:	ddc00117 	ldw	r23,4(sp)
    49f0:	d8800217 	ldw	r2,8(sp)
    49f4:	01000804 	movi	r4,32
    49f8:	b8c10c84 	addi	r3,r23,1074
    49fc:	18a3883a 	add	r17,r3,r2
    4a00:	2441b80e 	bge	r4,r17,50e4 <_dtoa_r+0xa40>
    4a04:	00c01004 	movi	r3,64
    4a08:	1c47c83a 	sub	r3,r3,r17
    4a0c:	88bff804 	addi	r2,r17,-32
    4a10:	a8c6983a 	sll	r3,r21,r3
    4a14:	a084d83a 	srl	r2,r20,r2
    4a18:	1888b03a 	or	r4,r3,r2
    4a1c:	000abbc0 	call	abbc <__floatunsidf>
    4a20:	1011883a 	mov	r8,r2
    4a24:	00bf8434 	movhi	r2,65040
    4a28:	01000044 	movi	r4,1
    4a2c:	10d3883a 	add	r9,r2,r3
    4a30:	8dbef344 	addi	r22,r17,-1075
    4a34:	d9000815 	stw	r4,32(sp)
    4a38:	003f6f06 	br	47f8 <_dtoa_r+0x154>
    4a3c:	d8001715 	stw	zero,92(sp)
    4a40:	04400044 	movi	r17,1
    4a44:	00bfffc4 	movi	r2,-1
    4a48:	00c00044 	movi	r3,1
    4a4c:	d8800e15 	stw	r2,56(sp)
    4a50:	d8002615 	stw	zero,152(sp)
    4a54:	d8800f15 	stw	r2,60(sp)
    4a58:	d8c00b15 	stw	r3,44(sp)
    4a5c:	1021883a 	mov	r16,r2
    4a60:	d8801617 	ldw	r2,88(sp)
    4a64:	10001115 	stw	zero,68(r2)
    4a68:	d8801617 	ldw	r2,88(sp)
    4a6c:	11401117 	ldw	r5,68(r2)
    4a70:	1009883a 	mov	r4,r2
    4a74:	0007db80 	call	7db8 <_Balloc>
    4a78:	d8c01617 	ldw	r3,88(sp)
    4a7c:	d8800515 	stw	r2,20(sp)
    4a80:	18801015 	stw	r2,64(r3)
    4a84:	00800384 	movi	r2,14
    4a88:	14006836 	bltu	r2,r16,4c2c <_dtoa_r+0x588>
    4a8c:	8805003a 	cmpeq	r2,r17,zero
    4a90:	1000661e 	bne	r2,zero,4c2c <_dtoa_r+0x588>
    4a94:	d9000d17 	ldw	r4,52(sp)
    4a98:	0102300e 	bge	zero,r4,535c <_dtoa_r+0xcb8>
    4a9c:	208003cc 	andi	r2,r4,15
    4aa0:	100490fa 	slli	r2,r2,3
    4aa4:	2025d13a 	srai	r18,r4,4
    4aa8:	00c00074 	movhi	r3,1
    4aac:	18df2e04 	addi	r3,r3,31928
    4ab0:	10c5883a 	add	r2,r2,r3
    4ab4:	90c0040c 	andi	r3,r18,16
    4ab8:	14000017 	ldw	r16,0(r2)
    4abc:	14400117 	ldw	r17,4(r2)
    4ac0:	18036a1e 	bne	r3,zero,586c <_dtoa_r+0x11c8>
    4ac4:	05800084 	movi	r22,2
    4ac8:	90001026 	beq	r18,zero,4b0c <_dtoa_r+0x468>
    4acc:	04c00074 	movhi	r19,1
    4ad0:	9cdf6004 	addi	r19,r19,32128
    4ad4:	9080004c 	andi	r2,r18,1
    4ad8:	1005003a 	cmpeq	r2,r2,zero
    4adc:	1000081e 	bne	r2,zero,4b00 <_dtoa_r+0x45c>
    4ae0:	99800017 	ldw	r6,0(r19)
    4ae4:	99c00117 	ldw	r7,4(r19)
    4ae8:	880b883a 	mov	r5,r17
    4aec:	8009883a 	mov	r4,r16
    4af0:	000a1280 	call	a128 <__muldf3>
    4af4:	1021883a 	mov	r16,r2
    4af8:	b5800044 	addi	r22,r22,1
    4afc:	1823883a 	mov	r17,r3
    4b00:	9025d07a 	srai	r18,r18,1
    4b04:	9cc00204 	addi	r19,r19,8
    4b08:	903ff21e 	bne	r18,zero,4ad4 <_dtoa_r+0x430>
    4b0c:	a80b883a 	mov	r5,r21
    4b10:	a009883a 	mov	r4,r20
    4b14:	880f883a 	mov	r7,r17
    4b18:	800d883a 	mov	r6,r16
    4b1c:	000a4ec0 	call	a4ec <__divdf3>
    4b20:	1029883a 	mov	r20,r2
    4b24:	182b883a 	mov	r21,r3
    4b28:	d8c00c17 	ldw	r3,48(sp)
    4b2c:	1805003a 	cmpeq	r2,r3,zero
    4b30:	1000081e 	bne	r2,zero,4b54 <_dtoa_r+0x4b0>
    4b34:	0005883a 	mov	r2,zero
    4b38:	00cffc34 	movhi	r3,16368
    4b3c:	180f883a 	mov	r7,r3
    4b40:	a009883a 	mov	r4,r20
    4b44:	a80b883a 	mov	r5,r21
    4b48:	100d883a 	mov	r6,r2
    4b4c:	000a9640 	call	a964 <__ltdf2>
    4b50:	1003fe16 	blt	r2,zero,5b4c <_dtoa_r+0x14a8>
    4b54:	b009883a 	mov	r4,r22
    4b58:	000a9ec0 	call	a9ec <__floatsidf>
    4b5c:	180b883a 	mov	r5,r3
    4b60:	1009883a 	mov	r4,r2
    4b64:	a00d883a 	mov	r6,r20
    4b68:	a80f883a 	mov	r7,r21
    4b6c:	000a1280 	call	a128 <__muldf3>
    4b70:	0011883a 	mov	r8,zero
    4b74:	02500734 	movhi	r9,16412
    4b78:	1009883a 	mov	r4,r2
    4b7c:	180b883a 	mov	r5,r3
    4b80:	480f883a 	mov	r7,r9
    4b84:	400d883a 	mov	r6,r8
    4b88:	000185c0 	call	185c <__adddf3>
    4b8c:	d9000f17 	ldw	r4,60(sp)
    4b90:	102d883a 	mov	r22,r2
    4b94:	00bf3034 	movhi	r2,64704
    4b98:	18b9883a 	add	fp,r3,r2
    4b9c:	e02f883a 	mov	r23,fp
    4ba0:	20028f1e 	bne	r4,zero,55e0 <_dtoa_r+0xf3c>
    4ba4:	0005883a 	mov	r2,zero
    4ba8:	00d00534 	movhi	r3,16404
    4bac:	a009883a 	mov	r4,r20
    4bb0:	a80b883a 	mov	r5,r21
    4bb4:	180f883a 	mov	r7,r3
    4bb8:	100d883a 	mov	r6,r2
    4bbc:	00017dc0 	call	17dc <__subdf3>
    4bc0:	1009883a 	mov	r4,r2
    4bc4:	e00f883a 	mov	r7,fp
    4bc8:	180b883a 	mov	r5,r3
    4bcc:	b00d883a 	mov	r6,r22
    4bd0:	1025883a 	mov	r18,r2
    4bd4:	1827883a 	mov	r19,r3
    4bd8:	000a8540 	call	a854 <__gtdf2>
    4bdc:	00834f16 	blt	zero,r2,591c <_dtoa_r+0x1278>
    4be0:	e0e0003c 	xorhi	r3,fp,32768
    4be4:	9009883a 	mov	r4,r18
    4be8:	980b883a 	mov	r5,r19
    4bec:	180f883a 	mov	r7,r3
    4bf0:	b00d883a 	mov	r6,r22
    4bf4:	000a9640 	call	a964 <__ltdf2>
    4bf8:	1000080e 	bge	r2,zero,4c1c <_dtoa_r+0x578>
    4bfc:	0027883a 	mov	r19,zero
    4c00:	0025883a 	mov	r18,zero
    4c04:	d8802617 	ldw	r2,152(sp)
    4c08:	df000517 	ldw	fp,20(sp)
    4c0c:	d8000615 	stw	zero,24(sp)
    4c10:	0084303a 	nor	r2,zero,r2
    4c14:	d8800d15 	stw	r2,52(sp)
    4c18:	00019b06 	br	5288 <_dtoa_r+0xbe4>
    4c1c:	d9801217 	ldw	r6,72(sp)
    4c20:	d8801317 	ldw	r2,76(sp)
    4c24:	3029883a 	mov	r20,r6
    4c28:	102b883a 	mov	r21,r2
    4c2c:	d8c00217 	ldw	r3,8(sp)
    4c30:	18008516 	blt	r3,zero,4e48 <_dtoa_r+0x7a4>
    4c34:	d9000d17 	ldw	r4,52(sp)
    4c38:	00800384 	movi	r2,14
    4c3c:	11008216 	blt	r2,r4,4e48 <_dtoa_r+0x7a4>
    4c40:	200490fa 	slli	r2,r4,3
    4c44:	d9802617 	ldw	r6,152(sp)
    4c48:	00c00074 	movhi	r3,1
    4c4c:	18df2e04 	addi	r3,r3,31928
    4c50:	10c5883a 	add	r2,r2,r3
    4c54:	14800017 	ldw	r18,0(r2)
    4c58:	14c00117 	ldw	r19,4(r2)
    4c5c:	30031e16 	blt	r6,zero,58d8 <_dtoa_r+0x1234>
    4c60:	d9000517 	ldw	r4,20(sp)
    4c64:	d8c00f17 	ldw	r3,60(sp)
    4c68:	a823883a 	mov	r17,r21
    4c6c:	a021883a 	mov	r16,r20
    4c70:	192b883a 	add	r21,r3,r4
    4c74:	2039883a 	mov	fp,r4
    4c78:	00000f06 	br	4cb8 <_dtoa_r+0x614>
    4c7c:	0005883a 	mov	r2,zero
    4c80:	00d00934 	movhi	r3,16420
    4c84:	5009883a 	mov	r4,r10
    4c88:	580b883a 	mov	r5,r11
    4c8c:	180f883a 	mov	r7,r3
    4c90:	100d883a 	mov	r6,r2
    4c94:	000a1280 	call	a128 <__muldf3>
    4c98:	180b883a 	mov	r5,r3
    4c9c:	000d883a 	mov	r6,zero
    4ca0:	000f883a 	mov	r7,zero
    4ca4:	1009883a 	mov	r4,r2
    4ca8:	1021883a 	mov	r16,r2
    4cac:	1823883a 	mov	r17,r3
    4cb0:	000a7cc0 	call	a7cc <__nedf2>
    4cb4:	10004526 	beq	r2,zero,4dcc <_dtoa_r+0x728>
    4cb8:	900d883a 	mov	r6,r18
    4cbc:	980f883a 	mov	r7,r19
    4cc0:	8009883a 	mov	r4,r16
    4cc4:	880b883a 	mov	r5,r17
    4cc8:	000a4ec0 	call	a4ec <__divdf3>
    4ccc:	180b883a 	mov	r5,r3
    4cd0:	1009883a 	mov	r4,r2
    4cd4:	000aae40 	call	aae4 <__fixdfsi>
    4cd8:	1009883a 	mov	r4,r2
    4cdc:	1029883a 	mov	r20,r2
    4ce0:	000a9ec0 	call	a9ec <__floatsidf>
    4ce4:	180f883a 	mov	r7,r3
    4ce8:	9009883a 	mov	r4,r18
    4cec:	980b883a 	mov	r5,r19
    4cf0:	100d883a 	mov	r6,r2
    4cf4:	000a1280 	call	a128 <__muldf3>
    4cf8:	180f883a 	mov	r7,r3
    4cfc:	880b883a 	mov	r5,r17
    4d00:	8009883a 	mov	r4,r16
    4d04:	100d883a 	mov	r6,r2
    4d08:	00017dc0 	call	17dc <__subdf3>
    4d0c:	1015883a 	mov	r10,r2
    4d10:	a0800c04 	addi	r2,r20,48
    4d14:	e0800005 	stb	r2,0(fp)
    4d18:	e7000044 	addi	fp,fp,1
    4d1c:	1817883a 	mov	r11,r3
    4d20:	e57fd61e 	bne	fp,r21,4c7c <_dtoa_r+0x5d8>
    4d24:	500d883a 	mov	r6,r10
    4d28:	180f883a 	mov	r7,r3
    4d2c:	5009883a 	mov	r4,r10
    4d30:	180b883a 	mov	r5,r3
    4d34:	000185c0 	call	185c <__adddf3>
    4d38:	100d883a 	mov	r6,r2
    4d3c:	9009883a 	mov	r4,r18
    4d40:	980b883a 	mov	r5,r19
    4d44:	180f883a 	mov	r7,r3
    4d48:	1021883a 	mov	r16,r2
    4d4c:	1823883a 	mov	r17,r3
    4d50:	000a9640 	call	a964 <__ltdf2>
    4d54:	10000816 	blt	r2,zero,4d78 <_dtoa_r+0x6d4>
    4d58:	980b883a 	mov	r5,r19
    4d5c:	800d883a 	mov	r6,r16
    4d60:	880f883a 	mov	r7,r17
    4d64:	9009883a 	mov	r4,r18
    4d68:	000a7440 	call	a744 <__eqdf2>
    4d6c:	1000171e 	bne	r2,zero,4dcc <_dtoa_r+0x728>
    4d70:	a080004c 	andi	r2,r20,1
    4d74:	10001526 	beq	r2,zero,4dcc <_dtoa_r+0x728>
    4d78:	d8800d17 	ldw	r2,52(sp)
    4d7c:	d8800415 	stw	r2,16(sp)
    4d80:	e009883a 	mov	r4,fp
    4d84:	213fffc4 	addi	r4,r4,-1
    4d88:	20c00007 	ldb	r3,0(r4)
    4d8c:	00800e44 	movi	r2,57
    4d90:	1880081e 	bne	r3,r2,4db4 <_dtoa_r+0x710>
    4d94:	d8800517 	ldw	r2,20(sp)
    4d98:	113ffa1e 	bne	r2,r4,4d84 <_dtoa_r+0x6e0>
    4d9c:	d8c00417 	ldw	r3,16(sp)
    4da0:	d9800517 	ldw	r6,20(sp)
    4da4:	00800c04 	movi	r2,48
    4da8:	18c00044 	addi	r3,r3,1
    4dac:	d8c00415 	stw	r3,16(sp)
    4db0:	30800005 	stb	r2,0(r6)
    4db4:	20800003 	ldbu	r2,0(r4)
    4db8:	d8c00417 	ldw	r3,16(sp)
    4dbc:	27000044 	addi	fp,r4,1
    4dc0:	10800044 	addi	r2,r2,1
    4dc4:	d8c00d15 	stw	r3,52(sp)
    4dc8:	20800005 	stb	r2,0(r4)
    4dcc:	d9001617 	ldw	r4,88(sp)
    4dd0:	d9400717 	ldw	r5,28(sp)
    4dd4:	00078380 	call	7838 <_Bfree>
    4dd8:	e0000005 	stb	zero,0(fp)
    4ddc:	d9800d17 	ldw	r6,52(sp)
    4de0:	d8c02717 	ldw	r3,156(sp)
    4de4:	d9002917 	ldw	r4,164(sp)
    4de8:	30800044 	addi	r2,r6,1
    4dec:	18800015 	stw	r2,0(r3)
    4df0:	20029c26 	beq	r4,zero,5864 <_dtoa_r+0x11c0>
    4df4:	d8c00517 	ldw	r3,20(sp)
    4df8:	27000015 	stw	fp,0(r4)
    4dfc:	003e5d06 	br	4774 <_dtoa_r+0xd0>
    4e00:	d9800d17 	ldw	r6,52(sp)
    4e04:	00c00074 	movhi	r3,1
    4e08:	18df2e04 	addi	r3,r3,31928
    4e0c:	d9001217 	ldw	r4,72(sp)
    4e10:	300490fa 	slli	r2,r6,3
    4e14:	d9401317 	ldw	r5,76(sp)
    4e18:	10c5883a 	add	r2,r2,r3
    4e1c:	12000017 	ldw	r8,0(r2)
    4e20:	12400117 	ldw	r9,4(r2)
    4e24:	400d883a 	mov	r6,r8
    4e28:	480f883a 	mov	r7,r9
    4e2c:	000a9640 	call	a964 <__ltdf2>
    4e30:	1000030e 	bge	r2,zero,4e40 <_dtoa_r+0x79c>
    4e34:	d8800d17 	ldw	r2,52(sp)
    4e38:	10bfffc4 	addi	r2,r2,-1
    4e3c:	d8800d15 	stw	r2,52(sp)
    4e40:	d8000c15 	stw	zero,48(sp)
    4e44:	003ea806 	br	48e8 <_dtoa_r+0x244>
    4e48:	d9000b17 	ldw	r4,44(sp)
    4e4c:	202cc03a 	cmpne	r22,r4,zero
    4e50:	b000c71e 	bne	r22,zero,5170 <_dtoa_r+0xacc>
    4e54:	dc001117 	ldw	r16,68(sp)
    4e58:	dc801017 	ldw	r18,64(sp)
    4e5c:	0027883a 	mov	r19,zero
    4e60:	04000b0e 	bge	zero,r16,4e90 <_dtoa_r+0x7ec>
    4e64:	d8c00a17 	ldw	r3,40(sp)
    4e68:	00c0090e 	bge	zero,r3,4e90 <_dtoa_r+0x7ec>
    4e6c:	8005883a 	mov	r2,r16
    4e70:	1c011316 	blt	r3,r16,52c0 <_dtoa_r+0xc1c>
    4e74:	d9000a17 	ldw	r4,40(sp)
    4e78:	d9801117 	ldw	r6,68(sp)
    4e7c:	80a1c83a 	sub	r16,r16,r2
    4e80:	2089c83a 	sub	r4,r4,r2
    4e84:	308dc83a 	sub	r6,r6,r2
    4e88:	d9000a15 	stw	r4,40(sp)
    4e8c:	d9801115 	stw	r6,68(sp)
    4e90:	d8801017 	ldw	r2,64(sp)
    4e94:	0080150e 	bge	zero,r2,4eec <_dtoa_r+0x848>
    4e98:	d8c00b17 	ldw	r3,44(sp)
    4e9c:	1805003a 	cmpeq	r2,r3,zero
    4ea0:	1001c91e 	bne	r2,zero,55c8 <_dtoa_r+0xf24>
    4ea4:	04800e0e 	bge	zero,r18,4ee0 <_dtoa_r+0x83c>
    4ea8:	d9001617 	ldw	r4,88(sp)
    4eac:	980b883a 	mov	r5,r19
    4eb0:	900d883a 	mov	r6,r18
    4eb4:	00085ec0 	call	85ec <__pow5mult>
    4eb8:	d9001617 	ldw	r4,88(sp)
    4ebc:	d9800717 	ldw	r6,28(sp)
    4ec0:	100b883a 	mov	r5,r2
    4ec4:	1027883a 	mov	r19,r2
    4ec8:	00082c80 	call	82c8 <__multiply>
    4ecc:	d9001617 	ldw	r4,88(sp)
    4ed0:	d9400717 	ldw	r5,28(sp)
    4ed4:	1023883a 	mov	r17,r2
    4ed8:	00078380 	call	7838 <_Bfree>
    4edc:	dc400715 	stw	r17,28(sp)
    4ee0:	d9001017 	ldw	r4,64(sp)
    4ee4:	248dc83a 	sub	r6,r4,r18
    4ee8:	30010e1e 	bne	r6,zero,5324 <_dtoa_r+0xc80>
    4eec:	d9001617 	ldw	r4,88(sp)
    4ef0:	04400044 	movi	r17,1
    4ef4:	880b883a 	mov	r5,r17
    4ef8:	00084b00 	call	84b0 <__i2b>
    4efc:	d9800917 	ldw	r6,36(sp)
    4f00:	1025883a 	mov	r18,r2
    4f04:	0180040e 	bge	zero,r6,4f18 <_dtoa_r+0x874>
    4f08:	d9001617 	ldw	r4,88(sp)
    4f0c:	100b883a 	mov	r5,r2
    4f10:	00085ec0 	call	85ec <__pow5mult>
    4f14:	1025883a 	mov	r18,r2
    4f18:	d8801717 	ldw	r2,92(sp)
    4f1c:	8880f30e 	bge	r17,r2,52ec <_dtoa_r+0xc48>
    4f20:	0023883a 	mov	r17,zero
    4f24:	d9800917 	ldw	r6,36(sp)
    4f28:	30019e1e 	bne	r6,zero,55a4 <_dtoa_r+0xf00>
    4f2c:	00c00044 	movi	r3,1
    4f30:	d9000a17 	ldw	r4,40(sp)
    4f34:	20c5883a 	add	r2,r4,r3
    4f38:	10c007cc 	andi	r3,r2,31
    4f3c:	1800841e 	bne	r3,zero,5150 <_dtoa_r+0xaac>
    4f40:	00800704 	movi	r2,28
    4f44:	d9000a17 	ldw	r4,40(sp)
    4f48:	d9801117 	ldw	r6,68(sp)
    4f4c:	80a1883a 	add	r16,r16,r2
    4f50:	2089883a 	add	r4,r4,r2
    4f54:	308d883a 	add	r6,r6,r2
    4f58:	d9000a15 	stw	r4,40(sp)
    4f5c:	d9801115 	stw	r6,68(sp)
    4f60:	d8801117 	ldw	r2,68(sp)
    4f64:	0080050e 	bge	zero,r2,4f7c <_dtoa_r+0x8d8>
    4f68:	d9400717 	ldw	r5,28(sp)
    4f6c:	d9001617 	ldw	r4,88(sp)
    4f70:	100d883a 	mov	r6,r2
    4f74:	000817c0 	call	817c <__lshift>
    4f78:	d8800715 	stw	r2,28(sp)
    4f7c:	d8c00a17 	ldw	r3,40(sp)
    4f80:	00c0050e 	bge	zero,r3,4f98 <_dtoa_r+0x8f4>
    4f84:	d9001617 	ldw	r4,88(sp)
    4f88:	900b883a 	mov	r5,r18
    4f8c:	180d883a 	mov	r6,r3
    4f90:	000817c0 	call	817c <__lshift>
    4f94:	1025883a 	mov	r18,r2
    4f98:	d9000c17 	ldw	r4,48(sp)
    4f9c:	2005003a 	cmpeq	r2,r4,zero
    4fa0:	10016f26 	beq	r2,zero,5560 <_dtoa_r+0xebc>
    4fa4:	d9000f17 	ldw	r4,60(sp)
    4fa8:	0102170e 	bge	zero,r4,5808 <_dtoa_r+0x1164>
    4fac:	d9800b17 	ldw	r6,44(sp)
    4fb0:	3005003a 	cmpeq	r2,r6,zero
    4fb4:	1000881e 	bne	r2,zero,51d8 <_dtoa_r+0xb34>
    4fb8:	0400050e 	bge	zero,r16,4fd0 <_dtoa_r+0x92c>
    4fbc:	d9001617 	ldw	r4,88(sp)
    4fc0:	980b883a 	mov	r5,r19
    4fc4:	800d883a 	mov	r6,r16
    4fc8:	000817c0 	call	817c <__lshift>
    4fcc:	1027883a 	mov	r19,r2
    4fd0:	8804c03a 	cmpne	r2,r17,zero
    4fd4:	1002541e 	bne	r2,zero,5928 <_dtoa_r+0x1284>
    4fd8:	980b883a 	mov	r5,r19
    4fdc:	dd800517 	ldw	r22,20(sp)
    4fe0:	dcc00615 	stw	r19,24(sp)
    4fe4:	a700004c 	andi	fp,r20,1
    4fe8:	2827883a 	mov	r19,r5
    4fec:	d9000717 	ldw	r4,28(sp)
    4ff0:	900b883a 	mov	r5,r18
    4ff4:	000448c0 	call	448c <quorem>
    4ff8:	d9000717 	ldw	r4,28(sp)
    4ffc:	d9400617 	ldw	r5,24(sp)
    5000:	1023883a 	mov	r17,r2
    5004:	8dc00c04 	addi	r23,r17,48
    5008:	00079940 	call	7994 <__mcmp>
    500c:	d9001617 	ldw	r4,88(sp)
    5010:	900b883a 	mov	r5,r18
    5014:	980d883a 	mov	r6,r19
    5018:	1029883a 	mov	r20,r2
    501c:	0007ff00 	call	7ff0 <__mdiff>
    5020:	102b883a 	mov	r21,r2
    5024:	10800317 	ldw	r2,12(r2)
    5028:	1001281e 	bne	r2,zero,54cc <_dtoa_r+0xe28>
    502c:	d9000717 	ldw	r4,28(sp)
    5030:	a80b883a 	mov	r5,r21
    5034:	00079940 	call	7994 <__mcmp>
    5038:	d9001617 	ldw	r4,88(sp)
    503c:	1021883a 	mov	r16,r2
    5040:	a80b883a 	mov	r5,r21
    5044:	00078380 	call	7838 <_Bfree>
    5048:	8000041e 	bne	r16,zero,505c <_dtoa_r+0x9b8>
    504c:	d8801717 	ldw	r2,92(sp)
    5050:	1000021e 	bne	r2,zero,505c <_dtoa_r+0x9b8>
    5054:	e004c03a 	cmpne	r2,fp,zero
    5058:	10011726 	beq	r2,zero,54b8 <_dtoa_r+0xe14>
    505c:	a0010616 	blt	r20,zero,5478 <_dtoa_r+0xdd4>
    5060:	a000041e 	bne	r20,zero,5074 <_dtoa_r+0x9d0>
    5064:	d8c01717 	ldw	r3,92(sp)
    5068:	1800021e 	bne	r3,zero,5074 <_dtoa_r+0x9d0>
    506c:	e004c03a 	cmpne	r2,fp,zero
    5070:	10010126 	beq	r2,zero,5478 <_dtoa_r+0xdd4>
    5074:	04023d16 	blt	zero,r16,596c <_dtoa_r+0x12c8>
    5078:	b5c00005 	stb	r23,0(r22)
    507c:	d9800517 	ldw	r6,20(sp)
    5080:	d9000f17 	ldw	r4,60(sp)
    5084:	b5800044 	addi	r22,r22,1
    5088:	3105883a 	add	r2,r6,r4
    508c:	b0806526 	beq	r22,r2,5224 <_dtoa_r+0xb80>
    5090:	d9400717 	ldw	r5,28(sp)
    5094:	d9001617 	ldw	r4,88(sp)
    5098:	01800284 	movi	r6,10
    509c:	000f883a 	mov	r7,zero
    50a0:	00084ec0 	call	84ec <__multadd>
    50a4:	d8800715 	stw	r2,28(sp)
    50a8:	d8800617 	ldw	r2,24(sp)
    50ac:	14c10c26 	beq	r2,r19,54e0 <_dtoa_r+0xe3c>
    50b0:	d9400617 	ldw	r5,24(sp)
    50b4:	d9001617 	ldw	r4,88(sp)
    50b8:	01800284 	movi	r6,10
    50bc:	000f883a 	mov	r7,zero
    50c0:	00084ec0 	call	84ec <__multadd>
    50c4:	d9001617 	ldw	r4,88(sp)
    50c8:	980b883a 	mov	r5,r19
    50cc:	01800284 	movi	r6,10
    50d0:	000f883a 	mov	r7,zero
    50d4:	d8800615 	stw	r2,24(sp)
    50d8:	00084ec0 	call	84ec <__multadd>
    50dc:	1027883a 	mov	r19,r2
    50e0:	003fc206 	br	4fec <_dtoa_r+0x948>
    50e4:	2445c83a 	sub	r2,r4,r17
    50e8:	a088983a 	sll	r4,r20,r2
    50ec:	003e4b06 	br	4a1c <_dtoa_r+0x378>
    50f0:	01bfffc4 	movi	r6,-1
    50f4:	00800044 	movi	r2,1
    50f8:	d9800e15 	stw	r6,56(sp)
    50fc:	d9800f15 	stw	r6,60(sp)
    5100:	d8800b15 	stw	r2,44(sp)
    5104:	d8c01617 	ldw	r3,88(sp)
    5108:	008005c4 	movi	r2,23
    510c:	18001115 	stw	zero,68(r3)
    5110:	1580082e 	bgeu	r2,r22,5134 <_dtoa_r+0xa90>
    5114:	00c00104 	movi	r3,4
    5118:	0009883a 	mov	r4,zero
    511c:	18c7883a 	add	r3,r3,r3
    5120:	18800504 	addi	r2,r3,20
    5124:	21000044 	addi	r4,r4,1
    5128:	b0bffc2e 	bgeu	r22,r2,511c <_dtoa_r+0xa78>
    512c:	d9801617 	ldw	r6,88(sp)
    5130:	31001115 	stw	r4,68(r6)
    5134:	dc000f17 	ldw	r16,60(sp)
    5138:	003e4b06 	br	4a68 <_dtoa_r+0x3c4>
    513c:	d9801717 	ldw	r6,92(sp)
    5140:	0023883a 	mov	r17,zero
    5144:	31bfff04 	addi	r6,r6,-4
    5148:	d9801715 	stw	r6,92(sp)
    514c:	003df806 	br	4930 <_dtoa_r+0x28c>
    5150:	00800804 	movi	r2,32
    5154:	10c9c83a 	sub	r4,r2,r3
    5158:	00c00104 	movi	r3,4
    515c:	19005a16 	blt	r3,r4,52c8 <_dtoa_r+0xc24>
    5160:	008000c4 	movi	r2,3
    5164:	113f7e16 	blt	r2,r4,4f60 <_dtoa_r+0x8bc>
    5168:	20800704 	addi	r2,r4,28
    516c:	003f7506 	br	4f44 <_dtoa_r+0x8a0>
    5170:	d9801717 	ldw	r6,92(sp)
    5174:	00800044 	movi	r2,1
    5178:	1180a10e 	bge	r2,r6,5400 <_dtoa_r+0xd5c>
    517c:	d9800f17 	ldw	r6,60(sp)
    5180:	d8c01017 	ldw	r3,64(sp)
    5184:	30bfffc4 	addi	r2,r6,-1
    5188:	1881c616 	blt	r3,r2,58a4 <_dtoa_r+0x1200>
    518c:	18a5c83a 	sub	r18,r3,r2
    5190:	d8800f17 	ldw	r2,60(sp)
    5194:	10026216 	blt	r2,zero,5b20 <_dtoa_r+0x147c>
    5198:	dc001117 	ldw	r16,68(sp)
    519c:	1007883a 	mov	r3,r2
    51a0:	d9800a17 	ldw	r6,40(sp)
    51a4:	d8801117 	ldw	r2,68(sp)
    51a8:	d9001617 	ldw	r4,88(sp)
    51ac:	30cd883a 	add	r6,r6,r3
    51b0:	10c5883a 	add	r2,r2,r3
    51b4:	01400044 	movi	r5,1
    51b8:	d9800a15 	stw	r6,40(sp)
    51bc:	d8801115 	stw	r2,68(sp)
    51c0:	00084b00 	call	84b0 <__i2b>
    51c4:	1027883a 	mov	r19,r2
    51c8:	003f2506 	br	4e60 <_dtoa_r+0x7bc>
    51cc:	00c00074 	movhi	r3,1
    51d0:	18df1004 	addi	r3,r3,31808
    51d4:	003d6706 	br	4774 <_dtoa_r+0xd0>
    51d8:	dd800517 	ldw	r22,20(sp)
    51dc:	04000044 	movi	r16,1
    51e0:	00000706 	br	5200 <_dtoa_r+0xb5c>
    51e4:	d9400717 	ldw	r5,28(sp)
    51e8:	d9001617 	ldw	r4,88(sp)
    51ec:	01800284 	movi	r6,10
    51f0:	000f883a 	mov	r7,zero
    51f4:	00084ec0 	call	84ec <__multadd>
    51f8:	d8800715 	stw	r2,28(sp)
    51fc:	84000044 	addi	r16,r16,1
    5200:	d9000717 	ldw	r4,28(sp)
    5204:	900b883a 	mov	r5,r18
    5208:	000448c0 	call	448c <quorem>
    520c:	15c00c04 	addi	r23,r2,48
    5210:	b5c00005 	stb	r23,0(r22)
    5214:	d8c00f17 	ldw	r3,60(sp)
    5218:	b5800044 	addi	r22,r22,1
    521c:	80fff116 	blt	r16,r3,51e4 <_dtoa_r+0xb40>
    5220:	d8000615 	stw	zero,24(sp)
    5224:	d9400717 	ldw	r5,28(sp)
    5228:	d9001617 	ldw	r4,88(sp)
    522c:	01800044 	movi	r6,1
    5230:	000817c0 	call	817c <__lshift>
    5234:	1009883a 	mov	r4,r2
    5238:	900b883a 	mov	r5,r18
    523c:	d8800715 	stw	r2,28(sp)
    5240:	00079940 	call	7994 <__mcmp>
    5244:	00803c0e 	bge	zero,r2,5338 <_dtoa_r+0xc94>
    5248:	b009883a 	mov	r4,r22
    524c:	213fffc4 	addi	r4,r4,-1
    5250:	21400003 	ldbu	r5,0(r4)
    5254:	00800e44 	movi	r2,57
    5258:	28c03fcc 	andi	r3,r5,255
    525c:	18c0201c 	xori	r3,r3,128
    5260:	18ffe004 	addi	r3,r3,-128
    5264:	1881981e 	bne	r3,r2,58c8 <_dtoa_r+0x1224>
    5268:	d9800517 	ldw	r6,20(sp)
    526c:	21bff71e 	bne	r4,r6,524c <_dtoa_r+0xba8>
    5270:	d8800d17 	ldw	r2,52(sp)
    5274:	37000044 	addi	fp,r6,1
    5278:	10800044 	addi	r2,r2,1
    527c:	d8800d15 	stw	r2,52(sp)
    5280:	00800c44 	movi	r2,49
    5284:	30800005 	stb	r2,0(r6)
    5288:	d9001617 	ldw	r4,88(sp)
    528c:	900b883a 	mov	r5,r18
    5290:	00078380 	call	7838 <_Bfree>
    5294:	983ecd26 	beq	r19,zero,4dcc <_dtoa_r+0x728>
    5298:	d8c00617 	ldw	r3,24(sp)
    529c:	18000426 	beq	r3,zero,52b0 <_dtoa_r+0xc0c>
    52a0:	1cc00326 	beq	r3,r19,52b0 <_dtoa_r+0xc0c>
    52a4:	d9001617 	ldw	r4,88(sp)
    52a8:	180b883a 	mov	r5,r3
    52ac:	00078380 	call	7838 <_Bfree>
    52b0:	d9001617 	ldw	r4,88(sp)
    52b4:	980b883a 	mov	r5,r19
    52b8:	00078380 	call	7838 <_Bfree>
    52bc:	003ec306 	br	4dcc <_dtoa_r+0x728>
    52c0:	1805883a 	mov	r2,r3
    52c4:	003eeb06 	br	4e74 <_dtoa_r+0x7d0>
    52c8:	d9800a17 	ldw	r6,40(sp)
    52cc:	d8c01117 	ldw	r3,68(sp)
    52d0:	20bfff04 	addi	r2,r4,-4
    52d4:	308d883a 	add	r6,r6,r2
    52d8:	1887883a 	add	r3,r3,r2
    52dc:	80a1883a 	add	r16,r16,r2
    52e0:	d9800a15 	stw	r6,40(sp)
    52e4:	d8c01115 	stw	r3,68(sp)
    52e8:	003f1d06 	br	4f60 <_dtoa_r+0x8bc>
    52ec:	a03f0c1e 	bne	r20,zero,4f20 <_dtoa_r+0x87c>
    52f0:	00800434 	movhi	r2,16
    52f4:	10bfffc4 	addi	r2,r2,-1
    52f8:	a884703a 	and	r2,r21,r2
    52fc:	103f081e 	bne	r2,zero,4f20 <_dtoa_r+0x87c>
    5300:	a89ffc2c 	andhi	r2,r21,32752
    5304:	103f0626 	beq	r2,zero,4f20 <_dtoa_r+0x87c>
    5308:	d8c01117 	ldw	r3,68(sp)
    530c:	d9000a17 	ldw	r4,40(sp)
    5310:	18c00044 	addi	r3,r3,1
    5314:	21000044 	addi	r4,r4,1
    5318:	d8c01115 	stw	r3,68(sp)
    531c:	d9000a15 	stw	r4,40(sp)
    5320:	003f0006 	br	4f24 <_dtoa_r+0x880>
    5324:	d9400717 	ldw	r5,28(sp)
    5328:	d9001617 	ldw	r4,88(sp)
    532c:	00085ec0 	call	85ec <__pow5mult>
    5330:	d8800715 	stw	r2,28(sp)
    5334:	003eed06 	br	4eec <_dtoa_r+0x848>
    5338:	1000021e 	bne	r2,zero,5344 <_dtoa_r+0xca0>
    533c:	b880004c 	andi	r2,r23,1
    5340:	103fc11e 	bne	r2,zero,5248 <_dtoa_r+0xba4>
    5344:	b5bfffc4 	addi	r22,r22,-1
    5348:	b0c00007 	ldb	r3,0(r22)
    534c:	00800c04 	movi	r2,48
    5350:	18bffc26 	beq	r3,r2,5344 <_dtoa_r+0xca0>
    5354:	b7000044 	addi	fp,r22,1
    5358:	003fcb06 	br	5288 <_dtoa_r+0xbe4>
    535c:	d9800d17 	ldw	r6,52(sp)
    5360:	018fc83a 	sub	r7,zero,r6
    5364:	3801f726 	beq	r7,zero,5b44 <_dtoa_r+0x14a0>
    5368:	398003cc 	andi	r6,r7,15
    536c:	300c90fa 	slli	r6,r6,3
    5370:	01400074 	movhi	r5,1
    5374:	295f2e04 	addi	r5,r5,31928
    5378:	d9001217 	ldw	r4,72(sp)
    537c:	314d883a 	add	r6,r6,r5
    5380:	30c00117 	ldw	r3,4(r6)
    5384:	30800017 	ldw	r2,0(r6)
    5388:	d9401317 	ldw	r5,76(sp)
    538c:	3821d13a 	srai	r16,r7,4
    5390:	100d883a 	mov	r6,r2
    5394:	180f883a 	mov	r7,r3
    5398:	000a1280 	call	a128 <__muldf3>
    539c:	1011883a 	mov	r8,r2
    53a0:	1813883a 	mov	r9,r3
    53a4:	1029883a 	mov	r20,r2
    53a8:	182b883a 	mov	r21,r3
    53ac:	8001e526 	beq	r16,zero,5b44 <_dtoa_r+0x14a0>
    53b0:	05800084 	movi	r22,2
    53b4:	04400074 	movhi	r17,1
    53b8:	8c5f6004 	addi	r17,r17,32128
    53bc:	8080004c 	andi	r2,r16,1
    53c0:	1005003a 	cmpeq	r2,r2,zero
    53c4:	1000081e 	bne	r2,zero,53e8 <_dtoa_r+0xd44>
    53c8:	89800017 	ldw	r6,0(r17)
    53cc:	89c00117 	ldw	r7,4(r17)
    53d0:	480b883a 	mov	r5,r9
    53d4:	4009883a 	mov	r4,r8
    53d8:	000a1280 	call	a128 <__muldf3>
    53dc:	1011883a 	mov	r8,r2
    53e0:	b5800044 	addi	r22,r22,1
    53e4:	1813883a 	mov	r9,r3
    53e8:	8021d07a 	srai	r16,r16,1
    53ec:	8c400204 	addi	r17,r17,8
    53f0:	803ff21e 	bne	r16,zero,53bc <_dtoa_r+0xd18>
    53f4:	4029883a 	mov	r20,r8
    53f8:	482b883a 	mov	r21,r9
    53fc:	003dca06 	br	4b28 <_dtoa_r+0x484>
    5400:	d9000817 	ldw	r4,32(sp)
    5404:	2005003a 	cmpeq	r2,r4,zero
    5408:	1001f61e 	bne	r2,zero,5be4 <_dtoa_r+0x1540>
    540c:	dc001117 	ldw	r16,68(sp)
    5410:	dc801017 	ldw	r18,64(sp)
    5414:	18c10cc4 	addi	r3,r3,1075
    5418:	003f6106 	br	51a0 <_dtoa_r+0xafc>
    541c:	d8000b15 	stw	zero,44(sp)
    5420:	d9802617 	ldw	r6,152(sp)
    5424:	d8c00d17 	ldw	r3,52(sp)
    5428:	30800044 	addi	r2,r6,1
    542c:	18ad883a 	add	r22,r3,r2
    5430:	b13fffc4 	addi	r4,r22,-1
    5434:	d9000e15 	stw	r4,56(sp)
    5438:	0581f60e 	bge	zero,r22,5c14 <_dtoa_r+0x1570>
    543c:	dd800f15 	stw	r22,60(sp)
    5440:	003f3006 	br	5104 <_dtoa_r+0xa60>
    5444:	d8000b15 	stw	zero,44(sp)
    5448:	d9002617 	ldw	r4,152(sp)
    544c:	0101eb0e 	bge	zero,r4,5bfc <_dtoa_r+0x1558>
    5450:	202d883a 	mov	r22,r4
    5454:	d9000e15 	stw	r4,56(sp)
    5458:	d9000f15 	stw	r4,60(sp)
    545c:	003f2906 	br	5104 <_dtoa_r+0xa60>
    5460:	01800044 	movi	r6,1
    5464:	d9800b15 	stw	r6,44(sp)
    5468:	003ff706 	br	5448 <_dtoa_r+0xda4>
    546c:	01000044 	movi	r4,1
    5470:	d9000b15 	stw	r4,44(sp)
    5474:	003fea06 	br	5420 <_dtoa_r+0xd7c>
    5478:	04000c0e 	bge	zero,r16,54ac <_dtoa_r+0xe08>
    547c:	d9400717 	ldw	r5,28(sp)
    5480:	d9001617 	ldw	r4,88(sp)
    5484:	01800044 	movi	r6,1
    5488:	000817c0 	call	817c <__lshift>
    548c:	1009883a 	mov	r4,r2
    5490:	900b883a 	mov	r5,r18
    5494:	d8800715 	stw	r2,28(sp)
    5498:	00079940 	call	7994 <__mcmp>
    549c:	0081e00e 	bge	zero,r2,5c20 <_dtoa_r+0x157c>
    54a0:	bdc00044 	addi	r23,r23,1
    54a4:	00800e84 	movi	r2,58
    54a8:	b881a226 	beq	r23,r2,5b34 <_dtoa_r+0x1490>
    54ac:	b7000044 	addi	fp,r22,1
    54b0:	b5c00005 	stb	r23,0(r22)
    54b4:	003f7406 	br	5288 <_dtoa_r+0xbe4>
    54b8:	00800e44 	movi	r2,57
    54bc:	b8819d26 	beq	r23,r2,5b34 <_dtoa_r+0x1490>
    54c0:	053ffa0e 	bge	zero,r20,54ac <_dtoa_r+0xe08>
    54c4:	8dc00c44 	addi	r23,r17,49
    54c8:	003ff806 	br	54ac <_dtoa_r+0xe08>
    54cc:	d9001617 	ldw	r4,88(sp)
    54d0:	a80b883a 	mov	r5,r21
    54d4:	04000044 	movi	r16,1
    54d8:	00078380 	call	7838 <_Bfree>
    54dc:	003edf06 	br	505c <_dtoa_r+0x9b8>
    54e0:	d9001617 	ldw	r4,88(sp)
    54e4:	980b883a 	mov	r5,r19
    54e8:	01800284 	movi	r6,10
    54ec:	000f883a 	mov	r7,zero
    54f0:	00084ec0 	call	84ec <__multadd>
    54f4:	1027883a 	mov	r19,r2
    54f8:	d8800615 	stw	r2,24(sp)
    54fc:	003ebb06 	br	4fec <_dtoa_r+0x948>
    5500:	d9801117 	ldw	r6,68(sp)
    5504:	d8800d17 	ldw	r2,52(sp)
    5508:	d8000915 	stw	zero,36(sp)
    550c:	308dc83a 	sub	r6,r6,r2
    5510:	0087c83a 	sub	r3,zero,r2
    5514:	d9801115 	stw	r6,68(sp)
    5518:	d8c01015 	stw	r3,64(sp)
    551c:	003cfe06 	br	4918 <_dtoa_r+0x274>
    5520:	018dc83a 	sub	r6,zero,r6
    5524:	d9801115 	stw	r6,68(sp)
    5528:	d8000a15 	stw	zero,40(sp)
    552c:	003cf306 	br	48fc <_dtoa_r+0x258>
    5530:	d9000d17 	ldw	r4,52(sp)
    5534:	000a9ec0 	call	a9ec <__floatsidf>
    5538:	880b883a 	mov	r5,r17
    553c:	8009883a 	mov	r4,r16
    5540:	180f883a 	mov	r7,r3
    5544:	100d883a 	mov	r6,r2
    5548:	000a7cc0 	call	a7cc <__nedf2>
    554c:	103ce126 	beq	r2,zero,48d4 <_dtoa_r+0x230>
    5550:	d9800d17 	ldw	r6,52(sp)
    5554:	31bfffc4 	addi	r6,r6,-1
    5558:	d9800d15 	stw	r6,52(sp)
    555c:	003cdd06 	br	48d4 <_dtoa_r+0x230>
    5560:	d9000717 	ldw	r4,28(sp)
    5564:	900b883a 	mov	r5,r18
    5568:	00079940 	call	7994 <__mcmp>
    556c:	103e8d0e 	bge	r2,zero,4fa4 <_dtoa_r+0x900>
    5570:	d9400717 	ldw	r5,28(sp)
    5574:	d9001617 	ldw	r4,88(sp)
    5578:	01800284 	movi	r6,10
    557c:	000f883a 	mov	r7,zero
    5580:	00084ec0 	call	84ec <__multadd>
    5584:	d9800d17 	ldw	r6,52(sp)
    5588:	d8800715 	stw	r2,28(sp)
    558c:	31bfffc4 	addi	r6,r6,-1
    5590:	d9800d15 	stw	r6,52(sp)
    5594:	b001a71e 	bne	r22,zero,5c34 <_dtoa_r+0x1590>
    5598:	d8800e17 	ldw	r2,56(sp)
    559c:	d8800f15 	stw	r2,60(sp)
    55a0:	003e8006 	br	4fa4 <_dtoa_r+0x900>
    55a4:	90800417 	ldw	r2,16(r18)
    55a8:	1085883a 	add	r2,r2,r2
    55ac:	1085883a 	add	r2,r2,r2
    55b0:	1485883a 	add	r2,r2,r18
    55b4:	11000417 	ldw	r4,16(r2)
    55b8:	00078600 	call	7860 <__hi0bits>
    55bc:	00c00804 	movi	r3,32
    55c0:	1887c83a 	sub	r3,r3,r2
    55c4:	003e5a06 	br	4f30 <_dtoa_r+0x88c>
    55c8:	d9400717 	ldw	r5,28(sp)
    55cc:	d9801017 	ldw	r6,64(sp)
    55d0:	d9001617 	ldw	r4,88(sp)
    55d4:	00085ec0 	call	85ec <__pow5mult>
    55d8:	d8800715 	stw	r2,28(sp)
    55dc:	003e4306 	br	4eec <_dtoa_r+0x848>
    55e0:	d9800f17 	ldw	r6,60(sp)
    55e4:	d8800d17 	ldw	r2,52(sp)
    55e8:	d9800315 	stw	r6,12(sp)
    55ec:	d8800415 	stw	r2,16(sp)
    55f0:	d8c00b17 	ldw	r3,44(sp)
    55f4:	1805003a 	cmpeq	r2,r3,zero
    55f8:	1000e21e 	bne	r2,zero,5984 <_dtoa_r+0x12e0>
    55fc:	d9000317 	ldw	r4,12(sp)
    5600:	0005883a 	mov	r2,zero
    5604:	00cff834 	movhi	r3,16352
    5608:	200c90fa 	slli	r6,r4,3
    560c:	01000074 	movhi	r4,1
    5610:	211f2e04 	addi	r4,r4,31928
    5614:	180b883a 	mov	r5,r3
    5618:	310d883a 	add	r6,r6,r4
    561c:	327fff17 	ldw	r9,-4(r6)
    5620:	323ffe17 	ldw	r8,-8(r6)
    5624:	1009883a 	mov	r4,r2
    5628:	480f883a 	mov	r7,r9
    562c:	400d883a 	mov	r6,r8
    5630:	000a4ec0 	call	a4ec <__divdf3>
    5634:	180b883a 	mov	r5,r3
    5638:	b00d883a 	mov	r6,r22
    563c:	b80f883a 	mov	r7,r23
    5640:	1009883a 	mov	r4,r2
    5644:	00017dc0 	call	17dc <__subdf3>
    5648:	a80b883a 	mov	r5,r21
    564c:	a009883a 	mov	r4,r20
    5650:	d8c01915 	stw	r3,100(sp)
    5654:	d8801815 	stw	r2,96(sp)
    5658:	000aae40 	call	aae4 <__fixdfsi>
    565c:	1009883a 	mov	r4,r2
    5660:	1027883a 	mov	r19,r2
    5664:	000a9ec0 	call	a9ec <__floatsidf>
    5668:	a80b883a 	mov	r5,r21
    566c:	a009883a 	mov	r4,r20
    5670:	180f883a 	mov	r7,r3
    5674:	100d883a 	mov	r6,r2
    5678:	00017dc0 	call	17dc <__subdf3>
    567c:	d9801817 	ldw	r6,96(sp)
    5680:	1823883a 	mov	r17,r3
    5684:	d8801415 	stw	r2,80(sp)
    5688:	302d883a 	mov	r22,r6
    568c:	d9800517 	ldw	r6,20(sp)
    5690:	9cc00c04 	addi	r19,r19,48
    5694:	dc401515 	stw	r17,84(sp)
    5698:	d8c01917 	ldw	r3,100(sp)
    569c:	34c00005 	stb	r19,0(r6)
    56a0:	d8800517 	ldw	r2,20(sp)
    56a4:	d9401917 	ldw	r5,100(sp)
    56a8:	d9801417 	ldw	r6,80(sp)
    56ac:	b009883a 	mov	r4,r22
    56b0:	880f883a 	mov	r7,r17
    56b4:	182f883a 	mov	r23,r3
    56b8:	17000044 	addi	fp,r2,1
    56bc:	000a8540 	call	a854 <__gtdf2>
    56c0:	00804e16 	blt	zero,r2,57fc <_dtoa_r+0x1158>
    56c4:	d9801417 	ldw	r6,80(sp)
    56c8:	0005883a 	mov	r2,zero
    56cc:	00cffc34 	movhi	r3,16368
    56d0:	180b883a 	mov	r5,r3
    56d4:	880f883a 	mov	r7,r17
    56d8:	1009883a 	mov	r4,r2
    56dc:	00017dc0 	call	17dc <__subdf3>
    56e0:	d9401917 	ldw	r5,100(sp)
    56e4:	180f883a 	mov	r7,r3
    56e8:	b009883a 	mov	r4,r22
    56ec:	100d883a 	mov	r6,r2
    56f0:	000a8540 	call	a854 <__gtdf2>
    56f4:	00bda216 	blt	zero,r2,4d80 <_dtoa_r+0x6dc>
    56f8:	d8c00317 	ldw	r3,12(sp)
    56fc:	00800044 	movi	r2,1
    5700:	10c01216 	blt	r2,r3,574c <_dtoa_r+0x10a8>
    5704:	003d4506 	br	4c1c <_dtoa_r+0x578>
    5708:	d9801417 	ldw	r6,80(sp)
    570c:	0005883a 	mov	r2,zero
    5710:	00cffc34 	movhi	r3,16368
    5714:	180b883a 	mov	r5,r3
    5718:	880f883a 	mov	r7,r17
    571c:	1009883a 	mov	r4,r2
    5720:	00017dc0 	call	17dc <__subdf3>
    5724:	d9c01b17 	ldw	r7,108(sp)
    5728:	180b883a 	mov	r5,r3
    572c:	1009883a 	mov	r4,r2
    5730:	b00d883a 	mov	r6,r22
    5734:	000a9640 	call	a964 <__ltdf2>
    5738:	103d9116 	blt	r2,zero,4d80 <_dtoa_r+0x6dc>
    573c:	d9800517 	ldw	r6,20(sp)
    5740:	d9000317 	ldw	r4,12(sp)
    5744:	3105883a 	add	r2,r6,r4
    5748:	e0bd3426 	beq	fp,r2,4c1c <_dtoa_r+0x578>
    574c:	04500934 	movhi	r17,16420
    5750:	0021883a 	mov	r16,zero
    5754:	b80b883a 	mov	r5,r23
    5758:	b009883a 	mov	r4,r22
    575c:	800d883a 	mov	r6,r16
    5760:	880f883a 	mov	r7,r17
    5764:	000a1280 	call	a128 <__muldf3>
    5768:	d9401517 	ldw	r5,84(sp)
    576c:	d9001417 	ldw	r4,80(sp)
    5770:	880f883a 	mov	r7,r17
    5774:	000d883a 	mov	r6,zero
    5778:	d8801a15 	stw	r2,104(sp)
    577c:	d8c01b15 	stw	r3,108(sp)
    5780:	000a1280 	call	a128 <__muldf3>
    5784:	180b883a 	mov	r5,r3
    5788:	1009883a 	mov	r4,r2
    578c:	1823883a 	mov	r17,r3
    5790:	1021883a 	mov	r16,r2
    5794:	000aae40 	call	aae4 <__fixdfsi>
    5798:	1009883a 	mov	r4,r2
    579c:	102b883a 	mov	r21,r2
    57a0:	000a9ec0 	call	a9ec <__floatsidf>
    57a4:	880b883a 	mov	r5,r17
    57a8:	8009883a 	mov	r4,r16
    57ac:	180f883a 	mov	r7,r3
    57b0:	100d883a 	mov	r6,r2
    57b4:	00017dc0 	call	17dc <__subdf3>
    57b8:	1021883a 	mov	r16,r2
    57bc:	d9001b17 	ldw	r4,108(sp)
    57c0:	1823883a 	mov	r17,r3
    57c4:	dc001415 	stw	r16,80(sp)
    57c8:	ad400c04 	addi	r21,r21,48
    57cc:	dc401515 	stw	r17,84(sp)
    57d0:	d8801a17 	ldw	r2,104(sp)
    57d4:	e5400005 	stb	r21,0(fp)
    57d8:	202f883a 	mov	r23,r4
    57dc:	d9c01b17 	ldw	r7,108(sp)
    57e0:	d9001417 	ldw	r4,80(sp)
    57e4:	880b883a 	mov	r5,r17
    57e8:	100d883a 	mov	r6,r2
    57ec:	102d883a 	mov	r22,r2
    57f0:	e7000044 	addi	fp,fp,1
    57f4:	000a9640 	call	a964 <__ltdf2>
    57f8:	103fc30e 	bge	r2,zero,5708 <_dtoa_r+0x1064>
    57fc:	d9000417 	ldw	r4,16(sp)
    5800:	d9000d15 	stw	r4,52(sp)
    5804:	003d7106 	br	4dcc <_dtoa_r+0x728>
    5808:	d9801717 	ldw	r6,92(sp)
    580c:	00800084 	movi	r2,2
    5810:	11bde60e 	bge	r2,r6,4fac <_dtoa_r+0x908>
    5814:	203cfb1e 	bne	r4,zero,4c04 <_dtoa_r+0x560>
    5818:	d9001617 	ldw	r4,88(sp)
    581c:	900b883a 	mov	r5,r18
    5820:	01800144 	movi	r6,5
    5824:	000f883a 	mov	r7,zero
    5828:	00084ec0 	call	84ec <__multadd>
    582c:	d9000717 	ldw	r4,28(sp)
    5830:	100b883a 	mov	r5,r2
    5834:	1025883a 	mov	r18,r2
    5838:	00079940 	call	7994 <__mcmp>
    583c:	00bcf10e 	bge	zero,r2,4c04 <_dtoa_r+0x560>
    5840:	d8c00d17 	ldw	r3,52(sp)
    5844:	d9000517 	ldw	r4,20(sp)
    5848:	d8000615 	stw	zero,24(sp)
    584c:	18c00044 	addi	r3,r3,1
    5850:	d8c00d15 	stw	r3,52(sp)
    5854:	00800c44 	movi	r2,49
    5858:	27000044 	addi	fp,r4,1
    585c:	20800005 	stb	r2,0(r4)
    5860:	003e8906 	br	5288 <_dtoa_r+0xbe4>
    5864:	d8c00517 	ldw	r3,20(sp)
    5868:	003bc206 	br	4774 <_dtoa_r+0xd0>
    586c:	01800074 	movhi	r6,1
    5870:	319f6004 	addi	r6,r6,32128
    5874:	30c00917 	ldw	r3,36(r6)
    5878:	30800817 	ldw	r2,32(r6)
    587c:	d9001217 	ldw	r4,72(sp)
    5880:	d9401317 	ldw	r5,76(sp)
    5884:	180f883a 	mov	r7,r3
    5888:	100d883a 	mov	r6,r2
    588c:	000a4ec0 	call	a4ec <__divdf3>
    5890:	948003cc 	andi	r18,r18,15
    5894:	058000c4 	movi	r22,3
    5898:	1029883a 	mov	r20,r2
    589c:	182b883a 	mov	r21,r3
    58a0:	003c8906 	br	4ac8 <_dtoa_r+0x424>
    58a4:	d9001017 	ldw	r4,64(sp)
    58a8:	d9800917 	ldw	r6,36(sp)
    58ac:	0025883a 	mov	r18,zero
    58b0:	1105c83a 	sub	r2,r2,r4
    58b4:	2089883a 	add	r4,r4,r2
    58b8:	308d883a 	add	r6,r6,r2
    58bc:	d9001015 	stw	r4,64(sp)
    58c0:	d9800915 	stw	r6,36(sp)
    58c4:	003e3206 	br	5190 <_dtoa_r+0xaec>
    58c8:	28800044 	addi	r2,r5,1
    58cc:	27000044 	addi	fp,r4,1
    58d0:	20800005 	stb	r2,0(r4)
    58d4:	003e6c06 	br	5288 <_dtoa_r+0xbe4>
    58d8:	d8800f17 	ldw	r2,60(sp)
    58dc:	00bce016 	blt	zero,r2,4c60 <_dtoa_r+0x5bc>
    58e0:	d9800f17 	ldw	r6,60(sp)
    58e4:	303cc51e 	bne	r6,zero,4bfc <_dtoa_r+0x558>
    58e8:	0005883a 	mov	r2,zero
    58ec:	00d00534 	movhi	r3,16404
    58f0:	980b883a 	mov	r5,r19
    58f4:	180f883a 	mov	r7,r3
    58f8:	9009883a 	mov	r4,r18
    58fc:	100d883a 	mov	r6,r2
    5900:	000a1280 	call	a128 <__muldf3>
    5904:	180b883a 	mov	r5,r3
    5908:	a80f883a 	mov	r7,r21
    590c:	1009883a 	mov	r4,r2
    5910:	a00d883a 	mov	r6,r20
    5914:	000a8dc0 	call	a8dc <__gedf2>
    5918:	103cb80e 	bge	r2,zero,4bfc <_dtoa_r+0x558>
    591c:	0027883a 	mov	r19,zero
    5920:	0025883a 	mov	r18,zero
    5924:	003fc606 	br	5840 <_dtoa_r+0x119c>
    5928:	99400117 	ldw	r5,4(r19)
    592c:	d9001617 	ldw	r4,88(sp)
    5930:	0007db80 	call	7db8 <_Balloc>
    5934:	99800417 	ldw	r6,16(r19)
    5938:	11000304 	addi	r4,r2,12
    593c:	99400304 	addi	r5,r19,12
    5940:	318d883a 	add	r6,r6,r6
    5944:	318d883a 	add	r6,r6,r6
    5948:	31800204 	addi	r6,r6,8
    594c:	1023883a 	mov	r17,r2
    5950:	00076200 	call	7620 <memcpy>
    5954:	d9001617 	ldw	r4,88(sp)
    5958:	880b883a 	mov	r5,r17
    595c:	01800044 	movi	r6,1
    5960:	000817c0 	call	817c <__lshift>
    5964:	100b883a 	mov	r5,r2
    5968:	003d9c06 	br	4fdc <_dtoa_r+0x938>
    596c:	00800e44 	movi	r2,57
    5970:	b8807026 	beq	r23,r2,5b34 <_dtoa_r+0x1490>
    5974:	b8800044 	addi	r2,r23,1
    5978:	b7000044 	addi	fp,r22,1
    597c:	b0800005 	stb	r2,0(r22)
    5980:	003e4106 	br	5288 <_dtoa_r+0xbe4>
    5984:	d8800317 	ldw	r2,12(sp)
    5988:	01800074 	movhi	r6,1
    598c:	319f2e04 	addi	r6,r6,31928
    5990:	b009883a 	mov	r4,r22
    5994:	100e90fa 	slli	r7,r2,3
    5998:	b80b883a 	mov	r5,r23
    599c:	398f883a 	add	r7,r7,r6
    59a0:	38bffe17 	ldw	r2,-8(r7)
    59a4:	d9800517 	ldw	r6,20(sp)
    59a8:	38ffff17 	ldw	r3,-4(r7)
    59ac:	37000044 	addi	fp,r6,1
    59b0:	180f883a 	mov	r7,r3
    59b4:	100d883a 	mov	r6,r2
    59b8:	000a1280 	call	a128 <__muldf3>
    59bc:	a80b883a 	mov	r5,r21
    59c0:	a009883a 	mov	r4,r20
    59c4:	182f883a 	mov	r23,r3
    59c8:	102d883a 	mov	r22,r2
    59cc:	000aae40 	call	aae4 <__fixdfsi>
    59d0:	1009883a 	mov	r4,r2
    59d4:	1027883a 	mov	r19,r2
    59d8:	000a9ec0 	call	a9ec <__floatsidf>
    59dc:	a80b883a 	mov	r5,r21
    59e0:	a009883a 	mov	r4,r20
    59e4:	180f883a 	mov	r7,r3
    59e8:	100d883a 	mov	r6,r2
    59ec:	00017dc0 	call	17dc <__subdf3>
    59f0:	180b883a 	mov	r5,r3
    59f4:	d8c00517 	ldw	r3,20(sp)
    59f8:	9cc00c04 	addi	r19,r19,48
    59fc:	1009883a 	mov	r4,r2
    5a00:	1cc00005 	stb	r19,0(r3)
    5a04:	2021883a 	mov	r16,r4
    5a08:	d9000317 	ldw	r4,12(sp)
    5a0c:	00800044 	movi	r2,1
    5a10:	2823883a 	mov	r17,r5
    5a14:	20802226 	beq	r4,r2,5aa0 <_dtoa_r+0x13fc>
    5a18:	1029883a 	mov	r20,r2
    5a1c:	0005883a 	mov	r2,zero
    5a20:	00d00934 	movhi	r3,16420
    5a24:	180f883a 	mov	r7,r3
    5a28:	100d883a 	mov	r6,r2
    5a2c:	880b883a 	mov	r5,r17
    5a30:	8009883a 	mov	r4,r16
    5a34:	000a1280 	call	a128 <__muldf3>
    5a38:	180b883a 	mov	r5,r3
    5a3c:	1009883a 	mov	r4,r2
    5a40:	1823883a 	mov	r17,r3
    5a44:	1021883a 	mov	r16,r2
    5a48:	000aae40 	call	aae4 <__fixdfsi>
    5a4c:	1009883a 	mov	r4,r2
    5a50:	102b883a 	mov	r21,r2
    5a54:	000a9ec0 	call	a9ec <__floatsidf>
    5a58:	880b883a 	mov	r5,r17
    5a5c:	8009883a 	mov	r4,r16
    5a60:	180f883a 	mov	r7,r3
    5a64:	100d883a 	mov	r6,r2
    5a68:	00017dc0 	call	17dc <__subdf3>
    5a6c:	180b883a 	mov	r5,r3
    5a70:	d8c00517 	ldw	r3,20(sp)
    5a74:	1009883a 	mov	r4,r2
    5a78:	ad400c04 	addi	r21,r21,48
    5a7c:	1d05883a 	add	r2,r3,r20
    5a80:	15400005 	stb	r21,0(r2)
    5a84:	2021883a 	mov	r16,r4
    5a88:	d9000317 	ldw	r4,12(sp)
    5a8c:	a5000044 	addi	r20,r20,1
    5a90:	2823883a 	mov	r17,r5
    5a94:	a13fe11e 	bne	r20,r4,5a1c <_dtoa_r+0x1378>
    5a98:	e505883a 	add	r2,fp,r20
    5a9c:	173fffc4 	addi	fp,r2,-1
    5aa0:	0025883a 	mov	r18,zero
    5aa4:	04cff834 	movhi	r19,16352
    5aa8:	b009883a 	mov	r4,r22
    5aac:	b80b883a 	mov	r5,r23
    5ab0:	900d883a 	mov	r6,r18
    5ab4:	980f883a 	mov	r7,r19
    5ab8:	000185c0 	call	185c <__adddf3>
    5abc:	180b883a 	mov	r5,r3
    5ac0:	1009883a 	mov	r4,r2
    5ac4:	800d883a 	mov	r6,r16
    5ac8:	880f883a 	mov	r7,r17
    5acc:	000a9640 	call	a964 <__ltdf2>
    5ad0:	103cab16 	blt	r2,zero,4d80 <_dtoa_r+0x6dc>
    5ad4:	0009883a 	mov	r4,zero
    5ad8:	980b883a 	mov	r5,r19
    5adc:	b80f883a 	mov	r7,r23
    5ae0:	b00d883a 	mov	r6,r22
    5ae4:	00017dc0 	call	17dc <__subdf3>
    5ae8:	180b883a 	mov	r5,r3
    5aec:	880f883a 	mov	r7,r17
    5af0:	1009883a 	mov	r4,r2
    5af4:	800d883a 	mov	r6,r16
    5af8:	000a8540 	call	a854 <__gtdf2>
    5afc:	00bc470e 	bge	zero,r2,4c1c <_dtoa_r+0x578>
    5b00:	00c00c04 	movi	r3,48
    5b04:	e73fffc4 	addi	fp,fp,-1
    5b08:	e0800007 	ldb	r2,0(fp)
    5b0c:	10fffd26 	beq	r2,r3,5b04 <_dtoa_r+0x1460>
    5b10:	d9800417 	ldw	r6,16(sp)
    5b14:	e7000044 	addi	fp,fp,1
    5b18:	d9800d15 	stw	r6,52(sp)
    5b1c:	003cab06 	br	4dcc <_dtoa_r+0x728>
    5b20:	d8c00f17 	ldw	r3,60(sp)
    5b24:	d9001117 	ldw	r4,68(sp)
    5b28:	20e1c83a 	sub	r16,r4,r3
    5b2c:	0007883a 	mov	r3,zero
    5b30:	003d9b06 	br	51a0 <_dtoa_r+0xafc>
    5b34:	00800e44 	movi	r2,57
    5b38:	b0800005 	stb	r2,0(r22)
    5b3c:	b5800044 	addi	r22,r22,1
    5b40:	003dc106 	br	5248 <_dtoa_r+0xba4>
    5b44:	05800084 	movi	r22,2
    5b48:	003bf706 	br	4b28 <_dtoa_r+0x484>
    5b4c:	d9000f17 	ldw	r4,60(sp)
    5b50:	013c000e 	bge	zero,r4,4b54 <_dtoa_r+0x4b0>
    5b54:	d9800e17 	ldw	r6,56(sp)
    5b58:	01bc300e 	bge	zero,r6,4c1c <_dtoa_r+0x578>
    5b5c:	0005883a 	mov	r2,zero
    5b60:	00d00934 	movhi	r3,16420
    5b64:	a80b883a 	mov	r5,r21
    5b68:	180f883a 	mov	r7,r3
    5b6c:	a009883a 	mov	r4,r20
    5b70:	100d883a 	mov	r6,r2
    5b74:	000a1280 	call	a128 <__muldf3>
    5b78:	b1000044 	addi	r4,r22,1
    5b7c:	1021883a 	mov	r16,r2
    5b80:	1823883a 	mov	r17,r3
    5b84:	000a9ec0 	call	a9ec <__floatsidf>
    5b88:	880b883a 	mov	r5,r17
    5b8c:	8009883a 	mov	r4,r16
    5b90:	180f883a 	mov	r7,r3
    5b94:	100d883a 	mov	r6,r2
    5b98:	000a1280 	call	a128 <__muldf3>
    5b9c:	0011883a 	mov	r8,zero
    5ba0:	02500734 	movhi	r9,16412
    5ba4:	180b883a 	mov	r5,r3
    5ba8:	480f883a 	mov	r7,r9
    5bac:	1009883a 	mov	r4,r2
    5bb0:	400d883a 	mov	r6,r8
    5bb4:	000185c0 	call	185c <__adddf3>
    5bb8:	102d883a 	mov	r22,r2
    5bbc:	00bf3034 	movhi	r2,64704
    5bc0:	10ef883a 	add	r23,r2,r3
    5bc4:	d8800d17 	ldw	r2,52(sp)
    5bc8:	d8c00e17 	ldw	r3,56(sp)
    5bcc:	8029883a 	mov	r20,r16
    5bd0:	10bfffc4 	addi	r2,r2,-1
    5bd4:	882b883a 	mov	r21,r17
    5bd8:	d8800415 	stw	r2,16(sp)
    5bdc:	d8c00315 	stw	r3,12(sp)
    5be0:	003e8306 	br	55f0 <_dtoa_r+0xf4c>
    5be4:	d8800117 	ldw	r2,4(sp)
    5be8:	dc001117 	ldw	r16,68(sp)
    5bec:	dc801017 	ldw	r18,64(sp)
    5bf0:	00c00d84 	movi	r3,54
    5bf4:	1887c83a 	sub	r3,r3,r2
    5bf8:	003d6906 	br	51a0 <_dtoa_r+0xafc>
    5bfc:	01800044 	movi	r6,1
    5c00:	3021883a 	mov	r16,r6
    5c04:	d9800f15 	stw	r6,60(sp)
    5c08:	d9802615 	stw	r6,152(sp)
    5c0c:	d9800e15 	stw	r6,56(sp)
    5c10:	003b9306 	br	4a60 <_dtoa_r+0x3bc>
    5c14:	b021883a 	mov	r16,r22
    5c18:	dd800f15 	stw	r22,60(sp)
    5c1c:	003b9006 	br	4a60 <_dtoa_r+0x3bc>
    5c20:	103e221e 	bne	r2,zero,54ac <_dtoa_r+0xe08>
    5c24:	b880004c 	andi	r2,r23,1
    5c28:	1005003a 	cmpeq	r2,r2,zero
    5c2c:	103e1f1e 	bne	r2,zero,54ac <_dtoa_r+0xe08>
    5c30:	003e1b06 	br	54a0 <_dtoa_r+0xdfc>
    5c34:	d9001617 	ldw	r4,88(sp)
    5c38:	980b883a 	mov	r5,r19
    5c3c:	01800284 	movi	r6,10
    5c40:	000f883a 	mov	r7,zero
    5c44:	00084ec0 	call	84ec <__multadd>
    5c48:	d8c00e17 	ldw	r3,56(sp)
    5c4c:	1027883a 	mov	r19,r2
    5c50:	d8c00f15 	stw	r3,60(sp)
    5c54:	003cd306 	br	4fa4 <_dtoa_r+0x900>

00005c58 <_fflush_r>:
    5c58:	defffb04 	addi	sp,sp,-20
    5c5c:	dcc00315 	stw	r19,12(sp)
    5c60:	dc800215 	stw	r18,8(sp)
    5c64:	dfc00415 	stw	ra,16(sp)
    5c68:	dc400115 	stw	r17,4(sp)
    5c6c:	dc000015 	stw	r16,0(sp)
    5c70:	2027883a 	mov	r19,r4
    5c74:	2825883a 	mov	r18,r5
    5c78:	20000226 	beq	r4,zero,5c84 <_fflush_r+0x2c>
    5c7c:	20800e17 	ldw	r2,56(r4)
    5c80:	10005626 	beq	r2,zero,5ddc <_fflush_r+0x184>
    5c84:	9100030b 	ldhu	r4,12(r18)
    5c88:	20ffffcc 	andi	r3,r4,65535
    5c8c:	18e0001c 	xori	r3,r3,32768
    5c90:	18e00004 	addi	r3,r3,-32768
    5c94:	1880020c 	andi	r2,r3,8
    5c98:	1000261e 	bne	r2,zero,5d34 <_fflush_r+0xdc>
    5c9c:	90c00117 	ldw	r3,4(r18)
    5ca0:	20820014 	ori	r2,r4,2048
    5ca4:	9080030d 	sth	r2,12(r18)
    5ca8:	1009883a 	mov	r4,r2
    5cac:	00c0400e 	bge	zero,r3,5db0 <_fflush_r+0x158>
    5cb0:	92000a17 	ldw	r8,40(r18)
    5cb4:	40004026 	beq	r8,zero,5db8 <_fflush_r+0x160>
    5cb8:	2084000c 	andi	r2,r4,4096
    5cbc:	10005326 	beq	r2,zero,5e0c <_fflush_r+0x1b4>
    5cc0:	94001417 	ldw	r16,80(r18)
    5cc4:	9080030b 	ldhu	r2,12(r18)
    5cc8:	1080010c 	andi	r2,r2,4
    5ccc:	1000481e 	bne	r2,zero,5df0 <_fflush_r+0x198>
    5cd0:	91400717 	ldw	r5,28(r18)
    5cd4:	9809883a 	mov	r4,r19
    5cd8:	800d883a 	mov	r6,r16
    5cdc:	000f883a 	mov	r7,zero
    5ce0:	403ee83a 	callr	r8
    5ce4:	8080261e 	bne	r16,r2,5d80 <_fflush_r+0x128>
    5ce8:	9080030b 	ldhu	r2,12(r18)
    5cec:	91000417 	ldw	r4,16(r18)
    5cf0:	90000115 	stw	zero,4(r18)
    5cf4:	10bdffcc 	andi	r2,r2,63487
    5cf8:	10ffffcc 	andi	r3,r2,65535
    5cfc:	18c4000c 	andi	r3,r3,4096
    5d00:	9080030d 	sth	r2,12(r18)
    5d04:	91000015 	stw	r4,0(r18)
    5d08:	18002b26 	beq	r3,zero,5db8 <_fflush_r+0x160>
    5d0c:	0007883a 	mov	r3,zero
    5d10:	1805883a 	mov	r2,r3
    5d14:	94001415 	stw	r16,80(r18)
    5d18:	dfc00417 	ldw	ra,16(sp)
    5d1c:	dcc00317 	ldw	r19,12(sp)
    5d20:	dc800217 	ldw	r18,8(sp)
    5d24:	dc400117 	ldw	r17,4(sp)
    5d28:	dc000017 	ldw	r16,0(sp)
    5d2c:	dec00504 	addi	sp,sp,20
    5d30:	f800283a 	ret
    5d34:	94400417 	ldw	r17,16(r18)
    5d38:	88001f26 	beq	r17,zero,5db8 <_fflush_r+0x160>
    5d3c:	90800017 	ldw	r2,0(r18)
    5d40:	18c000cc 	andi	r3,r3,3
    5d44:	94400015 	stw	r17,0(r18)
    5d48:	1461c83a 	sub	r16,r2,r17
    5d4c:	18002526 	beq	r3,zero,5de4 <_fflush_r+0x18c>
    5d50:	0005883a 	mov	r2,zero
    5d54:	90800215 	stw	r2,8(r18)
    5d58:	0400170e 	bge	zero,r16,5db8 <_fflush_r+0x160>
    5d5c:	90c00917 	ldw	r3,36(r18)
    5d60:	91400717 	ldw	r5,28(r18)
    5d64:	880d883a 	mov	r6,r17
    5d68:	800f883a 	mov	r7,r16
    5d6c:	9809883a 	mov	r4,r19
    5d70:	183ee83a 	callr	r3
    5d74:	88a3883a 	add	r17,r17,r2
    5d78:	80a1c83a 	sub	r16,r16,r2
    5d7c:	00bff616 	blt	zero,r2,5d58 <_fflush_r+0x100>
    5d80:	9080030b 	ldhu	r2,12(r18)
    5d84:	00ffffc4 	movi	r3,-1
    5d88:	10801014 	ori	r2,r2,64
    5d8c:	9080030d 	sth	r2,12(r18)
    5d90:	1805883a 	mov	r2,r3
    5d94:	dfc00417 	ldw	ra,16(sp)
    5d98:	dcc00317 	ldw	r19,12(sp)
    5d9c:	dc800217 	ldw	r18,8(sp)
    5da0:	dc400117 	ldw	r17,4(sp)
    5da4:	dc000017 	ldw	r16,0(sp)
    5da8:	dec00504 	addi	sp,sp,20
    5dac:	f800283a 	ret
    5db0:	90800f17 	ldw	r2,60(r18)
    5db4:	00bfbe16 	blt	zero,r2,5cb0 <_fflush_r+0x58>
    5db8:	0007883a 	mov	r3,zero
    5dbc:	1805883a 	mov	r2,r3
    5dc0:	dfc00417 	ldw	ra,16(sp)
    5dc4:	dcc00317 	ldw	r19,12(sp)
    5dc8:	dc800217 	ldw	r18,8(sp)
    5dcc:	dc400117 	ldw	r17,4(sp)
    5dd0:	dc000017 	ldw	r16,0(sp)
    5dd4:	dec00504 	addi	sp,sp,20
    5dd8:	f800283a 	ret
    5ddc:	0005ef00 	call	5ef0 <__sinit>
    5de0:	003fa806 	br	5c84 <_fflush_r+0x2c>
    5de4:	90800517 	ldw	r2,20(r18)
    5de8:	90800215 	stw	r2,8(r18)
    5dec:	003fda06 	br	5d58 <_fflush_r+0x100>
    5df0:	90800117 	ldw	r2,4(r18)
    5df4:	90c00c17 	ldw	r3,48(r18)
    5df8:	80a1c83a 	sub	r16,r16,r2
    5dfc:	183fb426 	beq	r3,zero,5cd0 <_fflush_r+0x78>
    5e00:	90800f17 	ldw	r2,60(r18)
    5e04:	80a1c83a 	sub	r16,r16,r2
    5e08:	003fb106 	br	5cd0 <_fflush_r+0x78>
    5e0c:	91400717 	ldw	r5,28(r18)
    5e10:	9809883a 	mov	r4,r19
    5e14:	000d883a 	mov	r6,zero
    5e18:	01c00044 	movi	r7,1
    5e1c:	403ee83a 	callr	r8
    5e20:	1021883a 	mov	r16,r2
    5e24:	00bfffc4 	movi	r2,-1
    5e28:	80800226 	beq	r16,r2,5e34 <_fflush_r+0x1dc>
    5e2c:	92000a17 	ldw	r8,40(r18)
    5e30:	003fa406 	br	5cc4 <_fflush_r+0x6c>
    5e34:	98c00017 	ldw	r3,0(r19)
    5e38:	00800744 	movi	r2,29
    5e3c:	18bfde26 	beq	r3,r2,5db8 <_fflush_r+0x160>
    5e40:	9080030b 	ldhu	r2,12(r18)
    5e44:	8007883a 	mov	r3,r16
    5e48:	10801014 	ori	r2,r2,64
    5e4c:	9080030d 	sth	r2,12(r18)
    5e50:	003fcf06 	br	5d90 <_fflush_r+0x138>

00005e54 <fflush>:
    5e54:	01400034 	movhi	r5,0
    5e58:	29571604 	addi	r5,r5,23640
    5e5c:	2007883a 	mov	r3,r4
    5e60:	20000526 	beq	r4,zero,5e78 <fflush+0x24>
    5e64:	008000b4 	movhi	r2,2
    5e68:	10a68a04 	addi	r2,r2,-26072
    5e6c:	11000017 	ldw	r4,0(r2)
    5e70:	180b883a 	mov	r5,r3
    5e74:	0005c581 	jmpi	5c58 <_fflush_r>
    5e78:	008000b4 	movhi	r2,2
    5e7c:	10a68b04 	addi	r2,r2,-26068
    5e80:	11000017 	ldw	r4,0(r2)
    5e84:	0006a241 	jmpi	6a24 <_fwalk_reent>

00005e88 <std>:
    5e88:	00800074 	movhi	r2,1
    5e8c:	10a3c004 	addi	r2,r2,-28928
    5e90:	20800b15 	stw	r2,44(r4)
    5e94:	00800074 	movhi	r2,1
    5e98:	10a3fb04 	addi	r2,r2,-28692
    5e9c:	20800815 	stw	r2,32(r4)
    5ea0:	00c00074 	movhi	r3,1
    5ea4:	18e3dc04 	addi	r3,r3,-28816
    5ea8:	00800074 	movhi	r2,1
    5eac:	10a3c204 	addi	r2,r2,-28920
    5eb0:	2140030d 	sth	r5,12(r4)
    5eb4:	2180038d 	sth	r6,14(r4)
    5eb8:	20c00915 	stw	r3,36(r4)
    5ebc:	20800a15 	stw	r2,40(r4)
    5ec0:	20000015 	stw	zero,0(r4)
    5ec4:	20000115 	stw	zero,4(r4)
    5ec8:	20000215 	stw	zero,8(r4)
    5ecc:	20000415 	stw	zero,16(r4)
    5ed0:	20000515 	stw	zero,20(r4)
    5ed4:	20000615 	stw	zero,24(r4)
    5ed8:	21000715 	stw	r4,28(r4)
    5edc:	f800283a 	ret

00005ee0 <__sfp_lock_acquire>:
    5ee0:	f800283a 	ret

00005ee4 <__sfp_lock_release>:
    5ee4:	f800283a 	ret

00005ee8 <__sinit_lock_acquire>:
    5ee8:	f800283a 	ret

00005eec <__sinit_lock_release>:
    5eec:	f800283a 	ret

00005ef0 <__sinit>:
    5ef0:	20800e17 	ldw	r2,56(r4)
    5ef4:	defffd04 	addi	sp,sp,-12
    5ef8:	dc400115 	stw	r17,4(sp)
    5efc:	dc000015 	stw	r16,0(sp)
    5f00:	dfc00215 	stw	ra,8(sp)
    5f04:	04400044 	movi	r17,1
    5f08:	01400104 	movi	r5,4
    5f0c:	000d883a 	mov	r6,zero
    5f10:	2021883a 	mov	r16,r4
    5f14:	2200bb04 	addi	r8,r4,748
    5f18:	200f883a 	mov	r7,r4
    5f1c:	10000526 	beq	r2,zero,5f34 <__sinit+0x44>
    5f20:	dfc00217 	ldw	ra,8(sp)
    5f24:	dc400117 	ldw	r17,4(sp)
    5f28:	dc000017 	ldw	r16,0(sp)
    5f2c:	dec00304 	addi	sp,sp,12
    5f30:	f800283a 	ret
    5f34:	21000117 	ldw	r4,4(r4)
    5f38:	00800034 	movhi	r2,0
    5f3c:	1097f504 	addi	r2,r2,24532
    5f40:	00c000c4 	movi	r3,3
    5f44:	80800f15 	stw	r2,60(r16)
    5f48:	80c0b915 	stw	r3,740(r16)
    5f4c:	8200ba15 	stw	r8,744(r16)
    5f50:	84400e15 	stw	r17,56(r16)
    5f54:	8000b815 	stw	zero,736(r16)
    5f58:	0005e880 	call	5e88 <std>
    5f5c:	81000217 	ldw	r4,8(r16)
    5f60:	880d883a 	mov	r6,r17
    5f64:	800f883a 	mov	r7,r16
    5f68:	01400284 	movi	r5,10
    5f6c:	0005e880 	call	5e88 <std>
    5f70:	81000317 	ldw	r4,12(r16)
    5f74:	800f883a 	mov	r7,r16
    5f78:	01400484 	movi	r5,18
    5f7c:	01800084 	movi	r6,2
    5f80:	dfc00217 	ldw	ra,8(sp)
    5f84:	dc400117 	ldw	r17,4(sp)
    5f88:	dc000017 	ldw	r16,0(sp)
    5f8c:	dec00304 	addi	sp,sp,12
    5f90:	0005e881 	jmpi	5e88 <std>

00005f94 <__fp_lock>:
    5f94:	0005883a 	mov	r2,zero
    5f98:	f800283a 	ret

00005f9c <__fp_unlock>:
    5f9c:	0005883a 	mov	r2,zero
    5fa0:	f800283a 	ret

00005fa4 <__fp_unlock_all>:
    5fa4:	008000b4 	movhi	r2,2
    5fa8:	10a68a04 	addi	r2,r2,-26072
    5fac:	11000017 	ldw	r4,0(r2)
    5fb0:	01400034 	movhi	r5,0
    5fb4:	2957e704 	addi	r5,r5,24476
    5fb8:	0006aec1 	jmpi	6aec <_fwalk>

00005fbc <__fp_lock_all>:
    5fbc:	008000b4 	movhi	r2,2
    5fc0:	10a68a04 	addi	r2,r2,-26072
    5fc4:	11000017 	ldw	r4,0(r2)
    5fc8:	01400034 	movhi	r5,0
    5fcc:	2957e504 	addi	r5,r5,24468
    5fd0:	0006aec1 	jmpi	6aec <_fwalk>

00005fd4 <_cleanup_r>:
    5fd4:	01400074 	movhi	r5,1
    5fd8:	2964ed04 	addi	r5,r5,-27724
    5fdc:	0006aec1 	jmpi	6aec <_fwalk>

00005fe0 <_cleanup>:
    5fe0:	008000b4 	movhi	r2,2
    5fe4:	10a68b04 	addi	r2,r2,-26068
    5fe8:	11000017 	ldw	r4,0(r2)
    5fec:	0005fd41 	jmpi	5fd4 <_cleanup_r>

00005ff0 <__sfmoreglue>:
    5ff0:	defffc04 	addi	sp,sp,-16
    5ff4:	dc400115 	stw	r17,4(sp)
    5ff8:	2c401724 	muli	r17,r5,92
    5ffc:	dc800215 	stw	r18,8(sp)
    6000:	2825883a 	mov	r18,r5
    6004:	89400304 	addi	r5,r17,12
    6008:	dc000015 	stw	r16,0(sp)
    600c:	dfc00315 	stw	ra,12(sp)
    6010:	0006dfc0 	call	6dfc <_malloc_r>
    6014:	0021883a 	mov	r16,zero
    6018:	880d883a 	mov	r6,r17
    601c:	000b883a 	mov	r5,zero
    6020:	10000626 	beq	r2,zero,603c <__sfmoreglue+0x4c>
    6024:	11000304 	addi	r4,r2,12
    6028:	14800115 	stw	r18,4(r2)
    602c:	10000015 	stw	zero,0(r2)
    6030:	11000215 	stw	r4,8(r2)
    6034:	1021883a 	mov	r16,r2
    6038:	00077a00 	call	77a0 <memset>
    603c:	8005883a 	mov	r2,r16
    6040:	dfc00317 	ldw	ra,12(sp)
    6044:	dc800217 	ldw	r18,8(sp)
    6048:	dc400117 	ldw	r17,4(sp)
    604c:	dc000017 	ldw	r16,0(sp)
    6050:	dec00404 	addi	sp,sp,16
    6054:	f800283a 	ret

00006058 <__sfp>:
    6058:	defffd04 	addi	sp,sp,-12
    605c:	008000b4 	movhi	r2,2
    6060:	10a68b04 	addi	r2,r2,-26068
    6064:	dc000015 	stw	r16,0(sp)
    6068:	14000017 	ldw	r16,0(r2)
    606c:	dc400115 	stw	r17,4(sp)
    6070:	dfc00215 	stw	ra,8(sp)
    6074:	80800e17 	ldw	r2,56(r16)
    6078:	2023883a 	mov	r17,r4
    607c:	10002626 	beq	r2,zero,6118 <__sfp+0xc0>
    6080:	8400b804 	addi	r16,r16,736
    6084:	80800117 	ldw	r2,4(r16)
    6088:	81000217 	ldw	r4,8(r16)
    608c:	10ffffc4 	addi	r3,r2,-1
    6090:	18000916 	blt	r3,zero,60b8 <__sfp+0x60>
    6094:	2080030f 	ldh	r2,12(r4)
    6098:	10000b26 	beq	r2,zero,60c8 <__sfp+0x70>
    609c:	017fffc4 	movi	r5,-1
    60a0:	00000206 	br	60ac <__sfp+0x54>
    60a4:	2080030f 	ldh	r2,12(r4)
    60a8:	10000726 	beq	r2,zero,60c8 <__sfp+0x70>
    60ac:	18ffffc4 	addi	r3,r3,-1
    60b0:	21001704 	addi	r4,r4,92
    60b4:	197ffb1e 	bne	r3,r5,60a4 <__sfp+0x4c>
    60b8:	80800017 	ldw	r2,0(r16)
    60bc:	10001926 	beq	r2,zero,6124 <__sfp+0xcc>
    60c0:	1021883a 	mov	r16,r2
    60c4:	003fef06 	br	6084 <__sfp+0x2c>
    60c8:	00bfffc4 	movi	r2,-1
    60cc:	00c00044 	movi	r3,1
    60d0:	2080038d 	sth	r2,14(r4)
    60d4:	20c0030d 	sth	r3,12(r4)
    60d8:	20000015 	stw	zero,0(r4)
    60dc:	20000215 	stw	zero,8(r4)
    60e0:	20000115 	stw	zero,4(r4)
    60e4:	20000415 	stw	zero,16(r4)
    60e8:	20000515 	stw	zero,20(r4)
    60ec:	20000615 	stw	zero,24(r4)
    60f0:	20000c15 	stw	zero,48(r4)
    60f4:	20000d15 	stw	zero,52(r4)
    60f8:	20001115 	stw	zero,68(r4)
    60fc:	20001215 	stw	zero,72(r4)
    6100:	2005883a 	mov	r2,r4
    6104:	dfc00217 	ldw	ra,8(sp)
    6108:	dc400117 	ldw	r17,4(sp)
    610c:	dc000017 	ldw	r16,0(sp)
    6110:	dec00304 	addi	sp,sp,12
    6114:	f800283a 	ret
    6118:	8009883a 	mov	r4,r16
    611c:	0005ef00 	call	5ef0 <__sinit>
    6120:	003fd706 	br	6080 <__sfp+0x28>
    6124:	8809883a 	mov	r4,r17
    6128:	01400104 	movi	r5,4
    612c:	0005ff00 	call	5ff0 <__sfmoreglue>
    6130:	80800015 	stw	r2,0(r16)
    6134:	103fe21e 	bne	r2,zero,60c0 <__sfp+0x68>
    6138:	00800304 	movi	r2,12
    613c:	0009883a 	mov	r4,zero
    6140:	88800015 	stw	r2,0(r17)
    6144:	003fee06 	br	6100 <__sfp+0xa8>

00006148 <_malloc_trim_r>:
    6148:	defffb04 	addi	sp,sp,-20
    614c:	dcc00315 	stw	r19,12(sp)
    6150:	04c000b4 	movhi	r19,2
    6154:	9ce0d104 	addi	r19,r19,-31932
    6158:	dc800215 	stw	r18,8(sp)
    615c:	dc400115 	stw	r17,4(sp)
    6160:	dc000015 	stw	r16,0(sp)
    6164:	2823883a 	mov	r17,r5
    6168:	2025883a 	mov	r18,r4
    616c:	dfc00415 	stw	ra,16(sp)
    6170:	000ba1c0 	call	ba1c <__malloc_lock>
    6174:	98800217 	ldw	r2,8(r19)
    6178:	9009883a 	mov	r4,r18
    617c:	000b883a 	mov	r5,zero
    6180:	10c00117 	ldw	r3,4(r2)
    6184:	00bfff04 	movi	r2,-4
    6188:	18a0703a 	and	r16,r3,r2
    618c:	8463c83a 	sub	r17,r16,r17
    6190:	8c43fbc4 	addi	r17,r17,4079
    6194:	8822d33a 	srli	r17,r17,12
    6198:	0083ffc4 	movi	r2,4095
    619c:	8c7fffc4 	addi	r17,r17,-1
    61a0:	8822933a 	slli	r17,r17,12
    61a4:	1440060e 	bge	r2,r17,61c0 <_malloc_trim_r+0x78>
    61a8:	0008e900 	call	8e90 <_sbrk_r>
    61ac:	98c00217 	ldw	r3,8(r19)
    61b0:	9009883a 	mov	r4,r18
    61b4:	044bc83a 	sub	r5,zero,r17
    61b8:	80c7883a 	add	r3,r16,r3
    61bc:	10c00926 	beq	r2,r3,61e4 <_malloc_trim_r+0x9c>
    61c0:	000bb240 	call	bb24 <__malloc_unlock>
    61c4:	0005883a 	mov	r2,zero
    61c8:	dfc00417 	ldw	ra,16(sp)
    61cc:	dcc00317 	ldw	r19,12(sp)
    61d0:	dc800217 	ldw	r18,8(sp)
    61d4:	dc400117 	ldw	r17,4(sp)
    61d8:	dc000017 	ldw	r16,0(sp)
    61dc:	dec00504 	addi	sp,sp,20
    61e0:	f800283a 	ret
    61e4:	9009883a 	mov	r4,r18
    61e8:	0008e900 	call	8e90 <_sbrk_r>
    61ec:	844dc83a 	sub	r6,r16,r17
    61f0:	00ffffc4 	movi	r3,-1
    61f4:	9009883a 	mov	r4,r18
    61f8:	000b883a 	mov	r5,zero
    61fc:	01c000b4 	movhi	r7,2
    6200:	39ede504 	addi	r7,r7,-18540
    6204:	31800054 	ori	r6,r6,1
    6208:	10c00926 	beq	r2,r3,6230 <_malloc_trim_r+0xe8>
    620c:	38800017 	ldw	r2,0(r7)
    6210:	98c00217 	ldw	r3,8(r19)
    6214:	9009883a 	mov	r4,r18
    6218:	1445c83a 	sub	r2,r2,r17
    621c:	38800015 	stw	r2,0(r7)
    6220:	19800115 	stw	r6,4(r3)
    6224:	000bb240 	call	bb24 <__malloc_unlock>
    6228:	00800044 	movi	r2,1
    622c:	003fe606 	br	61c8 <_malloc_trim_r+0x80>
    6230:	0008e900 	call	8e90 <_sbrk_r>
    6234:	99800217 	ldw	r6,8(r19)
    6238:	100f883a 	mov	r7,r2
    623c:	9009883a 	mov	r4,r18
    6240:	1187c83a 	sub	r3,r2,r6
    6244:	008003c4 	movi	r2,15
    6248:	19400054 	ori	r5,r3,1
    624c:	10ffdc0e 	bge	r2,r3,61c0 <_malloc_trim_r+0x78>
    6250:	008000b4 	movhi	r2,2
    6254:	10a68f04 	addi	r2,r2,-26052
    6258:	10c00017 	ldw	r3,0(r2)
    625c:	008000b4 	movhi	r2,2
    6260:	10ade504 	addi	r2,r2,-18540
    6264:	31400115 	stw	r5,4(r6)
    6268:	38c7c83a 	sub	r3,r7,r3
    626c:	10c00015 	stw	r3,0(r2)
    6270:	003fd306 	br	61c0 <_malloc_trim_r+0x78>

00006274 <_free_r>:
    6274:	defffd04 	addi	sp,sp,-12
    6278:	dc400115 	stw	r17,4(sp)
    627c:	dc000015 	stw	r16,0(sp)
    6280:	dfc00215 	stw	ra,8(sp)
    6284:	2821883a 	mov	r16,r5
    6288:	2023883a 	mov	r17,r4
    628c:	28005a26 	beq	r5,zero,63f8 <_free_r+0x184>
    6290:	000ba1c0 	call	ba1c <__malloc_lock>
    6294:	823ffe04 	addi	r8,r16,-8
    6298:	41400117 	ldw	r5,4(r8)
    629c:	00bfff84 	movi	r2,-2
    62a0:	028000b4 	movhi	r10,2
    62a4:	52a0d104 	addi	r10,r10,-31932
    62a8:	288e703a 	and	r7,r5,r2
    62ac:	41cd883a 	add	r6,r8,r7
    62b0:	30c00117 	ldw	r3,4(r6)
    62b4:	51000217 	ldw	r4,8(r10)
    62b8:	00bfff04 	movi	r2,-4
    62bc:	1892703a 	and	r9,r3,r2
    62c0:	5017883a 	mov	r11,r10
    62c4:	31006726 	beq	r6,r4,6464 <_free_r+0x1f0>
    62c8:	2880004c 	andi	r2,r5,1
    62cc:	1005003a 	cmpeq	r2,r2,zero
    62d0:	32400115 	stw	r9,4(r6)
    62d4:	10001a1e 	bne	r2,zero,6340 <_free_r+0xcc>
    62d8:	000b883a 	mov	r5,zero
    62dc:	3247883a 	add	r3,r6,r9
    62e0:	18800117 	ldw	r2,4(r3)
    62e4:	1080004c 	andi	r2,r2,1
    62e8:	1000231e 	bne	r2,zero,6378 <_free_r+0x104>
    62ec:	280ac03a 	cmpne	r5,r5,zero
    62f0:	3a4f883a 	add	r7,r7,r9
    62f4:	2800451e 	bne	r5,zero,640c <_free_r+0x198>
    62f8:	31000217 	ldw	r4,8(r6)
    62fc:	008000b4 	movhi	r2,2
    6300:	10a0d304 	addi	r2,r2,-31924
    6304:	20807b26 	beq	r4,r2,64f4 <_free_r+0x280>
    6308:	30800317 	ldw	r2,12(r6)
    630c:	3a07883a 	add	r3,r7,r8
    6310:	19c00015 	stw	r7,0(r3)
    6314:	11000215 	stw	r4,8(r2)
    6318:	20800315 	stw	r2,12(r4)
    631c:	38800054 	ori	r2,r7,1
    6320:	40800115 	stw	r2,4(r8)
    6324:	28001a26 	beq	r5,zero,6390 <_free_r+0x11c>
    6328:	8809883a 	mov	r4,r17
    632c:	dfc00217 	ldw	ra,8(sp)
    6330:	dc400117 	ldw	r17,4(sp)
    6334:	dc000017 	ldw	r16,0(sp)
    6338:	dec00304 	addi	sp,sp,12
    633c:	000bb241 	jmpi	bb24 <__malloc_unlock>
    6340:	80bffe17 	ldw	r2,-8(r16)
    6344:	50c00204 	addi	r3,r10,8
    6348:	4091c83a 	sub	r8,r8,r2
    634c:	41000217 	ldw	r4,8(r8)
    6350:	388f883a 	add	r7,r7,r2
    6354:	20c06126 	beq	r4,r3,64dc <_free_r+0x268>
    6358:	40800317 	ldw	r2,12(r8)
    635c:	3247883a 	add	r3,r6,r9
    6360:	000b883a 	mov	r5,zero
    6364:	11000215 	stw	r4,8(r2)
    6368:	20800315 	stw	r2,12(r4)
    636c:	18800117 	ldw	r2,4(r3)
    6370:	1080004c 	andi	r2,r2,1
    6374:	103fdd26 	beq	r2,zero,62ec <_free_r+0x78>
    6378:	38800054 	ori	r2,r7,1
    637c:	3a07883a 	add	r3,r7,r8
    6380:	280ac03a 	cmpne	r5,r5,zero
    6384:	40800115 	stw	r2,4(r8)
    6388:	19c00015 	stw	r7,0(r3)
    638c:	283fe61e 	bne	r5,zero,6328 <_free_r+0xb4>
    6390:	00807fc4 	movi	r2,511
    6394:	11c01f2e 	bgeu	r2,r7,6414 <_free_r+0x1a0>
    6398:	3806d27a 	srli	r3,r7,9
    639c:	1800481e 	bne	r3,zero,64c0 <_free_r+0x24c>
    63a0:	3804d0fa 	srli	r2,r7,3
    63a4:	100690fa 	slli	r3,r2,3
    63a8:	1acd883a 	add	r6,r3,r11
    63ac:	31400217 	ldw	r5,8(r6)
    63b0:	31405926 	beq	r6,r5,6518 <_free_r+0x2a4>
    63b4:	28800117 	ldw	r2,4(r5)
    63b8:	00ffff04 	movi	r3,-4
    63bc:	10c4703a 	and	r2,r2,r3
    63c0:	3880022e 	bgeu	r7,r2,63cc <_free_r+0x158>
    63c4:	29400217 	ldw	r5,8(r5)
    63c8:	317ffa1e 	bne	r6,r5,63b4 <_free_r+0x140>
    63cc:	29800317 	ldw	r6,12(r5)
    63d0:	41800315 	stw	r6,12(r8)
    63d4:	41400215 	stw	r5,8(r8)
    63d8:	8809883a 	mov	r4,r17
    63dc:	2a000315 	stw	r8,12(r5)
    63e0:	32000215 	stw	r8,8(r6)
    63e4:	dfc00217 	ldw	ra,8(sp)
    63e8:	dc400117 	ldw	r17,4(sp)
    63ec:	dc000017 	ldw	r16,0(sp)
    63f0:	dec00304 	addi	sp,sp,12
    63f4:	000bb241 	jmpi	bb24 <__malloc_unlock>
    63f8:	dfc00217 	ldw	ra,8(sp)
    63fc:	dc400117 	ldw	r17,4(sp)
    6400:	dc000017 	ldw	r16,0(sp)
    6404:	dec00304 	addi	sp,sp,12
    6408:	f800283a 	ret
    640c:	31000217 	ldw	r4,8(r6)
    6410:	003fbd06 	br	6308 <_free_r+0x94>
    6414:	3806d0fa 	srli	r3,r7,3
    6418:	00800044 	movi	r2,1
    641c:	51400117 	ldw	r5,4(r10)
    6420:	180890fa 	slli	r4,r3,3
    6424:	1807d0ba 	srai	r3,r3,2
    6428:	22c9883a 	add	r4,r4,r11
    642c:	21800217 	ldw	r6,8(r4)
    6430:	10c4983a 	sll	r2,r2,r3
    6434:	41000315 	stw	r4,12(r8)
    6438:	41800215 	stw	r6,8(r8)
    643c:	288ab03a 	or	r5,r5,r2
    6440:	22000215 	stw	r8,8(r4)
    6444:	8809883a 	mov	r4,r17
    6448:	51400115 	stw	r5,4(r10)
    644c:	32000315 	stw	r8,12(r6)
    6450:	dfc00217 	ldw	ra,8(sp)
    6454:	dc400117 	ldw	r17,4(sp)
    6458:	dc000017 	ldw	r16,0(sp)
    645c:	dec00304 	addi	sp,sp,12
    6460:	000bb241 	jmpi	bb24 <__malloc_unlock>
    6464:	2880004c 	andi	r2,r5,1
    6468:	3a4d883a 	add	r6,r7,r9
    646c:	1000071e 	bne	r2,zero,648c <_free_r+0x218>
    6470:	80bffe17 	ldw	r2,-8(r16)
    6474:	4091c83a 	sub	r8,r8,r2
    6478:	41000317 	ldw	r4,12(r8)
    647c:	40c00217 	ldw	r3,8(r8)
    6480:	308d883a 	add	r6,r6,r2
    6484:	20c00215 	stw	r3,8(r4)
    6488:	19000315 	stw	r4,12(r3)
    648c:	008000b4 	movhi	r2,2
    6490:	10a68e04 	addi	r2,r2,-26056
    6494:	11000017 	ldw	r4,0(r2)
    6498:	30c00054 	ori	r3,r6,1
    649c:	52000215 	stw	r8,8(r10)
    64a0:	40c00115 	stw	r3,4(r8)
    64a4:	313fa036 	bltu	r6,r4,6328 <_free_r+0xb4>
    64a8:	008000b4 	movhi	r2,2
    64ac:	10adc204 	addi	r2,r2,-18680
    64b0:	11400017 	ldw	r5,0(r2)
    64b4:	8809883a 	mov	r4,r17
    64b8:	00061480 	call	6148 <_malloc_trim_r>
    64bc:	003f9a06 	br	6328 <_free_r+0xb4>
    64c0:	00800104 	movi	r2,4
    64c4:	10c0072e 	bgeu	r2,r3,64e4 <_free_r+0x270>
    64c8:	00800504 	movi	r2,20
    64cc:	10c01936 	bltu	r2,r3,6534 <_free_r+0x2c0>
    64d0:	188016c4 	addi	r2,r3,91
    64d4:	100690fa 	slli	r3,r2,3
    64d8:	003fb306 	br	63a8 <_free_r+0x134>
    64dc:	01400044 	movi	r5,1
    64e0:	003f7e06 	br	62dc <_free_r+0x68>
    64e4:	3804d1ba 	srli	r2,r7,6
    64e8:	10800e04 	addi	r2,r2,56
    64ec:	100690fa 	slli	r3,r2,3
    64f0:	003fad06 	br	63a8 <_free_r+0x134>
    64f4:	22000315 	stw	r8,12(r4)
    64f8:	22000215 	stw	r8,8(r4)
    64fc:	3a05883a 	add	r2,r7,r8
    6500:	38c00054 	ori	r3,r7,1
    6504:	11c00015 	stw	r7,0(r2)
    6508:	41000215 	stw	r4,8(r8)
    650c:	40c00115 	stw	r3,4(r8)
    6510:	41000315 	stw	r4,12(r8)
    6514:	003f8406 	br	6328 <_free_r+0xb4>
    6518:	1005d0ba 	srai	r2,r2,2
    651c:	00c00044 	movi	r3,1
    6520:	51000117 	ldw	r4,4(r10)
    6524:	1886983a 	sll	r3,r3,r2
    6528:	20c8b03a 	or	r4,r4,r3
    652c:	51000115 	stw	r4,4(r10)
    6530:	003fa706 	br	63d0 <_free_r+0x15c>
    6534:	00801504 	movi	r2,84
    6538:	10c00436 	bltu	r2,r3,654c <_free_r+0x2d8>
    653c:	3804d33a 	srli	r2,r7,12
    6540:	10801b84 	addi	r2,r2,110
    6544:	100690fa 	slli	r3,r2,3
    6548:	003f9706 	br	63a8 <_free_r+0x134>
    654c:	00805504 	movi	r2,340
    6550:	10c00436 	bltu	r2,r3,6564 <_free_r+0x2f0>
    6554:	3804d3fa 	srli	r2,r7,15
    6558:	10801dc4 	addi	r2,r2,119
    655c:	100690fa 	slli	r3,r2,3
    6560:	003f9106 	br	63a8 <_free_r+0x134>
    6564:	00815504 	movi	r2,1364
    6568:	10c0032e 	bgeu	r2,r3,6578 <_free_r+0x304>
    656c:	00801f84 	movi	r2,126
    6570:	00c0fc04 	movi	r3,1008
    6574:	003f8c06 	br	63a8 <_free_r+0x134>
    6578:	3804d4ba 	srli	r2,r7,18
    657c:	10801f04 	addi	r2,r2,124
    6580:	100690fa 	slli	r3,r2,3
    6584:	003f8806 	br	63a8 <_free_r+0x134>

00006588 <__sfvwrite_r>:
    6588:	30800217 	ldw	r2,8(r6)
    658c:	defff504 	addi	sp,sp,-44
    6590:	df000915 	stw	fp,36(sp)
    6594:	dd800715 	stw	r22,28(sp)
    6598:	dc800315 	stw	r18,12(sp)
    659c:	dfc00a15 	stw	ra,40(sp)
    65a0:	ddc00815 	stw	r23,32(sp)
    65a4:	dd400615 	stw	r21,24(sp)
    65a8:	dd000515 	stw	r20,20(sp)
    65ac:	dcc00415 	stw	r19,16(sp)
    65b0:	dc400215 	stw	r17,8(sp)
    65b4:	dc000115 	stw	r16,4(sp)
    65b8:	302d883a 	mov	r22,r6
    65bc:	2039883a 	mov	fp,r4
    65c0:	2825883a 	mov	r18,r5
    65c4:	10001c26 	beq	r2,zero,6638 <__sfvwrite_r+0xb0>
    65c8:	29c0030b 	ldhu	r7,12(r5)
    65cc:	3880020c 	andi	r2,r7,8
    65d0:	10002726 	beq	r2,zero,6670 <__sfvwrite_r+0xe8>
    65d4:	28800417 	ldw	r2,16(r5)
    65d8:	10002526 	beq	r2,zero,6670 <__sfvwrite_r+0xe8>
    65dc:	3880008c 	andi	r2,r7,2
    65e0:	b5400017 	ldw	r21,0(r22)
    65e4:	10002826 	beq	r2,zero,6688 <__sfvwrite_r+0x100>
    65e8:	0021883a 	mov	r16,zero
    65ec:	0023883a 	mov	r17,zero
    65f0:	880d883a 	mov	r6,r17
    65f4:	e009883a 	mov	r4,fp
    65f8:	00810004 	movi	r2,1024
    65fc:	80006e26 	beq	r16,zero,67b8 <__sfvwrite_r+0x230>
    6600:	800f883a 	mov	r7,r16
    6604:	91400717 	ldw	r5,28(r18)
    6608:	1400012e 	bgeu	r2,r16,6610 <__sfvwrite_r+0x88>
    660c:	100f883a 	mov	r7,r2
    6610:	90c00917 	ldw	r3,36(r18)
    6614:	183ee83a 	callr	r3
    6618:	1007883a 	mov	r3,r2
    661c:	80a1c83a 	sub	r16,r16,r2
    6620:	88a3883a 	add	r17,r17,r2
    6624:	00806d0e 	bge	zero,r2,67dc <__sfvwrite_r+0x254>
    6628:	b0800217 	ldw	r2,8(r22)
    662c:	10c5c83a 	sub	r2,r2,r3
    6630:	b0800215 	stw	r2,8(r22)
    6634:	103fee1e 	bne	r2,zero,65f0 <__sfvwrite_r+0x68>
    6638:	0009883a 	mov	r4,zero
    663c:	2005883a 	mov	r2,r4
    6640:	dfc00a17 	ldw	ra,40(sp)
    6644:	df000917 	ldw	fp,36(sp)
    6648:	ddc00817 	ldw	r23,32(sp)
    664c:	dd800717 	ldw	r22,28(sp)
    6650:	dd400617 	ldw	r21,24(sp)
    6654:	dd000517 	ldw	r20,20(sp)
    6658:	dcc00417 	ldw	r19,16(sp)
    665c:	dc800317 	ldw	r18,12(sp)
    6660:	dc400217 	ldw	r17,8(sp)
    6664:	dc000117 	ldw	r16,4(sp)
    6668:	dec00b04 	addi	sp,sp,44
    666c:	f800283a 	ret
    6670:	00043500 	call	4350 <__swsetup_r>
    6674:	1000e41e 	bne	r2,zero,6a08 <__sfvwrite_r+0x480>
    6678:	91c0030b 	ldhu	r7,12(r18)
    667c:	b5400017 	ldw	r21,0(r22)
    6680:	3880008c 	andi	r2,r7,2
    6684:	103fd81e 	bne	r2,zero,65e8 <__sfvwrite_r+0x60>
    6688:	3880004c 	andi	r2,r7,1
    668c:	1005003a 	cmpeq	r2,r2,zero
    6690:	10005726 	beq	r2,zero,67f0 <__sfvwrite_r+0x268>
    6694:	0029883a 	mov	r20,zero
    6698:	002f883a 	mov	r23,zero
    669c:	a0004226 	beq	r20,zero,67a8 <__sfvwrite_r+0x220>
    66a0:	3880800c 	andi	r2,r7,512
    66a4:	94000217 	ldw	r16,8(r18)
    66a8:	10008b26 	beq	r2,zero,68d8 <__sfvwrite_r+0x350>
    66ac:	800d883a 	mov	r6,r16
    66b0:	a400a536 	bltu	r20,r16,6948 <__sfvwrite_r+0x3c0>
    66b4:	3881200c 	andi	r2,r7,1152
    66b8:	10002726 	beq	r2,zero,6758 <__sfvwrite_r+0x1d0>
    66bc:	90800517 	ldw	r2,20(r18)
    66c0:	92000417 	ldw	r8,16(r18)
    66c4:	91400017 	ldw	r5,0(r18)
    66c8:	1087883a 	add	r3,r2,r2
    66cc:	1887883a 	add	r3,r3,r2
    66d0:	1808d7fa 	srli	r4,r3,31
    66d4:	2a21c83a 	sub	r16,r5,r8
    66d8:	80800044 	addi	r2,r16,1
    66dc:	20c9883a 	add	r4,r4,r3
    66e0:	2027d07a 	srai	r19,r4,1
    66e4:	a085883a 	add	r2,r20,r2
    66e8:	980d883a 	mov	r6,r19
    66ec:	9880022e 	bgeu	r19,r2,66f8 <__sfvwrite_r+0x170>
    66f0:	1027883a 	mov	r19,r2
    66f4:	100d883a 	mov	r6,r2
    66f8:	3881000c 	andi	r2,r7,1024
    66fc:	1000b826 	beq	r2,zero,69e0 <__sfvwrite_r+0x458>
    6700:	300b883a 	mov	r5,r6
    6704:	e009883a 	mov	r4,fp
    6708:	0006dfc0 	call	6dfc <_malloc_r>
    670c:	10003126 	beq	r2,zero,67d4 <__sfvwrite_r+0x24c>
    6710:	91400417 	ldw	r5,16(r18)
    6714:	1009883a 	mov	r4,r2
    6718:	800d883a 	mov	r6,r16
    671c:	1023883a 	mov	r17,r2
    6720:	00076200 	call	7620 <memcpy>
    6724:	90c0030b 	ldhu	r3,12(r18)
    6728:	00beffc4 	movi	r2,-1025
    672c:	1886703a 	and	r3,r3,r2
    6730:	18c02014 	ori	r3,r3,128
    6734:	90c0030d 	sth	r3,12(r18)
    6738:	9c07c83a 	sub	r3,r19,r16
    673c:	8c05883a 	add	r2,r17,r16
    6740:	a00d883a 	mov	r6,r20
    6744:	a021883a 	mov	r16,r20
    6748:	90800015 	stw	r2,0(r18)
    674c:	90c00215 	stw	r3,8(r18)
    6750:	94400415 	stw	r17,16(r18)
    6754:	94c00515 	stw	r19,20(r18)
    6758:	91000017 	ldw	r4,0(r18)
    675c:	b80b883a 	mov	r5,r23
    6760:	a023883a 	mov	r17,r20
    6764:	00076c00 	call	76c0 <memmove>
    6768:	90c00217 	ldw	r3,8(r18)
    676c:	90800017 	ldw	r2,0(r18)
    6770:	a027883a 	mov	r19,r20
    6774:	1c07c83a 	sub	r3,r3,r16
    6778:	1405883a 	add	r2,r2,r16
    677c:	90c00215 	stw	r3,8(r18)
    6780:	a021883a 	mov	r16,r20
    6784:	90800015 	stw	r2,0(r18)
    6788:	b0800217 	ldw	r2,8(r22)
    678c:	1405c83a 	sub	r2,r2,r16
    6790:	b0800215 	stw	r2,8(r22)
    6794:	103fa826 	beq	r2,zero,6638 <__sfvwrite_r+0xb0>
    6798:	a469c83a 	sub	r20,r20,r17
    679c:	91c0030b 	ldhu	r7,12(r18)
    67a0:	bcef883a 	add	r23,r23,r19
    67a4:	a03fbe1e 	bne	r20,zero,66a0 <__sfvwrite_r+0x118>
    67a8:	adc00017 	ldw	r23,0(r21)
    67ac:	ad000117 	ldw	r20,4(r21)
    67b0:	ad400204 	addi	r21,r21,8
    67b4:	003fb906 	br	669c <__sfvwrite_r+0x114>
    67b8:	ac400017 	ldw	r17,0(r21)
    67bc:	ac000117 	ldw	r16,4(r21)
    67c0:	ad400204 	addi	r21,r21,8
    67c4:	003f8a06 	br	65f0 <__sfvwrite_r+0x68>
    67c8:	91400417 	ldw	r5,16(r18)
    67cc:	e009883a 	mov	r4,fp
    67d0:	00062740 	call	6274 <_free_r>
    67d4:	00800304 	movi	r2,12
    67d8:	e0800015 	stw	r2,0(fp)
    67dc:	9080030b 	ldhu	r2,12(r18)
    67e0:	013fffc4 	movi	r4,-1
    67e4:	10801014 	ori	r2,r2,64
    67e8:	9080030d 	sth	r2,12(r18)
    67ec:	003f9306 	br	663c <__sfvwrite_r+0xb4>
    67f0:	0027883a 	mov	r19,zero
    67f4:	002f883a 	mov	r23,zero
    67f8:	d8000015 	stw	zero,0(sp)
    67fc:	0029883a 	mov	r20,zero
    6800:	98001e26 	beq	r19,zero,687c <__sfvwrite_r+0x2f4>
    6804:	d8c00017 	ldw	r3,0(sp)
    6808:	1804c03a 	cmpne	r2,r3,zero
    680c:	10005e26 	beq	r2,zero,6988 <__sfvwrite_r+0x400>
    6810:	9821883a 	mov	r16,r19
    6814:	a4c0012e 	bgeu	r20,r19,681c <__sfvwrite_r+0x294>
    6818:	a021883a 	mov	r16,r20
    681c:	91000017 	ldw	r4,0(r18)
    6820:	90800417 	ldw	r2,16(r18)
    6824:	91800217 	ldw	r6,8(r18)
    6828:	91c00517 	ldw	r7,20(r18)
    682c:	1100022e 	bgeu	r2,r4,6838 <__sfvwrite_r+0x2b0>
    6830:	31e3883a 	add	r17,r6,r7
    6834:	8c001616 	blt	r17,r16,6890 <__sfvwrite_r+0x308>
    6838:	81c03816 	blt	r16,r7,691c <__sfvwrite_r+0x394>
    683c:	90c00917 	ldw	r3,36(r18)
    6840:	91400717 	ldw	r5,28(r18)
    6844:	e009883a 	mov	r4,fp
    6848:	b80d883a 	mov	r6,r23
    684c:	183ee83a 	callr	r3
    6850:	1023883a 	mov	r17,r2
    6854:	00bfe10e 	bge	zero,r2,67dc <__sfvwrite_r+0x254>
    6858:	a469c83a 	sub	r20,r20,r17
    685c:	a0001826 	beq	r20,zero,68c0 <__sfvwrite_r+0x338>
    6860:	b0800217 	ldw	r2,8(r22)
    6864:	1445c83a 	sub	r2,r2,r17
    6868:	b0800215 	stw	r2,8(r22)
    686c:	103f7226 	beq	r2,zero,6638 <__sfvwrite_r+0xb0>
    6870:	9c67c83a 	sub	r19,r19,r17
    6874:	bc6f883a 	add	r23,r23,r17
    6878:	983fe21e 	bne	r19,zero,6804 <__sfvwrite_r+0x27c>
    687c:	adc00017 	ldw	r23,0(r21)
    6880:	acc00117 	ldw	r19,4(r21)
    6884:	ad400204 	addi	r21,r21,8
    6888:	d8000015 	stw	zero,0(sp)
    688c:	003fdc06 	br	6800 <__sfvwrite_r+0x278>
    6890:	b80b883a 	mov	r5,r23
    6894:	880d883a 	mov	r6,r17
    6898:	00076c00 	call	76c0 <memmove>
    689c:	90c00017 	ldw	r3,0(r18)
    68a0:	e009883a 	mov	r4,fp
    68a4:	900b883a 	mov	r5,r18
    68a8:	1c47883a 	add	r3,r3,r17
    68ac:	90c00015 	stw	r3,0(r18)
    68b0:	0005c580 	call	5c58 <_fflush_r>
    68b4:	103fc91e 	bne	r2,zero,67dc <__sfvwrite_r+0x254>
    68b8:	a469c83a 	sub	r20,r20,r17
    68bc:	a03fe81e 	bne	r20,zero,6860 <__sfvwrite_r+0x2d8>
    68c0:	e009883a 	mov	r4,fp
    68c4:	900b883a 	mov	r5,r18
    68c8:	0005c580 	call	5c58 <_fflush_r>
    68cc:	103fc31e 	bne	r2,zero,67dc <__sfvwrite_r+0x254>
    68d0:	d8000015 	stw	zero,0(sp)
    68d4:	003fe206 	br	6860 <__sfvwrite_r+0x2d8>
    68d8:	91000017 	ldw	r4,0(r18)
    68dc:	90800417 	ldw	r2,16(r18)
    68e0:	1100022e 	bgeu	r2,r4,68ec <__sfvwrite_r+0x364>
    68e4:	8023883a 	mov	r17,r16
    68e8:	85003136 	bltu	r16,r20,69b0 <__sfvwrite_r+0x428>
    68ec:	91c00517 	ldw	r7,20(r18)
    68f0:	a1c01836 	bltu	r20,r7,6954 <__sfvwrite_r+0x3cc>
    68f4:	90c00917 	ldw	r3,36(r18)
    68f8:	91400717 	ldw	r5,28(r18)
    68fc:	e009883a 	mov	r4,fp
    6900:	b80d883a 	mov	r6,r23
    6904:	183ee83a 	callr	r3
    6908:	1021883a 	mov	r16,r2
    690c:	00bfb30e 	bge	zero,r2,67dc <__sfvwrite_r+0x254>
    6910:	1023883a 	mov	r17,r2
    6914:	1027883a 	mov	r19,r2
    6918:	003f9b06 	br	6788 <__sfvwrite_r+0x200>
    691c:	b80b883a 	mov	r5,r23
    6920:	800d883a 	mov	r6,r16
    6924:	00076c00 	call	76c0 <memmove>
    6928:	90c00217 	ldw	r3,8(r18)
    692c:	90800017 	ldw	r2,0(r18)
    6930:	8023883a 	mov	r17,r16
    6934:	1c07c83a 	sub	r3,r3,r16
    6938:	1405883a 	add	r2,r2,r16
    693c:	90c00215 	stw	r3,8(r18)
    6940:	90800015 	stw	r2,0(r18)
    6944:	003fc406 	br	6858 <__sfvwrite_r+0x2d0>
    6948:	a00d883a 	mov	r6,r20
    694c:	a021883a 	mov	r16,r20
    6950:	003f8106 	br	6758 <__sfvwrite_r+0x1d0>
    6954:	b80b883a 	mov	r5,r23
    6958:	a00d883a 	mov	r6,r20
    695c:	00076c00 	call	76c0 <memmove>
    6960:	90c00217 	ldw	r3,8(r18)
    6964:	90800017 	ldw	r2,0(r18)
    6968:	a021883a 	mov	r16,r20
    696c:	1d07c83a 	sub	r3,r3,r20
    6970:	1505883a 	add	r2,r2,r20
    6974:	a023883a 	mov	r17,r20
    6978:	a027883a 	mov	r19,r20
    697c:	90c00215 	stw	r3,8(r18)
    6980:	90800015 	stw	r2,0(r18)
    6984:	003f8006 	br	6788 <__sfvwrite_r+0x200>
    6988:	b809883a 	mov	r4,r23
    698c:	01400284 	movi	r5,10
    6990:	980d883a 	mov	r6,r19
    6994:	000753c0 	call	753c <memchr>
    6998:	10001726 	beq	r2,zero,69f8 <__sfvwrite_r+0x470>
    699c:	15c5c83a 	sub	r2,r2,r23
    69a0:	15000044 	addi	r20,r2,1
    69a4:	00800044 	movi	r2,1
    69a8:	d8800015 	stw	r2,0(sp)
    69ac:	003f9806 	br	6810 <__sfvwrite_r+0x288>
    69b0:	b80b883a 	mov	r5,r23
    69b4:	800d883a 	mov	r6,r16
    69b8:	00076c00 	call	76c0 <memmove>
    69bc:	90c00017 	ldw	r3,0(r18)
    69c0:	e009883a 	mov	r4,fp
    69c4:	900b883a 	mov	r5,r18
    69c8:	1c07883a 	add	r3,r3,r16
    69cc:	90c00015 	stw	r3,0(r18)
    69d0:	8027883a 	mov	r19,r16
    69d4:	0005c580 	call	5c58 <_fflush_r>
    69d8:	103f6b26 	beq	r2,zero,6788 <__sfvwrite_r+0x200>
    69dc:	003f7f06 	br	67dc <__sfvwrite_r+0x254>
    69e0:	400b883a 	mov	r5,r8
    69e4:	e009883a 	mov	r4,fp
    69e8:	000882c0 	call	882c <_realloc_r>
    69ec:	103f7626 	beq	r2,zero,67c8 <__sfvwrite_r+0x240>
    69f0:	1023883a 	mov	r17,r2
    69f4:	003f5006 	br	6738 <__sfvwrite_r+0x1b0>
    69f8:	00c00044 	movi	r3,1
    69fc:	9d000044 	addi	r20,r19,1
    6a00:	d8c00015 	stw	r3,0(sp)
    6a04:	003f8206 	br	6810 <__sfvwrite_r+0x288>
    6a08:	9080030b 	ldhu	r2,12(r18)
    6a0c:	00c00244 	movi	r3,9
    6a10:	013fffc4 	movi	r4,-1
    6a14:	10801014 	ori	r2,r2,64
    6a18:	9080030d 	sth	r2,12(r18)
    6a1c:	e0c00015 	stw	r3,0(fp)
    6a20:	003f0606 	br	663c <__sfvwrite_r+0xb4>

00006a24 <_fwalk_reent>:
    6a24:	defff704 	addi	sp,sp,-36
    6a28:	dcc00315 	stw	r19,12(sp)
    6a2c:	24c0b804 	addi	r19,r4,736
    6a30:	dd800615 	stw	r22,24(sp)
    6a34:	dd400515 	stw	r21,20(sp)
    6a38:	dfc00815 	stw	ra,32(sp)
    6a3c:	ddc00715 	stw	r23,28(sp)
    6a40:	dd000415 	stw	r20,16(sp)
    6a44:	dc800215 	stw	r18,8(sp)
    6a48:	dc400115 	stw	r17,4(sp)
    6a4c:	dc000015 	stw	r16,0(sp)
    6a50:	202b883a 	mov	r21,r4
    6a54:	282d883a 	mov	r22,r5
    6a58:	0005ee00 	call	5ee0 <__sfp_lock_acquire>
    6a5c:	98002126 	beq	r19,zero,6ae4 <_fwalk_reent+0xc0>
    6a60:	002f883a 	mov	r23,zero
    6a64:	9c800117 	ldw	r18,4(r19)
    6a68:	9c000217 	ldw	r16,8(r19)
    6a6c:	90bfffc4 	addi	r2,r18,-1
    6a70:	10000d16 	blt	r2,zero,6aa8 <_fwalk_reent+0x84>
    6a74:	0023883a 	mov	r17,zero
    6a78:	053fffc4 	movi	r20,-1
    6a7c:	8080030f 	ldh	r2,12(r16)
    6a80:	8c400044 	addi	r17,r17,1
    6a84:	10000626 	beq	r2,zero,6aa0 <_fwalk_reent+0x7c>
    6a88:	8080038f 	ldh	r2,14(r16)
    6a8c:	800b883a 	mov	r5,r16
    6a90:	a809883a 	mov	r4,r21
    6a94:	15000226 	beq	r2,r20,6aa0 <_fwalk_reent+0x7c>
    6a98:	b03ee83a 	callr	r22
    6a9c:	b8aeb03a 	or	r23,r23,r2
    6aa0:	84001704 	addi	r16,r16,92
    6aa4:	947ff51e 	bne	r18,r17,6a7c <_fwalk_reent+0x58>
    6aa8:	9cc00017 	ldw	r19,0(r19)
    6aac:	983fed1e 	bne	r19,zero,6a64 <_fwalk_reent+0x40>
    6ab0:	0005ee40 	call	5ee4 <__sfp_lock_release>
    6ab4:	b805883a 	mov	r2,r23
    6ab8:	dfc00817 	ldw	ra,32(sp)
    6abc:	ddc00717 	ldw	r23,28(sp)
    6ac0:	dd800617 	ldw	r22,24(sp)
    6ac4:	dd400517 	ldw	r21,20(sp)
    6ac8:	dd000417 	ldw	r20,16(sp)
    6acc:	dcc00317 	ldw	r19,12(sp)
    6ad0:	dc800217 	ldw	r18,8(sp)
    6ad4:	dc400117 	ldw	r17,4(sp)
    6ad8:	dc000017 	ldw	r16,0(sp)
    6adc:	dec00904 	addi	sp,sp,36
    6ae0:	f800283a 	ret
    6ae4:	002f883a 	mov	r23,zero
    6ae8:	003ff106 	br	6ab0 <_fwalk_reent+0x8c>

00006aec <_fwalk>:
    6aec:	defff804 	addi	sp,sp,-32
    6af0:	dcc00315 	stw	r19,12(sp)
    6af4:	24c0b804 	addi	r19,r4,736
    6af8:	dd400515 	stw	r21,20(sp)
    6afc:	dfc00715 	stw	ra,28(sp)
    6b00:	dd800615 	stw	r22,24(sp)
    6b04:	dd000415 	stw	r20,16(sp)
    6b08:	dc800215 	stw	r18,8(sp)
    6b0c:	dc400115 	stw	r17,4(sp)
    6b10:	dc000015 	stw	r16,0(sp)
    6b14:	282b883a 	mov	r21,r5
    6b18:	0005ee00 	call	5ee0 <__sfp_lock_acquire>
    6b1c:	98001f26 	beq	r19,zero,6b9c <_fwalk+0xb0>
    6b20:	002d883a 	mov	r22,zero
    6b24:	9c800117 	ldw	r18,4(r19)
    6b28:	9c000217 	ldw	r16,8(r19)
    6b2c:	90bfffc4 	addi	r2,r18,-1
    6b30:	10000c16 	blt	r2,zero,6b64 <_fwalk+0x78>
    6b34:	0023883a 	mov	r17,zero
    6b38:	053fffc4 	movi	r20,-1
    6b3c:	8080030f 	ldh	r2,12(r16)
    6b40:	8c400044 	addi	r17,r17,1
    6b44:	10000526 	beq	r2,zero,6b5c <_fwalk+0x70>
    6b48:	8080038f 	ldh	r2,14(r16)
    6b4c:	8009883a 	mov	r4,r16
    6b50:	15000226 	beq	r2,r20,6b5c <_fwalk+0x70>
    6b54:	a83ee83a 	callr	r21
    6b58:	b0acb03a 	or	r22,r22,r2
    6b5c:	84001704 	addi	r16,r16,92
    6b60:	947ff61e 	bne	r18,r17,6b3c <_fwalk+0x50>
    6b64:	9cc00017 	ldw	r19,0(r19)
    6b68:	983fee1e 	bne	r19,zero,6b24 <_fwalk+0x38>
    6b6c:	0005ee40 	call	5ee4 <__sfp_lock_release>
    6b70:	b005883a 	mov	r2,r22
    6b74:	dfc00717 	ldw	ra,28(sp)
    6b78:	dd800617 	ldw	r22,24(sp)
    6b7c:	dd400517 	ldw	r21,20(sp)
    6b80:	dd000417 	ldw	r20,16(sp)
    6b84:	dcc00317 	ldw	r19,12(sp)
    6b88:	dc800217 	ldw	r18,8(sp)
    6b8c:	dc400117 	ldw	r17,4(sp)
    6b90:	dc000017 	ldw	r16,0(sp)
    6b94:	dec00804 	addi	sp,sp,32
    6b98:	f800283a 	ret
    6b9c:	002d883a 	mov	r22,zero
    6ba0:	003ff206 	br	6b6c <_fwalk+0x80>

00006ba4 <__locale_charset>:
    6ba4:	d0a00317 	ldw	r2,-32756(gp)
    6ba8:	f800283a 	ret

00006bac <_localeconv_r>:
    6bac:	00800074 	movhi	r2,1
    6bb0:	109f2204 	addi	r2,r2,31880
    6bb4:	f800283a 	ret

00006bb8 <localeconv>:
    6bb8:	008000b4 	movhi	r2,2
    6bbc:	10a68a04 	addi	r2,r2,-26072
    6bc0:	11000017 	ldw	r4,0(r2)
    6bc4:	0006bac1 	jmpi	6bac <_localeconv_r>

00006bc8 <_setlocale_r>:
    6bc8:	defffc04 	addi	sp,sp,-16
    6bcc:	00c00074 	movhi	r3,1
    6bd0:	18df1d04 	addi	r3,r3,31860
    6bd4:	dc800215 	stw	r18,8(sp)
    6bd8:	dc400115 	stw	r17,4(sp)
    6bdc:	dc000015 	stw	r16,0(sp)
    6be0:	2023883a 	mov	r17,r4
    6be4:	2825883a 	mov	r18,r5
    6be8:	dfc00315 	stw	ra,12(sp)
    6bec:	3021883a 	mov	r16,r6
    6bf0:	3009883a 	mov	r4,r6
    6bf4:	180b883a 	mov	r5,r3
    6bf8:	30000926 	beq	r6,zero,6c20 <_setlocale_r+0x58>
    6bfc:	000904c0 	call	904c <strcmp>
    6c00:	8009883a 	mov	r4,r16
    6c04:	01400074 	movhi	r5,1
    6c08:	295f0804 	addi	r5,r5,31776
    6c0c:	10000b1e 	bne	r2,zero,6c3c <_setlocale_r+0x74>
    6c10:	8c000d15 	stw	r16,52(r17)
    6c14:	8c800c15 	stw	r18,48(r17)
    6c18:	00c00074 	movhi	r3,1
    6c1c:	18df1d04 	addi	r3,r3,31860
    6c20:	1805883a 	mov	r2,r3
    6c24:	dfc00317 	ldw	ra,12(sp)
    6c28:	dc800217 	ldw	r18,8(sp)
    6c2c:	dc400117 	ldw	r17,4(sp)
    6c30:	dc000017 	ldw	r16,0(sp)
    6c34:	dec00404 	addi	sp,sp,16
    6c38:	f800283a 	ret
    6c3c:	000904c0 	call	904c <strcmp>
    6c40:	0007883a 	mov	r3,zero
    6c44:	103ff226 	beq	r2,zero,6c10 <_setlocale_r+0x48>
    6c48:	003ff506 	br	6c20 <_setlocale_r+0x58>

00006c4c <setlocale>:
    6c4c:	018000b4 	movhi	r6,2
    6c50:	31a68a04 	addi	r6,r6,-26072
    6c54:	2007883a 	mov	r3,r4
    6c58:	31000017 	ldw	r4,0(r6)
    6c5c:	280d883a 	mov	r6,r5
    6c60:	180b883a 	mov	r5,r3
    6c64:	0006bc81 	jmpi	6bc8 <_setlocale_r>

00006c68 <__smakebuf_r>:
    6c68:	2880030b 	ldhu	r2,12(r5)
    6c6c:	deffed04 	addi	sp,sp,-76
    6c70:	dc401015 	stw	r17,64(sp)
    6c74:	1080008c 	andi	r2,r2,2
    6c78:	dc000f15 	stw	r16,60(sp)
    6c7c:	dfc01215 	stw	ra,72(sp)
    6c80:	dc801115 	stw	r18,68(sp)
    6c84:	2821883a 	mov	r16,r5
    6c88:	2023883a 	mov	r17,r4
    6c8c:	10000b26 	beq	r2,zero,6cbc <__smakebuf_r+0x54>
    6c90:	28c010c4 	addi	r3,r5,67
    6c94:	00800044 	movi	r2,1
    6c98:	28800515 	stw	r2,20(r5)
    6c9c:	28c00415 	stw	r3,16(r5)
    6ca0:	28c00015 	stw	r3,0(r5)
    6ca4:	dfc01217 	ldw	ra,72(sp)
    6ca8:	dc801117 	ldw	r18,68(sp)
    6cac:	dc401017 	ldw	r17,64(sp)
    6cb0:	dc000f17 	ldw	r16,60(sp)
    6cb4:	dec01304 	addi	sp,sp,76
    6cb8:	f800283a 	ret
    6cbc:	2940038f 	ldh	r5,14(r5)
    6cc0:	28002116 	blt	r5,zero,6d48 <__smakebuf_r+0xe0>
    6cc4:	d80d883a 	mov	r6,sp
    6cc8:	00093c80 	call	93c8 <_fstat_r>
    6ccc:	10001e16 	blt	r2,zero,6d48 <__smakebuf_r+0xe0>
    6cd0:	d8800117 	ldw	r2,4(sp)
    6cd4:	00e00014 	movui	r3,32768
    6cd8:	113c000c 	andi	r4,r2,61440
    6cdc:	20c03126 	beq	r4,r3,6da4 <__smakebuf_r+0x13c>
    6ce0:	8080030b 	ldhu	r2,12(r16)
    6ce4:	00c80004 	movi	r3,8192
    6ce8:	10820014 	ori	r2,r2,2048
    6cec:	8080030d 	sth	r2,12(r16)
    6cf0:	20c01e26 	beq	r4,r3,6d6c <__smakebuf_r+0x104>
    6cf4:	04810004 	movi	r18,1024
    6cf8:	8809883a 	mov	r4,r17
    6cfc:	900b883a 	mov	r5,r18
    6d00:	0006dfc0 	call	6dfc <_malloc_r>
    6d04:	1009883a 	mov	r4,r2
    6d08:	10003126 	beq	r2,zero,6dd0 <__smakebuf_r+0x168>
    6d0c:	80c0030b 	ldhu	r3,12(r16)
    6d10:	00800034 	movhi	r2,0
    6d14:	1097f504 	addi	r2,r2,24532
    6d18:	88800f15 	stw	r2,60(r17)
    6d1c:	18c02014 	ori	r3,r3,128
    6d20:	84800515 	stw	r18,20(r16)
    6d24:	80c0030d 	sth	r3,12(r16)
    6d28:	81000415 	stw	r4,16(r16)
    6d2c:	81000015 	stw	r4,0(r16)
    6d30:	dfc01217 	ldw	ra,72(sp)
    6d34:	dc801117 	ldw	r18,68(sp)
    6d38:	dc401017 	ldw	r17,64(sp)
    6d3c:	dc000f17 	ldw	r16,60(sp)
    6d40:	dec01304 	addi	sp,sp,76
    6d44:	f800283a 	ret
    6d48:	80c0030b 	ldhu	r3,12(r16)
    6d4c:	1880200c 	andi	r2,r3,128
    6d50:	10000426 	beq	r2,zero,6d64 <__smakebuf_r+0xfc>
    6d54:	04801004 	movi	r18,64
    6d58:	18820014 	ori	r2,r3,2048
    6d5c:	8080030d 	sth	r2,12(r16)
    6d60:	003fe506 	br	6cf8 <__smakebuf_r+0x90>
    6d64:	04810004 	movi	r18,1024
    6d68:	003ffb06 	br	6d58 <__smakebuf_r+0xf0>
    6d6c:	8140038f 	ldh	r5,14(r16)
    6d70:	8809883a 	mov	r4,r17
    6d74:	000943c0 	call	943c <_isatty_r>
    6d78:	103fde26 	beq	r2,zero,6cf4 <__smakebuf_r+0x8c>
    6d7c:	8080030b 	ldhu	r2,12(r16)
    6d80:	80c010c4 	addi	r3,r16,67
    6d84:	04810004 	movi	r18,1024
    6d88:	10800054 	ori	r2,r2,1
    6d8c:	8080030d 	sth	r2,12(r16)
    6d90:	00800044 	movi	r2,1
    6d94:	80c00415 	stw	r3,16(r16)
    6d98:	80800515 	stw	r2,20(r16)
    6d9c:	80c00015 	stw	r3,0(r16)
    6da0:	003fd506 	br	6cf8 <__smakebuf_r+0x90>
    6da4:	80c00a17 	ldw	r3,40(r16)
    6da8:	00800074 	movhi	r2,1
    6dac:	10a3c204 	addi	r2,r2,-28920
    6db0:	18bfcb1e 	bne	r3,r2,6ce0 <__smakebuf_r+0x78>
    6db4:	8080030b 	ldhu	r2,12(r16)
    6db8:	00c10004 	movi	r3,1024
    6dbc:	1825883a 	mov	r18,r3
    6dc0:	10c4b03a 	or	r2,r2,r3
    6dc4:	8080030d 	sth	r2,12(r16)
    6dc8:	80c01315 	stw	r3,76(r16)
    6dcc:	003fca06 	br	6cf8 <__smakebuf_r+0x90>
    6dd0:	8100030b 	ldhu	r4,12(r16)
    6dd4:	2080800c 	andi	r2,r4,512
    6dd8:	103fb21e 	bne	r2,zero,6ca4 <__smakebuf_r+0x3c>
    6ddc:	80c010c4 	addi	r3,r16,67
    6de0:	21000094 	ori	r4,r4,2
    6de4:	00800044 	movi	r2,1
    6de8:	80800515 	stw	r2,20(r16)
    6dec:	8100030d 	sth	r4,12(r16)
    6df0:	80c00415 	stw	r3,16(r16)
    6df4:	80c00015 	stw	r3,0(r16)
    6df8:	003faa06 	br	6ca4 <__smakebuf_r+0x3c>

00006dfc <_malloc_r>:
    6dfc:	defff604 	addi	sp,sp,-40
    6e00:	28c002c4 	addi	r3,r5,11
    6e04:	00800584 	movi	r2,22
    6e08:	dc800215 	stw	r18,8(sp)
    6e0c:	dfc00915 	stw	ra,36(sp)
    6e10:	df000815 	stw	fp,32(sp)
    6e14:	ddc00715 	stw	r23,28(sp)
    6e18:	dd800615 	stw	r22,24(sp)
    6e1c:	dd400515 	stw	r21,20(sp)
    6e20:	dd000415 	stw	r20,16(sp)
    6e24:	dcc00315 	stw	r19,12(sp)
    6e28:	dc400115 	stw	r17,4(sp)
    6e2c:	dc000015 	stw	r16,0(sp)
    6e30:	2025883a 	mov	r18,r4
    6e34:	10c01236 	bltu	r2,r3,6e80 <_malloc_r+0x84>
    6e38:	04400404 	movi	r17,16
    6e3c:	8940142e 	bgeu	r17,r5,6e90 <_malloc_r+0x94>
    6e40:	00800304 	movi	r2,12
    6e44:	0007883a 	mov	r3,zero
    6e48:	90800015 	stw	r2,0(r18)
    6e4c:	1805883a 	mov	r2,r3
    6e50:	dfc00917 	ldw	ra,36(sp)
    6e54:	df000817 	ldw	fp,32(sp)
    6e58:	ddc00717 	ldw	r23,28(sp)
    6e5c:	dd800617 	ldw	r22,24(sp)
    6e60:	dd400517 	ldw	r21,20(sp)
    6e64:	dd000417 	ldw	r20,16(sp)
    6e68:	dcc00317 	ldw	r19,12(sp)
    6e6c:	dc800217 	ldw	r18,8(sp)
    6e70:	dc400117 	ldw	r17,4(sp)
    6e74:	dc000017 	ldw	r16,0(sp)
    6e78:	dec00a04 	addi	sp,sp,40
    6e7c:	f800283a 	ret
    6e80:	00bffe04 	movi	r2,-8
    6e84:	18a2703a 	and	r17,r3,r2
    6e88:	883fed16 	blt	r17,zero,6e40 <_malloc_r+0x44>
    6e8c:	897fec36 	bltu	r17,r5,6e40 <_malloc_r+0x44>
    6e90:	9009883a 	mov	r4,r18
    6e94:	000ba1c0 	call	ba1c <__malloc_lock>
    6e98:	00807dc4 	movi	r2,503
    6e9c:	14402b2e 	bgeu	r2,r17,6f4c <_malloc_r+0x150>
    6ea0:	8806d27a 	srli	r3,r17,9
    6ea4:	18003f1e 	bne	r3,zero,6fa4 <_malloc_r+0x1a8>
    6ea8:	880cd0fa 	srli	r6,r17,3
    6eac:	300490fa 	slli	r2,r6,3
    6eb0:	02c000b4 	movhi	r11,2
    6eb4:	5ae0d104 	addi	r11,r11,-31932
    6eb8:	12cb883a 	add	r5,r2,r11
    6ebc:	2c000317 	ldw	r16,12(r5)
    6ec0:	580f883a 	mov	r7,r11
    6ec4:	2c00041e 	bne	r5,r16,6ed8 <_malloc_r+0xdc>
    6ec8:	00000a06 	br	6ef4 <_malloc_r+0xf8>
    6ecc:	1800860e 	bge	r3,zero,70e8 <_malloc_r+0x2ec>
    6ed0:	84000317 	ldw	r16,12(r16)
    6ed4:	2c000726 	beq	r5,r16,6ef4 <_malloc_r+0xf8>
    6ed8:	80800117 	ldw	r2,4(r16)
    6edc:	00ffff04 	movi	r3,-4
    6ee0:	10c8703a 	and	r4,r2,r3
    6ee4:	2447c83a 	sub	r3,r4,r17
    6ee8:	008003c4 	movi	r2,15
    6eec:	10fff70e 	bge	r2,r3,6ecc <_malloc_r+0xd0>
    6ef0:	31bfffc4 	addi	r6,r6,-1
    6ef4:	32400044 	addi	r9,r6,1
    6ef8:	028000b4 	movhi	r10,2
    6efc:	52a0d304 	addi	r10,r10,-31924
    6f00:	54000217 	ldw	r16,8(r10)
    6f04:	8280a026 	beq	r16,r10,7188 <_malloc_r+0x38c>
    6f08:	80800117 	ldw	r2,4(r16)
    6f0c:	00ffff04 	movi	r3,-4
    6f10:	10ca703a 	and	r5,r2,r3
    6f14:	2c4dc83a 	sub	r6,r5,r17
    6f18:	008003c4 	movi	r2,15
    6f1c:	11808316 	blt	r2,r6,712c <_malloc_r+0x330>
    6f20:	52800315 	stw	r10,12(r10)
    6f24:	52800215 	stw	r10,8(r10)
    6f28:	30002916 	blt	r6,zero,6fd0 <_malloc_r+0x1d4>
    6f2c:	8147883a 	add	r3,r16,r5
    6f30:	18800117 	ldw	r2,4(r3)
    6f34:	9009883a 	mov	r4,r18
    6f38:	10800054 	ori	r2,r2,1
    6f3c:	18800115 	stw	r2,4(r3)
    6f40:	000bb240 	call	bb24 <__malloc_unlock>
    6f44:	80c00204 	addi	r3,r16,8
    6f48:	003fc006 	br	6e4c <_malloc_r+0x50>
    6f4c:	02c000b4 	movhi	r11,2
    6f50:	5ae0d104 	addi	r11,r11,-31932
    6f54:	8ac5883a 	add	r2,r17,r11
    6f58:	14000317 	ldw	r16,12(r2)
    6f5c:	580f883a 	mov	r7,r11
    6f60:	8806d0fa 	srli	r3,r17,3
    6f64:	14006c26 	beq	r2,r16,7118 <_malloc_r+0x31c>
    6f68:	80c00117 	ldw	r3,4(r16)
    6f6c:	00bfff04 	movi	r2,-4
    6f70:	81800317 	ldw	r6,12(r16)
    6f74:	1886703a 	and	r3,r3,r2
    6f78:	80c7883a 	add	r3,r16,r3
    6f7c:	18800117 	ldw	r2,4(r3)
    6f80:	81400217 	ldw	r5,8(r16)
    6f84:	9009883a 	mov	r4,r18
    6f88:	10800054 	ori	r2,r2,1
    6f8c:	18800115 	stw	r2,4(r3)
    6f90:	31400215 	stw	r5,8(r6)
    6f94:	29800315 	stw	r6,12(r5)
    6f98:	000bb240 	call	bb24 <__malloc_unlock>
    6f9c:	80c00204 	addi	r3,r16,8
    6fa0:	003faa06 	br	6e4c <_malloc_r+0x50>
    6fa4:	00800104 	movi	r2,4
    6fa8:	10c0052e 	bgeu	r2,r3,6fc0 <_malloc_r+0x1c4>
    6fac:	00800504 	movi	r2,20
    6fb0:	10c07836 	bltu	r2,r3,7194 <_malloc_r+0x398>
    6fb4:	198016c4 	addi	r6,r3,91
    6fb8:	300490fa 	slli	r2,r6,3
    6fbc:	003fbc06 	br	6eb0 <_malloc_r+0xb4>
    6fc0:	8804d1ba 	srli	r2,r17,6
    6fc4:	11800e04 	addi	r6,r2,56
    6fc8:	300490fa 	slli	r2,r6,3
    6fcc:	003fb806 	br	6eb0 <_malloc_r+0xb4>
    6fd0:	00807fc4 	movi	r2,511
    6fd4:	1140bb36 	bltu	r2,r5,72c4 <_malloc_r+0x4c8>
    6fd8:	2806d0fa 	srli	r3,r5,3
    6fdc:	573ffe04 	addi	fp,r10,-8
    6fe0:	00800044 	movi	r2,1
    6fe4:	180890fa 	slli	r4,r3,3
    6fe8:	1807d0ba 	srai	r3,r3,2
    6fec:	e1c00117 	ldw	r7,4(fp)
    6ff0:	5909883a 	add	r4,r11,r4
    6ff4:	21400217 	ldw	r5,8(r4)
    6ff8:	10c4983a 	sll	r2,r2,r3
    6ffc:	81000315 	stw	r4,12(r16)
    7000:	81400215 	stw	r5,8(r16)
    7004:	388eb03a 	or	r7,r7,r2
    7008:	2c000315 	stw	r16,12(r5)
    700c:	24000215 	stw	r16,8(r4)
    7010:	e1c00115 	stw	r7,4(fp)
    7014:	4807883a 	mov	r3,r9
    7018:	4800cd16 	blt	r9,zero,7350 <_malloc_r+0x554>
    701c:	1807d0ba 	srai	r3,r3,2
    7020:	00800044 	movi	r2,1
    7024:	10c8983a 	sll	r4,r2,r3
    7028:	39004436 	bltu	r7,r4,713c <_malloc_r+0x340>
    702c:	21c4703a 	and	r2,r4,r7
    7030:	10000a1e 	bne	r2,zero,705c <_malloc_r+0x260>
    7034:	2109883a 	add	r4,r4,r4
    7038:	00bfff04 	movi	r2,-4
    703c:	4884703a 	and	r2,r9,r2
    7040:	3906703a 	and	r3,r7,r4
    7044:	12400104 	addi	r9,r2,4
    7048:	1800041e 	bne	r3,zero,705c <_malloc_r+0x260>
    704c:	2109883a 	add	r4,r4,r4
    7050:	3904703a 	and	r2,r7,r4
    7054:	4a400104 	addi	r9,r9,4
    7058:	103ffc26 	beq	r2,zero,704c <_malloc_r+0x250>
    705c:	480490fa 	slli	r2,r9,3
    7060:	4819883a 	mov	r12,r9
    7064:	023fff04 	movi	r8,-4
    7068:	589b883a 	add	r13,r11,r2
    706c:	6807883a 	mov	r3,r13
    7070:	014003c4 	movi	r5,15
    7074:	1c000317 	ldw	r16,12(r3)
    7078:	1c00041e 	bne	r3,r16,708c <_malloc_r+0x290>
    707c:	0000a706 	br	731c <_malloc_r+0x520>
    7080:	3000ab0e 	bge	r6,zero,7330 <_malloc_r+0x534>
    7084:	84000317 	ldw	r16,12(r16)
    7088:	1c00a426 	beq	r3,r16,731c <_malloc_r+0x520>
    708c:	80800117 	ldw	r2,4(r16)
    7090:	1204703a 	and	r2,r2,r8
    7094:	144dc83a 	sub	r6,r2,r17
    7098:	29bff90e 	bge	r5,r6,7080 <_malloc_r+0x284>
    709c:	81000317 	ldw	r4,12(r16)
    70a0:	80c00217 	ldw	r3,8(r16)
    70a4:	89400054 	ori	r5,r17,1
    70a8:	8445883a 	add	r2,r16,r17
    70ac:	20c00215 	stw	r3,8(r4)
    70b0:	19000315 	stw	r4,12(r3)
    70b4:	81400115 	stw	r5,4(r16)
    70b8:	1187883a 	add	r3,r2,r6
    70bc:	31000054 	ori	r4,r6,1
    70c0:	50800315 	stw	r2,12(r10)
    70c4:	50800215 	stw	r2,8(r10)
    70c8:	19800015 	stw	r6,0(r3)
    70cc:	11000115 	stw	r4,4(r2)
    70d0:	12800215 	stw	r10,8(r2)
    70d4:	12800315 	stw	r10,12(r2)
    70d8:	9009883a 	mov	r4,r18
    70dc:	000bb240 	call	bb24 <__malloc_unlock>
    70e0:	80c00204 	addi	r3,r16,8
    70e4:	003f5906 	br	6e4c <_malloc_r+0x50>
    70e8:	8109883a 	add	r4,r16,r4
    70ec:	20800117 	ldw	r2,4(r4)
    70f0:	80c00217 	ldw	r3,8(r16)
    70f4:	81400317 	ldw	r5,12(r16)
    70f8:	10800054 	ori	r2,r2,1
    70fc:	20800115 	stw	r2,4(r4)
    7100:	28c00215 	stw	r3,8(r5)
    7104:	19400315 	stw	r5,12(r3)
    7108:	9009883a 	mov	r4,r18
    710c:	000bb240 	call	bb24 <__malloc_unlock>
    7110:	80c00204 	addi	r3,r16,8
    7114:	003f4d06 	br	6e4c <_malloc_r+0x50>
    7118:	80800204 	addi	r2,r16,8
    711c:	14000317 	ldw	r16,12(r2)
    7120:	143f911e 	bne	r2,r16,6f68 <_malloc_r+0x16c>
    7124:	1a400084 	addi	r9,r3,2
    7128:	003f7306 	br	6ef8 <_malloc_r+0xfc>
    712c:	88c00054 	ori	r3,r17,1
    7130:	8445883a 	add	r2,r16,r17
    7134:	80c00115 	stw	r3,4(r16)
    7138:	003fdf06 	br	70b8 <_malloc_r+0x2bc>
    713c:	e4000217 	ldw	r16,8(fp)
    7140:	00bfff04 	movi	r2,-4
    7144:	80c00117 	ldw	r3,4(r16)
    7148:	802d883a 	mov	r22,r16
    714c:	18aa703a 	and	r21,r3,r2
    7150:	ac401636 	bltu	r21,r17,71ac <_malloc_r+0x3b0>
    7154:	ac49c83a 	sub	r4,r21,r17
    7158:	008003c4 	movi	r2,15
    715c:	1100130e 	bge	r2,r4,71ac <_malloc_r+0x3b0>
    7160:	88800054 	ori	r2,r17,1
    7164:	8447883a 	add	r3,r16,r17
    7168:	80800115 	stw	r2,4(r16)
    716c:	20800054 	ori	r2,r4,1
    7170:	18800115 	stw	r2,4(r3)
    7174:	e0c00215 	stw	r3,8(fp)
    7178:	9009883a 	mov	r4,r18
    717c:	000bb240 	call	bb24 <__malloc_unlock>
    7180:	80c00204 	addi	r3,r16,8
    7184:	003f3106 	br	6e4c <_malloc_r+0x50>
    7188:	39c00117 	ldw	r7,4(r7)
    718c:	573ffe04 	addi	fp,r10,-8
    7190:	003fa006 	br	7014 <_malloc_r+0x218>
    7194:	00801504 	movi	r2,84
    7198:	10c06736 	bltu	r2,r3,7338 <_malloc_r+0x53c>
    719c:	8804d33a 	srli	r2,r17,12
    71a0:	11801b84 	addi	r6,r2,110
    71a4:	300490fa 	slli	r2,r6,3
    71a8:	003f4106 	br	6eb0 <_malloc_r+0xb4>
    71ac:	d0a73817 	ldw	r2,-25376(gp)
    71b0:	d0e00517 	ldw	r3,-32748(gp)
    71b4:	053fffc4 	movi	r20,-1
    71b8:	10800404 	addi	r2,r2,16
    71bc:	88a7883a 	add	r19,r17,r2
    71c0:	1d000326 	beq	r3,r20,71d0 <_malloc_r+0x3d4>
    71c4:	98c3ffc4 	addi	r3,r19,4095
    71c8:	00bc0004 	movi	r2,-4096
    71cc:	18a6703a 	and	r19,r3,r2
    71d0:	9009883a 	mov	r4,r18
    71d4:	980b883a 	mov	r5,r19
    71d8:	0008e900 	call	8e90 <_sbrk_r>
    71dc:	1009883a 	mov	r4,r2
    71e0:	15000426 	beq	r2,r20,71f4 <_malloc_r+0x3f8>
    71e4:	854b883a 	add	r5,r16,r21
    71e8:	1029883a 	mov	r20,r2
    71ec:	11405a2e 	bgeu	r2,r5,7358 <_malloc_r+0x55c>
    71f0:	87000c26 	beq	r16,fp,7224 <_malloc_r+0x428>
    71f4:	e4000217 	ldw	r16,8(fp)
    71f8:	80c00117 	ldw	r3,4(r16)
    71fc:	00bfff04 	movi	r2,-4
    7200:	1884703a 	and	r2,r3,r2
    7204:	14400336 	bltu	r2,r17,7214 <_malloc_r+0x418>
    7208:	1449c83a 	sub	r4,r2,r17
    720c:	008003c4 	movi	r2,15
    7210:	113fd316 	blt	r2,r4,7160 <_malloc_r+0x364>
    7214:	9009883a 	mov	r4,r18
    7218:	000bb240 	call	bb24 <__malloc_unlock>
    721c:	0007883a 	mov	r3,zero
    7220:	003f0a06 	br	6e4c <_malloc_r+0x50>
    7224:	05c000b4 	movhi	r23,2
    7228:	bdede504 	addi	r23,r23,-18540
    722c:	b8800017 	ldw	r2,0(r23)
    7230:	988d883a 	add	r6,r19,r2
    7234:	b9800015 	stw	r6,0(r23)
    7238:	d0e00517 	ldw	r3,-32748(gp)
    723c:	00bfffc4 	movi	r2,-1
    7240:	18808e26 	beq	r3,r2,747c <_malloc_r+0x680>
    7244:	2145c83a 	sub	r2,r4,r5
    7248:	3085883a 	add	r2,r6,r2
    724c:	b8800015 	stw	r2,0(r23)
    7250:	20c001cc 	andi	r3,r4,7
    7254:	18005f1e 	bne	r3,zero,73d4 <_malloc_r+0x5d8>
    7258:	000b883a 	mov	r5,zero
    725c:	a4c5883a 	add	r2,r20,r19
    7260:	1083ffcc 	andi	r2,r2,4095
    7264:	00c40004 	movi	r3,4096
    7268:	1887c83a 	sub	r3,r3,r2
    726c:	28e7883a 	add	r19,r5,r3
    7270:	9009883a 	mov	r4,r18
    7274:	980b883a 	mov	r5,r19
    7278:	0008e900 	call	8e90 <_sbrk_r>
    727c:	1007883a 	mov	r3,r2
    7280:	00bfffc4 	movi	r2,-1
    7284:	18807a26 	beq	r3,r2,7470 <_malloc_r+0x674>
    7288:	1d05c83a 	sub	r2,r3,r20
    728c:	9885883a 	add	r2,r19,r2
    7290:	10c00054 	ori	r3,r2,1
    7294:	b8800017 	ldw	r2,0(r23)
    7298:	a021883a 	mov	r16,r20
    729c:	a0c00115 	stw	r3,4(r20)
    72a0:	9885883a 	add	r2,r19,r2
    72a4:	b8800015 	stw	r2,0(r23)
    72a8:	e5000215 	stw	r20,8(fp)
    72ac:	b7003626 	beq	r22,fp,7388 <_malloc_r+0x58c>
    72b0:	018003c4 	movi	r6,15
    72b4:	35404b36 	bltu	r6,r21,73e4 <_malloc_r+0x5e8>
    72b8:	00800044 	movi	r2,1
    72bc:	a0800115 	stw	r2,4(r20)
    72c0:	003fcd06 	br	71f8 <_malloc_r+0x3fc>
    72c4:	2808d27a 	srli	r4,r5,9
    72c8:	2000371e 	bne	r4,zero,73a8 <_malloc_r+0x5ac>
    72cc:	2808d0fa 	srli	r4,r5,3
    72d0:	200690fa 	slli	r3,r4,3
    72d4:	1ad1883a 	add	r8,r3,r11
    72d8:	41800217 	ldw	r6,8(r8)
    72dc:	41805b26 	beq	r8,r6,744c <_malloc_r+0x650>
    72e0:	30800117 	ldw	r2,4(r6)
    72e4:	00ffff04 	movi	r3,-4
    72e8:	10c4703a 	and	r2,r2,r3
    72ec:	2880022e 	bgeu	r5,r2,72f8 <_malloc_r+0x4fc>
    72f0:	31800217 	ldw	r6,8(r6)
    72f4:	41bffa1e 	bne	r8,r6,72e0 <_malloc_r+0x4e4>
    72f8:	32000317 	ldw	r8,12(r6)
    72fc:	39c00117 	ldw	r7,4(r7)
    7300:	82000315 	stw	r8,12(r16)
    7304:	81800215 	stw	r6,8(r16)
    7308:	070000b4 	movhi	fp,2
    730c:	e720d104 	addi	fp,fp,-31932
    7310:	34000315 	stw	r16,12(r6)
    7314:	44000215 	stw	r16,8(r8)
    7318:	003f3e06 	br	7014 <_malloc_r+0x218>
    731c:	63000044 	addi	r12,r12,1
    7320:	608000cc 	andi	r2,r12,3
    7324:	10005d26 	beq	r2,zero,749c <_malloc_r+0x6a0>
    7328:	18c00204 	addi	r3,r3,8
    732c:	003f5106 	br	7074 <_malloc_r+0x278>
    7330:	8089883a 	add	r4,r16,r2
    7334:	003f6d06 	br	70ec <_malloc_r+0x2f0>
    7338:	00805504 	movi	r2,340
    733c:	10c02036 	bltu	r2,r3,73c0 <_malloc_r+0x5c4>
    7340:	8804d3fa 	srli	r2,r17,15
    7344:	11801dc4 	addi	r6,r2,119
    7348:	300490fa 	slli	r2,r6,3
    734c:	003ed806 	br	6eb0 <_malloc_r+0xb4>
    7350:	48c000c4 	addi	r3,r9,3
    7354:	003f3106 	br	701c <_malloc_r+0x220>
    7358:	05c000b4 	movhi	r23,2
    735c:	bdede504 	addi	r23,r23,-18540
    7360:	b8800017 	ldw	r2,0(r23)
    7364:	988d883a 	add	r6,r19,r2
    7368:	b9800015 	stw	r6,0(r23)
    736c:	293fb21e 	bne	r5,r4,7238 <_malloc_r+0x43c>
    7370:	2083ffcc 	andi	r2,r4,4095
    7374:	103fb01e 	bne	r2,zero,7238 <_malloc_r+0x43c>
    7378:	e4000217 	ldw	r16,8(fp)
    737c:	9d45883a 	add	r2,r19,r21
    7380:	10800054 	ori	r2,r2,1
    7384:	80800115 	stw	r2,4(r16)
    7388:	b8c00017 	ldw	r3,0(r23)
    738c:	d0a73917 	ldw	r2,-25372(gp)
    7390:	10c0012e 	bgeu	r2,r3,7398 <_malloc_r+0x59c>
    7394:	d0e73915 	stw	r3,-25372(gp)
    7398:	d0a73a17 	ldw	r2,-25368(gp)
    739c:	10ff962e 	bgeu	r2,r3,71f8 <_malloc_r+0x3fc>
    73a0:	d0e73a15 	stw	r3,-25368(gp)
    73a4:	003f9406 	br	71f8 <_malloc_r+0x3fc>
    73a8:	00800104 	movi	r2,4
    73ac:	11001e36 	bltu	r2,r4,7428 <_malloc_r+0x62c>
    73b0:	2804d1ba 	srli	r2,r5,6
    73b4:	11000e04 	addi	r4,r2,56
    73b8:	200690fa 	slli	r3,r4,3
    73bc:	003fc506 	br	72d4 <_malloc_r+0x4d8>
    73c0:	00815504 	movi	r2,1364
    73c4:	10c01d2e 	bgeu	r2,r3,743c <_malloc_r+0x640>
    73c8:	01801f84 	movi	r6,126
    73cc:	0080fc04 	movi	r2,1008
    73d0:	003eb706 	br	6eb0 <_malloc_r+0xb4>
    73d4:	00800204 	movi	r2,8
    73d8:	10cbc83a 	sub	r5,r2,r3
    73dc:	2169883a 	add	r20,r4,r5
    73e0:	003f9e06 	br	725c <_malloc_r+0x460>
    73e4:	00bffe04 	movi	r2,-8
    73e8:	a93ffd04 	addi	r4,r21,-12
    73ec:	2088703a 	and	r4,r4,r2
    73f0:	b10b883a 	add	r5,r22,r4
    73f4:	00c00144 	movi	r3,5
    73f8:	28c00215 	stw	r3,8(r5)
    73fc:	28c00115 	stw	r3,4(r5)
    7400:	b0800117 	ldw	r2,4(r22)
    7404:	1080004c 	andi	r2,r2,1
    7408:	2084b03a 	or	r2,r4,r2
    740c:	b0800115 	stw	r2,4(r22)
    7410:	313fdd2e 	bgeu	r6,r4,7388 <_malloc_r+0x58c>
    7414:	b1400204 	addi	r5,r22,8
    7418:	9009883a 	mov	r4,r18
    741c:	00062740 	call	6274 <_free_r>
    7420:	e4000217 	ldw	r16,8(fp)
    7424:	003fd806 	br	7388 <_malloc_r+0x58c>
    7428:	00800504 	movi	r2,20
    742c:	11001536 	bltu	r2,r4,7484 <_malloc_r+0x688>
    7430:	210016c4 	addi	r4,r4,91
    7434:	200690fa 	slli	r3,r4,3
    7438:	003fa606 	br	72d4 <_malloc_r+0x4d8>
    743c:	8804d4ba 	srli	r2,r17,18
    7440:	11801f04 	addi	r6,r2,124
    7444:	300490fa 	slli	r2,r6,3
    7448:	003e9906 	br	6eb0 <_malloc_r+0xb4>
    744c:	2009d0ba 	srai	r4,r4,2
    7450:	014000b4 	movhi	r5,2
    7454:	2960d104 	addi	r5,r5,-31932
    7458:	00c00044 	movi	r3,1
    745c:	28800117 	ldw	r2,4(r5)
    7460:	1906983a 	sll	r3,r3,r4
    7464:	10c4b03a 	or	r2,r2,r3
    7468:	28800115 	stw	r2,4(r5)
    746c:	003fa306 	br	72fc <_malloc_r+0x500>
    7470:	0027883a 	mov	r19,zero
    7474:	00c00044 	movi	r3,1
    7478:	003f8606 	br	7294 <_malloc_r+0x498>
    747c:	d1200515 	stw	r4,-32748(gp)
    7480:	003f7306 	br	7250 <_malloc_r+0x454>
    7484:	00801504 	movi	r2,84
    7488:	11001936 	bltu	r2,r4,74f0 <_malloc_r+0x6f4>
    748c:	2804d33a 	srli	r2,r5,12
    7490:	11001b84 	addi	r4,r2,110
    7494:	200690fa 	slli	r3,r4,3
    7498:	003f8e06 	br	72d4 <_malloc_r+0x4d8>
    749c:	480b883a 	mov	r5,r9
    74a0:	6807883a 	mov	r3,r13
    74a4:	288000cc 	andi	r2,r5,3
    74a8:	18fffe04 	addi	r3,r3,-8
    74ac:	297fffc4 	addi	r5,r5,-1
    74b0:	10001526 	beq	r2,zero,7508 <_malloc_r+0x70c>
    74b4:	18800217 	ldw	r2,8(r3)
    74b8:	10fffa26 	beq	r2,r3,74a4 <_malloc_r+0x6a8>
    74bc:	2109883a 	add	r4,r4,r4
    74c0:	393f1e36 	bltu	r7,r4,713c <_malloc_r+0x340>
    74c4:	203f1d26 	beq	r4,zero,713c <_malloc_r+0x340>
    74c8:	21c4703a 	and	r2,r4,r7
    74cc:	10000226 	beq	r2,zero,74d8 <_malloc_r+0x6dc>
    74d0:	6013883a 	mov	r9,r12
    74d4:	003ee106 	br	705c <_malloc_r+0x260>
    74d8:	2109883a 	add	r4,r4,r4
    74dc:	3904703a 	and	r2,r7,r4
    74e0:	63000104 	addi	r12,r12,4
    74e4:	103ffc26 	beq	r2,zero,74d8 <_malloc_r+0x6dc>
    74e8:	6013883a 	mov	r9,r12
    74ec:	003edb06 	br	705c <_malloc_r+0x260>
    74f0:	00805504 	movi	r2,340
    74f4:	11000836 	bltu	r2,r4,7518 <_malloc_r+0x71c>
    74f8:	2804d3fa 	srli	r2,r5,15
    74fc:	11001dc4 	addi	r4,r2,119
    7500:	200690fa 	slli	r3,r4,3
    7504:	003f7306 	br	72d4 <_malloc_r+0x4d8>
    7508:	0104303a 	nor	r2,zero,r4
    750c:	388e703a 	and	r7,r7,r2
    7510:	e1c00115 	stw	r7,4(fp)
    7514:	003fe906 	br	74bc <_malloc_r+0x6c0>
    7518:	00815504 	movi	r2,1364
    751c:	1100032e 	bgeu	r2,r4,752c <_malloc_r+0x730>
    7520:	01001f84 	movi	r4,126
    7524:	00c0fc04 	movi	r3,1008
    7528:	003f6a06 	br	72d4 <_malloc_r+0x4d8>
    752c:	2804d4ba 	srli	r2,r5,18
    7530:	11001f04 	addi	r4,r2,124
    7534:	200690fa 	slli	r3,r4,3
    7538:	003f6606 	br	72d4 <_malloc_r+0x4d8>

0000753c <memchr>:
    753c:	008000c4 	movi	r2,3
    7540:	29403fcc 	andi	r5,r5,255
    7544:	2007883a 	mov	r3,r4
    7548:	1180022e 	bgeu	r2,r6,7554 <memchr+0x18>
    754c:	2084703a 	and	r2,r4,r2
    7550:	10000b26 	beq	r2,zero,7580 <memchr+0x44>
    7554:	313fffc4 	addi	r4,r6,-1
    7558:	3000051e 	bne	r6,zero,7570 <memchr+0x34>
    755c:	00002c06 	br	7610 <memchr+0xd4>
    7560:	213fffc4 	addi	r4,r4,-1
    7564:	00bfffc4 	movi	r2,-1
    7568:	18c00044 	addi	r3,r3,1
    756c:	20802826 	beq	r4,r2,7610 <memchr+0xd4>
    7570:	18800003 	ldbu	r2,0(r3)
    7574:	28bffa1e 	bne	r5,r2,7560 <memchr+0x24>
    7578:	1805883a 	mov	r2,r3
    757c:	f800283a 	ret
    7580:	0011883a 	mov	r8,zero
    7584:	0007883a 	mov	r3,zero
    7588:	01c00104 	movi	r7,4
    758c:	4004923a 	slli	r2,r8,8
    7590:	18c00044 	addi	r3,r3,1
    7594:	1151883a 	add	r8,r2,r5
    7598:	19fffc1e 	bne	r3,r7,758c <memchr+0x50>
    759c:	02bfbff4 	movhi	r10,65279
    75a0:	52bfbfc4 	addi	r10,r10,-257
    75a4:	02602074 	movhi	r9,32897
    75a8:	4a602004 	addi	r9,r9,-32640
    75ac:	02c000c4 	movi	r11,3
    75b0:	20800017 	ldw	r2,0(r4)
    75b4:	31bfff04 	addi	r6,r6,-4
    75b8:	200f883a 	mov	r7,r4
    75bc:	1204f03a 	xor	r2,r2,r8
    75c0:	1287883a 	add	r3,r2,r10
    75c4:	1a46703a 	and	r3,r3,r9
    75c8:	0084303a 	nor	r2,zero,r2
    75cc:	10c4703a 	and	r2,r2,r3
    75d0:	10000b26 	beq	r2,zero,7600 <memchr+0xc4>
    75d4:	20800003 	ldbu	r2,0(r4)
    75d8:	28800f26 	beq	r5,r2,7618 <memchr+0xdc>
    75dc:	20800043 	ldbu	r2,1(r4)
    75e0:	21c00044 	addi	r7,r4,1
    75e4:	28800c26 	beq	r5,r2,7618 <memchr+0xdc>
    75e8:	20800083 	ldbu	r2,2(r4)
    75ec:	21c00084 	addi	r7,r4,2
    75f0:	28800926 	beq	r5,r2,7618 <memchr+0xdc>
    75f4:	208000c3 	ldbu	r2,3(r4)
    75f8:	21c000c4 	addi	r7,r4,3
    75fc:	28800626 	beq	r5,r2,7618 <memchr+0xdc>
    7600:	21000104 	addi	r4,r4,4
    7604:	59bfea36 	bltu	r11,r6,75b0 <memchr+0x74>
    7608:	2007883a 	mov	r3,r4
    760c:	003fd106 	br	7554 <memchr+0x18>
    7610:	0005883a 	mov	r2,zero
    7614:	f800283a 	ret
    7618:	3805883a 	mov	r2,r7
    761c:	f800283a 	ret

00007620 <memcpy>:
    7620:	01c003c4 	movi	r7,15
    7624:	2007883a 	mov	r3,r4
    7628:	3980032e 	bgeu	r7,r6,7638 <memcpy+0x18>
    762c:	2904b03a 	or	r2,r5,r4
    7630:	108000cc 	andi	r2,r2,3
    7634:	10000926 	beq	r2,zero,765c <memcpy+0x3c>
    7638:	30000626 	beq	r6,zero,7654 <memcpy+0x34>
    763c:	30cd883a 	add	r6,r6,r3
    7640:	28800003 	ldbu	r2,0(r5)
    7644:	29400044 	addi	r5,r5,1
    7648:	18800005 	stb	r2,0(r3)
    764c:	18c00044 	addi	r3,r3,1
    7650:	30fffb1e 	bne	r6,r3,7640 <memcpy+0x20>
    7654:	2005883a 	mov	r2,r4
    7658:	f800283a 	ret
    765c:	3811883a 	mov	r8,r7
    7660:	200f883a 	mov	r7,r4
    7664:	28c00017 	ldw	r3,0(r5)
    7668:	31bffc04 	addi	r6,r6,-16
    766c:	38c00015 	stw	r3,0(r7)
    7670:	28800117 	ldw	r2,4(r5)
    7674:	38800115 	stw	r2,4(r7)
    7678:	28c00217 	ldw	r3,8(r5)
    767c:	38c00215 	stw	r3,8(r7)
    7680:	28800317 	ldw	r2,12(r5)
    7684:	29400404 	addi	r5,r5,16
    7688:	38800315 	stw	r2,12(r7)
    768c:	39c00404 	addi	r7,r7,16
    7690:	41bff436 	bltu	r8,r6,7664 <memcpy+0x44>
    7694:	008000c4 	movi	r2,3
    7698:	1180072e 	bgeu	r2,r6,76b8 <memcpy+0x98>
    769c:	1007883a 	mov	r3,r2
    76a0:	28800017 	ldw	r2,0(r5)
    76a4:	31bfff04 	addi	r6,r6,-4
    76a8:	29400104 	addi	r5,r5,4
    76ac:	38800015 	stw	r2,0(r7)
    76b0:	39c00104 	addi	r7,r7,4
    76b4:	19bffa36 	bltu	r3,r6,76a0 <memcpy+0x80>
    76b8:	3807883a 	mov	r3,r7
    76bc:	003fde06 	br	7638 <memcpy+0x18>

000076c0 <memmove>:
    76c0:	2807883a 	mov	r3,r5
    76c4:	2011883a 	mov	r8,r4
    76c8:	29000c2e 	bgeu	r5,r4,76fc <memmove+0x3c>
    76cc:	298f883a 	add	r7,r5,r6
    76d0:	21c00a2e 	bgeu	r4,r7,76fc <memmove+0x3c>
    76d4:	30000726 	beq	r6,zero,76f4 <memmove+0x34>
    76d8:	2187883a 	add	r3,r4,r6
    76dc:	198dc83a 	sub	r6,r3,r6
    76e0:	39ffffc4 	addi	r7,r7,-1
    76e4:	38800003 	ldbu	r2,0(r7)
    76e8:	18ffffc4 	addi	r3,r3,-1
    76ec:	18800005 	stb	r2,0(r3)
    76f0:	19bffb1e 	bne	r3,r6,76e0 <memmove+0x20>
    76f4:	2005883a 	mov	r2,r4
    76f8:	f800283a 	ret
    76fc:	01c003c4 	movi	r7,15
    7700:	39800a36 	bltu	r7,r6,772c <memmove+0x6c>
    7704:	303ffb26 	beq	r6,zero,76f4 <memmove+0x34>
    7708:	400f883a 	mov	r7,r8
    770c:	320d883a 	add	r6,r6,r8
    7710:	28800003 	ldbu	r2,0(r5)
    7714:	29400044 	addi	r5,r5,1
    7718:	38800005 	stb	r2,0(r7)
    771c:	39c00044 	addi	r7,r7,1
    7720:	39bffb1e 	bne	r7,r6,7710 <memmove+0x50>
    7724:	2005883a 	mov	r2,r4
    7728:	f800283a 	ret
    772c:	1904b03a 	or	r2,r3,r4
    7730:	108000cc 	andi	r2,r2,3
    7734:	103ff31e 	bne	r2,zero,7704 <memmove+0x44>
    7738:	3811883a 	mov	r8,r7
    773c:	180b883a 	mov	r5,r3
    7740:	200f883a 	mov	r7,r4
    7744:	28c00017 	ldw	r3,0(r5)
    7748:	31bffc04 	addi	r6,r6,-16
    774c:	38c00015 	stw	r3,0(r7)
    7750:	28800117 	ldw	r2,4(r5)
    7754:	38800115 	stw	r2,4(r7)
    7758:	28c00217 	ldw	r3,8(r5)
    775c:	38c00215 	stw	r3,8(r7)
    7760:	28800317 	ldw	r2,12(r5)
    7764:	29400404 	addi	r5,r5,16
    7768:	38800315 	stw	r2,12(r7)
    776c:	39c00404 	addi	r7,r7,16
    7770:	41bff436 	bltu	r8,r6,7744 <memmove+0x84>
    7774:	008000c4 	movi	r2,3
    7778:	1180072e 	bgeu	r2,r6,7798 <memmove+0xd8>
    777c:	1007883a 	mov	r3,r2
    7780:	28800017 	ldw	r2,0(r5)
    7784:	31bfff04 	addi	r6,r6,-4
    7788:	29400104 	addi	r5,r5,4
    778c:	38800015 	stw	r2,0(r7)
    7790:	39c00104 	addi	r7,r7,4
    7794:	19bffa36 	bltu	r3,r6,7780 <memmove+0xc0>
    7798:	3811883a 	mov	r8,r7
    779c:	003fd906 	br	7704 <memmove+0x44>

000077a0 <memset>:
    77a0:	008000c4 	movi	r2,3
    77a4:	29403fcc 	andi	r5,r5,255
    77a8:	2007883a 	mov	r3,r4
    77ac:	1180022e 	bgeu	r2,r6,77b8 <memset+0x18>
    77b0:	2084703a 	and	r2,r4,r2
    77b4:	10000826 	beq	r2,zero,77d8 <memset+0x38>
    77b8:	30000526 	beq	r6,zero,77d0 <memset+0x30>
    77bc:	2805883a 	mov	r2,r5
    77c0:	30cd883a 	add	r6,r6,r3
    77c4:	18800005 	stb	r2,0(r3)
    77c8:	18c00044 	addi	r3,r3,1
    77cc:	19bffd1e 	bne	r3,r6,77c4 <memset+0x24>
    77d0:	2005883a 	mov	r2,r4
    77d4:	f800283a 	ret
    77d8:	2804923a 	slli	r2,r5,8
    77dc:	020003c4 	movi	r8,15
    77e0:	200f883a 	mov	r7,r4
    77e4:	2884b03a 	or	r2,r5,r2
    77e8:	1006943a 	slli	r3,r2,16
    77ec:	10c6b03a 	or	r3,r2,r3
    77f0:	41800a2e 	bgeu	r8,r6,781c <memset+0x7c>
    77f4:	4005883a 	mov	r2,r8
    77f8:	31bffc04 	addi	r6,r6,-16
    77fc:	38c00015 	stw	r3,0(r7)
    7800:	38c00115 	stw	r3,4(r7)
    7804:	38c00215 	stw	r3,8(r7)
    7808:	38c00315 	stw	r3,12(r7)
    780c:	39c00404 	addi	r7,r7,16
    7810:	11bff936 	bltu	r2,r6,77f8 <memset+0x58>
    7814:	008000c4 	movi	r2,3
    7818:	1180052e 	bgeu	r2,r6,7830 <memset+0x90>
    781c:	31bfff04 	addi	r6,r6,-4
    7820:	008000c4 	movi	r2,3
    7824:	38c00015 	stw	r3,0(r7)
    7828:	39c00104 	addi	r7,r7,4
    782c:	11bffb36 	bltu	r2,r6,781c <memset+0x7c>
    7830:	3807883a 	mov	r3,r7
    7834:	003fe006 	br	77b8 <memset+0x18>

00007838 <_Bfree>:
    7838:	28000826 	beq	r5,zero,785c <_Bfree+0x24>
    783c:	28800117 	ldw	r2,4(r5)
    7840:	21001317 	ldw	r4,76(r4)
    7844:	1085883a 	add	r2,r2,r2
    7848:	1085883a 	add	r2,r2,r2
    784c:	1105883a 	add	r2,r2,r4
    7850:	10c00017 	ldw	r3,0(r2)
    7854:	28c00015 	stw	r3,0(r5)
    7858:	11400015 	stw	r5,0(r2)
    785c:	f800283a 	ret

00007860 <__hi0bits>:
    7860:	20bfffec 	andhi	r2,r4,65535
    7864:	10001426 	beq	r2,zero,78b8 <__hi0bits+0x58>
    7868:	0007883a 	mov	r3,zero
    786c:	20bfc02c 	andhi	r2,r4,65280
    7870:	1000021e 	bne	r2,zero,787c <__hi0bits+0x1c>
    7874:	2008923a 	slli	r4,r4,8
    7878:	18c00204 	addi	r3,r3,8
    787c:	20bc002c 	andhi	r2,r4,61440
    7880:	1000021e 	bne	r2,zero,788c <__hi0bits+0x2c>
    7884:	2008913a 	slli	r4,r4,4
    7888:	18c00104 	addi	r3,r3,4
    788c:	20b0002c 	andhi	r2,r4,49152
    7890:	1000031e 	bne	r2,zero,78a0 <__hi0bits+0x40>
    7894:	2105883a 	add	r2,r4,r4
    7898:	18c00084 	addi	r3,r3,2
    789c:	1089883a 	add	r4,r2,r2
    78a0:	20000316 	blt	r4,zero,78b0 <__hi0bits+0x50>
    78a4:	2090002c 	andhi	r2,r4,16384
    78a8:	10000626 	beq	r2,zero,78c4 <__hi0bits+0x64>
    78ac:	18c00044 	addi	r3,r3,1
    78b0:	1805883a 	mov	r2,r3
    78b4:	f800283a 	ret
    78b8:	2008943a 	slli	r4,r4,16
    78bc:	00c00404 	movi	r3,16
    78c0:	003fea06 	br	786c <__hi0bits+0xc>
    78c4:	00c00804 	movi	r3,32
    78c8:	1805883a 	mov	r2,r3
    78cc:	f800283a 	ret

000078d0 <__lo0bits>:
    78d0:	20c00017 	ldw	r3,0(r4)
    78d4:	188001cc 	andi	r2,r3,7
    78d8:	10000a26 	beq	r2,zero,7904 <__lo0bits+0x34>
    78dc:	1880004c 	andi	r2,r3,1
    78e0:	1005003a 	cmpeq	r2,r2,zero
    78e4:	10002126 	beq	r2,zero,796c <__lo0bits+0x9c>
    78e8:	1880008c 	andi	r2,r3,2
    78ec:	1000251e 	bne	r2,zero,7984 <__lo0bits+0xb4>
    78f0:	1804d0ba 	srli	r2,r3,2
    78f4:	01400084 	movi	r5,2
    78f8:	20800015 	stw	r2,0(r4)
    78fc:	2805883a 	mov	r2,r5
    7900:	f800283a 	ret
    7904:	18bfffcc 	andi	r2,r3,65535
    7908:	10001526 	beq	r2,zero,7960 <__lo0bits+0x90>
    790c:	000b883a 	mov	r5,zero
    7910:	18803fcc 	andi	r2,r3,255
    7914:	1000021e 	bne	r2,zero,7920 <__lo0bits+0x50>
    7918:	1806d23a 	srli	r3,r3,8
    791c:	29400204 	addi	r5,r5,8
    7920:	188003cc 	andi	r2,r3,15
    7924:	1000021e 	bne	r2,zero,7930 <__lo0bits+0x60>
    7928:	1806d13a 	srli	r3,r3,4
    792c:	29400104 	addi	r5,r5,4
    7930:	188000cc 	andi	r2,r3,3
    7934:	1000021e 	bne	r2,zero,7940 <__lo0bits+0x70>
    7938:	1806d0ba 	srli	r3,r3,2
    793c:	29400084 	addi	r5,r5,2
    7940:	1880004c 	andi	r2,r3,1
    7944:	1000031e 	bne	r2,zero,7954 <__lo0bits+0x84>
    7948:	1806d07a 	srli	r3,r3,1
    794c:	18000a26 	beq	r3,zero,7978 <__lo0bits+0xa8>
    7950:	29400044 	addi	r5,r5,1
    7954:	2805883a 	mov	r2,r5
    7958:	20c00015 	stw	r3,0(r4)
    795c:	f800283a 	ret
    7960:	1806d43a 	srli	r3,r3,16
    7964:	01400404 	movi	r5,16
    7968:	003fe906 	br	7910 <__lo0bits+0x40>
    796c:	000b883a 	mov	r5,zero
    7970:	2805883a 	mov	r2,r5
    7974:	f800283a 	ret
    7978:	01400804 	movi	r5,32
    797c:	2805883a 	mov	r2,r5
    7980:	f800283a 	ret
    7984:	1804d07a 	srli	r2,r3,1
    7988:	01400044 	movi	r5,1
    798c:	20800015 	stw	r2,0(r4)
    7990:	003fda06 	br	78fc <__lo0bits+0x2c>

00007994 <__mcmp>:
    7994:	20800417 	ldw	r2,16(r4)
    7998:	28c00417 	ldw	r3,16(r5)
    799c:	10cfc83a 	sub	r7,r2,r3
    79a0:	38000c1e 	bne	r7,zero,79d4 <__mcmp+0x40>
    79a4:	18c5883a 	add	r2,r3,r3
    79a8:	1085883a 	add	r2,r2,r2
    79ac:	10c00504 	addi	r3,r2,20
    79b0:	21000504 	addi	r4,r4,20
    79b4:	28cb883a 	add	r5,r5,r3
    79b8:	2085883a 	add	r2,r4,r2
    79bc:	10bfff04 	addi	r2,r2,-4
    79c0:	297fff04 	addi	r5,r5,-4
    79c4:	11800017 	ldw	r6,0(r2)
    79c8:	28c00017 	ldw	r3,0(r5)
    79cc:	30c0031e 	bne	r6,r3,79dc <__mcmp+0x48>
    79d0:	20bffa36 	bltu	r4,r2,79bc <__mcmp+0x28>
    79d4:	3805883a 	mov	r2,r7
    79d8:	f800283a 	ret
    79dc:	30c00336 	bltu	r6,r3,79ec <__mcmp+0x58>
    79e0:	01c00044 	movi	r7,1
    79e4:	3805883a 	mov	r2,r7
    79e8:	f800283a 	ret
    79ec:	01ffffc4 	movi	r7,-1
    79f0:	003ff806 	br	79d4 <__mcmp+0x40>

000079f4 <__ulp>:
    79f4:	295ffc2c 	andhi	r5,r5,32752
    79f8:	013f3034 	movhi	r4,64704
    79fc:	290b883a 	add	r5,r5,r4
    7a00:	0145c83a 	sub	r2,zero,r5
    7a04:	1007d53a 	srai	r3,r2,20
    7a08:	000d883a 	mov	r6,zero
    7a0c:	0140040e 	bge	zero,r5,7a20 <__ulp+0x2c>
    7a10:	280f883a 	mov	r7,r5
    7a14:	3807883a 	mov	r3,r7
    7a18:	3005883a 	mov	r2,r6
    7a1c:	f800283a 	ret
    7a20:	008004c4 	movi	r2,19
    7a24:	193ffb04 	addi	r4,r3,-20
    7a28:	10c00c0e 	bge	r2,r3,7a5c <__ulp+0x68>
    7a2c:	008007c4 	movi	r2,31
    7a30:	1107c83a 	sub	r3,r2,r4
    7a34:	00800784 	movi	r2,30
    7a38:	01400044 	movi	r5,1
    7a3c:	11000216 	blt	r2,r4,7a48 <__ulp+0x54>
    7a40:	00800044 	movi	r2,1
    7a44:	10ca983a 	sll	r5,r2,r3
    7a48:	000f883a 	mov	r7,zero
    7a4c:	280d883a 	mov	r6,r5
    7a50:	3807883a 	mov	r3,r7
    7a54:	3005883a 	mov	r2,r6
    7a58:	f800283a 	ret
    7a5c:	00800234 	movhi	r2,8
    7a60:	10cfd83a 	sra	r7,r2,r3
    7a64:	000d883a 	mov	r6,zero
    7a68:	3005883a 	mov	r2,r6
    7a6c:	3807883a 	mov	r3,r7
    7a70:	f800283a 	ret

00007a74 <__b2d>:
    7a74:	20800417 	ldw	r2,16(r4)
    7a78:	defff904 	addi	sp,sp,-28
    7a7c:	dd000415 	stw	r20,16(sp)
    7a80:	1085883a 	add	r2,r2,r2
    7a84:	25000504 	addi	r20,r4,20
    7a88:	1085883a 	add	r2,r2,r2
    7a8c:	dc000015 	stw	r16,0(sp)
    7a90:	a0a1883a 	add	r16,r20,r2
    7a94:	dd400515 	stw	r21,20(sp)
    7a98:	857fff17 	ldw	r21,-4(r16)
    7a9c:	dc400115 	stw	r17,4(sp)
    7aa0:	dfc00615 	stw	ra,24(sp)
    7aa4:	a809883a 	mov	r4,r21
    7aa8:	2823883a 	mov	r17,r5
    7aac:	dcc00315 	stw	r19,12(sp)
    7ab0:	dc800215 	stw	r18,8(sp)
    7ab4:	00078600 	call	7860 <__hi0bits>
    7ab8:	100b883a 	mov	r5,r2
    7abc:	00800804 	movi	r2,32
    7ac0:	1145c83a 	sub	r2,r2,r5
    7ac4:	88800015 	stw	r2,0(r17)
    7ac8:	00800284 	movi	r2,10
    7acc:	80ffff04 	addi	r3,r16,-4
    7ad0:	11401416 	blt	r2,r5,7b24 <__b2d+0xb0>
    7ad4:	008002c4 	movi	r2,11
    7ad8:	1149c83a 	sub	r4,r2,r5
    7adc:	a0c02736 	bltu	r20,r3,7b7c <__b2d+0x108>
    7ae0:	000d883a 	mov	r6,zero
    7ae4:	28800544 	addi	r2,r5,21
    7ae8:	a906d83a 	srl	r3,r21,r4
    7aec:	a884983a 	sll	r2,r21,r2
    7af0:	1ccffc34 	orhi	r19,r3,16368
    7af4:	11a4b03a 	or	r18,r2,r6
    7af8:	9005883a 	mov	r2,r18
    7afc:	9807883a 	mov	r3,r19
    7b00:	dfc00617 	ldw	ra,24(sp)
    7b04:	dd400517 	ldw	r21,20(sp)
    7b08:	dd000417 	ldw	r20,16(sp)
    7b0c:	dcc00317 	ldw	r19,12(sp)
    7b10:	dc800217 	ldw	r18,8(sp)
    7b14:	dc400117 	ldw	r17,4(sp)
    7b18:	dc000017 	ldw	r16,0(sp)
    7b1c:	dec00704 	addi	sp,sp,28
    7b20:	f800283a 	ret
    7b24:	a0c00e36 	bltu	r20,r3,7b60 <__b2d+0xec>
    7b28:	293ffd44 	addi	r4,r5,-11
    7b2c:	000d883a 	mov	r6,zero
    7b30:	20000f26 	beq	r4,zero,7b70 <__b2d+0xfc>
    7b34:	00800804 	movi	r2,32
    7b38:	110bc83a 	sub	r5,r2,r4
    7b3c:	a0c01236 	bltu	r20,r3,7b88 <__b2d+0x114>
    7b40:	000f883a 	mov	r7,zero
    7b44:	a904983a 	sll	r2,r21,r4
    7b48:	3146d83a 	srl	r3,r6,r5
    7b4c:	3108983a 	sll	r4,r6,r4
    7b50:	108ffc34 	orhi	r2,r2,16368
    7b54:	18a6b03a 	or	r19,r3,r2
    7b58:	3924b03a 	or	r18,r7,r4
    7b5c:	003fe606 	br	7af8 <__b2d+0x84>
    7b60:	293ffd44 	addi	r4,r5,-11
    7b64:	81bffe17 	ldw	r6,-8(r16)
    7b68:	80fffe04 	addi	r3,r16,-8
    7b6c:	203ff11e 	bne	r4,zero,7b34 <__b2d+0xc0>
    7b70:	accffc34 	orhi	r19,r21,16368
    7b74:	3025883a 	mov	r18,r6
    7b78:	003fdf06 	br	7af8 <__b2d+0x84>
    7b7c:	18bfff17 	ldw	r2,-4(r3)
    7b80:	110cd83a 	srl	r6,r2,r4
    7b84:	003fd706 	br	7ae4 <__b2d+0x70>
    7b88:	18bfff17 	ldw	r2,-4(r3)
    7b8c:	114ed83a 	srl	r7,r2,r5
    7b90:	003fec06 	br	7b44 <__b2d+0xd0>

00007b94 <__ratio>:
    7b94:	defff904 	addi	sp,sp,-28
    7b98:	dc400215 	stw	r17,8(sp)
    7b9c:	2823883a 	mov	r17,r5
    7ba0:	d80b883a 	mov	r5,sp
    7ba4:	dfc00615 	stw	ra,24(sp)
    7ba8:	dd000515 	stw	r20,20(sp)
    7bac:	dcc00415 	stw	r19,16(sp)
    7bb0:	dc800315 	stw	r18,12(sp)
    7bb4:	2025883a 	mov	r18,r4
    7bb8:	0007a740 	call	7a74 <__b2d>
    7bbc:	8809883a 	mov	r4,r17
    7bc0:	d9400104 	addi	r5,sp,4
    7bc4:	1027883a 	mov	r19,r2
    7bc8:	1829883a 	mov	r20,r3
    7bcc:	0007a740 	call	7a74 <__b2d>
    7bd0:	89000417 	ldw	r4,16(r17)
    7bd4:	91c00417 	ldw	r7,16(r18)
    7bd8:	d9800117 	ldw	r6,4(sp)
    7bdc:	180b883a 	mov	r5,r3
    7be0:	390fc83a 	sub	r7,r7,r4
    7be4:	1009883a 	mov	r4,r2
    7be8:	d8800017 	ldw	r2,0(sp)
    7bec:	380e917a 	slli	r7,r7,5
    7bf0:	2011883a 	mov	r8,r4
    7bf4:	1185c83a 	sub	r2,r2,r6
    7bf8:	11c5883a 	add	r2,r2,r7
    7bfc:	1006953a 	slli	r3,r2,20
    7c00:	2813883a 	mov	r9,r5
    7c04:	00800d0e 	bge	zero,r2,7c3c <__ratio+0xa8>
    7c08:	1d29883a 	add	r20,r3,r20
    7c0c:	a00b883a 	mov	r5,r20
    7c10:	480f883a 	mov	r7,r9
    7c14:	9809883a 	mov	r4,r19
    7c18:	400d883a 	mov	r6,r8
    7c1c:	000a4ec0 	call	a4ec <__divdf3>
    7c20:	dfc00617 	ldw	ra,24(sp)
    7c24:	dd000517 	ldw	r20,20(sp)
    7c28:	dcc00417 	ldw	r19,16(sp)
    7c2c:	dc800317 	ldw	r18,12(sp)
    7c30:	dc400217 	ldw	r17,8(sp)
    7c34:	dec00704 	addi	sp,sp,28
    7c38:	f800283a 	ret
    7c3c:	28d3c83a 	sub	r9,r5,r3
    7c40:	003ff206 	br	7c0c <__ratio+0x78>

00007c44 <_mprec_log10>:
    7c44:	defffe04 	addi	sp,sp,-8
    7c48:	008005c4 	movi	r2,23
    7c4c:	dc000015 	stw	r16,0(sp)
    7c50:	dfc00115 	stw	ra,4(sp)
    7c54:	2021883a 	mov	r16,r4
    7c58:	11000c16 	blt	r2,r4,7c8c <_mprec_log10+0x48>
    7c5c:	200490fa 	slli	r2,r4,3
    7c60:	00c00074 	movhi	r3,1
    7c64:	18df2e04 	addi	r3,r3,31928
    7c68:	10c5883a 	add	r2,r2,r3
    7c6c:	12400117 	ldw	r9,4(r2)
    7c70:	12000017 	ldw	r8,0(r2)
    7c74:	4807883a 	mov	r3,r9
    7c78:	4005883a 	mov	r2,r8
    7c7c:	dfc00117 	ldw	ra,4(sp)
    7c80:	dc000017 	ldw	r16,0(sp)
    7c84:	dec00204 	addi	sp,sp,8
    7c88:	f800283a 	ret
    7c8c:	0011883a 	mov	r8,zero
    7c90:	024ffc34 	movhi	r9,16368
    7c94:	0005883a 	mov	r2,zero
    7c98:	00d00934 	movhi	r3,16420
    7c9c:	480b883a 	mov	r5,r9
    7ca0:	4009883a 	mov	r4,r8
    7ca4:	180f883a 	mov	r7,r3
    7ca8:	100d883a 	mov	r6,r2
    7cac:	000a1280 	call	a128 <__muldf3>
    7cb0:	843fffc4 	addi	r16,r16,-1
    7cb4:	1011883a 	mov	r8,r2
    7cb8:	1813883a 	mov	r9,r3
    7cbc:	803ff51e 	bne	r16,zero,7c94 <_mprec_log10+0x50>
    7cc0:	4005883a 	mov	r2,r8
    7cc4:	4807883a 	mov	r3,r9
    7cc8:	dfc00117 	ldw	ra,4(sp)
    7ccc:	dc000017 	ldw	r16,0(sp)
    7cd0:	dec00204 	addi	sp,sp,8
    7cd4:	f800283a 	ret

00007cd8 <__copybits>:
    7cd8:	297fffc4 	addi	r5,r5,-1
    7cdc:	30800417 	ldw	r2,16(r6)
    7ce0:	280bd17a 	srai	r5,r5,5
    7ce4:	31800504 	addi	r6,r6,20
    7ce8:	1085883a 	add	r2,r2,r2
    7cec:	294b883a 	add	r5,r5,r5
    7cf0:	294b883a 	add	r5,r5,r5
    7cf4:	1085883a 	add	r2,r2,r2
    7cf8:	290b883a 	add	r5,r5,r4
    7cfc:	3087883a 	add	r3,r6,r2
    7d00:	29400104 	addi	r5,r5,4
    7d04:	30c0052e 	bgeu	r6,r3,7d1c <__copybits+0x44>
    7d08:	30800017 	ldw	r2,0(r6)
    7d0c:	31800104 	addi	r6,r6,4
    7d10:	20800015 	stw	r2,0(r4)
    7d14:	21000104 	addi	r4,r4,4
    7d18:	30fffb36 	bltu	r6,r3,7d08 <__copybits+0x30>
    7d1c:	2140032e 	bgeu	r4,r5,7d2c <__copybits+0x54>
    7d20:	20000015 	stw	zero,0(r4)
    7d24:	21000104 	addi	r4,r4,4
    7d28:	217ffd36 	bltu	r4,r5,7d20 <__copybits+0x48>
    7d2c:	f800283a 	ret

00007d30 <__any_on>:
    7d30:	20800417 	ldw	r2,16(r4)
    7d34:	2807d17a 	srai	r3,r5,5
    7d38:	21000504 	addi	r4,r4,20
    7d3c:	10c00d0e 	bge	r2,r3,7d74 <__any_on+0x44>
    7d40:	1085883a 	add	r2,r2,r2
    7d44:	1085883a 	add	r2,r2,r2
    7d48:	208d883a 	add	r6,r4,r2
    7d4c:	2180182e 	bgeu	r4,r6,7db0 <__any_on+0x80>
    7d50:	30bfff17 	ldw	r2,-4(r6)
    7d54:	30ffff04 	addi	r3,r6,-4
    7d58:	1000041e 	bne	r2,zero,7d6c <__any_on+0x3c>
    7d5c:	20c0142e 	bgeu	r4,r3,7db0 <__any_on+0x80>
    7d60:	18ffff04 	addi	r3,r3,-4
    7d64:	18800017 	ldw	r2,0(r3)
    7d68:	103ffc26 	beq	r2,zero,7d5c <__any_on+0x2c>
    7d6c:	00800044 	movi	r2,1
    7d70:	f800283a 	ret
    7d74:	18800a0e 	bge	r3,r2,7da0 <__any_on+0x70>
    7d78:	294007cc 	andi	r5,r5,31
    7d7c:	28000826 	beq	r5,zero,7da0 <__any_on+0x70>
    7d80:	18c5883a 	add	r2,r3,r3
    7d84:	1085883a 	add	r2,r2,r2
    7d88:	208d883a 	add	r6,r4,r2
    7d8c:	30c00017 	ldw	r3,0(r6)
    7d90:	1944d83a 	srl	r2,r3,r5
    7d94:	1144983a 	sll	r2,r2,r5
    7d98:	18bff41e 	bne	r3,r2,7d6c <__any_on+0x3c>
    7d9c:	003feb06 	br	7d4c <__any_on+0x1c>
    7da0:	18c5883a 	add	r2,r3,r3
    7da4:	1085883a 	add	r2,r2,r2
    7da8:	208d883a 	add	r6,r4,r2
    7dac:	003fe706 	br	7d4c <__any_on+0x1c>
    7db0:	0005883a 	mov	r2,zero
    7db4:	f800283a 	ret

00007db8 <_Balloc>:
    7db8:	20c01317 	ldw	r3,76(r4)
    7dbc:	defffb04 	addi	sp,sp,-20
    7dc0:	dcc00315 	stw	r19,12(sp)
    7dc4:	dc800215 	stw	r18,8(sp)
    7dc8:	dfc00415 	stw	ra,16(sp)
    7dcc:	2825883a 	mov	r18,r5
    7dd0:	dc400115 	stw	r17,4(sp)
    7dd4:	dc000015 	stw	r16,0(sp)
    7dd8:	2027883a 	mov	r19,r4
    7ddc:	01800404 	movi	r6,16
    7de0:	01400104 	movi	r5,4
    7de4:	18001726 	beq	r3,zero,7e44 <_Balloc+0x8c>
    7de8:	01400044 	movi	r5,1
    7dec:	9485883a 	add	r2,r18,r18
    7df0:	2ca2983a 	sll	r17,r5,r18
    7df4:	1085883a 	add	r2,r2,r2
    7df8:	10c7883a 	add	r3,r2,r3
    7dfc:	1c000017 	ldw	r16,0(r3)
    7e00:	8c4d883a 	add	r6,r17,r17
    7e04:	318d883a 	add	r6,r6,r6
    7e08:	9809883a 	mov	r4,r19
    7e0c:	31800504 	addi	r6,r6,20
    7e10:	80001226 	beq	r16,zero,7e5c <_Balloc+0xa4>
    7e14:	80800017 	ldw	r2,0(r16)
    7e18:	18800015 	stw	r2,0(r3)
    7e1c:	80000415 	stw	zero,16(r16)
    7e20:	80000315 	stw	zero,12(r16)
    7e24:	8005883a 	mov	r2,r16
    7e28:	dfc00417 	ldw	ra,16(sp)
    7e2c:	dcc00317 	ldw	r19,12(sp)
    7e30:	dc800217 	ldw	r18,8(sp)
    7e34:	dc400117 	ldw	r17,4(sp)
    7e38:	dc000017 	ldw	r16,0(sp)
    7e3c:	dec00504 	addi	sp,sp,20
    7e40:	f800283a 	ret
    7e44:	00091800 	call	9180 <_calloc_r>
    7e48:	1007883a 	mov	r3,r2
    7e4c:	0021883a 	mov	r16,zero
    7e50:	98801315 	stw	r2,76(r19)
    7e54:	103fe41e 	bne	r2,zero,7de8 <_Balloc+0x30>
    7e58:	003ff206 	br	7e24 <_Balloc+0x6c>
    7e5c:	00091800 	call	9180 <_calloc_r>
    7e60:	103ff026 	beq	r2,zero,7e24 <_Balloc+0x6c>
    7e64:	1021883a 	mov	r16,r2
    7e68:	14800115 	stw	r18,4(r2)
    7e6c:	14400215 	stw	r17,8(r2)
    7e70:	003fea06 	br	7e1c <_Balloc+0x64>

00007e74 <__d2b>:
    7e74:	defff504 	addi	sp,sp,-44
    7e78:	dcc00515 	stw	r19,20(sp)
    7e7c:	04c00044 	movi	r19,1
    7e80:	dc000215 	stw	r16,8(sp)
    7e84:	2821883a 	mov	r16,r5
    7e88:	980b883a 	mov	r5,r19
    7e8c:	ddc00915 	stw	r23,36(sp)
    7e90:	dd800815 	stw	r22,32(sp)
    7e94:	dd400715 	stw	r21,28(sp)
    7e98:	dd000615 	stw	r20,24(sp)
    7e9c:	dc800415 	stw	r18,16(sp)
    7ea0:	dc400315 	stw	r17,12(sp)
    7ea4:	dfc00a15 	stw	ra,40(sp)
    7ea8:	3023883a 	mov	r17,r6
    7eac:	382d883a 	mov	r22,r7
    7eb0:	ddc00b17 	ldw	r23,44(sp)
    7eb4:	0007db80 	call	7db8 <_Balloc>
    7eb8:	1025883a 	mov	r18,r2
    7ebc:	00a00034 	movhi	r2,32768
    7ec0:	10bfffc4 	addi	r2,r2,-1
    7ec4:	8888703a 	and	r4,r17,r2
    7ec8:	202ad53a 	srli	r21,r4,20
    7ecc:	00800434 	movhi	r2,16
    7ed0:	10bfffc4 	addi	r2,r2,-1
    7ed4:	8886703a 	and	r3,r17,r2
    7ed8:	a829003a 	cmpeq	r20,r21,zero
    7edc:	800b883a 	mov	r5,r16
    7ee0:	d8c00115 	stw	r3,4(sp)
    7ee4:	94000504 	addi	r16,r18,20
    7ee8:	a000021e 	bne	r20,zero,7ef4 <__d2b+0x80>
    7eec:	18c00434 	orhi	r3,r3,16
    7ef0:	d8c00115 	stw	r3,4(sp)
    7ef4:	28002726 	beq	r5,zero,7f94 <__d2b+0x120>
    7ef8:	d809883a 	mov	r4,sp
    7efc:	d9400015 	stw	r5,0(sp)
    7f00:	00078d00 	call	78d0 <__lo0bits>
    7f04:	100d883a 	mov	r6,r2
    7f08:	10003526 	beq	r2,zero,7fe0 <__d2b+0x16c>
    7f0c:	d8c00117 	ldw	r3,4(sp)
    7f10:	00800804 	movi	r2,32
    7f14:	1185c83a 	sub	r2,r2,r6
    7f18:	d9000017 	ldw	r4,0(sp)
    7f1c:	1886983a 	sll	r3,r3,r2
    7f20:	1906b03a 	or	r3,r3,r4
    7f24:	90c00515 	stw	r3,20(r18)
    7f28:	d8c00117 	ldw	r3,4(sp)
    7f2c:	1986d83a 	srl	r3,r3,r6
    7f30:	d8c00115 	stw	r3,4(sp)
    7f34:	180b003a 	cmpeq	r5,r3,zero
    7f38:	00800084 	movi	r2,2
    7f3c:	114bc83a 	sub	r5,r2,r5
    7f40:	80c00115 	stw	r3,4(r16)
    7f44:	91400415 	stw	r5,16(r18)
    7f48:	a0001a1e 	bne	r20,zero,7fb4 <__d2b+0x140>
    7f4c:	3545883a 	add	r2,r6,r21
    7f50:	10bef344 	addi	r2,r2,-1075
    7f54:	00c00d44 	movi	r3,53
    7f58:	b0800015 	stw	r2,0(r22)
    7f5c:	1987c83a 	sub	r3,r3,r6
    7f60:	b8c00015 	stw	r3,0(r23)
    7f64:	9005883a 	mov	r2,r18
    7f68:	dfc00a17 	ldw	ra,40(sp)
    7f6c:	ddc00917 	ldw	r23,36(sp)
    7f70:	dd800817 	ldw	r22,32(sp)
    7f74:	dd400717 	ldw	r21,28(sp)
    7f78:	dd000617 	ldw	r20,24(sp)
    7f7c:	dcc00517 	ldw	r19,20(sp)
    7f80:	dc800417 	ldw	r18,16(sp)
    7f84:	dc400317 	ldw	r17,12(sp)
    7f88:	dc000217 	ldw	r16,8(sp)
    7f8c:	dec00b04 	addi	sp,sp,44
    7f90:	f800283a 	ret
    7f94:	d9000104 	addi	r4,sp,4
    7f98:	00078d00 	call	78d0 <__lo0bits>
    7f9c:	11800804 	addi	r6,r2,32
    7fa0:	d8800117 	ldw	r2,4(sp)
    7fa4:	94c00415 	stw	r19,16(r18)
    7fa8:	980b883a 	mov	r5,r19
    7fac:	90800515 	stw	r2,20(r18)
    7fb0:	a03fe626 	beq	r20,zero,7f4c <__d2b+0xd8>
    7fb4:	2945883a 	add	r2,r5,r5
    7fb8:	1085883a 	add	r2,r2,r2
    7fbc:	1405883a 	add	r2,r2,r16
    7fc0:	113fff17 	ldw	r4,-4(r2)
    7fc4:	30fef384 	addi	r3,r6,-1074
    7fc8:	2820917a 	slli	r16,r5,5
    7fcc:	b0c00015 	stw	r3,0(r22)
    7fd0:	00078600 	call	7860 <__hi0bits>
    7fd4:	80a1c83a 	sub	r16,r16,r2
    7fd8:	bc000015 	stw	r16,0(r23)
    7fdc:	003fe106 	br	7f64 <__d2b+0xf0>
    7fe0:	d8800017 	ldw	r2,0(sp)
    7fe4:	90800515 	stw	r2,20(r18)
    7fe8:	d8c00117 	ldw	r3,4(sp)
    7fec:	003fd106 	br	7f34 <__d2b+0xc0>

00007ff0 <__mdiff>:
    7ff0:	defffb04 	addi	sp,sp,-20
    7ff4:	dc000015 	stw	r16,0(sp)
    7ff8:	2821883a 	mov	r16,r5
    7ffc:	dc800215 	stw	r18,8(sp)
    8000:	300b883a 	mov	r5,r6
    8004:	2025883a 	mov	r18,r4
    8008:	8009883a 	mov	r4,r16
    800c:	dc400115 	stw	r17,4(sp)
    8010:	dfc00415 	stw	ra,16(sp)
    8014:	dcc00315 	stw	r19,12(sp)
    8018:	3023883a 	mov	r17,r6
    801c:	00079940 	call	7994 <__mcmp>
    8020:	10004226 	beq	r2,zero,812c <__mdiff+0x13c>
    8024:	10005016 	blt	r2,zero,8168 <__mdiff+0x178>
    8028:	0027883a 	mov	r19,zero
    802c:	81400117 	ldw	r5,4(r16)
    8030:	9009883a 	mov	r4,r18
    8034:	0007db80 	call	7db8 <_Balloc>
    8038:	1019883a 	mov	r12,r2
    803c:	82800417 	ldw	r10,16(r16)
    8040:	88800417 	ldw	r2,16(r17)
    8044:	81800504 	addi	r6,r16,20
    8048:	5287883a 	add	r3,r10,r10
    804c:	1085883a 	add	r2,r2,r2
    8050:	18c7883a 	add	r3,r3,r3
    8054:	1085883a 	add	r2,r2,r2
    8058:	8a000504 	addi	r8,r17,20
    805c:	64c00315 	stw	r19,12(r12)
    8060:	30db883a 	add	r13,r6,r3
    8064:	4097883a 	add	r11,r8,r2
    8068:	61c00504 	addi	r7,r12,20
    806c:	0013883a 	mov	r9,zero
    8070:	31000017 	ldw	r4,0(r6)
    8074:	41400017 	ldw	r5,0(r8)
    8078:	42000104 	addi	r8,r8,4
    807c:	20bfffcc 	andi	r2,r4,65535
    8080:	28ffffcc 	andi	r3,r5,65535
    8084:	10c5c83a 	sub	r2,r2,r3
    8088:	1245883a 	add	r2,r2,r9
    808c:	2008d43a 	srli	r4,r4,16
    8090:	280ad43a 	srli	r5,r5,16
    8094:	1007d43a 	srai	r3,r2,16
    8098:	3880000d 	sth	r2,0(r7)
    809c:	2149c83a 	sub	r4,r4,r5
    80a0:	20c9883a 	add	r4,r4,r3
    80a4:	3900008d 	sth	r4,2(r7)
    80a8:	31800104 	addi	r6,r6,4
    80ac:	39c00104 	addi	r7,r7,4
    80b0:	2013d43a 	srai	r9,r4,16
    80b4:	42ffee36 	bltu	r8,r11,8070 <__mdiff+0x80>
    80b8:	33400c2e 	bgeu	r6,r13,80ec <__mdiff+0xfc>
    80bc:	30800017 	ldw	r2,0(r6)
    80c0:	31800104 	addi	r6,r6,4
    80c4:	10ffffcc 	andi	r3,r2,65535
    80c8:	1a47883a 	add	r3,r3,r9
    80cc:	1004d43a 	srli	r2,r2,16
    80d0:	1809d43a 	srai	r4,r3,16
    80d4:	38c0000d 	sth	r3,0(r7)
    80d8:	1105883a 	add	r2,r2,r4
    80dc:	3880008d 	sth	r2,2(r7)
    80e0:	1013d43a 	srai	r9,r2,16
    80e4:	39c00104 	addi	r7,r7,4
    80e8:	337ff436 	bltu	r6,r13,80bc <__mdiff+0xcc>
    80ec:	38bfff17 	ldw	r2,-4(r7)
    80f0:	38ffff04 	addi	r3,r7,-4
    80f4:	1000041e 	bne	r2,zero,8108 <__mdiff+0x118>
    80f8:	18ffff04 	addi	r3,r3,-4
    80fc:	18800017 	ldw	r2,0(r3)
    8100:	52bfffc4 	addi	r10,r10,-1
    8104:	103ffc26 	beq	r2,zero,80f8 <__mdiff+0x108>
    8108:	6005883a 	mov	r2,r12
    810c:	62800415 	stw	r10,16(r12)
    8110:	dfc00417 	ldw	ra,16(sp)
    8114:	dcc00317 	ldw	r19,12(sp)
    8118:	dc800217 	ldw	r18,8(sp)
    811c:	dc400117 	ldw	r17,4(sp)
    8120:	dc000017 	ldw	r16,0(sp)
    8124:	dec00504 	addi	sp,sp,20
    8128:	f800283a 	ret
    812c:	9009883a 	mov	r4,r18
    8130:	000b883a 	mov	r5,zero
    8134:	0007db80 	call	7db8 <_Balloc>
    8138:	1019883a 	mov	r12,r2
    813c:	00800044 	movi	r2,1
    8140:	60800415 	stw	r2,16(r12)
    8144:	6005883a 	mov	r2,r12
    8148:	60000515 	stw	zero,20(r12)
    814c:	dfc00417 	ldw	ra,16(sp)
    8150:	dcc00317 	ldw	r19,12(sp)
    8154:	dc800217 	ldw	r18,8(sp)
    8158:	dc400117 	ldw	r17,4(sp)
    815c:	dc000017 	ldw	r16,0(sp)
    8160:	dec00504 	addi	sp,sp,20
    8164:	f800283a 	ret
    8168:	880d883a 	mov	r6,r17
    816c:	04c00044 	movi	r19,1
    8170:	8023883a 	mov	r17,r16
    8174:	3021883a 	mov	r16,r6
    8178:	003fac06 	br	802c <__mdiff+0x3c>

0000817c <__lshift>:
    817c:	defff904 	addi	sp,sp,-28
    8180:	28800417 	ldw	r2,16(r5)
    8184:	dc000015 	stw	r16,0(sp)
    8188:	3021d17a 	srai	r16,r6,5
    818c:	28c00217 	ldw	r3,8(r5)
    8190:	10800044 	addi	r2,r2,1
    8194:	dc400115 	stw	r17,4(sp)
    8198:	80a3883a 	add	r17,r16,r2
    819c:	dd400515 	stw	r21,20(sp)
    81a0:	dd000415 	stw	r20,16(sp)
    81a4:	dc800215 	stw	r18,8(sp)
    81a8:	dfc00615 	stw	ra,24(sp)
    81ac:	2825883a 	mov	r18,r5
    81b0:	dcc00315 	stw	r19,12(sp)
    81b4:	3029883a 	mov	r20,r6
    81b8:	202b883a 	mov	r21,r4
    81bc:	29400117 	ldw	r5,4(r5)
    81c0:	1c40030e 	bge	r3,r17,81d0 <__lshift+0x54>
    81c4:	18c7883a 	add	r3,r3,r3
    81c8:	29400044 	addi	r5,r5,1
    81cc:	1c7ffd16 	blt	r3,r17,81c4 <__lshift+0x48>
    81d0:	a809883a 	mov	r4,r21
    81d4:	0007db80 	call	7db8 <_Balloc>
    81d8:	1027883a 	mov	r19,r2
    81dc:	11400504 	addi	r5,r2,20
    81e0:	0400090e 	bge	zero,r16,8208 <__lshift+0x8c>
    81e4:	2805883a 	mov	r2,r5
    81e8:	0007883a 	mov	r3,zero
    81ec:	18c00044 	addi	r3,r3,1
    81f0:	10000015 	stw	zero,0(r2)
    81f4:	10800104 	addi	r2,r2,4
    81f8:	80fffc1e 	bne	r16,r3,81ec <__lshift+0x70>
    81fc:	8405883a 	add	r2,r16,r16
    8200:	1085883a 	add	r2,r2,r2
    8204:	288b883a 	add	r5,r5,r2
    8208:	90800417 	ldw	r2,16(r18)
    820c:	91000504 	addi	r4,r18,20
    8210:	a18007cc 	andi	r6,r20,31
    8214:	1085883a 	add	r2,r2,r2
    8218:	1085883a 	add	r2,r2,r2
    821c:	208f883a 	add	r7,r4,r2
    8220:	30001e26 	beq	r6,zero,829c <__lshift+0x120>
    8224:	00800804 	movi	r2,32
    8228:	1191c83a 	sub	r8,r2,r6
    822c:	0007883a 	mov	r3,zero
    8230:	20800017 	ldw	r2,0(r4)
    8234:	1184983a 	sll	r2,r2,r6
    8238:	1884b03a 	or	r2,r3,r2
    823c:	28800015 	stw	r2,0(r5)
    8240:	20c00017 	ldw	r3,0(r4)
    8244:	21000104 	addi	r4,r4,4
    8248:	29400104 	addi	r5,r5,4
    824c:	1a06d83a 	srl	r3,r3,r8
    8250:	21fff736 	bltu	r4,r7,8230 <__lshift+0xb4>
    8254:	28c00015 	stw	r3,0(r5)
    8258:	18000126 	beq	r3,zero,8260 <__lshift+0xe4>
    825c:	8c400044 	addi	r17,r17,1
    8260:	88bfffc4 	addi	r2,r17,-1
    8264:	98800415 	stw	r2,16(r19)
    8268:	a809883a 	mov	r4,r21
    826c:	900b883a 	mov	r5,r18
    8270:	00078380 	call	7838 <_Bfree>
    8274:	9805883a 	mov	r2,r19
    8278:	dfc00617 	ldw	ra,24(sp)
    827c:	dd400517 	ldw	r21,20(sp)
    8280:	dd000417 	ldw	r20,16(sp)
    8284:	dcc00317 	ldw	r19,12(sp)
    8288:	dc800217 	ldw	r18,8(sp)
    828c:	dc400117 	ldw	r17,4(sp)
    8290:	dc000017 	ldw	r16,0(sp)
    8294:	dec00704 	addi	sp,sp,28
    8298:	f800283a 	ret
    829c:	20800017 	ldw	r2,0(r4)
    82a0:	21000104 	addi	r4,r4,4
    82a4:	28800015 	stw	r2,0(r5)
    82a8:	29400104 	addi	r5,r5,4
    82ac:	21ffec2e 	bgeu	r4,r7,8260 <__lshift+0xe4>
    82b0:	20800017 	ldw	r2,0(r4)
    82b4:	21000104 	addi	r4,r4,4
    82b8:	28800015 	stw	r2,0(r5)
    82bc:	29400104 	addi	r5,r5,4
    82c0:	21fff636 	bltu	r4,r7,829c <__lshift+0x120>
    82c4:	003fe606 	br	8260 <__lshift+0xe4>

000082c8 <__multiply>:
    82c8:	defff904 	addi	sp,sp,-28
    82cc:	dcc00315 	stw	r19,12(sp)
    82d0:	dc800215 	stw	r18,8(sp)
    82d4:	2cc00417 	ldw	r19,16(r5)
    82d8:	34800417 	ldw	r18,16(r6)
    82dc:	dd000415 	stw	r20,16(sp)
    82e0:	dc400115 	stw	r17,4(sp)
    82e4:	dfc00615 	stw	ra,24(sp)
    82e8:	dd400515 	stw	r21,20(sp)
    82ec:	dc000015 	stw	r16,0(sp)
    82f0:	2823883a 	mov	r17,r5
    82f4:	3029883a 	mov	r20,r6
    82f8:	9c80040e 	bge	r19,r18,830c <__multiply+0x44>
    82fc:	9027883a 	mov	r19,r18
    8300:	2c800417 	ldw	r18,16(r5)
    8304:	2829883a 	mov	r20,r5
    8308:	3023883a 	mov	r17,r6
    830c:	88800217 	ldw	r2,8(r17)
    8310:	9ca1883a 	add	r16,r19,r18
    8314:	89400117 	ldw	r5,4(r17)
    8318:	1400010e 	bge	r2,r16,8320 <__multiply+0x58>
    831c:	29400044 	addi	r5,r5,1
    8320:	0007db80 	call	7db8 <_Balloc>
    8324:	102b883a 	mov	r21,r2
    8328:	8405883a 	add	r2,r16,r16
    832c:	1085883a 	add	r2,r2,r2
    8330:	a9000504 	addi	r4,r21,20
    8334:	209d883a 	add	r14,r4,r2
    8338:	2380042e 	bgeu	r4,r14,834c <__multiply+0x84>
    833c:	2005883a 	mov	r2,r4
    8340:	10000015 	stw	zero,0(r2)
    8344:	10800104 	addi	r2,r2,4
    8348:	13bffd36 	bltu	r2,r14,8340 <__multiply+0x78>
    834c:	9485883a 	add	r2,r18,r18
    8350:	9cc7883a 	add	r3,r19,r19
    8354:	a1800504 	addi	r6,r20,20
    8358:	1085883a 	add	r2,r2,r2
    835c:	8b400504 	addi	r13,r17,20
    8360:	18c7883a 	add	r3,r3,r3
    8364:	309f883a 	add	r15,r6,r2
    8368:	68d7883a 	add	r11,r13,r3
    836c:	33c03b2e 	bgeu	r6,r15,845c <__multiply+0x194>
    8370:	2019883a 	mov	r12,r4
    8374:	30800017 	ldw	r2,0(r6)
    8378:	127fffcc 	andi	r9,r2,65535
    837c:	48001826 	beq	r9,zero,83e0 <__multiply+0x118>
    8380:	6811883a 	mov	r8,r13
    8384:	600f883a 	mov	r7,r12
    8388:	0015883a 	mov	r10,zero
    838c:	40c00017 	ldw	r3,0(r8)
    8390:	39400017 	ldw	r5,0(r7)
    8394:	42000104 	addi	r8,r8,4
    8398:	193fffcc 	andi	r4,r3,65535
    839c:	4909383a 	mul	r4,r9,r4
    83a0:	1806d43a 	srli	r3,r3,16
    83a4:	28bfffcc 	andi	r2,r5,65535
    83a8:	5085883a 	add	r2,r10,r2
    83ac:	2089883a 	add	r4,r4,r2
    83b0:	48c7383a 	mul	r3,r9,r3
    83b4:	280ad43a 	srli	r5,r5,16
    83b8:	2004d43a 	srli	r2,r4,16
    83bc:	3900000d 	sth	r4,0(r7)
    83c0:	1947883a 	add	r3,r3,r5
    83c4:	10c5883a 	add	r2,r2,r3
    83c8:	3880008d 	sth	r2,2(r7)
    83cc:	1014d43a 	srli	r10,r2,16
    83d0:	39c00104 	addi	r7,r7,4
    83d4:	42ffed36 	bltu	r8,r11,838c <__multiply+0xc4>
    83d8:	3a800015 	stw	r10,0(r7)
    83dc:	30800017 	ldw	r2,0(r6)
    83e0:	1012d43a 	srli	r9,r2,16
    83e4:	48001926 	beq	r9,zero,844c <__multiply+0x184>
    83e8:	60800017 	ldw	r2,0(r12)
    83ec:	6811883a 	mov	r8,r13
    83f0:	600f883a 	mov	r7,r12
    83f4:	0015883a 	mov	r10,zero
    83f8:	100b883a 	mov	r5,r2
    83fc:	41000017 	ldw	r4,0(r8)
    8400:	2806d43a 	srli	r3,r5,16
    8404:	3880000d 	sth	r2,0(r7)
    8408:	20bfffcc 	andi	r2,r4,65535
    840c:	4885383a 	mul	r2,r9,r2
    8410:	50c7883a 	add	r3,r10,r3
    8414:	2008d43a 	srli	r4,r4,16
    8418:	10c5883a 	add	r2,r2,r3
    841c:	3880008d 	sth	r2,2(r7)
    8420:	39c00104 	addi	r7,r7,4
    8424:	39400017 	ldw	r5,0(r7)
    8428:	4909383a 	mul	r4,r9,r4
    842c:	1004d43a 	srli	r2,r2,16
    8430:	28ffffcc 	andi	r3,r5,65535
    8434:	20c9883a 	add	r4,r4,r3
    8438:	1105883a 	add	r2,r2,r4
    843c:	42000104 	addi	r8,r8,4
    8440:	1014d43a 	srli	r10,r2,16
    8444:	42ffed36 	bltu	r8,r11,83fc <__multiply+0x134>
    8448:	38800015 	stw	r2,0(r7)
    844c:	31800104 	addi	r6,r6,4
    8450:	33c0022e 	bgeu	r6,r15,845c <__multiply+0x194>
    8454:	63000104 	addi	r12,r12,4
    8458:	003fc606 	br	8374 <__multiply+0xac>
    845c:	0400090e 	bge	zero,r16,8484 <__multiply+0x1bc>
    8460:	70bfff17 	ldw	r2,-4(r14)
    8464:	70ffff04 	addi	r3,r14,-4
    8468:	10000326 	beq	r2,zero,8478 <__multiply+0x1b0>
    846c:	00000506 	br	8484 <__multiply+0x1bc>
    8470:	18800017 	ldw	r2,0(r3)
    8474:	1000031e 	bne	r2,zero,8484 <__multiply+0x1bc>
    8478:	843fffc4 	addi	r16,r16,-1
    847c:	18ffff04 	addi	r3,r3,-4
    8480:	803ffb1e 	bne	r16,zero,8470 <__multiply+0x1a8>
    8484:	a805883a 	mov	r2,r21
    8488:	ac000415 	stw	r16,16(r21)
    848c:	dfc00617 	ldw	ra,24(sp)
    8490:	dd400517 	ldw	r21,20(sp)
    8494:	dd000417 	ldw	r20,16(sp)
    8498:	dcc00317 	ldw	r19,12(sp)
    849c:	dc800217 	ldw	r18,8(sp)
    84a0:	dc400117 	ldw	r17,4(sp)
    84a4:	dc000017 	ldw	r16,0(sp)
    84a8:	dec00704 	addi	sp,sp,28
    84ac:	f800283a 	ret

000084b0 <__i2b>:
    84b0:	defffd04 	addi	sp,sp,-12
    84b4:	dc000015 	stw	r16,0(sp)
    84b8:	04000044 	movi	r16,1
    84bc:	dc800115 	stw	r18,4(sp)
    84c0:	2825883a 	mov	r18,r5
    84c4:	800b883a 	mov	r5,r16
    84c8:	dfc00215 	stw	ra,8(sp)
    84cc:	0007db80 	call	7db8 <_Balloc>
    84d0:	14000415 	stw	r16,16(r2)
    84d4:	14800515 	stw	r18,20(r2)
    84d8:	dfc00217 	ldw	ra,8(sp)
    84dc:	dc800117 	ldw	r18,4(sp)
    84e0:	dc000017 	ldw	r16,0(sp)
    84e4:	dec00304 	addi	sp,sp,12
    84e8:	f800283a 	ret

000084ec <__multadd>:
    84ec:	defffa04 	addi	sp,sp,-24
    84f0:	dc800215 	stw	r18,8(sp)
    84f4:	2c800417 	ldw	r18,16(r5)
    84f8:	dd000415 	stw	r20,16(sp)
    84fc:	dcc00315 	stw	r19,12(sp)
    8500:	dc000015 	stw	r16,0(sp)
    8504:	dfc00515 	stw	ra,20(sp)
    8508:	3821883a 	mov	r16,r7
    850c:	dc400115 	stw	r17,4(sp)
    8510:	2827883a 	mov	r19,r5
    8514:	2029883a 	mov	r20,r4
    8518:	2a000504 	addi	r8,r5,20
    851c:	000f883a 	mov	r7,zero
    8520:	40800017 	ldw	r2,0(r8)
    8524:	39c00044 	addi	r7,r7,1
    8528:	10ffffcc 	andi	r3,r2,65535
    852c:	1987383a 	mul	r3,r3,r6
    8530:	1004d43a 	srli	r2,r2,16
    8534:	1c07883a 	add	r3,r3,r16
    8538:	180ad43a 	srli	r5,r3,16
    853c:	1185383a 	mul	r2,r2,r6
    8540:	18ffffcc 	andi	r3,r3,65535
    8544:	1145883a 	add	r2,r2,r5
    8548:	1008943a 	slli	r4,r2,16
    854c:	1020d43a 	srli	r16,r2,16
    8550:	20c9883a 	add	r4,r4,r3
    8554:	41000015 	stw	r4,0(r8)
    8558:	42000104 	addi	r8,r8,4
    855c:	3cbff016 	blt	r7,r18,8520 <__multadd+0x34>
    8560:	80000826 	beq	r16,zero,8584 <__multadd+0x98>
    8564:	98800217 	ldw	r2,8(r19)
    8568:	90800f0e 	bge	r18,r2,85a8 <__multadd+0xbc>
    856c:	9485883a 	add	r2,r18,r18
    8570:	1085883a 	add	r2,r2,r2
    8574:	14c5883a 	add	r2,r2,r19
    8578:	90c00044 	addi	r3,r18,1
    857c:	14000515 	stw	r16,20(r2)
    8580:	98c00415 	stw	r3,16(r19)
    8584:	9805883a 	mov	r2,r19
    8588:	dfc00517 	ldw	ra,20(sp)
    858c:	dd000417 	ldw	r20,16(sp)
    8590:	dcc00317 	ldw	r19,12(sp)
    8594:	dc800217 	ldw	r18,8(sp)
    8598:	dc400117 	ldw	r17,4(sp)
    859c:	dc000017 	ldw	r16,0(sp)
    85a0:	dec00604 	addi	sp,sp,24
    85a4:	f800283a 	ret
    85a8:	99400117 	ldw	r5,4(r19)
    85ac:	a009883a 	mov	r4,r20
    85b0:	29400044 	addi	r5,r5,1
    85b4:	0007db80 	call	7db8 <_Balloc>
    85b8:	99800417 	ldw	r6,16(r19)
    85bc:	99400304 	addi	r5,r19,12
    85c0:	11000304 	addi	r4,r2,12
    85c4:	318d883a 	add	r6,r6,r6
    85c8:	318d883a 	add	r6,r6,r6
    85cc:	31800204 	addi	r6,r6,8
    85d0:	1023883a 	mov	r17,r2
    85d4:	00076200 	call	7620 <memcpy>
    85d8:	980b883a 	mov	r5,r19
    85dc:	a009883a 	mov	r4,r20
    85e0:	00078380 	call	7838 <_Bfree>
    85e4:	8827883a 	mov	r19,r17
    85e8:	003fe006 	br	856c <__multadd+0x80>

000085ec <__pow5mult>:
    85ec:	defffa04 	addi	sp,sp,-24
    85f0:	308000cc 	andi	r2,r6,3
    85f4:	dd000415 	stw	r20,16(sp)
    85f8:	dcc00315 	stw	r19,12(sp)
    85fc:	dc000015 	stw	r16,0(sp)
    8600:	dfc00515 	stw	ra,20(sp)
    8604:	dc800215 	stw	r18,8(sp)
    8608:	dc400115 	stw	r17,4(sp)
    860c:	3021883a 	mov	r16,r6
    8610:	2027883a 	mov	r19,r4
    8614:	2829883a 	mov	r20,r5
    8618:	10002b1e 	bne	r2,zero,86c8 <__pow5mult+0xdc>
    861c:	8025d0ba 	srai	r18,r16,2
    8620:	90001b26 	beq	r18,zero,8690 <__pow5mult+0xa4>
    8624:	9c001217 	ldw	r16,72(r19)
    8628:	8000081e 	bne	r16,zero,864c <__pow5mult+0x60>
    862c:	00003006 	br	86f0 <__pow5mult+0x104>
    8630:	800b883a 	mov	r5,r16
    8634:	800d883a 	mov	r6,r16
    8638:	9809883a 	mov	r4,r19
    863c:	90001426 	beq	r18,zero,8690 <__pow5mult+0xa4>
    8640:	80800017 	ldw	r2,0(r16)
    8644:	10001b26 	beq	r2,zero,86b4 <__pow5mult+0xc8>
    8648:	1021883a 	mov	r16,r2
    864c:	9080004c 	andi	r2,r18,1
    8650:	1005003a 	cmpeq	r2,r2,zero
    8654:	9025d07a 	srai	r18,r18,1
    8658:	800d883a 	mov	r6,r16
    865c:	9809883a 	mov	r4,r19
    8660:	a00b883a 	mov	r5,r20
    8664:	103ff21e 	bne	r2,zero,8630 <__pow5mult+0x44>
    8668:	00082c80 	call	82c8 <__multiply>
    866c:	a00b883a 	mov	r5,r20
    8670:	9809883a 	mov	r4,r19
    8674:	1023883a 	mov	r17,r2
    8678:	00078380 	call	7838 <_Bfree>
    867c:	8829883a 	mov	r20,r17
    8680:	800b883a 	mov	r5,r16
    8684:	800d883a 	mov	r6,r16
    8688:	9809883a 	mov	r4,r19
    868c:	903fec1e 	bne	r18,zero,8640 <__pow5mult+0x54>
    8690:	a005883a 	mov	r2,r20
    8694:	dfc00517 	ldw	ra,20(sp)
    8698:	dd000417 	ldw	r20,16(sp)
    869c:	dcc00317 	ldw	r19,12(sp)
    86a0:	dc800217 	ldw	r18,8(sp)
    86a4:	dc400117 	ldw	r17,4(sp)
    86a8:	dc000017 	ldw	r16,0(sp)
    86ac:	dec00604 	addi	sp,sp,24
    86b0:	f800283a 	ret
    86b4:	00082c80 	call	82c8 <__multiply>
    86b8:	80800015 	stw	r2,0(r16)
    86bc:	1021883a 	mov	r16,r2
    86c0:	10000015 	stw	zero,0(r2)
    86c4:	003fe106 	br	864c <__pow5mult+0x60>
    86c8:	1085883a 	add	r2,r2,r2
    86cc:	00c00074 	movhi	r3,1
    86d0:	18df7404 	addi	r3,r3,32208
    86d4:	1085883a 	add	r2,r2,r2
    86d8:	10c5883a 	add	r2,r2,r3
    86dc:	11bfff17 	ldw	r6,-4(r2)
    86e0:	000f883a 	mov	r7,zero
    86e4:	00084ec0 	call	84ec <__multadd>
    86e8:	1029883a 	mov	r20,r2
    86ec:	003fcb06 	br	861c <__pow5mult+0x30>
    86f0:	9809883a 	mov	r4,r19
    86f4:	01409c44 	movi	r5,625
    86f8:	00084b00 	call	84b0 <__i2b>
    86fc:	98801215 	stw	r2,72(r19)
    8700:	1021883a 	mov	r16,r2
    8704:	10000015 	stw	zero,0(r2)
    8708:	003fd006 	br	864c <__pow5mult+0x60>

0000870c <__s2b>:
    870c:	defff904 	addi	sp,sp,-28
    8710:	dcc00315 	stw	r19,12(sp)
    8714:	dc800215 	stw	r18,8(sp)
    8718:	2827883a 	mov	r19,r5
    871c:	2025883a 	mov	r18,r4
    8720:	01400244 	movi	r5,9
    8724:	39000204 	addi	r4,r7,8
    8728:	dd000415 	stw	r20,16(sp)
    872c:	dc400115 	stw	r17,4(sp)
    8730:	dfc00615 	stw	ra,24(sp)
    8734:	dd400515 	stw	r21,20(sp)
    8738:	dc000015 	stw	r16,0(sp)
    873c:	3829883a 	mov	r20,r7
    8740:	3023883a 	mov	r17,r6
    8744:	00019840 	call	1984 <__divsi3>
    8748:	00c00044 	movi	r3,1
    874c:	1880350e 	bge	r3,r2,8824 <__s2b+0x118>
    8750:	000b883a 	mov	r5,zero
    8754:	18c7883a 	add	r3,r3,r3
    8758:	29400044 	addi	r5,r5,1
    875c:	18bffd16 	blt	r3,r2,8754 <__s2b+0x48>
    8760:	9009883a 	mov	r4,r18
    8764:	0007db80 	call	7db8 <_Balloc>
    8768:	1011883a 	mov	r8,r2
    876c:	d8800717 	ldw	r2,28(sp)
    8770:	00c00044 	movi	r3,1
    8774:	01800244 	movi	r6,9
    8778:	40800515 	stw	r2,20(r8)
    877c:	40c00415 	stw	r3,16(r8)
    8780:	3440260e 	bge	r6,r17,881c <__s2b+0x110>
    8784:	3021883a 	mov	r16,r6
    8788:	99ab883a 	add	r21,r19,r6
    878c:	9c05883a 	add	r2,r19,r16
    8790:	11c00007 	ldb	r7,0(r2)
    8794:	400b883a 	mov	r5,r8
    8798:	9009883a 	mov	r4,r18
    879c:	39fff404 	addi	r7,r7,-48
    87a0:	01800284 	movi	r6,10
    87a4:	00084ec0 	call	84ec <__multadd>
    87a8:	84000044 	addi	r16,r16,1
    87ac:	1011883a 	mov	r8,r2
    87b0:	8c3ff61e 	bne	r17,r16,878c <__s2b+0x80>
    87b4:	ac45883a 	add	r2,r21,r17
    87b8:	117ffe04 	addi	r5,r2,-8
    87bc:	880d883a 	mov	r6,r17
    87c0:	35000c0e 	bge	r6,r20,87f4 <__s2b+0xe8>
    87c4:	a185c83a 	sub	r2,r20,r6
    87c8:	2821883a 	mov	r16,r5
    87cc:	28a3883a 	add	r17,r5,r2
    87d0:	81c00007 	ldb	r7,0(r16)
    87d4:	400b883a 	mov	r5,r8
    87d8:	9009883a 	mov	r4,r18
    87dc:	39fff404 	addi	r7,r7,-48
    87e0:	01800284 	movi	r6,10
    87e4:	00084ec0 	call	84ec <__multadd>
    87e8:	84000044 	addi	r16,r16,1
    87ec:	1011883a 	mov	r8,r2
    87f0:	847ff71e 	bne	r16,r17,87d0 <__s2b+0xc4>
    87f4:	4005883a 	mov	r2,r8
    87f8:	dfc00617 	ldw	ra,24(sp)
    87fc:	dd400517 	ldw	r21,20(sp)
    8800:	dd000417 	ldw	r20,16(sp)
    8804:	dcc00317 	ldw	r19,12(sp)
    8808:	dc800217 	ldw	r18,8(sp)
    880c:	dc400117 	ldw	r17,4(sp)
    8810:	dc000017 	ldw	r16,0(sp)
    8814:	dec00704 	addi	sp,sp,28
    8818:	f800283a 	ret
    881c:	99400284 	addi	r5,r19,10
    8820:	003fe706 	br	87c0 <__s2b+0xb4>
    8824:	000b883a 	mov	r5,zero
    8828:	003fcd06 	br	8760 <__s2b+0x54>

0000882c <_realloc_r>:
    882c:	defff404 	addi	sp,sp,-48
    8830:	dd800815 	stw	r22,32(sp)
    8834:	dc800415 	stw	r18,16(sp)
    8838:	dc400315 	stw	r17,12(sp)
    883c:	dfc00b15 	stw	ra,44(sp)
    8840:	df000a15 	stw	fp,40(sp)
    8844:	ddc00915 	stw	r23,36(sp)
    8848:	dd400715 	stw	r21,28(sp)
    884c:	dd000615 	stw	r20,24(sp)
    8850:	dcc00515 	stw	r19,20(sp)
    8854:	dc000215 	stw	r16,8(sp)
    8858:	2825883a 	mov	r18,r5
    885c:	3023883a 	mov	r17,r6
    8860:	202d883a 	mov	r22,r4
    8864:	2800c926 	beq	r5,zero,8b8c <_realloc_r+0x360>
    8868:	000ba1c0 	call	ba1c <__malloc_lock>
    886c:	943ffe04 	addi	r16,r18,-8
    8870:	88c002c4 	addi	r3,r17,11
    8874:	00800584 	movi	r2,22
    8878:	82000117 	ldw	r8,4(r16)
    887c:	10c01b2e 	bgeu	r2,r3,88ec <_realloc_r+0xc0>
    8880:	00bffe04 	movi	r2,-8
    8884:	188e703a 	and	r7,r3,r2
    8888:	3839883a 	mov	fp,r7
    888c:	38001a16 	blt	r7,zero,88f8 <_realloc_r+0xcc>
    8890:	e4401936 	bltu	fp,r17,88f8 <_realloc_r+0xcc>
    8894:	013fff04 	movi	r4,-4
    8898:	4126703a 	and	r19,r8,r4
    889c:	99c02616 	blt	r19,r7,8938 <_realloc_r+0x10c>
    88a0:	802b883a 	mov	r21,r16
    88a4:	9829883a 	mov	r20,r19
    88a8:	84000204 	addi	r16,r16,8
    88ac:	a80f883a 	mov	r7,r21
    88b0:	a70dc83a 	sub	r6,r20,fp
    88b4:	008003c4 	movi	r2,15
    88b8:	1180c136 	bltu	r2,r6,8bc0 <_realloc_r+0x394>
    88bc:	38800117 	ldw	r2,4(r7)
    88c0:	a549883a 	add	r4,r20,r21
    88c4:	1080004c 	andi	r2,r2,1
    88c8:	a084b03a 	or	r2,r20,r2
    88cc:	38800115 	stw	r2,4(r7)
    88d0:	20c00117 	ldw	r3,4(r4)
    88d4:	18c00054 	ori	r3,r3,1
    88d8:	20c00115 	stw	r3,4(r4)
    88dc:	b009883a 	mov	r4,r22
    88e0:	000bb240 	call	bb24 <__malloc_unlock>
    88e4:	8023883a 	mov	r17,r16
    88e8:	00000606 	br	8904 <_realloc_r+0xd8>
    88ec:	01c00404 	movi	r7,16
    88f0:	3839883a 	mov	fp,r7
    88f4:	e47fe72e 	bgeu	fp,r17,8894 <_realloc_r+0x68>
    88f8:	00800304 	movi	r2,12
    88fc:	0023883a 	mov	r17,zero
    8900:	b0800015 	stw	r2,0(r22)
    8904:	8805883a 	mov	r2,r17
    8908:	dfc00b17 	ldw	ra,44(sp)
    890c:	df000a17 	ldw	fp,40(sp)
    8910:	ddc00917 	ldw	r23,36(sp)
    8914:	dd800817 	ldw	r22,32(sp)
    8918:	dd400717 	ldw	r21,28(sp)
    891c:	dd000617 	ldw	r20,24(sp)
    8920:	dcc00517 	ldw	r19,20(sp)
    8924:	dc800417 	ldw	r18,16(sp)
    8928:	dc400317 	ldw	r17,12(sp)
    892c:	dc000217 	ldw	r16,8(sp)
    8930:	dec00c04 	addi	sp,sp,48
    8934:	f800283a 	ret
    8938:	008000b4 	movhi	r2,2
    893c:	10a0d104 	addi	r2,r2,-31932
    8940:	12400217 	ldw	r9,8(r2)
    8944:	84cd883a 	add	r6,r16,r19
    8948:	802b883a 	mov	r21,r16
    894c:	3240b926 	beq	r6,r9,8c34 <_realloc_r+0x408>
    8950:	31400117 	ldw	r5,4(r6)
    8954:	00bfff84 	movi	r2,-2
    8958:	2884703a 	and	r2,r5,r2
    895c:	1185883a 	add	r2,r2,r6
    8960:	10c00117 	ldw	r3,4(r2)
    8964:	18c0004c 	andi	r3,r3,1
    8968:	1807003a 	cmpeq	r3,r3,zero
    896c:	1800a326 	beq	r3,zero,8bfc <_realloc_r+0x3d0>
    8970:	2908703a 	and	r4,r5,r4
    8974:	9929883a 	add	r20,r19,r4
    8978:	a1c0a30e 	bge	r20,r7,8c08 <_realloc_r+0x3dc>
    897c:	4080004c 	andi	r2,r8,1
    8980:	1000551e 	bne	r2,zero,8ad8 <_realloc_r+0x2ac>
    8984:	80800017 	ldw	r2,0(r16)
    8988:	80afc83a 	sub	r23,r16,r2
    898c:	b8c00117 	ldw	r3,4(r23)
    8990:	00bfff04 	movi	r2,-4
    8994:	1884703a 	and	r2,r3,r2
    8998:	30002e26 	beq	r6,zero,8a54 <_realloc_r+0x228>
    899c:	3240b926 	beq	r6,r9,8c84 <_realloc_r+0x458>
    89a0:	98a9883a 	add	r20,r19,r2
    89a4:	2509883a 	add	r4,r4,r20
    89a8:	d9000015 	stw	r4,0(sp)
    89ac:	21c02a16 	blt	r4,r7,8a58 <_realloc_r+0x22c>
    89b0:	30800317 	ldw	r2,12(r6)
    89b4:	30c00217 	ldw	r3,8(r6)
    89b8:	01400904 	movi	r5,36
    89bc:	99bfff04 	addi	r6,r19,-4
    89c0:	18800315 	stw	r2,12(r3)
    89c4:	10c00215 	stw	r3,8(r2)
    89c8:	b9000317 	ldw	r4,12(r23)
    89cc:	b8800217 	ldw	r2,8(r23)
    89d0:	b82b883a 	mov	r21,r23
    89d4:	bc000204 	addi	r16,r23,8
    89d8:	20800215 	stw	r2,8(r4)
    89dc:	11000315 	stw	r4,12(r2)
    89e0:	2980e436 	bltu	r5,r6,8d74 <_realloc_r+0x548>
    89e4:	008004c4 	movi	r2,19
    89e8:	9009883a 	mov	r4,r18
    89ec:	8011883a 	mov	r8,r16
    89f0:	11800f2e 	bgeu	r2,r6,8a30 <_realloc_r+0x204>
    89f4:	90800017 	ldw	r2,0(r18)
    89f8:	ba000404 	addi	r8,r23,16
    89fc:	91000204 	addi	r4,r18,8
    8a00:	b8800215 	stw	r2,8(r23)
    8a04:	90c00117 	ldw	r3,4(r18)
    8a08:	008006c4 	movi	r2,27
    8a0c:	b8c00315 	stw	r3,12(r23)
    8a10:	1180072e 	bgeu	r2,r6,8a30 <_realloc_r+0x204>
    8a14:	90c00217 	ldw	r3,8(r18)
    8a18:	ba000604 	addi	r8,r23,24
    8a1c:	91000404 	addi	r4,r18,16
    8a20:	b8c00415 	stw	r3,16(r23)
    8a24:	90800317 	ldw	r2,12(r18)
    8a28:	b8800515 	stw	r2,20(r23)
    8a2c:	3140e726 	beq	r6,r5,8dcc <_realloc_r+0x5a0>
    8a30:	20800017 	ldw	r2,0(r4)
    8a34:	dd000017 	ldw	r20,0(sp)
    8a38:	b80f883a 	mov	r7,r23
    8a3c:	40800015 	stw	r2,0(r8)
    8a40:	20c00117 	ldw	r3,4(r4)
    8a44:	40c00115 	stw	r3,4(r8)
    8a48:	20800217 	ldw	r2,8(r4)
    8a4c:	40800215 	stw	r2,8(r8)
    8a50:	003f9706 	br	88b0 <_realloc_r+0x84>
    8a54:	98a9883a 	add	r20,r19,r2
    8a58:	a1c01f16 	blt	r20,r7,8ad8 <_realloc_r+0x2ac>
    8a5c:	b8c00317 	ldw	r3,12(r23)
    8a60:	b8800217 	ldw	r2,8(r23)
    8a64:	99bfff04 	addi	r6,r19,-4
    8a68:	01400904 	movi	r5,36
    8a6c:	b82b883a 	mov	r21,r23
    8a70:	18800215 	stw	r2,8(r3)
    8a74:	10c00315 	stw	r3,12(r2)
    8a78:	bc000204 	addi	r16,r23,8
    8a7c:	2980c336 	bltu	r5,r6,8d8c <_realloc_r+0x560>
    8a80:	008004c4 	movi	r2,19
    8a84:	9009883a 	mov	r4,r18
    8a88:	8011883a 	mov	r8,r16
    8a8c:	11800f2e 	bgeu	r2,r6,8acc <_realloc_r+0x2a0>
    8a90:	90800017 	ldw	r2,0(r18)
    8a94:	ba000404 	addi	r8,r23,16
    8a98:	91000204 	addi	r4,r18,8
    8a9c:	b8800215 	stw	r2,8(r23)
    8aa0:	90c00117 	ldw	r3,4(r18)
    8aa4:	008006c4 	movi	r2,27
    8aa8:	b8c00315 	stw	r3,12(r23)
    8aac:	1180072e 	bgeu	r2,r6,8acc <_realloc_r+0x2a0>
    8ab0:	90c00217 	ldw	r3,8(r18)
    8ab4:	ba000604 	addi	r8,r23,24
    8ab8:	91000404 	addi	r4,r18,16
    8abc:	b8c00415 	stw	r3,16(r23)
    8ac0:	90800317 	ldw	r2,12(r18)
    8ac4:	b8800515 	stw	r2,20(r23)
    8ac8:	3140c726 	beq	r6,r5,8de8 <_realloc_r+0x5bc>
    8acc:	20800017 	ldw	r2,0(r4)
    8ad0:	b80f883a 	mov	r7,r23
    8ad4:	003fd906 	br	8a3c <_realloc_r+0x210>
    8ad8:	880b883a 	mov	r5,r17
    8adc:	b009883a 	mov	r4,r22
    8ae0:	0006dfc0 	call	6dfc <_malloc_r>
    8ae4:	1023883a 	mov	r17,r2
    8ae8:	10002526 	beq	r2,zero,8b80 <_realloc_r+0x354>
    8aec:	80800117 	ldw	r2,4(r16)
    8af0:	00ffff84 	movi	r3,-2
    8af4:	893ffe04 	addi	r4,r17,-8
    8af8:	10c4703a 	and	r2,r2,r3
    8afc:	8085883a 	add	r2,r16,r2
    8b00:	20809526 	beq	r4,r2,8d58 <_realloc_r+0x52c>
    8b04:	99bfff04 	addi	r6,r19,-4
    8b08:	01c00904 	movi	r7,36
    8b0c:	39804536 	bltu	r7,r6,8c24 <_realloc_r+0x3f8>
    8b10:	008004c4 	movi	r2,19
    8b14:	9009883a 	mov	r4,r18
    8b18:	880b883a 	mov	r5,r17
    8b1c:	11800f2e 	bgeu	r2,r6,8b5c <_realloc_r+0x330>
    8b20:	90800017 	ldw	r2,0(r18)
    8b24:	89400204 	addi	r5,r17,8
    8b28:	91000204 	addi	r4,r18,8
    8b2c:	88800015 	stw	r2,0(r17)
    8b30:	90c00117 	ldw	r3,4(r18)
    8b34:	008006c4 	movi	r2,27
    8b38:	88c00115 	stw	r3,4(r17)
    8b3c:	1180072e 	bgeu	r2,r6,8b5c <_realloc_r+0x330>
    8b40:	90c00217 	ldw	r3,8(r18)
    8b44:	89400404 	addi	r5,r17,16
    8b48:	91000404 	addi	r4,r18,16
    8b4c:	88c00215 	stw	r3,8(r17)
    8b50:	90800317 	ldw	r2,12(r18)
    8b54:	88800315 	stw	r2,12(r17)
    8b58:	31c09126 	beq	r6,r7,8da0 <_realloc_r+0x574>
    8b5c:	20800017 	ldw	r2,0(r4)
    8b60:	28800015 	stw	r2,0(r5)
    8b64:	20c00117 	ldw	r3,4(r4)
    8b68:	28c00115 	stw	r3,4(r5)
    8b6c:	20800217 	ldw	r2,8(r4)
    8b70:	28800215 	stw	r2,8(r5)
    8b74:	900b883a 	mov	r5,r18
    8b78:	b009883a 	mov	r4,r22
    8b7c:	00062740 	call	6274 <_free_r>
    8b80:	b009883a 	mov	r4,r22
    8b84:	000bb240 	call	bb24 <__malloc_unlock>
    8b88:	003f5e06 	br	8904 <_realloc_r+0xd8>
    8b8c:	300b883a 	mov	r5,r6
    8b90:	dfc00b17 	ldw	ra,44(sp)
    8b94:	df000a17 	ldw	fp,40(sp)
    8b98:	ddc00917 	ldw	r23,36(sp)
    8b9c:	dd800817 	ldw	r22,32(sp)
    8ba0:	dd400717 	ldw	r21,28(sp)
    8ba4:	dd000617 	ldw	r20,24(sp)
    8ba8:	dcc00517 	ldw	r19,20(sp)
    8bac:	dc800417 	ldw	r18,16(sp)
    8bb0:	dc400317 	ldw	r17,12(sp)
    8bb4:	dc000217 	ldw	r16,8(sp)
    8bb8:	dec00c04 	addi	sp,sp,48
    8bbc:	0006dfc1 	jmpi	6dfc <_malloc_r>
    8bc0:	38800117 	ldw	r2,4(r7)
    8bc4:	e54b883a 	add	r5,fp,r21
    8bc8:	31000054 	ori	r4,r6,1
    8bcc:	1080004c 	andi	r2,r2,1
    8bd0:	1704b03a 	or	r2,r2,fp
    8bd4:	38800115 	stw	r2,4(r7)
    8bd8:	29000115 	stw	r4,4(r5)
    8bdc:	2987883a 	add	r3,r5,r6
    8be0:	18800117 	ldw	r2,4(r3)
    8be4:	29400204 	addi	r5,r5,8
    8be8:	b009883a 	mov	r4,r22
    8bec:	10800054 	ori	r2,r2,1
    8bf0:	18800115 	stw	r2,4(r3)
    8bf4:	00062740 	call	6274 <_free_r>
    8bf8:	003f3806 	br	88dc <_realloc_r+0xb0>
    8bfc:	000d883a 	mov	r6,zero
    8c00:	0009883a 	mov	r4,zero
    8c04:	003f5d06 	br	897c <_realloc_r+0x150>
    8c08:	30c00217 	ldw	r3,8(r6)
    8c0c:	30800317 	ldw	r2,12(r6)
    8c10:	800f883a 	mov	r7,r16
    8c14:	84000204 	addi	r16,r16,8
    8c18:	10c00215 	stw	r3,8(r2)
    8c1c:	18800315 	stw	r2,12(r3)
    8c20:	003f2306 	br	88b0 <_realloc_r+0x84>
    8c24:	8809883a 	mov	r4,r17
    8c28:	900b883a 	mov	r5,r18
    8c2c:	00076c00 	call	76c0 <memmove>
    8c30:	003fd006 	br	8b74 <_realloc_r+0x348>
    8c34:	30800117 	ldw	r2,4(r6)
    8c38:	e0c00404 	addi	r3,fp,16
    8c3c:	1108703a 	and	r4,r2,r4
    8c40:	9905883a 	add	r2,r19,r4
    8c44:	10ff4d16 	blt	r2,r3,897c <_realloc_r+0x150>
    8c48:	1705c83a 	sub	r2,r2,fp
    8c4c:	870b883a 	add	r5,r16,fp
    8c50:	10800054 	ori	r2,r2,1
    8c54:	28800115 	stw	r2,4(r5)
    8c58:	80c00117 	ldw	r3,4(r16)
    8c5c:	008000b4 	movhi	r2,2
    8c60:	10a0d104 	addi	r2,r2,-31932
    8c64:	b009883a 	mov	r4,r22
    8c68:	18c0004c 	andi	r3,r3,1
    8c6c:	e0c6b03a 	or	r3,fp,r3
    8c70:	11400215 	stw	r5,8(r2)
    8c74:	80c00115 	stw	r3,4(r16)
    8c78:	000bb240 	call	bb24 <__malloc_unlock>
    8c7c:	84400204 	addi	r17,r16,8
    8c80:	003f2006 	br	8904 <_realloc_r+0xd8>
    8c84:	98a9883a 	add	r20,r19,r2
    8c88:	2509883a 	add	r4,r4,r20
    8c8c:	e0800404 	addi	r2,fp,16
    8c90:	d9000115 	stw	r4,4(sp)
    8c94:	20bf7016 	blt	r4,r2,8a58 <_realloc_r+0x22c>
    8c98:	b8c00317 	ldw	r3,12(r23)
    8c9c:	b8800217 	ldw	r2,8(r23)
    8ca0:	99bfff04 	addi	r6,r19,-4
    8ca4:	01400904 	movi	r5,36
    8ca8:	18800215 	stw	r2,8(r3)
    8cac:	10c00315 	stw	r3,12(r2)
    8cb0:	bc400204 	addi	r17,r23,8
    8cb4:	29804136 	bltu	r5,r6,8dbc <_realloc_r+0x590>
    8cb8:	008004c4 	movi	r2,19
    8cbc:	9009883a 	mov	r4,r18
    8cc0:	880f883a 	mov	r7,r17
    8cc4:	11800f2e 	bgeu	r2,r6,8d04 <_realloc_r+0x4d8>
    8cc8:	90800017 	ldw	r2,0(r18)
    8ccc:	b9c00404 	addi	r7,r23,16
    8cd0:	91000204 	addi	r4,r18,8
    8cd4:	b8800215 	stw	r2,8(r23)
    8cd8:	90c00117 	ldw	r3,4(r18)
    8cdc:	008006c4 	movi	r2,27
    8ce0:	b8c00315 	stw	r3,12(r23)
    8ce4:	1180072e 	bgeu	r2,r6,8d04 <_realloc_r+0x4d8>
    8ce8:	90c00217 	ldw	r3,8(r18)
    8cec:	b9c00604 	addi	r7,r23,24
    8cf0:	91000404 	addi	r4,r18,16
    8cf4:	b8c00415 	stw	r3,16(r23)
    8cf8:	90800317 	ldw	r2,12(r18)
    8cfc:	b8800515 	stw	r2,20(r23)
    8d00:	31404026 	beq	r6,r5,8e04 <_realloc_r+0x5d8>
    8d04:	20800017 	ldw	r2,0(r4)
    8d08:	38800015 	stw	r2,0(r7)
    8d0c:	20c00117 	ldw	r3,4(r4)
    8d10:	38c00115 	stw	r3,4(r7)
    8d14:	20800217 	ldw	r2,8(r4)
    8d18:	38800215 	stw	r2,8(r7)
    8d1c:	d8c00117 	ldw	r3,4(sp)
    8d20:	bf0b883a 	add	r5,r23,fp
    8d24:	b009883a 	mov	r4,r22
    8d28:	1f05c83a 	sub	r2,r3,fp
    8d2c:	10800054 	ori	r2,r2,1
    8d30:	28800115 	stw	r2,4(r5)
    8d34:	b8c00117 	ldw	r3,4(r23)
    8d38:	008000b4 	movhi	r2,2
    8d3c:	10a0d104 	addi	r2,r2,-31932
    8d40:	11400215 	stw	r5,8(r2)
    8d44:	18c0004c 	andi	r3,r3,1
    8d48:	e0c6b03a 	or	r3,fp,r3
    8d4c:	b8c00115 	stw	r3,4(r23)
    8d50:	000bb240 	call	bb24 <__malloc_unlock>
    8d54:	003eeb06 	br	8904 <_realloc_r+0xd8>
    8d58:	20800117 	ldw	r2,4(r4)
    8d5c:	00ffff04 	movi	r3,-4
    8d60:	800f883a 	mov	r7,r16
    8d64:	10c4703a 	and	r2,r2,r3
    8d68:	98a9883a 	add	r20,r19,r2
    8d6c:	84000204 	addi	r16,r16,8
    8d70:	003ecf06 	br	88b0 <_realloc_r+0x84>
    8d74:	900b883a 	mov	r5,r18
    8d78:	8009883a 	mov	r4,r16
    8d7c:	00076c00 	call	76c0 <memmove>
    8d80:	dd000017 	ldw	r20,0(sp)
    8d84:	b80f883a 	mov	r7,r23
    8d88:	003ec906 	br	88b0 <_realloc_r+0x84>
    8d8c:	900b883a 	mov	r5,r18
    8d90:	8009883a 	mov	r4,r16
    8d94:	00076c00 	call	76c0 <memmove>
    8d98:	b80f883a 	mov	r7,r23
    8d9c:	003ec406 	br	88b0 <_realloc_r+0x84>
    8da0:	90c00417 	ldw	r3,16(r18)
    8da4:	89400604 	addi	r5,r17,24
    8da8:	91000604 	addi	r4,r18,24
    8dac:	88c00415 	stw	r3,16(r17)
    8db0:	90800517 	ldw	r2,20(r18)
    8db4:	88800515 	stw	r2,20(r17)
    8db8:	003f6806 	br	8b5c <_realloc_r+0x330>
    8dbc:	900b883a 	mov	r5,r18
    8dc0:	8809883a 	mov	r4,r17
    8dc4:	00076c00 	call	76c0 <memmove>
    8dc8:	003fd406 	br	8d1c <_realloc_r+0x4f0>
    8dcc:	90c00417 	ldw	r3,16(r18)
    8dd0:	91000604 	addi	r4,r18,24
    8dd4:	ba000804 	addi	r8,r23,32
    8dd8:	b8c00615 	stw	r3,24(r23)
    8ddc:	90800517 	ldw	r2,20(r18)
    8de0:	b8800715 	stw	r2,28(r23)
    8de4:	003f1206 	br	8a30 <_realloc_r+0x204>
    8de8:	90c00417 	ldw	r3,16(r18)
    8dec:	91000604 	addi	r4,r18,24
    8df0:	ba000804 	addi	r8,r23,32
    8df4:	b8c00615 	stw	r3,24(r23)
    8df8:	90800517 	ldw	r2,20(r18)
    8dfc:	b8800715 	stw	r2,28(r23)
    8e00:	003f3206 	br	8acc <_realloc_r+0x2a0>
    8e04:	90c00417 	ldw	r3,16(r18)
    8e08:	91000604 	addi	r4,r18,24
    8e0c:	b9c00804 	addi	r7,r23,32
    8e10:	b8c00615 	stw	r3,24(r23)
    8e14:	90800517 	ldw	r2,20(r18)
    8e18:	b8800715 	stw	r2,28(r23)
    8e1c:	003fb906 	br	8d04 <_realloc_r+0x4d8>

00008e20 <__isinfd>:
    8e20:	200d883a 	mov	r6,r4
    8e24:	0109c83a 	sub	r4,zero,r4
    8e28:	2188b03a 	or	r4,r4,r6
    8e2c:	2008d7fa 	srli	r4,r4,31
    8e30:	00a00034 	movhi	r2,32768
    8e34:	10bfffc4 	addi	r2,r2,-1
    8e38:	1144703a 	and	r2,r2,r5
    8e3c:	2088b03a 	or	r4,r4,r2
    8e40:	009ffc34 	movhi	r2,32752
    8e44:	1105c83a 	sub	r2,r2,r4
    8e48:	0087c83a 	sub	r3,zero,r2
    8e4c:	10c4b03a 	or	r2,r2,r3
    8e50:	1004d7fa 	srli	r2,r2,31
    8e54:	00c00044 	movi	r3,1
    8e58:	1885c83a 	sub	r2,r3,r2
    8e5c:	f800283a 	ret

00008e60 <__isnand>:
    8e60:	200d883a 	mov	r6,r4
    8e64:	0109c83a 	sub	r4,zero,r4
    8e68:	2188b03a 	or	r4,r4,r6
    8e6c:	2008d7fa 	srli	r4,r4,31
    8e70:	00a00034 	movhi	r2,32768
    8e74:	10bfffc4 	addi	r2,r2,-1
    8e78:	1144703a 	and	r2,r2,r5
    8e7c:	2088b03a 	or	r4,r4,r2
    8e80:	009ffc34 	movhi	r2,32752
    8e84:	1105c83a 	sub	r2,r2,r4
    8e88:	1004d7fa 	srli	r2,r2,31
    8e8c:	f800283a 	ret

00008e90 <_sbrk_r>:
    8e90:	defffd04 	addi	sp,sp,-12
    8e94:	dc000015 	stw	r16,0(sp)
    8e98:	040000b4 	movhi	r16,2
    8e9c:	842dc504 	addi	r16,r16,-18668
    8ea0:	dc400115 	stw	r17,4(sp)
    8ea4:	80000015 	stw	zero,0(r16)
    8ea8:	2023883a 	mov	r17,r4
    8eac:	2809883a 	mov	r4,r5
    8eb0:	dfc00215 	stw	ra,8(sp)
    8eb4:	000b6d80 	call	b6d8 <sbrk>
    8eb8:	1007883a 	mov	r3,r2
    8ebc:	00bfffc4 	movi	r2,-1
    8ec0:	18800626 	beq	r3,r2,8edc <_sbrk_r+0x4c>
    8ec4:	1805883a 	mov	r2,r3
    8ec8:	dfc00217 	ldw	ra,8(sp)
    8ecc:	dc400117 	ldw	r17,4(sp)
    8ed0:	dc000017 	ldw	r16,0(sp)
    8ed4:	dec00304 	addi	sp,sp,12
    8ed8:	f800283a 	ret
    8edc:	80800017 	ldw	r2,0(r16)
    8ee0:	103ff826 	beq	r2,zero,8ec4 <_sbrk_r+0x34>
    8ee4:	88800015 	stw	r2,0(r17)
    8ee8:	1805883a 	mov	r2,r3
    8eec:	dfc00217 	ldw	ra,8(sp)
    8ef0:	dc400117 	ldw	r17,4(sp)
    8ef4:	dc000017 	ldw	r16,0(sp)
    8ef8:	dec00304 	addi	sp,sp,12
    8efc:	f800283a 	ret

00008f00 <__sclose>:
    8f00:	2940038f 	ldh	r5,14(r5)
    8f04:	00092341 	jmpi	9234 <_close_r>

00008f08 <__sseek>:
    8f08:	defffe04 	addi	sp,sp,-8
    8f0c:	dc000015 	stw	r16,0(sp)
    8f10:	2821883a 	mov	r16,r5
    8f14:	2940038f 	ldh	r5,14(r5)
    8f18:	dfc00115 	stw	ra,4(sp)
    8f1c:	00094ac0 	call	94ac <_lseek_r>
    8f20:	1007883a 	mov	r3,r2
    8f24:	00bfffc4 	movi	r2,-1
    8f28:	18800926 	beq	r3,r2,8f50 <__sseek+0x48>
    8f2c:	8080030b 	ldhu	r2,12(r16)
    8f30:	80c01415 	stw	r3,80(r16)
    8f34:	10840014 	ori	r2,r2,4096
    8f38:	8080030d 	sth	r2,12(r16)
    8f3c:	1805883a 	mov	r2,r3
    8f40:	dfc00117 	ldw	ra,4(sp)
    8f44:	dc000017 	ldw	r16,0(sp)
    8f48:	dec00204 	addi	sp,sp,8
    8f4c:	f800283a 	ret
    8f50:	8080030b 	ldhu	r2,12(r16)
    8f54:	10bbffcc 	andi	r2,r2,61439
    8f58:	8080030d 	sth	r2,12(r16)
    8f5c:	1805883a 	mov	r2,r3
    8f60:	dfc00117 	ldw	ra,4(sp)
    8f64:	dc000017 	ldw	r16,0(sp)
    8f68:	dec00204 	addi	sp,sp,8
    8f6c:	f800283a 	ret

00008f70 <__swrite>:
    8f70:	2880030b 	ldhu	r2,12(r5)
    8f74:	defffb04 	addi	sp,sp,-20
    8f78:	dcc00315 	stw	r19,12(sp)
    8f7c:	1080400c 	andi	r2,r2,256
    8f80:	dc800215 	stw	r18,8(sp)
    8f84:	dc400115 	stw	r17,4(sp)
    8f88:	dc000015 	stw	r16,0(sp)
    8f8c:	3027883a 	mov	r19,r6
    8f90:	3825883a 	mov	r18,r7
    8f94:	dfc00415 	stw	ra,16(sp)
    8f98:	2821883a 	mov	r16,r5
    8f9c:	000d883a 	mov	r6,zero
    8fa0:	01c00084 	movi	r7,2
    8fa4:	2023883a 	mov	r17,r4
    8fa8:	10000226 	beq	r2,zero,8fb4 <__swrite+0x44>
    8fac:	2940038f 	ldh	r5,14(r5)
    8fb0:	00094ac0 	call	94ac <_lseek_r>
    8fb4:	8080030b 	ldhu	r2,12(r16)
    8fb8:	8140038f 	ldh	r5,14(r16)
    8fbc:	8809883a 	mov	r4,r17
    8fc0:	10bbffcc 	andi	r2,r2,61439
    8fc4:	980d883a 	mov	r6,r19
    8fc8:	900f883a 	mov	r7,r18
    8fcc:	8080030d 	sth	r2,12(r16)
    8fd0:	dfc00417 	ldw	ra,16(sp)
    8fd4:	dcc00317 	ldw	r19,12(sp)
    8fd8:	dc800217 	ldw	r18,8(sp)
    8fdc:	dc400117 	ldw	r17,4(sp)
    8fe0:	dc000017 	ldw	r16,0(sp)
    8fe4:	dec00504 	addi	sp,sp,20
    8fe8:	00091081 	jmpi	9108 <_write_r>

00008fec <__sread>:
    8fec:	defffe04 	addi	sp,sp,-8
    8ff0:	dc000015 	stw	r16,0(sp)
    8ff4:	2821883a 	mov	r16,r5
    8ff8:	2940038f 	ldh	r5,14(r5)
    8ffc:	dfc00115 	stw	ra,4(sp)
    9000:	00095240 	call	9524 <_read_r>
    9004:	1007883a 	mov	r3,r2
    9008:	10000816 	blt	r2,zero,902c <__sread+0x40>
    900c:	80801417 	ldw	r2,80(r16)
    9010:	10c5883a 	add	r2,r2,r3
    9014:	80801415 	stw	r2,80(r16)
    9018:	1805883a 	mov	r2,r3
    901c:	dfc00117 	ldw	ra,4(sp)
    9020:	dc000017 	ldw	r16,0(sp)
    9024:	dec00204 	addi	sp,sp,8
    9028:	f800283a 	ret
    902c:	8080030b 	ldhu	r2,12(r16)
    9030:	10bbffcc 	andi	r2,r2,61439
    9034:	8080030d 	sth	r2,12(r16)
    9038:	1805883a 	mov	r2,r3
    903c:	dfc00117 	ldw	ra,4(sp)
    9040:	dc000017 	ldw	r16,0(sp)
    9044:	dec00204 	addi	sp,sp,8
    9048:	f800283a 	ret

0000904c <strcmp>:
    904c:	2144b03a 	or	r2,r4,r5
    9050:	108000cc 	andi	r2,r2,3
    9054:	10001d1e 	bne	r2,zero,90cc <strcmp+0x80>
    9058:	200f883a 	mov	r7,r4
    905c:	28800017 	ldw	r2,0(r5)
    9060:	21000017 	ldw	r4,0(r4)
    9064:	280d883a 	mov	r6,r5
    9068:	2080161e 	bne	r4,r2,90c4 <strcmp+0x78>
    906c:	023fbff4 	movhi	r8,65279
    9070:	423fbfc4 	addi	r8,r8,-257
    9074:	2207883a 	add	r3,r4,r8
    9078:	01602074 	movhi	r5,32897
    907c:	29602004 	addi	r5,r5,-32640
    9080:	1946703a 	and	r3,r3,r5
    9084:	0104303a 	nor	r2,zero,r4
    9088:	10c4703a 	and	r2,r2,r3
    908c:	10001c1e 	bne	r2,zero,9100 <strcmp+0xb4>
    9090:	4013883a 	mov	r9,r8
    9094:	2811883a 	mov	r8,r5
    9098:	00000106 	br	90a0 <strcmp+0x54>
    909c:	1800181e 	bne	r3,zero,9100 <strcmp+0xb4>
    90a0:	39c00104 	addi	r7,r7,4
    90a4:	39000017 	ldw	r4,0(r7)
    90a8:	31800104 	addi	r6,r6,4
    90ac:	31400017 	ldw	r5,0(r6)
    90b0:	2245883a 	add	r2,r4,r9
    90b4:	1204703a 	and	r2,r2,r8
    90b8:	0106303a 	nor	r3,zero,r4
    90bc:	1886703a 	and	r3,r3,r2
    90c0:	217ff626 	beq	r4,r5,909c <strcmp+0x50>
    90c4:	3809883a 	mov	r4,r7
    90c8:	300b883a 	mov	r5,r6
    90cc:	20c00007 	ldb	r3,0(r4)
    90d0:	1800051e 	bne	r3,zero,90e8 <strcmp+0x9c>
    90d4:	00000606 	br	90f0 <strcmp+0xa4>
    90d8:	21000044 	addi	r4,r4,1
    90dc:	20c00007 	ldb	r3,0(r4)
    90e0:	29400044 	addi	r5,r5,1
    90e4:	18000226 	beq	r3,zero,90f0 <strcmp+0xa4>
    90e8:	28800007 	ldb	r2,0(r5)
    90ec:	18bffa26 	beq	r3,r2,90d8 <strcmp+0x8c>
    90f0:	20c00003 	ldbu	r3,0(r4)
    90f4:	28800003 	ldbu	r2,0(r5)
    90f8:	1885c83a 	sub	r2,r3,r2
    90fc:	f800283a 	ret
    9100:	0005883a 	mov	r2,zero
    9104:	f800283a 	ret

00009108 <_write_r>:
    9108:	defffd04 	addi	sp,sp,-12
    910c:	dc000015 	stw	r16,0(sp)
    9110:	040000b4 	movhi	r16,2
    9114:	842dc504 	addi	r16,r16,-18668
    9118:	dc400115 	stw	r17,4(sp)
    911c:	80000015 	stw	zero,0(r16)
    9120:	2023883a 	mov	r17,r4
    9124:	2809883a 	mov	r4,r5
    9128:	300b883a 	mov	r5,r6
    912c:	380d883a 	mov	r6,r7
    9130:	dfc00215 	stw	ra,8(sp)
    9134:	000b7940 	call	b794 <write>
    9138:	1007883a 	mov	r3,r2
    913c:	00bfffc4 	movi	r2,-1
    9140:	18800626 	beq	r3,r2,915c <_write_r+0x54>
    9144:	1805883a 	mov	r2,r3
    9148:	dfc00217 	ldw	ra,8(sp)
    914c:	dc400117 	ldw	r17,4(sp)
    9150:	dc000017 	ldw	r16,0(sp)
    9154:	dec00304 	addi	sp,sp,12
    9158:	f800283a 	ret
    915c:	80800017 	ldw	r2,0(r16)
    9160:	103ff826 	beq	r2,zero,9144 <_write_r+0x3c>
    9164:	88800015 	stw	r2,0(r17)
    9168:	1805883a 	mov	r2,r3
    916c:	dfc00217 	ldw	ra,8(sp)
    9170:	dc400117 	ldw	r17,4(sp)
    9174:	dc000017 	ldw	r16,0(sp)
    9178:	dec00304 	addi	sp,sp,12
    917c:	f800283a 	ret

00009180 <_calloc_r>:
    9180:	298b383a 	mul	r5,r5,r6
    9184:	defffe04 	addi	sp,sp,-8
    9188:	dc000015 	stw	r16,0(sp)
    918c:	dfc00115 	stw	ra,4(sp)
    9190:	0006dfc0 	call	6dfc <_malloc_r>
    9194:	1021883a 	mov	r16,r2
    9198:	01c00904 	movi	r7,36
    919c:	10000d26 	beq	r2,zero,91d4 <_calloc_r+0x54>
    91a0:	10ffff17 	ldw	r3,-4(r2)
    91a4:	1009883a 	mov	r4,r2
    91a8:	00bfff04 	movi	r2,-4
    91ac:	1886703a 	and	r3,r3,r2
    91b0:	1887883a 	add	r3,r3,r2
    91b4:	180d883a 	mov	r6,r3
    91b8:	000b883a 	mov	r5,zero
    91bc:	38c01736 	bltu	r7,r3,921c <_calloc_r+0x9c>
    91c0:	008004c4 	movi	r2,19
    91c4:	10c00836 	bltu	r2,r3,91e8 <_calloc_r+0x68>
    91c8:	20000215 	stw	zero,8(r4)
    91cc:	20000015 	stw	zero,0(r4)
    91d0:	20000115 	stw	zero,4(r4)
    91d4:	8005883a 	mov	r2,r16
    91d8:	dfc00117 	ldw	ra,4(sp)
    91dc:	dc000017 	ldw	r16,0(sp)
    91e0:	dec00204 	addi	sp,sp,8
    91e4:	f800283a 	ret
    91e8:	008006c4 	movi	r2,27
    91ec:	80000015 	stw	zero,0(r16)
    91f0:	80000115 	stw	zero,4(r16)
    91f4:	81000204 	addi	r4,r16,8
    91f8:	10fff32e 	bgeu	r2,r3,91c8 <_calloc_r+0x48>
    91fc:	80000215 	stw	zero,8(r16)
    9200:	80000315 	stw	zero,12(r16)
    9204:	81000404 	addi	r4,r16,16
    9208:	19ffef1e 	bne	r3,r7,91c8 <_calloc_r+0x48>
    920c:	81000604 	addi	r4,r16,24
    9210:	80000415 	stw	zero,16(r16)
    9214:	80000515 	stw	zero,20(r16)
    9218:	003feb06 	br	91c8 <_calloc_r+0x48>
    921c:	00077a00 	call	77a0 <memset>
    9220:	8005883a 	mov	r2,r16
    9224:	dfc00117 	ldw	ra,4(sp)
    9228:	dc000017 	ldw	r16,0(sp)
    922c:	dec00204 	addi	sp,sp,8
    9230:	f800283a 	ret

00009234 <_close_r>:
    9234:	defffd04 	addi	sp,sp,-12
    9238:	dc000015 	stw	r16,0(sp)
    923c:	040000b4 	movhi	r16,2
    9240:	842dc504 	addi	r16,r16,-18668
    9244:	dc400115 	stw	r17,4(sp)
    9248:	80000015 	stw	zero,0(r16)
    924c:	2023883a 	mov	r17,r4
    9250:	2809883a 	mov	r4,r5
    9254:	dfc00215 	stw	ra,8(sp)
    9258:	000ae180 	call	ae18 <close>
    925c:	1007883a 	mov	r3,r2
    9260:	00bfffc4 	movi	r2,-1
    9264:	18800626 	beq	r3,r2,9280 <_close_r+0x4c>
    9268:	1805883a 	mov	r2,r3
    926c:	dfc00217 	ldw	ra,8(sp)
    9270:	dc400117 	ldw	r17,4(sp)
    9274:	dc000017 	ldw	r16,0(sp)
    9278:	dec00304 	addi	sp,sp,12
    927c:	f800283a 	ret
    9280:	80800017 	ldw	r2,0(r16)
    9284:	103ff826 	beq	r2,zero,9268 <_close_r+0x34>
    9288:	88800015 	stw	r2,0(r17)
    928c:	1805883a 	mov	r2,r3
    9290:	dfc00217 	ldw	ra,8(sp)
    9294:	dc400117 	ldw	r17,4(sp)
    9298:	dc000017 	ldw	r16,0(sp)
    929c:	dec00304 	addi	sp,sp,12
    92a0:	f800283a 	ret

000092a4 <_fclose_r>:
    92a4:	defffc04 	addi	sp,sp,-16
    92a8:	dc400115 	stw	r17,4(sp)
    92ac:	dc000015 	stw	r16,0(sp)
    92b0:	dfc00315 	stw	ra,12(sp)
    92b4:	dc800215 	stw	r18,8(sp)
    92b8:	2821883a 	mov	r16,r5
    92bc:	2023883a 	mov	r17,r4
    92c0:	28002926 	beq	r5,zero,9368 <_fclose_r+0xc4>
    92c4:	0005ee00 	call	5ee0 <__sfp_lock_acquire>
    92c8:	88000226 	beq	r17,zero,92d4 <_fclose_r+0x30>
    92cc:	88800e17 	ldw	r2,56(r17)
    92d0:	10002d26 	beq	r2,zero,9388 <_fclose_r+0xe4>
    92d4:	8080030f 	ldh	r2,12(r16)
    92d8:	10002226 	beq	r2,zero,9364 <_fclose_r+0xc0>
    92dc:	8809883a 	mov	r4,r17
    92e0:	800b883a 	mov	r5,r16
    92e4:	0005c580 	call	5c58 <_fflush_r>
    92e8:	1025883a 	mov	r18,r2
    92ec:	80800b17 	ldw	r2,44(r16)
    92f0:	10000426 	beq	r2,zero,9304 <_fclose_r+0x60>
    92f4:	81400717 	ldw	r5,28(r16)
    92f8:	8809883a 	mov	r4,r17
    92fc:	103ee83a 	callr	r2
    9300:	10002a16 	blt	r2,zero,93ac <_fclose_r+0x108>
    9304:	8080030b 	ldhu	r2,12(r16)
    9308:	1080200c 	andi	r2,r2,128
    930c:	1000231e 	bne	r2,zero,939c <_fclose_r+0xf8>
    9310:	81400c17 	ldw	r5,48(r16)
    9314:	28000526 	beq	r5,zero,932c <_fclose_r+0x88>
    9318:	80801004 	addi	r2,r16,64
    931c:	28800226 	beq	r5,r2,9328 <_fclose_r+0x84>
    9320:	8809883a 	mov	r4,r17
    9324:	00062740 	call	6274 <_free_r>
    9328:	80000c15 	stw	zero,48(r16)
    932c:	81401117 	ldw	r5,68(r16)
    9330:	28000326 	beq	r5,zero,9340 <_fclose_r+0x9c>
    9334:	8809883a 	mov	r4,r17
    9338:	00062740 	call	6274 <_free_r>
    933c:	80001115 	stw	zero,68(r16)
    9340:	8000030d 	sth	zero,12(r16)
    9344:	0005ee40 	call	5ee4 <__sfp_lock_release>
    9348:	9005883a 	mov	r2,r18
    934c:	dfc00317 	ldw	ra,12(sp)
    9350:	dc800217 	ldw	r18,8(sp)
    9354:	dc400117 	ldw	r17,4(sp)
    9358:	dc000017 	ldw	r16,0(sp)
    935c:	dec00404 	addi	sp,sp,16
    9360:	f800283a 	ret
    9364:	0005ee40 	call	5ee4 <__sfp_lock_release>
    9368:	0025883a 	mov	r18,zero
    936c:	9005883a 	mov	r2,r18
    9370:	dfc00317 	ldw	ra,12(sp)
    9374:	dc800217 	ldw	r18,8(sp)
    9378:	dc400117 	ldw	r17,4(sp)
    937c:	dc000017 	ldw	r16,0(sp)
    9380:	dec00404 	addi	sp,sp,16
    9384:	f800283a 	ret
    9388:	8809883a 	mov	r4,r17
    938c:	0005ef00 	call	5ef0 <__sinit>
    9390:	8080030f 	ldh	r2,12(r16)
    9394:	103fd11e 	bne	r2,zero,92dc <_fclose_r+0x38>
    9398:	003ff206 	br	9364 <_fclose_r+0xc0>
    939c:	81400417 	ldw	r5,16(r16)
    93a0:	8809883a 	mov	r4,r17
    93a4:	00062740 	call	6274 <_free_r>
    93a8:	003fd906 	br	9310 <_fclose_r+0x6c>
    93ac:	04bfffc4 	movi	r18,-1
    93b0:	003fd406 	br	9304 <_fclose_r+0x60>

000093b4 <fclose>:
    93b4:	008000b4 	movhi	r2,2
    93b8:	10a68a04 	addi	r2,r2,-26072
    93bc:	200b883a 	mov	r5,r4
    93c0:	11000017 	ldw	r4,0(r2)
    93c4:	00092a41 	jmpi	92a4 <_fclose_r>

000093c8 <_fstat_r>:
    93c8:	defffd04 	addi	sp,sp,-12
    93cc:	dc000015 	stw	r16,0(sp)
    93d0:	040000b4 	movhi	r16,2
    93d4:	842dc504 	addi	r16,r16,-18668
    93d8:	dc400115 	stw	r17,4(sp)
    93dc:	80000015 	stw	zero,0(r16)
    93e0:	2023883a 	mov	r17,r4
    93e4:	2809883a 	mov	r4,r5
    93e8:	300b883a 	mov	r5,r6
    93ec:	dfc00215 	stw	ra,8(sp)
    93f0:	000afa00 	call	afa0 <fstat>
    93f4:	1007883a 	mov	r3,r2
    93f8:	00bfffc4 	movi	r2,-1
    93fc:	18800626 	beq	r3,r2,9418 <_fstat_r+0x50>
    9400:	1805883a 	mov	r2,r3
    9404:	dfc00217 	ldw	ra,8(sp)
    9408:	dc400117 	ldw	r17,4(sp)
    940c:	dc000017 	ldw	r16,0(sp)
    9410:	dec00304 	addi	sp,sp,12
    9414:	f800283a 	ret
    9418:	80800017 	ldw	r2,0(r16)
    941c:	103ff826 	beq	r2,zero,9400 <_fstat_r+0x38>
    9420:	88800015 	stw	r2,0(r17)
    9424:	1805883a 	mov	r2,r3
    9428:	dfc00217 	ldw	ra,8(sp)
    942c:	dc400117 	ldw	r17,4(sp)
    9430:	dc000017 	ldw	r16,0(sp)
    9434:	dec00304 	addi	sp,sp,12
    9438:	f800283a 	ret

0000943c <_isatty_r>:
    943c:	defffd04 	addi	sp,sp,-12
    9440:	dc000015 	stw	r16,0(sp)
    9444:	040000b4 	movhi	r16,2
    9448:	842dc504 	addi	r16,r16,-18668
    944c:	dc400115 	stw	r17,4(sp)
    9450:	80000015 	stw	zero,0(r16)
    9454:	2023883a 	mov	r17,r4
    9458:	2809883a 	mov	r4,r5
    945c:	dfc00215 	stw	ra,8(sp)
    9460:	000b0d40 	call	b0d4 <isatty>
    9464:	1007883a 	mov	r3,r2
    9468:	00bfffc4 	movi	r2,-1
    946c:	18800626 	beq	r3,r2,9488 <_isatty_r+0x4c>
    9470:	1805883a 	mov	r2,r3
    9474:	dfc00217 	ldw	ra,8(sp)
    9478:	dc400117 	ldw	r17,4(sp)
    947c:	dc000017 	ldw	r16,0(sp)
    9480:	dec00304 	addi	sp,sp,12
    9484:	f800283a 	ret
    9488:	80800017 	ldw	r2,0(r16)
    948c:	103ff826 	beq	r2,zero,9470 <_isatty_r+0x34>
    9490:	88800015 	stw	r2,0(r17)
    9494:	1805883a 	mov	r2,r3
    9498:	dfc00217 	ldw	ra,8(sp)
    949c:	dc400117 	ldw	r17,4(sp)
    94a0:	dc000017 	ldw	r16,0(sp)
    94a4:	dec00304 	addi	sp,sp,12
    94a8:	f800283a 	ret

000094ac <_lseek_r>:
    94ac:	defffd04 	addi	sp,sp,-12
    94b0:	dc000015 	stw	r16,0(sp)
    94b4:	040000b4 	movhi	r16,2
    94b8:	842dc504 	addi	r16,r16,-18668
    94bc:	dc400115 	stw	r17,4(sp)
    94c0:	80000015 	stw	zero,0(r16)
    94c4:	2023883a 	mov	r17,r4
    94c8:	2809883a 	mov	r4,r5
    94cc:	300b883a 	mov	r5,r6
    94d0:	380d883a 	mov	r6,r7
    94d4:	dfc00215 	stw	ra,8(sp)
    94d8:	000b2e00 	call	b2e0 <lseek>
    94dc:	1007883a 	mov	r3,r2
    94e0:	00bfffc4 	movi	r2,-1
    94e4:	18800626 	beq	r3,r2,9500 <_lseek_r+0x54>
    94e8:	1805883a 	mov	r2,r3
    94ec:	dfc00217 	ldw	ra,8(sp)
    94f0:	dc400117 	ldw	r17,4(sp)
    94f4:	dc000017 	ldw	r16,0(sp)
    94f8:	dec00304 	addi	sp,sp,12
    94fc:	f800283a 	ret
    9500:	80800017 	ldw	r2,0(r16)
    9504:	103ff826 	beq	r2,zero,94e8 <_lseek_r+0x3c>
    9508:	88800015 	stw	r2,0(r17)
    950c:	1805883a 	mov	r2,r3
    9510:	dfc00217 	ldw	ra,8(sp)
    9514:	dc400117 	ldw	r17,4(sp)
    9518:	dc000017 	ldw	r16,0(sp)
    951c:	dec00304 	addi	sp,sp,12
    9520:	f800283a 	ret

00009524 <_read_r>:
    9524:	defffd04 	addi	sp,sp,-12
    9528:	dc000015 	stw	r16,0(sp)
    952c:	040000b4 	movhi	r16,2
    9530:	842dc504 	addi	r16,r16,-18668
    9534:	dc400115 	stw	r17,4(sp)
    9538:	80000015 	stw	zero,0(r16)
    953c:	2023883a 	mov	r17,r4
    9540:	2809883a 	mov	r4,r5
    9544:	300b883a 	mov	r5,r6
    9548:	380d883a 	mov	r6,r7
    954c:	dfc00215 	stw	ra,8(sp)
    9550:	000b4f80 	call	b4f8 <read>
    9554:	1007883a 	mov	r3,r2
    9558:	00bfffc4 	movi	r2,-1
    955c:	18800626 	beq	r3,r2,9578 <_read_r+0x54>
    9560:	1805883a 	mov	r2,r3
    9564:	dfc00217 	ldw	ra,8(sp)
    9568:	dc400117 	ldw	r17,4(sp)
    956c:	dc000017 	ldw	r16,0(sp)
    9570:	dec00304 	addi	sp,sp,12
    9574:	f800283a 	ret
    9578:	80800017 	ldw	r2,0(r16)
    957c:	103ff826 	beq	r2,zero,9560 <_read_r+0x3c>
    9580:	88800015 	stw	r2,0(r17)
    9584:	1805883a 	mov	r2,r3
    9588:	dfc00217 	ldw	ra,8(sp)
    958c:	dc400117 	ldw	r17,4(sp)
    9590:	dc000017 	ldw	r16,0(sp)
    9594:	dec00304 	addi	sp,sp,12
    9598:	f800283a 	ret

0000959c <__udivdi3>:
    959c:	defff004 	addi	sp,sp,-64
    95a0:	2005883a 	mov	r2,r4
    95a4:	3011883a 	mov	r8,r6
    95a8:	df000e15 	stw	fp,56(sp)
    95ac:	dd000a15 	stw	r20,40(sp)
    95b0:	dc000615 	stw	r16,24(sp)
    95b4:	dfc00f15 	stw	ra,60(sp)
    95b8:	ddc00d15 	stw	r23,52(sp)
    95bc:	dd800c15 	stw	r22,48(sp)
    95c0:	dd400b15 	stw	r21,44(sp)
    95c4:	dcc00915 	stw	r19,36(sp)
    95c8:	dc800815 	stw	r18,32(sp)
    95cc:	dc400715 	stw	r17,28(sp)
    95d0:	4021883a 	mov	r16,r8
    95d4:	1039883a 	mov	fp,r2
    95d8:	2829883a 	mov	r20,r5
    95dc:	38003b1e 	bne	r7,zero,96cc <__udivdi3+0x130>
    95e0:	2a005c36 	bltu	r5,r8,9754 <__udivdi3+0x1b8>
    95e4:	4000a626 	beq	r8,zero,9880 <__udivdi3+0x2e4>
    95e8:	00bfffd4 	movui	r2,65535
    95ec:	14009e36 	bltu	r2,r16,9868 <__udivdi3+0x2cc>
    95f0:	00803fc4 	movi	r2,255
    95f4:	14013d36 	bltu	r2,r16,9aec <__udivdi3+0x550>
    95f8:	000b883a 	mov	r5,zero
    95fc:	0005883a 	mov	r2,zero
    9600:	8084d83a 	srl	r2,r16,r2
    9604:	01000074 	movhi	r4,1
    9608:	211eb804 	addi	r4,r4,31456
    960c:	01800804 	movi	r6,32
    9610:	1105883a 	add	r2,r2,r4
    9614:	10c00003 	ldbu	r3,0(r2)
    9618:	28c7883a 	add	r3,r5,r3
    961c:	30edc83a 	sub	r22,r6,r3
    9620:	b000ee1e 	bne	r22,zero,99dc <__udivdi3+0x440>
    9624:	802ad43a 	srli	r21,r16,16
    9628:	00800044 	movi	r2,1
    962c:	a423c83a 	sub	r17,r20,r16
    9630:	85ffffcc 	andi	r23,r16,65535
    9634:	d8800315 	stw	r2,12(sp)
    9638:	8809883a 	mov	r4,r17
    963c:	a80b883a 	mov	r5,r21
    9640:	0001a440 	call	1a44 <__udivsi3>
    9644:	8809883a 	mov	r4,r17
    9648:	a80b883a 	mov	r5,r21
    964c:	102d883a 	mov	r22,r2
    9650:	0001a4c0 	call	1a4c <__umodsi3>
    9654:	1004943a 	slli	r2,r2,16
    9658:	e006d43a 	srli	r3,fp,16
    965c:	bda3383a 	mul	r17,r23,r22
    9660:	10c4b03a 	or	r2,r2,r3
    9664:	1440042e 	bgeu	r2,r17,9678 <__udivdi3+0xdc>
    9668:	1405883a 	add	r2,r2,r16
    966c:	b5bfffc4 	addi	r22,r22,-1
    9670:	14000136 	bltu	r2,r16,9678 <__udivdi3+0xdc>
    9674:	14413d36 	bltu	r2,r17,9b6c <__udivdi3+0x5d0>
    9678:	1463c83a 	sub	r17,r2,r17
    967c:	8809883a 	mov	r4,r17
    9680:	a80b883a 	mov	r5,r21
    9684:	0001a440 	call	1a44 <__udivsi3>
    9688:	8809883a 	mov	r4,r17
    968c:	a80b883a 	mov	r5,r21
    9690:	1029883a 	mov	r20,r2
    9694:	0001a4c0 	call	1a4c <__umodsi3>
    9698:	1004943a 	slli	r2,r2,16
    969c:	bd09383a 	mul	r4,r23,r20
    96a0:	e0ffffcc 	andi	r3,fp,65535
    96a4:	10c4b03a 	or	r2,r2,r3
    96a8:	1100042e 	bgeu	r2,r4,96bc <__udivdi3+0x120>
    96ac:	8085883a 	add	r2,r16,r2
    96b0:	a53fffc4 	addi	r20,r20,-1
    96b4:	14000136 	bltu	r2,r16,96bc <__udivdi3+0x120>
    96b8:	11012036 	bltu	r2,r4,9b3c <__udivdi3+0x5a0>
    96bc:	b004943a 	slli	r2,r22,16
    96c0:	d9000317 	ldw	r4,12(sp)
    96c4:	a084b03a 	or	r2,r20,r2
    96c8:	00001506 	br	9720 <__udivdi3+0x184>
    96cc:	380d883a 	mov	r6,r7
    96d0:	29c06236 	bltu	r5,r7,985c <__udivdi3+0x2c0>
    96d4:	00bfffd4 	movui	r2,65535
    96d8:	11c05a36 	bltu	r2,r7,9844 <__udivdi3+0x2a8>
    96dc:	00803fc4 	movi	r2,255
    96e0:	11c0fc36 	bltu	r2,r7,9ad4 <__udivdi3+0x538>
    96e4:	000b883a 	mov	r5,zero
    96e8:	0005883a 	mov	r2,zero
    96ec:	3084d83a 	srl	r2,r6,r2
    96f0:	01000074 	movhi	r4,1
    96f4:	211eb804 	addi	r4,r4,31456
    96f8:	01c00804 	movi	r7,32
    96fc:	1105883a 	add	r2,r2,r4
    9700:	10c00003 	ldbu	r3,0(r2)
    9704:	28c7883a 	add	r3,r5,r3
    9708:	38efc83a 	sub	r23,r7,r3
    970c:	b800691e 	bne	r23,zero,98b4 <__udivdi3+0x318>
    9710:	35000136 	bltu	r6,r20,9718 <__udivdi3+0x17c>
    9714:	e4005136 	bltu	fp,r16,985c <__udivdi3+0x2c0>
    9718:	00800044 	movi	r2,1
    971c:	0009883a 	mov	r4,zero
    9720:	2007883a 	mov	r3,r4
    9724:	dfc00f17 	ldw	ra,60(sp)
    9728:	df000e17 	ldw	fp,56(sp)
    972c:	ddc00d17 	ldw	r23,52(sp)
    9730:	dd800c17 	ldw	r22,48(sp)
    9734:	dd400b17 	ldw	r21,44(sp)
    9738:	dd000a17 	ldw	r20,40(sp)
    973c:	dcc00917 	ldw	r19,36(sp)
    9740:	dc800817 	ldw	r18,32(sp)
    9744:	dc400717 	ldw	r17,28(sp)
    9748:	dc000617 	ldw	r16,24(sp)
    974c:	dec01004 	addi	sp,sp,64
    9750:	f800283a 	ret
    9754:	00bfffd4 	movui	r2,65535
    9758:	12005036 	bltu	r2,r8,989c <__udivdi3+0x300>
    975c:	00803fc4 	movi	r2,255
    9760:	1200e836 	bltu	r2,r8,9b04 <__udivdi3+0x568>
    9764:	000b883a 	mov	r5,zero
    9768:	0005883a 	mov	r2,zero
    976c:	8084d83a 	srl	r2,r16,r2
    9770:	01000074 	movhi	r4,1
    9774:	211eb804 	addi	r4,r4,31456
    9778:	01800804 	movi	r6,32
    977c:	1105883a 	add	r2,r2,r4
    9780:	10c00003 	ldbu	r3,0(r2)
    9784:	28c7883a 	add	r3,r5,r3
    9788:	30cbc83a 	sub	r5,r6,r3
    978c:	28000626 	beq	r5,zero,97a8 <__udivdi3+0x20c>
    9790:	3145c83a 	sub	r2,r6,r5
    9794:	e084d83a 	srl	r2,fp,r2
    9798:	a146983a 	sll	r3,r20,r5
    979c:	e178983a 	sll	fp,fp,r5
    97a0:	8160983a 	sll	r16,r16,r5
    97a4:	18a8b03a 	or	r20,r3,r2
    97a8:	802ad43a 	srli	r21,r16,16
    97ac:	a009883a 	mov	r4,r20
    97b0:	85ffffcc 	andi	r23,r16,65535
    97b4:	a80b883a 	mov	r5,r21
    97b8:	0001a440 	call	1a44 <__udivsi3>
    97bc:	a009883a 	mov	r4,r20
    97c0:	a80b883a 	mov	r5,r21
    97c4:	102d883a 	mov	r22,r2
    97c8:	0001a4c0 	call	1a4c <__umodsi3>
    97cc:	1004943a 	slli	r2,r2,16
    97d0:	e006d43a 	srli	r3,fp,16
    97d4:	bda3383a 	mul	r17,r23,r22
    97d8:	10c4b03a 	or	r2,r2,r3
    97dc:	1440042e 	bgeu	r2,r17,97f0 <__udivdi3+0x254>
    97e0:	1405883a 	add	r2,r2,r16
    97e4:	b5bfffc4 	addi	r22,r22,-1
    97e8:	14000136 	bltu	r2,r16,97f0 <__udivdi3+0x254>
    97ec:	1440d536 	bltu	r2,r17,9b44 <__udivdi3+0x5a8>
    97f0:	1463c83a 	sub	r17,r2,r17
    97f4:	8809883a 	mov	r4,r17
    97f8:	a80b883a 	mov	r5,r21
    97fc:	0001a440 	call	1a44 <__udivsi3>
    9800:	8809883a 	mov	r4,r17
    9804:	a80b883a 	mov	r5,r21
    9808:	1029883a 	mov	r20,r2
    980c:	0001a4c0 	call	1a4c <__umodsi3>
    9810:	1004943a 	slli	r2,r2,16
    9814:	bd09383a 	mul	r4,r23,r20
    9818:	e0ffffcc 	andi	r3,fp,65535
    981c:	10c4b03a 	or	r2,r2,r3
    9820:	1100042e 	bgeu	r2,r4,9834 <__udivdi3+0x298>
    9824:	8085883a 	add	r2,r16,r2
    9828:	a53fffc4 	addi	r20,r20,-1
    982c:	14000136 	bltu	r2,r16,9834 <__udivdi3+0x298>
    9830:	1100c736 	bltu	r2,r4,9b50 <__udivdi3+0x5b4>
    9834:	b004943a 	slli	r2,r22,16
    9838:	0009883a 	mov	r4,zero
    983c:	a084b03a 	or	r2,r20,r2
    9840:	003fb706 	br	9720 <__udivdi3+0x184>
    9844:	00804034 	movhi	r2,256
    9848:	10bfffc4 	addi	r2,r2,-1
    984c:	11c0a436 	bltu	r2,r7,9ae0 <__udivdi3+0x544>
    9850:	01400404 	movi	r5,16
    9854:	2805883a 	mov	r2,r5
    9858:	003fa406 	br	96ec <__udivdi3+0x150>
    985c:	0005883a 	mov	r2,zero
    9860:	0009883a 	mov	r4,zero
    9864:	003fae06 	br	9720 <__udivdi3+0x184>
    9868:	00804034 	movhi	r2,256
    986c:	10bfffc4 	addi	r2,r2,-1
    9870:	1400a136 	bltu	r2,r16,9af8 <__udivdi3+0x55c>
    9874:	01400404 	movi	r5,16
    9878:	2805883a 	mov	r2,r5
    987c:	003f6006 	br	9600 <__udivdi3+0x64>
    9880:	01000044 	movi	r4,1
    9884:	000b883a 	mov	r5,zero
    9888:	0001a440 	call	1a44 <__udivsi3>
    988c:	1021883a 	mov	r16,r2
    9890:	00bfffd4 	movui	r2,65535
    9894:	143ff436 	bltu	r2,r16,9868 <__udivdi3+0x2cc>
    9898:	003f5506 	br	95f0 <__udivdi3+0x54>
    989c:	00804034 	movhi	r2,256
    98a0:	10bfffc4 	addi	r2,r2,-1
    98a4:	12009a36 	bltu	r2,r8,9b10 <__udivdi3+0x574>
    98a8:	01400404 	movi	r5,16
    98ac:	2805883a 	mov	r2,r5
    98b0:	003fae06 	br	976c <__udivdi3+0x1d0>
    98b4:	3dc5c83a 	sub	r2,r7,r23
    98b8:	35c8983a 	sll	r4,r6,r23
    98bc:	8086d83a 	srl	r3,r16,r2
    98c0:	a0a2d83a 	srl	r17,r20,r2
    98c4:	e084d83a 	srl	r2,fp,r2
    98c8:	20eab03a 	or	r21,r4,r3
    98cc:	a82cd43a 	srli	r22,r21,16
    98d0:	a5c6983a 	sll	r3,r20,r23
    98d4:	8809883a 	mov	r4,r17
    98d8:	b00b883a 	mov	r5,r22
    98dc:	1886b03a 	or	r3,r3,r2
    98e0:	d8c00215 	stw	r3,8(sp)
    98e4:	0001a440 	call	1a44 <__udivsi3>
    98e8:	8809883a 	mov	r4,r17
    98ec:	b00b883a 	mov	r5,r22
    98f0:	1029883a 	mov	r20,r2
    98f4:	0001a4c0 	call	1a4c <__umodsi3>
    98f8:	a8ffffcc 	andi	r3,r21,65535
    98fc:	d8c00515 	stw	r3,20(sp)
    9900:	d9000217 	ldw	r4,8(sp)
    9904:	d9400517 	ldw	r5,20(sp)
    9908:	1004943a 	slli	r2,r2,16
    990c:	2006d43a 	srli	r3,r4,16
    9910:	85e0983a 	sll	r16,r16,r23
    9914:	2d23383a 	mul	r17,r5,r20
    9918:	10c4b03a 	or	r2,r2,r3
    991c:	dc000015 	stw	r16,0(sp)
    9920:	1440032e 	bgeu	r2,r17,9930 <__udivdi3+0x394>
    9924:	1545883a 	add	r2,r2,r21
    9928:	a53fffc4 	addi	r20,r20,-1
    992c:	15407f2e 	bgeu	r2,r21,9b2c <__udivdi3+0x590>
    9930:	1463c83a 	sub	r17,r2,r17
    9934:	8809883a 	mov	r4,r17
    9938:	b00b883a 	mov	r5,r22
    993c:	0001a440 	call	1a44 <__udivsi3>
    9940:	8809883a 	mov	r4,r17
    9944:	b00b883a 	mov	r5,r22
    9948:	1021883a 	mov	r16,r2
    994c:	0001a4c0 	call	1a4c <__umodsi3>
    9950:	d8c00517 	ldw	r3,20(sp)
    9954:	d9000217 	ldw	r4,8(sp)
    9958:	1004943a 	slli	r2,r2,16
    995c:	1c0f383a 	mul	r7,r3,r16
    9960:	20ffffcc 	andi	r3,r4,65535
    9964:	10e2b03a 	or	r17,r2,r3
    9968:	89c0032e 	bgeu	r17,r7,9978 <__udivdi3+0x3dc>
    996c:	8d63883a 	add	r17,r17,r21
    9970:	843fffc4 	addi	r16,r16,-1
    9974:	8d40692e 	bgeu	r17,r21,9b1c <__udivdi3+0x580>
    9978:	a008943a 	slli	r4,r20,16
    997c:	d9400017 	ldw	r5,0(sp)
    9980:	89e3c83a 	sub	r17,r17,r7
    9984:	8110b03a 	or	r8,r16,r4
    9988:	280cd43a 	srli	r6,r5,16
    998c:	28ffffcc 	andi	r3,r5,65535
    9990:	40bfffcc 	andi	r2,r8,65535
    9994:	400ad43a 	srli	r5,r8,16
    9998:	10d3383a 	mul	r9,r2,r3
    999c:	1185383a 	mul	r2,r2,r6
    99a0:	28c7383a 	mul	r3,r5,r3
    99a4:	4808d43a 	srli	r4,r9,16
    99a8:	298b383a 	mul	r5,r5,r6
    99ac:	10c5883a 	add	r2,r2,r3
    99b0:	2089883a 	add	r4,r4,r2
    99b4:	20c0022e 	bgeu	r4,r3,99c0 <__udivdi3+0x424>
    99b8:	00800074 	movhi	r2,1
    99bc:	288b883a 	add	r5,r5,r2
    99c0:	2004d43a 	srli	r2,r4,16
    99c4:	288b883a 	add	r5,r5,r2
    99c8:	89403f36 	bltu	r17,r5,9ac8 <__udivdi3+0x52c>
    99cc:	89403926 	beq	r17,r5,9ab4 <__udivdi3+0x518>
    99d0:	4005883a 	mov	r2,r8
    99d4:	0009883a 	mov	r4,zero
    99d8:	003f5106 	br	9720 <__udivdi3+0x184>
    99dc:	85a0983a 	sll	r16,r16,r22
    99e0:	3585c83a 	sub	r2,r6,r22
    99e4:	a0a2d83a 	srl	r17,r20,r2
    99e8:	802ad43a 	srli	r21,r16,16
    99ec:	e084d83a 	srl	r2,fp,r2
    99f0:	a586983a 	sll	r3,r20,r22
    99f4:	8809883a 	mov	r4,r17
    99f8:	a80b883a 	mov	r5,r21
    99fc:	1886b03a 	or	r3,r3,r2
    9a00:	d8c00115 	stw	r3,4(sp)
    9a04:	0001a440 	call	1a44 <__udivsi3>
    9a08:	8809883a 	mov	r4,r17
    9a0c:	a80b883a 	mov	r5,r21
    9a10:	d8800415 	stw	r2,16(sp)
    9a14:	0001a4c0 	call	1a4c <__umodsi3>
    9a18:	d9000117 	ldw	r4,4(sp)
    9a1c:	d9400417 	ldw	r5,16(sp)
    9a20:	1004943a 	slli	r2,r2,16
    9a24:	85ffffcc 	andi	r23,r16,65535
    9a28:	2006d43a 	srli	r3,r4,16
    9a2c:	b963383a 	mul	r17,r23,r5
    9a30:	10c4b03a 	or	r2,r2,r3
    9a34:	1440042e 	bgeu	r2,r17,9a48 <__udivdi3+0x4ac>
    9a38:	297fffc4 	addi	r5,r5,-1
    9a3c:	1405883a 	add	r2,r2,r16
    9a40:	d9400415 	stw	r5,16(sp)
    9a44:	1400442e 	bgeu	r2,r16,9b58 <__udivdi3+0x5bc>
    9a48:	1463c83a 	sub	r17,r2,r17
    9a4c:	8809883a 	mov	r4,r17
    9a50:	a80b883a 	mov	r5,r21
    9a54:	0001a440 	call	1a44 <__udivsi3>
    9a58:	8809883a 	mov	r4,r17
    9a5c:	a80b883a 	mov	r5,r21
    9a60:	1029883a 	mov	r20,r2
    9a64:	0001a4c0 	call	1a4c <__umodsi3>
    9a68:	d9400117 	ldw	r5,4(sp)
    9a6c:	1004943a 	slli	r2,r2,16
    9a70:	bd09383a 	mul	r4,r23,r20
    9a74:	28ffffcc 	andi	r3,r5,65535
    9a78:	10c6b03a 	or	r3,r2,r3
    9a7c:	1900062e 	bgeu	r3,r4,9a98 <__udivdi3+0x4fc>
    9a80:	1c07883a 	add	r3,r3,r16
    9a84:	a53fffc4 	addi	r20,r20,-1
    9a88:	1c000336 	bltu	r3,r16,9a98 <__udivdi3+0x4fc>
    9a8c:	1900022e 	bgeu	r3,r4,9a98 <__udivdi3+0x4fc>
    9a90:	a53fffc4 	addi	r20,r20,-1
    9a94:	1c07883a 	add	r3,r3,r16
    9a98:	d9400417 	ldw	r5,16(sp)
    9a9c:	e5b8983a 	sll	fp,fp,r22
    9aa0:	1923c83a 	sub	r17,r3,r4
    9aa4:	2804943a 	slli	r2,r5,16
    9aa8:	a0a8b03a 	or	r20,r20,r2
    9aac:	dd000315 	stw	r20,12(sp)
    9ab0:	003ee106 	br	9638 <__udivdi3+0x9c>
    9ab4:	2004943a 	slli	r2,r4,16
    9ab8:	e5c8983a 	sll	r4,fp,r23
    9abc:	48ffffcc 	andi	r3,r9,65535
    9ac0:	10c5883a 	add	r2,r2,r3
    9ac4:	20bfc22e 	bgeu	r4,r2,99d0 <__udivdi3+0x434>
    9ac8:	40bfffc4 	addi	r2,r8,-1
    9acc:	0009883a 	mov	r4,zero
    9ad0:	003f1306 	br	9720 <__udivdi3+0x184>
    9ad4:	01400204 	movi	r5,8
    9ad8:	2805883a 	mov	r2,r5
    9adc:	003f0306 	br	96ec <__udivdi3+0x150>
    9ae0:	01400604 	movi	r5,24
    9ae4:	2805883a 	mov	r2,r5
    9ae8:	003f0006 	br	96ec <__udivdi3+0x150>
    9aec:	01400204 	movi	r5,8
    9af0:	2805883a 	mov	r2,r5
    9af4:	003ec206 	br	9600 <__udivdi3+0x64>
    9af8:	01400604 	movi	r5,24
    9afc:	2805883a 	mov	r2,r5
    9b00:	003ebf06 	br	9600 <__udivdi3+0x64>
    9b04:	01400204 	movi	r5,8
    9b08:	2805883a 	mov	r2,r5
    9b0c:	003f1706 	br	976c <__udivdi3+0x1d0>
    9b10:	01400604 	movi	r5,24
    9b14:	2805883a 	mov	r2,r5
    9b18:	003f1406 	br	976c <__udivdi3+0x1d0>
    9b1c:	89ff962e 	bgeu	r17,r7,9978 <__udivdi3+0x3dc>
    9b20:	8d63883a 	add	r17,r17,r21
    9b24:	843fffc4 	addi	r16,r16,-1
    9b28:	003f9306 	br	9978 <__udivdi3+0x3dc>
    9b2c:	147f802e 	bgeu	r2,r17,9930 <__udivdi3+0x394>
    9b30:	a53fffc4 	addi	r20,r20,-1
    9b34:	1545883a 	add	r2,r2,r21
    9b38:	003f7d06 	br	9930 <__udivdi3+0x394>
    9b3c:	a53fffc4 	addi	r20,r20,-1
    9b40:	003ede06 	br	96bc <__udivdi3+0x120>
    9b44:	b5bfffc4 	addi	r22,r22,-1
    9b48:	1405883a 	add	r2,r2,r16
    9b4c:	003f2806 	br	97f0 <__udivdi3+0x254>
    9b50:	a53fffc4 	addi	r20,r20,-1
    9b54:	003f3706 	br	9834 <__udivdi3+0x298>
    9b58:	147fbb2e 	bgeu	r2,r17,9a48 <__udivdi3+0x4ac>
    9b5c:	297fffc4 	addi	r5,r5,-1
    9b60:	1405883a 	add	r2,r2,r16
    9b64:	d9400415 	stw	r5,16(sp)
    9b68:	003fb706 	br	9a48 <__udivdi3+0x4ac>
    9b6c:	b5bfffc4 	addi	r22,r22,-1
    9b70:	1405883a 	add	r2,r2,r16
    9b74:	003ec006 	br	9678 <__udivdi3+0xdc>

00009b78 <__umoddi3>:
    9b78:	defff104 	addi	sp,sp,-60
    9b7c:	dd800b15 	stw	r22,44(sp)
    9b80:	dd000915 	stw	r20,36(sp)
    9b84:	dc000515 	stw	r16,20(sp)
    9b88:	dfc00e15 	stw	ra,56(sp)
    9b8c:	df000d15 	stw	fp,52(sp)
    9b90:	ddc00c15 	stw	r23,48(sp)
    9b94:	dd400a15 	stw	r21,40(sp)
    9b98:	dcc00815 	stw	r19,32(sp)
    9b9c:	dc800715 	stw	r18,28(sp)
    9ba0:	dc400615 	stw	r17,24(sp)
    9ba4:	3021883a 	mov	r16,r6
    9ba8:	202d883a 	mov	r22,r4
    9bac:	2829883a 	mov	r20,r5
    9bb0:	38002b1e 	bne	r7,zero,9c60 <__umoddi3+0xe8>
    9bb4:	29805036 	bltu	r5,r6,9cf8 <__umoddi3+0x180>
    9bb8:	30008a26 	beq	r6,zero,9de4 <__umoddi3+0x26c>
    9bbc:	00bfffd4 	movui	r2,65535
    9bc0:	14008236 	bltu	r2,r16,9dcc <__umoddi3+0x254>
    9bc4:	00803fc4 	movi	r2,255
    9bc8:	14013636 	bltu	r2,r16,a0a4 <__umoddi3+0x52c>
    9bcc:	000b883a 	mov	r5,zero
    9bd0:	0005883a 	mov	r2,zero
    9bd4:	8084d83a 	srl	r2,r16,r2
    9bd8:	01000074 	movhi	r4,1
    9bdc:	211eb804 	addi	r4,r4,31456
    9be0:	01800804 	movi	r6,32
    9be4:	1105883a 	add	r2,r2,r4
    9be8:	10c00003 	ldbu	r3,0(r2)
    9bec:	28c7883a 	add	r3,r5,r3
    9bf0:	30efc83a 	sub	r23,r6,r3
    9bf4:	b800941e 	bne	r23,zero,9e48 <__umoddi3+0x2d0>
    9bf8:	802ad43a 	srli	r21,r16,16
    9bfc:	a423c83a 	sub	r17,r20,r16
    9c00:	0039883a 	mov	fp,zero
    9c04:	853fffcc 	andi	r20,r16,65535
    9c08:	8809883a 	mov	r4,r17
    9c0c:	a80b883a 	mov	r5,r21
    9c10:	0001a440 	call	1a44 <__udivsi3>
    9c14:	8809883a 	mov	r4,r17
    9c18:	a80b883a 	mov	r5,r21
    9c1c:	a0a3383a 	mul	r17,r20,r2
    9c20:	0001a4c0 	call	1a4c <__umodsi3>
    9c24:	1004943a 	slli	r2,r2,16
    9c28:	b006d43a 	srli	r3,r22,16
    9c2c:	10c4b03a 	or	r2,r2,r3
    9c30:	1440032e 	bgeu	r2,r17,9c40 <__umoddi3+0xc8>
    9c34:	1405883a 	add	r2,r2,r16
    9c38:	14000136 	bltu	r2,r16,9c40 <__umoddi3+0xc8>
    9c3c:	14413536 	bltu	r2,r17,a114 <__umoddi3+0x59c>
    9c40:	1463c83a 	sub	r17,r2,r17
    9c44:	8809883a 	mov	r4,r17
    9c48:	a80b883a 	mov	r5,r21
    9c4c:	0001a440 	call	1a44 <__udivsi3>
    9c50:	8809883a 	mov	r4,r17
    9c54:	a0a3383a 	mul	r17,r20,r2
    9c58:	a80b883a 	mov	r5,r21
    9c5c:	00004d06 	br	9d94 <__umoddi3+0x21c>
    9c60:	380d883a 	mov	r6,r7
    9c64:	29c0102e 	bgeu	r5,r7,9ca8 <__umoddi3+0x130>
    9c68:	2011883a 	mov	r8,r4
    9c6c:	2813883a 	mov	r9,r5
    9c70:	4005883a 	mov	r2,r8
    9c74:	4807883a 	mov	r3,r9
    9c78:	dfc00e17 	ldw	ra,56(sp)
    9c7c:	df000d17 	ldw	fp,52(sp)
    9c80:	ddc00c17 	ldw	r23,48(sp)
    9c84:	dd800b17 	ldw	r22,44(sp)
    9c88:	dd400a17 	ldw	r21,40(sp)
    9c8c:	dd000917 	ldw	r20,36(sp)
    9c90:	dcc00817 	ldw	r19,32(sp)
    9c94:	dc800717 	ldw	r18,28(sp)
    9c98:	dc400617 	ldw	r17,24(sp)
    9c9c:	dc000517 	ldw	r16,20(sp)
    9ca0:	dec00f04 	addi	sp,sp,60
    9ca4:	f800283a 	ret
    9ca8:	00bfffd4 	movui	r2,65535
    9cac:	11c05a36 	bltu	r2,r7,9e18 <__umoddi3+0x2a0>
    9cb0:	00803fc4 	movi	r2,255
    9cb4:	11c0fe36 	bltu	r2,r7,a0b0 <__umoddi3+0x538>
    9cb8:	000b883a 	mov	r5,zero
    9cbc:	0005883a 	mov	r2,zero
    9cc0:	3084d83a 	srl	r2,r6,r2
    9cc4:	01000074 	movhi	r4,1
    9cc8:	211eb804 	addi	r4,r4,31456
    9ccc:	01c00804 	movi	r7,32
    9cd0:	1105883a 	add	r2,r2,r4
    9cd4:	10c00003 	ldbu	r3,0(r2)
    9cd8:	28c7883a 	add	r3,r5,r3
    9cdc:	38ebc83a 	sub	r21,r7,r3
    9ce0:	a800851e 	bne	r21,zero,9ef8 <__umoddi3+0x380>
    9ce4:	35005236 	bltu	r6,r20,9e30 <__umoddi3+0x2b8>
    9ce8:	b400512e 	bgeu	r22,r16,9e30 <__umoddi3+0x2b8>
    9cec:	b011883a 	mov	r8,r22
    9cf0:	a013883a 	mov	r9,r20
    9cf4:	003fde06 	br	9c70 <__umoddi3+0xf8>
    9cf8:	00bfffd4 	movui	r2,65535
    9cfc:	11804036 	bltu	r2,r6,9e00 <__umoddi3+0x288>
    9d00:	00803fc4 	movi	r2,255
    9d04:	1180ed36 	bltu	r2,r6,a0bc <__umoddi3+0x544>
    9d08:	000b883a 	mov	r5,zero
    9d0c:	0005883a 	mov	r2,zero
    9d10:	8084d83a 	srl	r2,r16,r2
    9d14:	01000074 	movhi	r4,1
    9d18:	211eb804 	addi	r4,r4,31456
    9d1c:	01800804 	movi	r6,32
    9d20:	1105883a 	add	r2,r2,r4
    9d24:	10c00003 	ldbu	r3,0(r2)
    9d28:	28c7883a 	add	r3,r5,r3
    9d2c:	30c7c83a 	sub	r3,r6,r3
    9d30:	1800bf1e 	bne	r3,zero,a030 <__umoddi3+0x4b8>
    9d34:	0039883a 	mov	fp,zero
    9d38:	802ad43a 	srli	r21,r16,16
    9d3c:	a009883a 	mov	r4,r20
    9d40:	85ffffcc 	andi	r23,r16,65535
    9d44:	a80b883a 	mov	r5,r21
    9d48:	0001a440 	call	1a44 <__udivsi3>
    9d4c:	a009883a 	mov	r4,r20
    9d50:	a80b883a 	mov	r5,r21
    9d54:	b8a3383a 	mul	r17,r23,r2
    9d58:	0001a4c0 	call	1a4c <__umodsi3>
    9d5c:	1004943a 	slli	r2,r2,16
    9d60:	b006d43a 	srli	r3,r22,16
    9d64:	10c4b03a 	or	r2,r2,r3
    9d68:	1440032e 	bgeu	r2,r17,9d78 <__umoddi3+0x200>
    9d6c:	1405883a 	add	r2,r2,r16
    9d70:	14000136 	bltu	r2,r16,9d78 <__umoddi3+0x200>
    9d74:	1440e536 	bltu	r2,r17,a10c <__umoddi3+0x594>
    9d78:	1463c83a 	sub	r17,r2,r17
    9d7c:	8809883a 	mov	r4,r17
    9d80:	a80b883a 	mov	r5,r21
    9d84:	0001a440 	call	1a44 <__udivsi3>
    9d88:	8809883a 	mov	r4,r17
    9d8c:	b8a3383a 	mul	r17,r23,r2
    9d90:	a80b883a 	mov	r5,r21
    9d94:	0001a4c0 	call	1a4c <__umodsi3>
    9d98:	1004943a 	slli	r2,r2,16
    9d9c:	b0ffffcc 	andi	r3,r22,65535
    9da0:	10c4b03a 	or	r2,r2,r3
    9da4:	1440042e 	bgeu	r2,r17,9db8 <__umoddi3+0x240>
    9da8:	1405883a 	add	r2,r2,r16
    9dac:	14000236 	bltu	r2,r16,9db8 <__umoddi3+0x240>
    9db0:	1440012e 	bgeu	r2,r17,9db8 <__umoddi3+0x240>
    9db4:	1405883a 	add	r2,r2,r16
    9db8:	1445c83a 	sub	r2,r2,r17
    9dbc:	1724d83a 	srl	r18,r2,fp
    9dc0:	0013883a 	mov	r9,zero
    9dc4:	9011883a 	mov	r8,r18
    9dc8:	003fa906 	br	9c70 <__umoddi3+0xf8>
    9dcc:	00804034 	movhi	r2,256
    9dd0:	10bfffc4 	addi	r2,r2,-1
    9dd4:	1400b036 	bltu	r2,r16,a098 <__umoddi3+0x520>
    9dd8:	01400404 	movi	r5,16
    9ddc:	2805883a 	mov	r2,r5
    9de0:	003f7c06 	br	9bd4 <__umoddi3+0x5c>
    9de4:	01000044 	movi	r4,1
    9de8:	000b883a 	mov	r5,zero
    9dec:	0001a440 	call	1a44 <__udivsi3>
    9df0:	1021883a 	mov	r16,r2
    9df4:	00bfffd4 	movui	r2,65535
    9df8:	143ff436 	bltu	r2,r16,9dcc <__umoddi3+0x254>
    9dfc:	003f7106 	br	9bc4 <__umoddi3+0x4c>
    9e00:	00804034 	movhi	r2,256
    9e04:	10bfffc4 	addi	r2,r2,-1
    9e08:	1180af36 	bltu	r2,r6,a0c8 <__umoddi3+0x550>
    9e0c:	01400404 	movi	r5,16
    9e10:	2805883a 	mov	r2,r5
    9e14:	003fbe06 	br	9d10 <__umoddi3+0x198>
    9e18:	00804034 	movhi	r2,256
    9e1c:	10bfffc4 	addi	r2,r2,-1
    9e20:	11c0ac36 	bltu	r2,r7,a0d4 <__umoddi3+0x55c>
    9e24:	01400404 	movi	r5,16
    9e28:	2805883a 	mov	r2,r5
    9e2c:	003fa406 	br	9cc0 <__umoddi3+0x148>
    9e30:	b409c83a 	sub	r4,r22,r16
    9e34:	b105803a 	cmpltu	r2,r22,r4
    9e38:	a187c83a 	sub	r3,r20,r6
    9e3c:	18a9c83a 	sub	r20,r3,r2
    9e40:	202d883a 	mov	r22,r4
    9e44:	003fa906 	br	9cec <__umoddi3+0x174>
    9e48:	85e0983a 	sll	r16,r16,r23
    9e4c:	35c5c83a 	sub	r2,r6,r23
    9e50:	a0a2d83a 	srl	r17,r20,r2
    9e54:	802ad43a 	srli	r21,r16,16
    9e58:	b084d83a 	srl	r2,r22,r2
    9e5c:	a5c6983a 	sll	r3,r20,r23
    9e60:	8809883a 	mov	r4,r17
    9e64:	a80b883a 	mov	r5,r21
    9e68:	1886b03a 	or	r3,r3,r2
    9e6c:	d8c00115 	stw	r3,4(sp)
    9e70:	853fffcc 	andi	r20,r16,65535
    9e74:	0001a440 	call	1a44 <__udivsi3>
    9e78:	8809883a 	mov	r4,r17
    9e7c:	a80b883a 	mov	r5,r21
    9e80:	a0a3383a 	mul	r17,r20,r2
    9e84:	0001a4c0 	call	1a4c <__umodsi3>
    9e88:	d9000117 	ldw	r4,4(sp)
    9e8c:	1004943a 	slli	r2,r2,16
    9e90:	b839883a 	mov	fp,r23
    9e94:	2006d43a 	srli	r3,r4,16
    9e98:	10c4b03a 	or	r2,r2,r3
    9e9c:	1440022e 	bgeu	r2,r17,9ea8 <__umoddi3+0x330>
    9ea0:	1405883a 	add	r2,r2,r16
    9ea4:	1400962e 	bgeu	r2,r16,a100 <__umoddi3+0x588>
    9ea8:	1463c83a 	sub	r17,r2,r17
    9eac:	8809883a 	mov	r4,r17
    9eb0:	a80b883a 	mov	r5,r21
    9eb4:	0001a440 	call	1a44 <__udivsi3>
    9eb8:	8809883a 	mov	r4,r17
    9ebc:	a80b883a 	mov	r5,r21
    9ec0:	a0a3383a 	mul	r17,r20,r2
    9ec4:	0001a4c0 	call	1a4c <__umodsi3>
    9ec8:	d9400117 	ldw	r5,4(sp)
    9ecc:	1004943a 	slli	r2,r2,16
    9ed0:	28ffffcc 	andi	r3,r5,65535
    9ed4:	10c4b03a 	or	r2,r2,r3
    9ed8:	1440042e 	bgeu	r2,r17,9eec <__umoddi3+0x374>
    9edc:	1405883a 	add	r2,r2,r16
    9ee0:	14000236 	bltu	r2,r16,9eec <__umoddi3+0x374>
    9ee4:	1440012e 	bgeu	r2,r17,9eec <__umoddi3+0x374>
    9ee8:	1405883a 	add	r2,r2,r16
    9eec:	b5ec983a 	sll	r22,r22,r23
    9ef0:	1463c83a 	sub	r17,r2,r17
    9ef4:	003f4406 	br	9c08 <__umoddi3+0x90>
    9ef8:	3d4fc83a 	sub	r7,r7,r21
    9efc:	3546983a 	sll	r3,r6,r21
    9f00:	81c4d83a 	srl	r2,r16,r7
    9f04:	a1e2d83a 	srl	r17,r20,r7
    9f08:	a54c983a 	sll	r6,r20,r21
    9f0c:	18aeb03a 	or	r23,r3,r2
    9f10:	b828d43a 	srli	r20,r23,16
    9f14:	b1c4d83a 	srl	r2,r22,r7
    9f18:	8809883a 	mov	r4,r17
    9f1c:	a00b883a 	mov	r5,r20
    9f20:	308cb03a 	or	r6,r6,r2
    9f24:	d9c00315 	stw	r7,12(sp)
    9f28:	d9800215 	stw	r6,8(sp)
    9f2c:	0001a440 	call	1a44 <__udivsi3>
    9f30:	8809883a 	mov	r4,r17
    9f34:	a00b883a 	mov	r5,r20
    9f38:	1039883a 	mov	fp,r2
    9f3c:	0001a4c0 	call	1a4c <__umodsi3>
    9f40:	b8ffffcc 	andi	r3,r23,65535
    9f44:	d8c00415 	stw	r3,16(sp)
    9f48:	d9000217 	ldw	r4,8(sp)
    9f4c:	d9400417 	ldw	r5,16(sp)
    9f50:	1004943a 	slli	r2,r2,16
    9f54:	2006d43a 	srli	r3,r4,16
    9f58:	8560983a 	sll	r16,r16,r21
    9f5c:	2f23383a 	mul	r17,r5,fp
    9f60:	10c4b03a 	or	r2,r2,r3
    9f64:	dc000015 	stw	r16,0(sp)
    9f68:	b56c983a 	sll	r22,r22,r21
    9f6c:	1440032e 	bgeu	r2,r17,9f7c <__umoddi3+0x404>
    9f70:	15c5883a 	add	r2,r2,r23
    9f74:	e73fffc4 	addi	fp,fp,-1
    9f78:	15c05d2e 	bgeu	r2,r23,a0f0 <__umoddi3+0x578>
    9f7c:	1463c83a 	sub	r17,r2,r17
    9f80:	8809883a 	mov	r4,r17
    9f84:	a00b883a 	mov	r5,r20
    9f88:	0001a440 	call	1a44 <__udivsi3>
    9f8c:	8809883a 	mov	r4,r17
    9f90:	a00b883a 	mov	r5,r20
    9f94:	1021883a 	mov	r16,r2
    9f98:	0001a4c0 	call	1a4c <__umodsi3>
    9f9c:	d8c00417 	ldw	r3,16(sp)
    9fa0:	d9000217 	ldw	r4,8(sp)
    9fa4:	1004943a 	slli	r2,r2,16
    9fa8:	1c23383a 	mul	r17,r3,r16
    9fac:	20ffffcc 	andi	r3,r4,65535
    9fb0:	10ceb03a 	or	r7,r2,r3
    9fb4:	3c40032e 	bgeu	r7,r17,9fc4 <__umoddi3+0x44c>
    9fb8:	3dcf883a 	add	r7,r7,r23
    9fbc:	843fffc4 	addi	r16,r16,-1
    9fc0:	3dc0472e 	bgeu	r7,r23,a0e0 <__umoddi3+0x568>
    9fc4:	e004943a 	slli	r2,fp,16
    9fc8:	d9400017 	ldw	r5,0(sp)
    9fcc:	3c4fc83a 	sub	r7,r7,r17
    9fd0:	8084b03a 	or	r2,r16,r2
    9fd4:	28ffffcc 	andi	r3,r5,65535
    9fd8:	280cd43a 	srli	r6,r5,16
    9fdc:	100ad43a 	srli	r5,r2,16
    9fe0:	10bfffcc 	andi	r2,r2,65535
    9fe4:	10d1383a 	mul	r8,r2,r3
    9fe8:	28c7383a 	mul	r3,r5,r3
    9fec:	1185383a 	mul	r2,r2,r6
    9ff0:	4008d43a 	srli	r4,r8,16
    9ff4:	298b383a 	mul	r5,r5,r6
    9ff8:	10c5883a 	add	r2,r2,r3
    9ffc:	2089883a 	add	r4,r4,r2
    a000:	20c0022e 	bgeu	r4,r3,a00c <__umoddi3+0x494>
    a004:	00800074 	movhi	r2,1
    a008:	288b883a 	add	r5,r5,r2
    a00c:	2004d43a 	srli	r2,r4,16
    a010:	2008943a 	slli	r4,r4,16
    a014:	40ffffcc 	andi	r3,r8,65535
    a018:	288b883a 	add	r5,r5,r2
    a01c:	20c9883a 	add	r4,r4,r3
    a020:	39400b36 	bltu	r7,r5,a050 <__umoddi3+0x4d8>
    a024:	39403d26 	beq	r7,r5,a11c <__umoddi3+0x5a4>
    a028:	394bc83a 	sub	r5,r7,r5
    a02c:	00000f06 	br	a06c <__umoddi3+0x4f4>
    a030:	30c5c83a 	sub	r2,r6,r3
    a034:	1839883a 	mov	fp,r3
    a038:	b084d83a 	srl	r2,r22,r2
    a03c:	a0c6983a 	sll	r3,r20,r3
    a040:	8720983a 	sll	r16,r16,fp
    a044:	b72c983a 	sll	r22,r22,fp
    a048:	18a8b03a 	or	r20,r3,r2
    a04c:	003f3a06 	br	9d38 <__umoddi3+0x1c0>
    a050:	d8c00017 	ldw	r3,0(sp)
    a054:	20c5c83a 	sub	r2,r4,r3
    a058:	2089803a 	cmpltu	r4,r4,r2
    a05c:	2dc7c83a 	sub	r3,r5,r23
    a060:	1907c83a 	sub	r3,r3,r4
    a064:	38cbc83a 	sub	r5,r7,r3
    a068:	1009883a 	mov	r4,r2
    a06c:	b105c83a 	sub	r2,r22,r4
    a070:	b087803a 	cmpltu	r3,r22,r2
    a074:	28c7c83a 	sub	r3,r5,r3
    a078:	d9400317 	ldw	r5,12(sp)
    a07c:	1544d83a 	srl	r2,r2,r21
    a080:	1948983a 	sll	r4,r3,r5
    a084:	1d46d83a 	srl	r3,r3,r21
    a088:	20a4b03a 	or	r18,r4,r2
    a08c:	9011883a 	mov	r8,r18
    a090:	1813883a 	mov	r9,r3
    a094:	003ef606 	br	9c70 <__umoddi3+0xf8>
    a098:	01400604 	movi	r5,24
    a09c:	2805883a 	mov	r2,r5
    a0a0:	003ecc06 	br	9bd4 <__umoddi3+0x5c>
    a0a4:	01400204 	movi	r5,8
    a0a8:	2805883a 	mov	r2,r5
    a0ac:	003ec906 	br	9bd4 <__umoddi3+0x5c>
    a0b0:	01400204 	movi	r5,8
    a0b4:	2805883a 	mov	r2,r5
    a0b8:	003f0106 	br	9cc0 <__umoddi3+0x148>
    a0bc:	01400204 	movi	r5,8
    a0c0:	2805883a 	mov	r2,r5
    a0c4:	003f1206 	br	9d10 <__umoddi3+0x198>
    a0c8:	01400604 	movi	r5,24
    a0cc:	2805883a 	mov	r2,r5
    a0d0:	003f0f06 	br	9d10 <__umoddi3+0x198>
    a0d4:	01400604 	movi	r5,24
    a0d8:	2805883a 	mov	r2,r5
    a0dc:	003ef806 	br	9cc0 <__umoddi3+0x148>
    a0e0:	3c7fb82e 	bgeu	r7,r17,9fc4 <__umoddi3+0x44c>
    a0e4:	843fffc4 	addi	r16,r16,-1
    a0e8:	3dcf883a 	add	r7,r7,r23
    a0ec:	003fb506 	br	9fc4 <__umoddi3+0x44c>
    a0f0:	147fa22e 	bgeu	r2,r17,9f7c <__umoddi3+0x404>
    a0f4:	e73fffc4 	addi	fp,fp,-1
    a0f8:	15c5883a 	add	r2,r2,r23
    a0fc:	003f9f06 	br	9f7c <__umoddi3+0x404>
    a100:	147f692e 	bgeu	r2,r17,9ea8 <__umoddi3+0x330>
    a104:	1405883a 	add	r2,r2,r16
    a108:	003f6706 	br	9ea8 <__umoddi3+0x330>
    a10c:	1405883a 	add	r2,r2,r16
    a110:	003f1906 	br	9d78 <__umoddi3+0x200>
    a114:	1405883a 	add	r2,r2,r16
    a118:	003ec906 	br	9c40 <__umoddi3+0xc8>
    a11c:	b13fcc36 	bltu	r22,r4,a050 <__umoddi3+0x4d8>
    a120:	000b883a 	mov	r5,zero
    a124:	003fd106 	br	a06c <__umoddi3+0x4f4>

0000a128 <__muldf3>:
    a128:	deffe004 	addi	sp,sp,-128
    a12c:	dc401815 	stw	r17,96(sp)
    a130:	dc400404 	addi	r17,sp,16
    a134:	2011883a 	mov	r8,r4
    a138:	2813883a 	mov	r9,r5
    a13c:	dc001715 	stw	r16,92(sp)
    a140:	d809883a 	mov	r4,sp
    a144:	880b883a 	mov	r5,r17
    a148:	dc000904 	addi	r16,sp,36
    a14c:	dfc01f15 	stw	ra,124(sp)
    a150:	da400115 	stw	r9,4(sp)
    a154:	d9c00315 	stw	r7,12(sp)
    a158:	da000015 	stw	r8,0(sp)
    a15c:	d9800215 	stw	r6,8(sp)
    a160:	ddc01e15 	stw	r23,120(sp)
    a164:	dd801d15 	stw	r22,116(sp)
    a168:	dd401c15 	stw	r21,112(sp)
    a16c:	dd001b15 	stw	r20,108(sp)
    a170:	dcc01a15 	stw	r19,104(sp)
    a174:	dc801915 	stw	r18,100(sp)
    a178:	00021500 	call	2150 <__unpack_d>
    a17c:	d9000204 	addi	r4,sp,8
    a180:	800b883a 	mov	r5,r16
    a184:	00021500 	call	2150 <__unpack_d>
    a188:	d9000417 	ldw	r4,16(sp)
    a18c:	00800044 	movi	r2,1
    a190:	1100102e 	bgeu	r2,r4,a1d4 <__muldf3+0xac>
    a194:	d8c00917 	ldw	r3,36(sp)
    a198:	10c0062e 	bgeu	r2,r3,a1b4 <__muldf3+0x8c>
    a19c:	00800104 	movi	r2,4
    a1a0:	20800a26 	beq	r4,r2,a1cc <__muldf3+0xa4>
    a1a4:	1880cc26 	beq	r3,r2,a4d8 <__muldf3+0x3b0>
    a1a8:	00800084 	movi	r2,2
    a1ac:	20800926 	beq	r4,r2,a1d4 <__muldf3+0xac>
    a1b0:	1880191e 	bne	r3,r2,a218 <__muldf3+0xf0>
    a1b4:	d8c00a17 	ldw	r3,40(sp)
    a1b8:	d8800517 	ldw	r2,20(sp)
    a1bc:	8009883a 	mov	r4,r16
    a1c0:	10c4c03a 	cmpne	r2,r2,r3
    a1c4:	d8800a15 	stw	r2,40(sp)
    a1c8:	00000706 	br	a1e8 <__muldf3+0xc0>
    a1cc:	00800084 	movi	r2,2
    a1d0:	1880c326 	beq	r3,r2,a4e0 <__muldf3+0x3b8>
    a1d4:	d8800517 	ldw	r2,20(sp)
    a1d8:	d8c00a17 	ldw	r3,40(sp)
    a1dc:	8809883a 	mov	r4,r17
    a1e0:	10c4c03a 	cmpne	r2,r2,r3
    a1e4:	d8800515 	stw	r2,20(sp)
    a1e8:	0001e3c0 	call	1e3c <__pack_d>
    a1ec:	dfc01f17 	ldw	ra,124(sp)
    a1f0:	ddc01e17 	ldw	r23,120(sp)
    a1f4:	dd801d17 	ldw	r22,116(sp)
    a1f8:	dd401c17 	ldw	r21,112(sp)
    a1fc:	dd001b17 	ldw	r20,108(sp)
    a200:	dcc01a17 	ldw	r19,104(sp)
    a204:	dc801917 	ldw	r18,100(sp)
    a208:	dc401817 	ldw	r17,96(sp)
    a20c:	dc001717 	ldw	r16,92(sp)
    a210:	dec02004 	addi	sp,sp,128
    a214:	f800283a 	ret
    a218:	dd800717 	ldw	r22,28(sp)
    a21c:	dc800c17 	ldw	r18,48(sp)
    a220:	002b883a 	mov	r21,zero
    a224:	0023883a 	mov	r17,zero
    a228:	a80b883a 	mov	r5,r21
    a22c:	b00d883a 	mov	r6,r22
    a230:	880f883a 	mov	r7,r17
    a234:	ddc00817 	ldw	r23,32(sp)
    a238:	dcc00d17 	ldw	r19,52(sp)
    a23c:	9009883a 	mov	r4,r18
    a240:	0001a540 	call	1a54 <__muldi3>
    a244:	001b883a 	mov	r13,zero
    a248:	680f883a 	mov	r7,r13
    a24c:	b009883a 	mov	r4,r22
    a250:	000b883a 	mov	r5,zero
    a254:	980d883a 	mov	r6,r19
    a258:	b82d883a 	mov	r22,r23
    a25c:	002f883a 	mov	r23,zero
    a260:	db401615 	stw	r13,88(sp)
    a264:	d8801315 	stw	r2,76(sp)
    a268:	d8c01415 	stw	r3,80(sp)
    a26c:	dcc01515 	stw	r19,84(sp)
    a270:	0001a540 	call	1a54 <__muldi3>
    a274:	b00d883a 	mov	r6,r22
    a278:	000b883a 	mov	r5,zero
    a27c:	9009883a 	mov	r4,r18
    a280:	b80f883a 	mov	r7,r23
    a284:	1021883a 	mov	r16,r2
    a288:	1823883a 	mov	r17,r3
    a28c:	0001a540 	call	1a54 <__muldi3>
    a290:	8085883a 	add	r2,r16,r2
    a294:	140d803a 	cmpltu	r6,r2,r16
    a298:	88c7883a 	add	r3,r17,r3
    a29c:	30cd883a 	add	r6,r6,r3
    a2a0:	1029883a 	mov	r20,r2
    a2a4:	302b883a 	mov	r21,r6
    a2a8:	da801317 	ldw	r10,76(sp)
    a2ac:	dac01417 	ldw	r11,80(sp)
    a2b0:	db001517 	ldw	r12,84(sp)
    a2b4:	db401617 	ldw	r13,88(sp)
    a2b8:	3440612e 	bgeu	r6,r17,a440 <__muldf3+0x318>
    a2bc:	0009883a 	mov	r4,zero
    a2c0:	5105883a 	add	r2,r10,r4
    a2c4:	128d803a 	cmpltu	r6,r2,r10
    a2c8:	5d07883a 	add	r3,r11,r20
    a2cc:	30cd883a 	add	r6,r6,r3
    a2d0:	0021883a 	mov	r16,zero
    a2d4:	04400044 	movi	r17,1
    a2d8:	1025883a 	mov	r18,r2
    a2dc:	3027883a 	mov	r19,r6
    a2e0:	32c06236 	bltu	r6,r11,a46c <__muldf3+0x344>
    a2e4:	59807a26 	beq	r11,r6,a4d0 <__muldf3+0x3a8>
    a2e8:	680b883a 	mov	r5,r13
    a2ec:	b80f883a 	mov	r7,r23
    a2f0:	6009883a 	mov	r4,r12
    a2f4:	b00d883a 	mov	r6,r22
    a2f8:	0001a540 	call	1a54 <__muldi3>
    a2fc:	1009883a 	mov	r4,r2
    a300:	000f883a 	mov	r7,zero
    a304:	1545883a 	add	r2,r2,r21
    a308:	1111803a 	cmpltu	r8,r2,r4
    a30c:	19c7883a 	add	r3,r3,r7
    a310:	40c7883a 	add	r3,r8,r3
    a314:	88cb883a 	add	r5,r17,r3
    a318:	d8c00617 	ldw	r3,24(sp)
    a31c:	8089883a 	add	r4,r16,r2
    a320:	d8800b17 	ldw	r2,44(sp)
    a324:	18c00104 	addi	r3,r3,4
    a328:	240d803a 	cmpltu	r6,r4,r16
    a32c:	10c7883a 	add	r3,r2,r3
    a330:	2013883a 	mov	r9,r4
    a334:	d8800a17 	ldw	r2,40(sp)
    a338:	d9000517 	ldw	r4,20(sp)
    a33c:	314d883a 	add	r6,r6,r5
    a340:	3015883a 	mov	r10,r6
    a344:	2088c03a 	cmpne	r4,r4,r2
    a348:	00880034 	movhi	r2,8192
    a34c:	10bfffc4 	addi	r2,r2,-1
    a350:	d9000f15 	stw	r4,60(sp)
    a354:	d8c01015 	stw	r3,64(sp)
    a358:	1180162e 	bgeu	r2,r6,a3b4 <__muldf3+0x28c>
    a35c:	1811883a 	mov	r8,r3
    a360:	101f883a 	mov	r15,r2
    a364:	980497fa 	slli	r2,r19,31
    a368:	9016d07a 	srli	r11,r18,1
    a36c:	500697fa 	slli	r3,r10,31
    a370:	480cd07a 	srli	r6,r9,1
    a374:	500ed07a 	srli	r7,r10,1
    a378:	12d6b03a 	or	r11,r2,r11
    a37c:	00800044 	movi	r2,1
    a380:	198cb03a 	or	r6,r3,r6
    a384:	4888703a 	and	r4,r9,r2
    a388:	9818d07a 	srli	r12,r19,1
    a38c:	001b883a 	mov	r13,zero
    a390:	03a00034 	movhi	r14,32768
    a394:	3013883a 	mov	r9,r6
    a398:	3815883a 	mov	r10,r7
    a39c:	4091883a 	add	r8,r8,r2
    a3a0:	20000226 	beq	r4,zero,a3ac <__muldf3+0x284>
    a3a4:	5b64b03a 	or	r18,r11,r13
    a3a8:	63a6b03a 	or	r19,r12,r14
    a3ac:	7abfed36 	bltu	r15,r10,a364 <__muldf3+0x23c>
    a3b0:	da001015 	stw	r8,64(sp)
    a3b4:	00840034 	movhi	r2,4096
    a3b8:	10bfffc4 	addi	r2,r2,-1
    a3bc:	12801436 	bltu	r2,r10,a410 <__muldf3+0x2e8>
    a3c0:	da001017 	ldw	r8,64(sp)
    a3c4:	101f883a 	mov	r15,r2
    a3c8:	4a45883a 	add	r2,r9,r9
    a3cc:	124d803a 	cmpltu	r6,r2,r9
    a3d0:	5287883a 	add	r3,r10,r10
    a3d4:	9497883a 	add	r11,r18,r18
    a3d8:	5c8f803a 	cmpltu	r7,r11,r18
    a3dc:	9cd9883a 	add	r12,r19,r19
    a3e0:	01000044 	movi	r4,1
    a3e4:	30cd883a 	add	r6,r6,r3
    a3e8:	3b0f883a 	add	r7,r7,r12
    a3ec:	423fffc4 	addi	r8,r8,-1
    a3f0:	1013883a 	mov	r9,r2
    a3f4:	3015883a 	mov	r10,r6
    a3f8:	111ab03a 	or	r13,r2,r4
    a3fc:	98003016 	blt	r19,zero,a4c0 <__muldf3+0x398>
    a400:	5825883a 	mov	r18,r11
    a404:	3827883a 	mov	r19,r7
    a408:	7abfef2e 	bgeu	r15,r10,a3c8 <__muldf3+0x2a0>
    a40c:	da001015 	stw	r8,64(sp)
    a410:	00803fc4 	movi	r2,255
    a414:	488e703a 	and	r7,r9,r2
    a418:	00802004 	movi	r2,128
    a41c:	0007883a 	mov	r3,zero
    a420:	0011883a 	mov	r8,zero
    a424:	38801826 	beq	r7,r2,a488 <__muldf3+0x360>
    a428:	008000c4 	movi	r2,3
    a42c:	d9000e04 	addi	r4,sp,56
    a430:	da801215 	stw	r10,72(sp)
    a434:	d8800e15 	stw	r2,56(sp)
    a438:	da401115 	stw	r9,68(sp)
    a43c:	003f6a06 	br	a1e8 <__muldf3+0xc0>
    a440:	89802126 	beq	r17,r6,a4c8 <__muldf3+0x3a0>
    a444:	0009883a 	mov	r4,zero
    a448:	5105883a 	add	r2,r10,r4
    a44c:	128d803a 	cmpltu	r6,r2,r10
    a450:	5d07883a 	add	r3,r11,r20
    a454:	30cd883a 	add	r6,r6,r3
    a458:	0021883a 	mov	r16,zero
    a45c:	0023883a 	mov	r17,zero
    a460:	1025883a 	mov	r18,r2
    a464:	3027883a 	mov	r19,r6
    a468:	32ff9e2e 	bgeu	r6,r11,a2e4 <__muldf3+0x1bc>
    a46c:	00800044 	movi	r2,1
    a470:	8089883a 	add	r4,r16,r2
    a474:	240d803a 	cmpltu	r6,r4,r16
    a478:	344d883a 	add	r6,r6,r17
    a47c:	2021883a 	mov	r16,r4
    a480:	3023883a 	mov	r17,r6
    a484:	003f9806 	br	a2e8 <__muldf3+0x1c0>
    a488:	403fe71e 	bne	r8,zero,a428 <__muldf3+0x300>
    a48c:	01004004 	movi	r4,256
    a490:	4904703a 	and	r2,r9,r4
    a494:	10c4b03a 	or	r2,r2,r3
    a498:	103fe31e 	bne	r2,zero,a428 <__muldf3+0x300>
    a49c:	94c4b03a 	or	r2,r18,r19
    a4a0:	103fe126 	beq	r2,zero,a428 <__muldf3+0x300>
    a4a4:	49c5883a 	add	r2,r9,r7
    a4a8:	1251803a 	cmpltu	r8,r2,r9
    a4ac:	4291883a 	add	r8,r8,r10
    a4b0:	013fc004 	movi	r4,-256
    a4b4:	1112703a 	and	r9,r2,r4
    a4b8:	4015883a 	mov	r10,r8
    a4bc:	003fda06 	br	a428 <__muldf3+0x300>
    a4c0:	6813883a 	mov	r9,r13
    a4c4:	003fce06 	br	a400 <__muldf3+0x2d8>
    a4c8:	143f7c36 	bltu	r2,r16,a2bc <__muldf3+0x194>
    a4cc:	003fdd06 	br	a444 <__muldf3+0x31c>
    a4d0:	12bf852e 	bgeu	r2,r10,a2e8 <__muldf3+0x1c0>
    a4d4:	003fe506 	br	a46c <__muldf3+0x344>
    a4d8:	00800084 	movi	r2,2
    a4dc:	20bf351e 	bne	r4,r2,a1b4 <__muldf3+0x8c>
    a4e0:	01000074 	movhi	r4,1
    a4e4:	211eb304 	addi	r4,r4,31436
    a4e8:	003f3f06 	br	a1e8 <__muldf3+0xc0>

0000a4ec <__divdf3>:
    a4ec:	deffed04 	addi	sp,sp,-76
    a4f0:	dcc01115 	stw	r19,68(sp)
    a4f4:	dcc00404 	addi	r19,sp,16
    a4f8:	2011883a 	mov	r8,r4
    a4fc:	2813883a 	mov	r9,r5
    a500:	dc000e15 	stw	r16,56(sp)
    a504:	d809883a 	mov	r4,sp
    a508:	980b883a 	mov	r5,r19
    a50c:	dc000904 	addi	r16,sp,36
    a510:	dfc01215 	stw	ra,72(sp)
    a514:	da400115 	stw	r9,4(sp)
    a518:	d9c00315 	stw	r7,12(sp)
    a51c:	da000015 	stw	r8,0(sp)
    a520:	d9800215 	stw	r6,8(sp)
    a524:	dc801015 	stw	r18,64(sp)
    a528:	dc400f15 	stw	r17,60(sp)
    a52c:	00021500 	call	2150 <__unpack_d>
    a530:	d9000204 	addi	r4,sp,8
    a534:	800b883a 	mov	r5,r16
    a538:	00021500 	call	2150 <__unpack_d>
    a53c:	d9000417 	ldw	r4,16(sp)
    a540:	00800044 	movi	r2,1
    a544:	11000b2e 	bgeu	r2,r4,a574 <__divdf3+0x88>
    a548:	d9400917 	ldw	r5,36(sp)
    a54c:	1140762e 	bgeu	r2,r5,a728 <__divdf3+0x23c>
    a550:	d8800517 	ldw	r2,20(sp)
    a554:	d8c00a17 	ldw	r3,40(sp)
    a558:	01800104 	movi	r6,4
    a55c:	10c4f03a 	xor	r2,r2,r3
    a560:	d8800515 	stw	r2,20(sp)
    a564:	21800226 	beq	r4,r6,a570 <__divdf3+0x84>
    a568:	00800084 	movi	r2,2
    a56c:	2080141e 	bne	r4,r2,a5c0 <__divdf3+0xd4>
    a570:	29000926 	beq	r5,r4,a598 <__divdf3+0xac>
    a574:	9809883a 	mov	r4,r19
    a578:	0001e3c0 	call	1e3c <__pack_d>
    a57c:	dfc01217 	ldw	ra,72(sp)
    a580:	dcc01117 	ldw	r19,68(sp)
    a584:	dc801017 	ldw	r18,64(sp)
    a588:	dc400f17 	ldw	r17,60(sp)
    a58c:	dc000e17 	ldw	r16,56(sp)
    a590:	dec01304 	addi	sp,sp,76
    a594:	f800283a 	ret
    a598:	01000074 	movhi	r4,1
    a59c:	211eb304 	addi	r4,r4,31436
    a5a0:	0001e3c0 	call	1e3c <__pack_d>
    a5a4:	dfc01217 	ldw	ra,72(sp)
    a5a8:	dcc01117 	ldw	r19,68(sp)
    a5ac:	dc801017 	ldw	r18,64(sp)
    a5b0:	dc400f17 	ldw	r17,60(sp)
    a5b4:	dc000e17 	ldw	r16,56(sp)
    a5b8:	dec01304 	addi	sp,sp,76
    a5bc:	f800283a 	ret
    a5c0:	29805b26 	beq	r5,r6,a730 <__divdf3+0x244>
    a5c4:	28802d26 	beq	r5,r2,a67c <__divdf3+0x190>
    a5c8:	d8c00617 	ldw	r3,24(sp)
    a5cc:	d8800b17 	ldw	r2,44(sp)
    a5d0:	d9c00817 	ldw	r7,32(sp)
    a5d4:	dc400d17 	ldw	r17,52(sp)
    a5d8:	188bc83a 	sub	r5,r3,r2
    a5dc:	d9800717 	ldw	r6,28(sp)
    a5e0:	dc000c17 	ldw	r16,48(sp)
    a5e4:	d9400615 	stw	r5,24(sp)
    a5e8:	3c403836 	bltu	r7,r17,a6cc <__divdf3+0x1e0>
    a5ec:	89c03626 	beq	r17,r7,a6c8 <__divdf3+0x1dc>
    a5f0:	0015883a 	mov	r10,zero
    a5f4:	001d883a 	mov	r14,zero
    a5f8:	02c40034 	movhi	r11,4096
    a5fc:	001f883a 	mov	r15,zero
    a600:	003f883a 	mov	ra,zero
    a604:	04800f44 	movi	r18,61
    a608:	00000f06 	br	a648 <__divdf3+0x15c>
    a60c:	601d883a 	mov	r14,r12
    a610:	681f883a 	mov	r15,r13
    a614:	400d883a 	mov	r6,r8
    a618:	100f883a 	mov	r7,r2
    a61c:	3191883a 	add	r8,r6,r6
    a620:	5808d07a 	srli	r4,r11,1
    a624:	4185803a 	cmpltu	r2,r8,r6
    a628:	39d3883a 	add	r9,r7,r7
    a62c:	28c6b03a 	or	r3,r5,r3
    a630:	1245883a 	add	r2,r2,r9
    a634:	1815883a 	mov	r10,r3
    a638:	2017883a 	mov	r11,r4
    a63c:	400d883a 	mov	r6,r8
    a640:	100f883a 	mov	r7,r2
    a644:	fc801726 	beq	ra,r18,a6a4 <__divdf3+0x1b8>
    a648:	580a97fa 	slli	r5,r11,31
    a64c:	5006d07a 	srli	r3,r10,1
    a650:	ffc00044 	addi	ra,ra,1
    a654:	3c7ff136 	bltu	r7,r17,a61c <__divdf3+0x130>
    a658:	3411c83a 	sub	r8,r6,r16
    a65c:	3205803a 	cmpltu	r2,r6,r8
    a660:	3c53c83a 	sub	r9,r7,r17
    a664:	7298b03a 	or	r12,r14,r10
    a668:	7adab03a 	or	r13,r15,r11
    a66c:	4885c83a 	sub	r2,r9,r2
    a670:	89ffe61e 	bne	r17,r7,a60c <__divdf3+0x120>
    a674:	343fe936 	bltu	r6,r16,a61c <__divdf3+0x130>
    a678:	003fe406 	br	a60c <__divdf3+0x120>
    a67c:	9809883a 	mov	r4,r19
    a680:	d9800415 	stw	r6,16(sp)
    a684:	0001e3c0 	call	1e3c <__pack_d>
    a688:	dfc01217 	ldw	ra,72(sp)
    a68c:	dcc01117 	ldw	r19,68(sp)
    a690:	dc801017 	ldw	r18,64(sp)
    a694:	dc400f17 	ldw	r17,60(sp)
    a698:	dc000e17 	ldw	r16,56(sp)
    a69c:	dec01304 	addi	sp,sp,76
    a6a0:	f800283a 	ret
    a6a4:	00803fc4 	movi	r2,255
    a6a8:	7090703a 	and	r8,r14,r2
    a6ac:	00802004 	movi	r2,128
    a6b0:	0007883a 	mov	r3,zero
    a6b4:	0013883a 	mov	r9,zero
    a6b8:	40800d26 	beq	r8,r2,a6f0 <__divdf3+0x204>
    a6bc:	dbc00815 	stw	r15,32(sp)
    a6c0:	db800715 	stw	r14,28(sp)
    a6c4:	003fab06 	br	a574 <__divdf3+0x88>
    a6c8:	343fc92e 	bgeu	r6,r16,a5f0 <__divdf3+0x104>
    a6cc:	3185883a 	add	r2,r6,r6
    a6d0:	1189803a 	cmpltu	r4,r2,r6
    a6d4:	39c7883a 	add	r3,r7,r7
    a6d8:	20c9883a 	add	r4,r4,r3
    a6dc:	297fffc4 	addi	r5,r5,-1
    a6e0:	100d883a 	mov	r6,r2
    a6e4:	200f883a 	mov	r7,r4
    a6e8:	d9400615 	stw	r5,24(sp)
    a6ec:	003fc006 	br	a5f0 <__divdf3+0x104>
    a6f0:	483ff21e 	bne	r9,zero,a6bc <__divdf3+0x1d0>
    a6f4:	01004004 	movi	r4,256
    a6f8:	7104703a 	and	r2,r14,r4
    a6fc:	10c4b03a 	or	r2,r2,r3
    a700:	103fee1e 	bne	r2,zero,a6bc <__divdf3+0x1d0>
    a704:	31c4b03a 	or	r2,r6,r7
    a708:	103fec26 	beq	r2,zero,a6bc <__divdf3+0x1d0>
    a70c:	7205883a 	add	r2,r14,r8
    a710:	1391803a 	cmpltu	r8,r2,r14
    a714:	43d1883a 	add	r8,r8,r15
    a718:	013fc004 	movi	r4,-256
    a71c:	111c703a 	and	r14,r2,r4
    a720:	401f883a 	mov	r15,r8
    a724:	003fe506 	br	a6bc <__divdf3+0x1d0>
    a728:	8009883a 	mov	r4,r16
    a72c:	003f9206 	br	a578 <__divdf3+0x8c>
    a730:	9809883a 	mov	r4,r19
    a734:	d8000715 	stw	zero,28(sp)
    a738:	d8000815 	stw	zero,32(sp)
    a73c:	d8000615 	stw	zero,24(sp)
    a740:	003f8d06 	br	a578 <__divdf3+0x8c>

0000a744 <__eqdf2>:
    a744:	deffef04 	addi	sp,sp,-68
    a748:	dc400f15 	stw	r17,60(sp)
    a74c:	dc400404 	addi	r17,sp,16
    a750:	2005883a 	mov	r2,r4
    a754:	2807883a 	mov	r3,r5
    a758:	dc000e15 	stw	r16,56(sp)
    a75c:	d809883a 	mov	r4,sp
    a760:	880b883a 	mov	r5,r17
    a764:	dc000904 	addi	r16,sp,36
    a768:	d8c00115 	stw	r3,4(sp)
    a76c:	d8800015 	stw	r2,0(sp)
    a770:	d9800215 	stw	r6,8(sp)
    a774:	dfc01015 	stw	ra,64(sp)
    a778:	d9c00315 	stw	r7,12(sp)
    a77c:	00021500 	call	2150 <__unpack_d>
    a780:	d9000204 	addi	r4,sp,8
    a784:	800b883a 	mov	r5,r16
    a788:	00021500 	call	2150 <__unpack_d>
    a78c:	d8800417 	ldw	r2,16(sp)
    a790:	00c00044 	movi	r3,1
    a794:	180d883a 	mov	r6,r3
    a798:	1880062e 	bgeu	r3,r2,a7b4 <__eqdf2+0x70>
    a79c:	d8800917 	ldw	r2,36(sp)
    a7a0:	8809883a 	mov	r4,r17
    a7a4:	800b883a 	mov	r5,r16
    a7a8:	1880022e 	bgeu	r3,r2,a7b4 <__eqdf2+0x70>
    a7ac:	000ad500 	call	ad50 <__fpcmp_parts_d>
    a7b0:	100d883a 	mov	r6,r2
    a7b4:	3005883a 	mov	r2,r6
    a7b8:	dfc01017 	ldw	ra,64(sp)
    a7bc:	dc400f17 	ldw	r17,60(sp)
    a7c0:	dc000e17 	ldw	r16,56(sp)
    a7c4:	dec01104 	addi	sp,sp,68
    a7c8:	f800283a 	ret

0000a7cc <__nedf2>:
    a7cc:	deffef04 	addi	sp,sp,-68
    a7d0:	dc400f15 	stw	r17,60(sp)
    a7d4:	dc400404 	addi	r17,sp,16
    a7d8:	2005883a 	mov	r2,r4
    a7dc:	2807883a 	mov	r3,r5
    a7e0:	dc000e15 	stw	r16,56(sp)
    a7e4:	d809883a 	mov	r4,sp
    a7e8:	880b883a 	mov	r5,r17
    a7ec:	dc000904 	addi	r16,sp,36
    a7f0:	d8c00115 	stw	r3,4(sp)
    a7f4:	d8800015 	stw	r2,0(sp)
    a7f8:	d9800215 	stw	r6,8(sp)
    a7fc:	dfc01015 	stw	ra,64(sp)
    a800:	d9c00315 	stw	r7,12(sp)
    a804:	00021500 	call	2150 <__unpack_d>
    a808:	d9000204 	addi	r4,sp,8
    a80c:	800b883a 	mov	r5,r16
    a810:	00021500 	call	2150 <__unpack_d>
    a814:	d8800417 	ldw	r2,16(sp)
    a818:	00c00044 	movi	r3,1
    a81c:	180d883a 	mov	r6,r3
    a820:	1880062e 	bgeu	r3,r2,a83c <__nedf2+0x70>
    a824:	d8800917 	ldw	r2,36(sp)
    a828:	8809883a 	mov	r4,r17
    a82c:	800b883a 	mov	r5,r16
    a830:	1880022e 	bgeu	r3,r2,a83c <__nedf2+0x70>
    a834:	000ad500 	call	ad50 <__fpcmp_parts_d>
    a838:	100d883a 	mov	r6,r2
    a83c:	3005883a 	mov	r2,r6
    a840:	dfc01017 	ldw	ra,64(sp)
    a844:	dc400f17 	ldw	r17,60(sp)
    a848:	dc000e17 	ldw	r16,56(sp)
    a84c:	dec01104 	addi	sp,sp,68
    a850:	f800283a 	ret

0000a854 <__gtdf2>:
    a854:	deffef04 	addi	sp,sp,-68
    a858:	dc400f15 	stw	r17,60(sp)
    a85c:	dc400404 	addi	r17,sp,16
    a860:	2005883a 	mov	r2,r4
    a864:	2807883a 	mov	r3,r5
    a868:	dc000e15 	stw	r16,56(sp)
    a86c:	d809883a 	mov	r4,sp
    a870:	880b883a 	mov	r5,r17
    a874:	dc000904 	addi	r16,sp,36
    a878:	d8c00115 	stw	r3,4(sp)
    a87c:	d8800015 	stw	r2,0(sp)
    a880:	d9800215 	stw	r6,8(sp)
    a884:	dfc01015 	stw	ra,64(sp)
    a888:	d9c00315 	stw	r7,12(sp)
    a88c:	00021500 	call	2150 <__unpack_d>
    a890:	d9000204 	addi	r4,sp,8
    a894:	800b883a 	mov	r5,r16
    a898:	00021500 	call	2150 <__unpack_d>
    a89c:	d8800417 	ldw	r2,16(sp)
    a8a0:	00c00044 	movi	r3,1
    a8a4:	01bfffc4 	movi	r6,-1
    a8a8:	1880062e 	bgeu	r3,r2,a8c4 <__gtdf2+0x70>
    a8ac:	d8800917 	ldw	r2,36(sp)
    a8b0:	8809883a 	mov	r4,r17
    a8b4:	800b883a 	mov	r5,r16
    a8b8:	1880022e 	bgeu	r3,r2,a8c4 <__gtdf2+0x70>
    a8bc:	000ad500 	call	ad50 <__fpcmp_parts_d>
    a8c0:	100d883a 	mov	r6,r2
    a8c4:	3005883a 	mov	r2,r6
    a8c8:	dfc01017 	ldw	ra,64(sp)
    a8cc:	dc400f17 	ldw	r17,60(sp)
    a8d0:	dc000e17 	ldw	r16,56(sp)
    a8d4:	dec01104 	addi	sp,sp,68
    a8d8:	f800283a 	ret

0000a8dc <__gedf2>:
    a8dc:	deffef04 	addi	sp,sp,-68
    a8e0:	dc400f15 	stw	r17,60(sp)
    a8e4:	dc400404 	addi	r17,sp,16
    a8e8:	2005883a 	mov	r2,r4
    a8ec:	2807883a 	mov	r3,r5
    a8f0:	dc000e15 	stw	r16,56(sp)
    a8f4:	d809883a 	mov	r4,sp
    a8f8:	880b883a 	mov	r5,r17
    a8fc:	dc000904 	addi	r16,sp,36
    a900:	d8c00115 	stw	r3,4(sp)
    a904:	d8800015 	stw	r2,0(sp)
    a908:	d9800215 	stw	r6,8(sp)
    a90c:	dfc01015 	stw	ra,64(sp)
    a910:	d9c00315 	stw	r7,12(sp)
    a914:	00021500 	call	2150 <__unpack_d>
    a918:	d9000204 	addi	r4,sp,8
    a91c:	800b883a 	mov	r5,r16
    a920:	00021500 	call	2150 <__unpack_d>
    a924:	d8800417 	ldw	r2,16(sp)
    a928:	00c00044 	movi	r3,1
    a92c:	01bfffc4 	movi	r6,-1
    a930:	1880062e 	bgeu	r3,r2,a94c <__gedf2+0x70>
    a934:	d8800917 	ldw	r2,36(sp)
    a938:	8809883a 	mov	r4,r17
    a93c:	800b883a 	mov	r5,r16
    a940:	1880022e 	bgeu	r3,r2,a94c <__gedf2+0x70>
    a944:	000ad500 	call	ad50 <__fpcmp_parts_d>
    a948:	100d883a 	mov	r6,r2
    a94c:	3005883a 	mov	r2,r6
    a950:	dfc01017 	ldw	ra,64(sp)
    a954:	dc400f17 	ldw	r17,60(sp)
    a958:	dc000e17 	ldw	r16,56(sp)
    a95c:	dec01104 	addi	sp,sp,68
    a960:	f800283a 	ret

0000a964 <__ltdf2>:
    a964:	deffef04 	addi	sp,sp,-68
    a968:	dc400f15 	stw	r17,60(sp)
    a96c:	dc400404 	addi	r17,sp,16
    a970:	2005883a 	mov	r2,r4
    a974:	2807883a 	mov	r3,r5
    a978:	dc000e15 	stw	r16,56(sp)
    a97c:	d809883a 	mov	r4,sp
    a980:	880b883a 	mov	r5,r17
    a984:	dc000904 	addi	r16,sp,36
    a988:	d8c00115 	stw	r3,4(sp)
    a98c:	d8800015 	stw	r2,0(sp)
    a990:	d9800215 	stw	r6,8(sp)
    a994:	dfc01015 	stw	ra,64(sp)
    a998:	d9c00315 	stw	r7,12(sp)
    a99c:	00021500 	call	2150 <__unpack_d>
    a9a0:	d9000204 	addi	r4,sp,8
    a9a4:	800b883a 	mov	r5,r16
    a9a8:	00021500 	call	2150 <__unpack_d>
    a9ac:	d8800417 	ldw	r2,16(sp)
    a9b0:	00c00044 	movi	r3,1
    a9b4:	180d883a 	mov	r6,r3
    a9b8:	1880062e 	bgeu	r3,r2,a9d4 <__ltdf2+0x70>
    a9bc:	d8800917 	ldw	r2,36(sp)
    a9c0:	8809883a 	mov	r4,r17
    a9c4:	800b883a 	mov	r5,r16
    a9c8:	1880022e 	bgeu	r3,r2,a9d4 <__ltdf2+0x70>
    a9cc:	000ad500 	call	ad50 <__fpcmp_parts_d>
    a9d0:	100d883a 	mov	r6,r2
    a9d4:	3005883a 	mov	r2,r6
    a9d8:	dfc01017 	ldw	ra,64(sp)
    a9dc:	dc400f17 	ldw	r17,60(sp)
    a9e0:	dc000e17 	ldw	r16,56(sp)
    a9e4:	dec01104 	addi	sp,sp,68
    a9e8:	f800283a 	ret

0000a9ec <__floatsidf>:
    a9ec:	2006d7fa 	srli	r3,r4,31
    a9f0:	defff604 	addi	sp,sp,-40
    a9f4:	008000c4 	movi	r2,3
    a9f8:	dfc00915 	stw	ra,36(sp)
    a9fc:	dcc00815 	stw	r19,32(sp)
    aa00:	dc800715 	stw	r18,28(sp)
    aa04:	dc400615 	stw	r17,24(sp)
    aa08:	dc000515 	stw	r16,20(sp)
    aa0c:	d8800015 	stw	r2,0(sp)
    aa10:	d8c00115 	stw	r3,4(sp)
    aa14:	20000f1e 	bne	r4,zero,aa54 <__floatsidf+0x68>
    aa18:	00800084 	movi	r2,2
    aa1c:	d8800015 	stw	r2,0(sp)
    aa20:	d809883a 	mov	r4,sp
    aa24:	0001e3c0 	call	1e3c <__pack_d>
    aa28:	1009883a 	mov	r4,r2
    aa2c:	180b883a 	mov	r5,r3
    aa30:	2005883a 	mov	r2,r4
    aa34:	2807883a 	mov	r3,r5
    aa38:	dfc00917 	ldw	ra,36(sp)
    aa3c:	dcc00817 	ldw	r19,32(sp)
    aa40:	dc800717 	ldw	r18,28(sp)
    aa44:	dc400617 	ldw	r17,24(sp)
    aa48:	dc000517 	ldw	r16,20(sp)
    aa4c:	dec00a04 	addi	sp,sp,40
    aa50:	f800283a 	ret
    aa54:	00800f04 	movi	r2,60
    aa58:	1807003a 	cmpeq	r3,r3,zero
    aa5c:	d8800215 	stw	r2,8(sp)
    aa60:	18001126 	beq	r3,zero,aaa8 <__floatsidf+0xbc>
    aa64:	0027883a 	mov	r19,zero
    aa68:	2025883a 	mov	r18,r4
    aa6c:	d9000315 	stw	r4,12(sp)
    aa70:	dcc00415 	stw	r19,16(sp)
    aa74:	0001aec0 	call	1aec <__clzsi2>
    aa78:	11000744 	addi	r4,r2,29
    aa7c:	013fe80e 	bge	zero,r4,aa20 <__floatsidf+0x34>
    aa80:	10bfff44 	addi	r2,r2,-3
    aa84:	10000c16 	blt	r2,zero,aab8 <__floatsidf+0xcc>
    aa88:	90a2983a 	sll	r17,r18,r2
    aa8c:	0021883a 	mov	r16,zero
    aa90:	d8800217 	ldw	r2,8(sp)
    aa94:	dc400415 	stw	r17,16(sp)
    aa98:	dc000315 	stw	r16,12(sp)
    aa9c:	1105c83a 	sub	r2,r2,r4
    aaa0:	d8800215 	stw	r2,8(sp)
    aaa4:	003fde06 	br	aa20 <__floatsidf+0x34>
    aaa8:	00a00034 	movhi	r2,32768
    aaac:	20800a26 	beq	r4,r2,aad8 <__floatsidf+0xec>
    aab0:	0109c83a 	sub	r4,zero,r4
    aab4:	003feb06 	br	aa64 <__floatsidf+0x78>
    aab8:	9006d07a 	srli	r3,r18,1
    aabc:	008007c4 	movi	r2,31
    aac0:	1105c83a 	sub	r2,r2,r4
    aac4:	1886d83a 	srl	r3,r3,r2
    aac8:	9922983a 	sll	r17,r19,r4
    aacc:	9120983a 	sll	r16,r18,r4
    aad0:	1c62b03a 	or	r17,r3,r17
    aad4:	003fee06 	br	aa90 <__floatsidf+0xa4>
    aad8:	0009883a 	mov	r4,zero
    aadc:	01707834 	movhi	r5,49632
    aae0:	003fd306 	br	aa30 <__floatsidf+0x44>

0000aae4 <__fixdfsi>:
    aae4:	defff804 	addi	sp,sp,-32
    aae8:	2005883a 	mov	r2,r4
    aaec:	2807883a 	mov	r3,r5
    aaf0:	d809883a 	mov	r4,sp
    aaf4:	d9400204 	addi	r5,sp,8
    aaf8:	d8c00115 	stw	r3,4(sp)
    aafc:	d8800015 	stw	r2,0(sp)
    ab00:	dfc00715 	stw	ra,28(sp)
    ab04:	00021500 	call	2150 <__unpack_d>
    ab08:	d8c00217 	ldw	r3,8(sp)
    ab0c:	00800084 	movi	r2,2
    ab10:	1880051e 	bne	r3,r2,ab28 <__fixdfsi+0x44>
    ab14:	0007883a 	mov	r3,zero
    ab18:	1805883a 	mov	r2,r3
    ab1c:	dfc00717 	ldw	ra,28(sp)
    ab20:	dec00804 	addi	sp,sp,32
    ab24:	f800283a 	ret
    ab28:	00800044 	movi	r2,1
    ab2c:	10fff92e 	bgeu	r2,r3,ab14 <__fixdfsi+0x30>
    ab30:	00800104 	movi	r2,4
    ab34:	18800426 	beq	r3,r2,ab48 <__fixdfsi+0x64>
    ab38:	d8c00417 	ldw	r3,16(sp)
    ab3c:	183ff516 	blt	r3,zero,ab14 <__fixdfsi+0x30>
    ab40:	00800784 	movi	r2,30
    ab44:	10c0080e 	bge	r2,r3,ab68 <__fixdfsi+0x84>
    ab48:	d8800317 	ldw	r2,12(sp)
    ab4c:	1000121e 	bne	r2,zero,ab98 <__fixdfsi+0xb4>
    ab50:	00e00034 	movhi	r3,32768
    ab54:	18ffffc4 	addi	r3,r3,-1
    ab58:	1805883a 	mov	r2,r3
    ab5c:	dfc00717 	ldw	ra,28(sp)
    ab60:	dec00804 	addi	sp,sp,32
    ab64:	f800283a 	ret
    ab68:	00800f04 	movi	r2,60
    ab6c:	10d1c83a 	sub	r8,r2,r3
    ab70:	40bff804 	addi	r2,r8,-32
    ab74:	d9800517 	ldw	r6,20(sp)
    ab78:	d9c00617 	ldw	r7,24(sp)
    ab7c:	10000816 	blt	r2,zero,aba0 <__fixdfsi+0xbc>
    ab80:	3888d83a 	srl	r4,r7,r2
    ab84:	d8800317 	ldw	r2,12(sp)
    ab88:	2007883a 	mov	r3,r4
    ab8c:	103fe226 	beq	r2,zero,ab18 <__fixdfsi+0x34>
    ab90:	0107c83a 	sub	r3,zero,r4
    ab94:	003fe006 	br	ab18 <__fixdfsi+0x34>
    ab98:	00e00034 	movhi	r3,32768
    ab9c:	003fde06 	br	ab18 <__fixdfsi+0x34>
    aba0:	39c7883a 	add	r3,r7,r7
    aba4:	008007c4 	movi	r2,31
    aba8:	1205c83a 	sub	r2,r2,r8
    abac:	1886983a 	sll	r3,r3,r2
    abb0:	3208d83a 	srl	r4,r6,r8
    abb4:	1908b03a 	or	r4,r3,r4
    abb8:	003ff206 	br	ab84 <__fixdfsi+0xa0>

0000abbc <__floatunsidf>:
    abbc:	defff204 	addi	sp,sp,-56
    abc0:	dfc00d15 	stw	ra,52(sp)
    abc4:	ddc00c15 	stw	r23,48(sp)
    abc8:	dd800b15 	stw	r22,44(sp)
    abcc:	dd400a15 	stw	r21,40(sp)
    abd0:	dd000915 	stw	r20,36(sp)
    abd4:	dcc00815 	stw	r19,32(sp)
    abd8:	dc800715 	stw	r18,28(sp)
    abdc:	dc400615 	stw	r17,24(sp)
    abe0:	dc000515 	stw	r16,20(sp)
    abe4:	d8000115 	stw	zero,4(sp)
    abe8:	20000f1e 	bne	r4,zero,ac28 <__floatunsidf+0x6c>
    abec:	00800084 	movi	r2,2
    abf0:	d8800015 	stw	r2,0(sp)
    abf4:	d809883a 	mov	r4,sp
    abf8:	0001e3c0 	call	1e3c <__pack_d>
    abfc:	dfc00d17 	ldw	ra,52(sp)
    ac00:	ddc00c17 	ldw	r23,48(sp)
    ac04:	dd800b17 	ldw	r22,44(sp)
    ac08:	dd400a17 	ldw	r21,40(sp)
    ac0c:	dd000917 	ldw	r20,36(sp)
    ac10:	dcc00817 	ldw	r19,32(sp)
    ac14:	dc800717 	ldw	r18,28(sp)
    ac18:	dc400617 	ldw	r17,24(sp)
    ac1c:	dc000517 	ldw	r16,20(sp)
    ac20:	dec00e04 	addi	sp,sp,56
    ac24:	f800283a 	ret
    ac28:	008000c4 	movi	r2,3
    ac2c:	00c00f04 	movi	r3,60
    ac30:	002f883a 	mov	r23,zero
    ac34:	202d883a 	mov	r22,r4
    ac38:	d8800015 	stw	r2,0(sp)
    ac3c:	d8c00215 	stw	r3,8(sp)
    ac40:	d9000315 	stw	r4,12(sp)
    ac44:	ddc00415 	stw	r23,16(sp)
    ac48:	0001aec0 	call	1aec <__clzsi2>
    ac4c:	12400744 	addi	r9,r2,29
    ac50:	48000b16 	blt	r9,zero,ac80 <__floatunsidf+0xc4>
    ac54:	483fe726 	beq	r9,zero,abf4 <__floatunsidf+0x38>
    ac58:	10bfff44 	addi	r2,r2,-3
    ac5c:	10002e16 	blt	r2,zero,ad18 <__floatunsidf+0x15c>
    ac60:	b0a2983a 	sll	r17,r22,r2
    ac64:	0021883a 	mov	r16,zero
    ac68:	d8800217 	ldw	r2,8(sp)
    ac6c:	dc400415 	stw	r17,16(sp)
    ac70:	dc000315 	stw	r16,12(sp)
    ac74:	1245c83a 	sub	r2,r2,r9
    ac78:	d8800215 	stw	r2,8(sp)
    ac7c:	003fdd06 	br	abf4 <__floatunsidf+0x38>
    ac80:	0255c83a 	sub	r10,zero,r9
    ac84:	51bff804 	addi	r6,r10,-32
    ac88:	30001b16 	blt	r6,zero,acf8 <__floatunsidf+0x13c>
    ac8c:	b9a8d83a 	srl	r20,r23,r6
    ac90:	002b883a 	mov	r21,zero
    ac94:	000f883a 	mov	r7,zero
    ac98:	01000044 	movi	r4,1
    ac9c:	0011883a 	mov	r8,zero
    aca0:	30002516 	blt	r6,zero,ad38 <__floatunsidf+0x17c>
    aca4:	21a6983a 	sll	r19,r4,r6
    aca8:	0025883a 	mov	r18,zero
    acac:	00bfffc4 	movi	r2,-1
    acb0:	9089883a 	add	r4,r18,r2
    acb4:	988b883a 	add	r5,r19,r2
    acb8:	248d803a 	cmpltu	r6,r4,r18
    acbc:	314b883a 	add	r5,r6,r5
    acc0:	b104703a 	and	r2,r22,r4
    acc4:	b946703a 	and	r3,r23,r5
    acc8:	10c4b03a 	or	r2,r2,r3
    accc:	10000226 	beq	r2,zero,acd8 <__floatunsidf+0x11c>
    acd0:	01c00044 	movi	r7,1
    acd4:	0011883a 	mov	r8,zero
    acd8:	d9000217 	ldw	r4,8(sp)
    acdc:	a1c4b03a 	or	r2,r20,r7
    ace0:	aa06b03a 	or	r3,r21,r8
    ace4:	2249c83a 	sub	r4,r4,r9
    ace8:	d8c00415 	stw	r3,16(sp)
    acec:	d9000215 	stw	r4,8(sp)
    acf0:	d8800315 	stw	r2,12(sp)
    acf4:	003fbf06 	br	abf4 <__floatunsidf+0x38>
    acf8:	bdc7883a 	add	r3,r23,r23
    acfc:	008007c4 	movi	r2,31
    ad00:	1285c83a 	sub	r2,r2,r10
    ad04:	1886983a 	sll	r3,r3,r2
    ad08:	b2a8d83a 	srl	r20,r22,r10
    ad0c:	baaad83a 	srl	r21,r23,r10
    ad10:	1d28b03a 	or	r20,r3,r20
    ad14:	003fdf06 	br	ac94 <__floatunsidf+0xd8>
    ad18:	b006d07a 	srli	r3,r22,1
    ad1c:	008007c4 	movi	r2,31
    ad20:	1245c83a 	sub	r2,r2,r9
    ad24:	1886d83a 	srl	r3,r3,r2
    ad28:	ba62983a 	sll	r17,r23,r9
    ad2c:	b260983a 	sll	r16,r22,r9
    ad30:	1c62b03a 	or	r17,r3,r17
    ad34:	003fcc06 	br	ac68 <__floatunsidf+0xac>
    ad38:	2006d07a 	srli	r3,r4,1
    ad3c:	008007c4 	movi	r2,31
    ad40:	1285c83a 	sub	r2,r2,r10
    ad44:	18a6d83a 	srl	r19,r3,r2
    ad48:	22a4983a 	sll	r18,r4,r10
    ad4c:	003fd706 	br	acac <__floatunsidf+0xf0>

0000ad50 <__fpcmp_parts_d>:
    ad50:	21800017 	ldw	r6,0(r4)
    ad54:	00c00044 	movi	r3,1
    ad58:	19800a2e 	bgeu	r3,r6,ad84 <__fpcmp_parts_d+0x34>
    ad5c:	28800017 	ldw	r2,0(r5)
    ad60:	1880082e 	bgeu	r3,r2,ad84 <__fpcmp_parts_d+0x34>
    ad64:	00c00104 	movi	r3,4
    ad68:	30c02626 	beq	r6,r3,ae04 <__fpcmp_parts_d+0xb4>
    ad6c:	10c02226 	beq	r2,r3,adf8 <__fpcmp_parts_d+0xa8>
    ad70:	00c00084 	movi	r3,2
    ad74:	30c00526 	beq	r6,r3,ad8c <__fpcmp_parts_d+0x3c>
    ad78:	10c0071e 	bne	r2,r3,ad98 <__fpcmp_parts_d+0x48>
    ad7c:	20800117 	ldw	r2,4(r4)
    ad80:	1000091e 	bne	r2,zero,ada8 <__fpcmp_parts_d+0x58>
    ad84:	00800044 	movi	r2,1
    ad88:	f800283a 	ret
    ad8c:	10c01a1e 	bne	r2,r3,adf8 <__fpcmp_parts_d+0xa8>
    ad90:	0005883a 	mov	r2,zero
    ad94:	f800283a 	ret
    ad98:	22000117 	ldw	r8,4(r4)
    ad9c:	28800117 	ldw	r2,4(r5)
    ada0:	40800326 	beq	r8,r2,adb0 <__fpcmp_parts_d+0x60>
    ada4:	403ff726 	beq	r8,zero,ad84 <__fpcmp_parts_d+0x34>
    ada8:	00bfffc4 	movi	r2,-1
    adac:	f800283a 	ret
    adb0:	20c00217 	ldw	r3,8(r4)
    adb4:	28800217 	ldw	r2,8(r5)
    adb8:	10fffa16 	blt	r2,r3,ada4 <__fpcmp_parts_d+0x54>
    adbc:	18800916 	blt	r3,r2,ade4 <__fpcmp_parts_d+0x94>
    adc0:	21c00417 	ldw	r7,16(r4)
    adc4:	28c00417 	ldw	r3,16(r5)
    adc8:	21800317 	ldw	r6,12(r4)
    adcc:	28800317 	ldw	r2,12(r5)
    add0:	19fff436 	bltu	r3,r7,ada4 <__fpcmp_parts_d+0x54>
    add4:	38c00526 	beq	r7,r3,adec <__fpcmp_parts_d+0x9c>
    add8:	38c00236 	bltu	r7,r3,ade4 <__fpcmp_parts_d+0x94>
    addc:	19ffec1e 	bne	r3,r7,ad90 <__fpcmp_parts_d+0x40>
    ade0:	30bfeb2e 	bgeu	r6,r2,ad90 <__fpcmp_parts_d+0x40>
    ade4:	403fe71e 	bne	r8,zero,ad84 <__fpcmp_parts_d+0x34>
    ade8:	003fef06 	br	ada8 <__fpcmp_parts_d+0x58>
    adec:	11bffa2e 	bgeu	r2,r6,add8 <__fpcmp_parts_d+0x88>
    adf0:	403fe426 	beq	r8,zero,ad84 <__fpcmp_parts_d+0x34>
    adf4:	003fec06 	br	ada8 <__fpcmp_parts_d+0x58>
    adf8:	28800117 	ldw	r2,4(r5)
    adfc:	103fe11e 	bne	r2,zero,ad84 <__fpcmp_parts_d+0x34>
    ae00:	003fe906 	br	ada8 <__fpcmp_parts_d+0x58>
    ae04:	11bfdd1e 	bne	r2,r6,ad7c <__fpcmp_parts_d+0x2c>
    ae08:	28c00117 	ldw	r3,4(r5)
    ae0c:	20800117 	ldw	r2,4(r4)
    ae10:	1885c83a 	sub	r2,r3,r2
    ae14:	f800283a 	ret

0000ae18 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    ae18:	defff804 	addi	sp,sp,-32
    ae1c:	dfc00715 	stw	ra,28(sp)
    ae20:	df000615 	stw	fp,24(sp)
    ae24:	df000604 	addi	fp,sp,24
    ae28:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    ae2c:	e0bffc17 	ldw	r2,-16(fp)
    ae30:	1004803a 	cmplt	r2,r2,zero
    ae34:	1000081e 	bne	r2,zero,ae58 <close+0x40>
    ae38:	e0bffc17 	ldw	r2,-16(fp)
    ae3c:	10800324 	muli	r2,r2,12
    ae40:	1007883a 	mov	r3,r2
    ae44:	008000b4 	movhi	r2,2
    ae48:	10a1dd04 	addi	r2,r2,-30860
    ae4c:	1887883a 	add	r3,r3,r2
    ae50:	e0ffff15 	stw	r3,-4(fp)
    ae54:	00000106 	br	ae5c <close+0x44>
    ae58:	e03fff15 	stw	zero,-4(fp)
    ae5c:	e0bfff17 	ldw	r2,-4(fp)
    ae60:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    ae64:	e0bffb17 	ldw	r2,-20(fp)
    ae68:	1005003a 	cmpeq	r2,r2,zero
    ae6c:	10001d1e 	bne	r2,zero,aee4 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    ae70:	e0bffb17 	ldw	r2,-20(fp)
    ae74:	10800017 	ldw	r2,0(r2)
    ae78:	10800417 	ldw	r2,16(r2)
    ae7c:	1005003a 	cmpeq	r2,r2,zero
    ae80:	1000071e 	bne	r2,zero,aea0 <close+0x88>
    ae84:	e0bffb17 	ldw	r2,-20(fp)
    ae88:	10800017 	ldw	r2,0(r2)
    ae8c:	10800417 	ldw	r2,16(r2)
    ae90:	e13ffb17 	ldw	r4,-20(fp)
    ae94:	103ee83a 	callr	r2
    ae98:	e0bffe15 	stw	r2,-8(fp)
    ae9c:	00000106 	br	aea4 <close+0x8c>
    aea0:	e03ffe15 	stw	zero,-8(fp)
    aea4:	e0bffe17 	ldw	r2,-8(fp)
    aea8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    aeac:	e13ffc17 	ldw	r4,-16(fp)
    aeb0:	000b6780 	call	b678 <alt_release_fd>
    if (rval < 0)
    aeb4:	e0bffa17 	ldw	r2,-24(fp)
    aeb8:	1004403a 	cmpge	r2,r2,zero
    aebc:	1000071e 	bne	r2,zero,aedc <close+0xc4>
    {
      ALT_ERRNO = -rval;
    aec0:	000af140 	call	af14 <alt_get_errno>
    aec4:	e0fffa17 	ldw	r3,-24(fp)
    aec8:	00c7c83a 	sub	r3,zero,r3
    aecc:	10c00015 	stw	r3,0(r2)
      return -1;
    aed0:	00bfffc4 	movi	r2,-1
    aed4:	e0bffd15 	stw	r2,-12(fp)
    aed8:	00000806 	br	aefc <close+0xe4>
    }
    return 0;
    aedc:	e03ffd15 	stw	zero,-12(fp)
    aee0:	00000606 	br	aefc <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    aee4:	000af140 	call	af14 <alt_get_errno>
    aee8:	1007883a 	mov	r3,r2
    aeec:	00801444 	movi	r2,81
    aef0:	18800015 	stw	r2,0(r3)
    return -1;
    aef4:	00bfffc4 	movi	r2,-1
    aef8:	e0bffd15 	stw	r2,-12(fp)
    aefc:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    af00:	e037883a 	mov	sp,fp
    af04:	dfc00117 	ldw	ra,4(sp)
    af08:	df000017 	ldw	fp,0(sp)
    af0c:	dec00204 	addi	sp,sp,8
    af10:	f800283a 	ret

0000af14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    af14:	defffd04 	addi	sp,sp,-12
    af18:	dfc00215 	stw	ra,8(sp)
    af1c:	df000115 	stw	fp,4(sp)
    af20:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    af24:	008000b4 	movhi	r2,2
    af28:	10a69504 	addi	r2,r2,-26028
    af2c:	10800017 	ldw	r2,0(r2)
    af30:	1005003a 	cmpeq	r2,r2,zero
    af34:	1000061e 	bne	r2,zero,af50 <alt_get_errno+0x3c>
    af38:	008000b4 	movhi	r2,2
    af3c:	10a69504 	addi	r2,r2,-26028
    af40:	10800017 	ldw	r2,0(r2)
    af44:	103ee83a 	callr	r2
    af48:	e0bfff15 	stw	r2,-4(fp)
    af4c:	00000306 	br	af5c <alt_get_errno+0x48>
    af50:	008000b4 	movhi	r2,2
    af54:	10adc504 	addi	r2,r2,-18668
    af58:	e0bfff15 	stw	r2,-4(fp)
    af5c:	e0bfff17 	ldw	r2,-4(fp)
}
    af60:	e037883a 	mov	sp,fp
    af64:	dfc00117 	ldw	ra,4(sp)
    af68:	df000017 	ldw	fp,0(sp)
    af6c:	dec00204 	addi	sp,sp,8
    af70:	f800283a 	ret

0000af74 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    af74:	defffc04 	addi	sp,sp,-16
    af78:	df000315 	stw	fp,12(sp)
    af7c:	df000304 	addi	fp,sp,12
    af80:	e13ffd15 	stw	r4,-12(fp)
    af84:	e17ffe15 	stw	r5,-8(fp)
    af88:	e1bfff15 	stw	r6,-4(fp)
  return len;
    af8c:	e0bfff17 	ldw	r2,-4(fp)
}
    af90:	e037883a 	mov	sp,fp
    af94:	df000017 	ldw	fp,0(sp)
    af98:	dec00104 	addi	sp,sp,4
    af9c:	f800283a 	ret

0000afa0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    afa0:	defff904 	addi	sp,sp,-28
    afa4:	dfc00615 	stw	ra,24(sp)
    afa8:	df000515 	stw	fp,20(sp)
    afac:	df000504 	addi	fp,sp,20
    afb0:	e13ffc15 	stw	r4,-16(fp)
    afb4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    afb8:	e0bffc17 	ldw	r2,-16(fp)
    afbc:	1004803a 	cmplt	r2,r2,zero
    afc0:	1000081e 	bne	r2,zero,afe4 <fstat+0x44>
    afc4:	e0bffc17 	ldw	r2,-16(fp)
    afc8:	10800324 	muli	r2,r2,12
    afcc:	1007883a 	mov	r3,r2
    afd0:	008000b4 	movhi	r2,2
    afd4:	10a1dd04 	addi	r2,r2,-30860
    afd8:	1887883a 	add	r3,r3,r2
    afdc:	e0ffff15 	stw	r3,-4(fp)
    afe0:	00000106 	br	afe8 <fstat+0x48>
    afe4:	e03fff15 	stw	zero,-4(fp)
    afe8:	e0bfff17 	ldw	r2,-4(fp)
    afec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    aff0:	e0bffb17 	ldw	r2,-20(fp)
    aff4:	1005003a 	cmpeq	r2,r2,zero
    aff8:	1000121e 	bne	r2,zero,b044 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    affc:	e0bffb17 	ldw	r2,-20(fp)
    b000:	10800017 	ldw	r2,0(r2)
    b004:	10800817 	ldw	r2,32(r2)
    b008:	1005003a 	cmpeq	r2,r2,zero
    b00c:	1000081e 	bne	r2,zero,b030 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    b010:	e0bffb17 	ldw	r2,-20(fp)
    b014:	10800017 	ldw	r2,0(r2)
    b018:	10800817 	ldw	r2,32(r2)
    b01c:	e13ffb17 	ldw	r4,-20(fp)
    b020:	e17ffd17 	ldw	r5,-12(fp)
    b024:	103ee83a 	callr	r2
    b028:	e0bffe15 	stw	r2,-8(fp)
    b02c:	00000b06 	br	b05c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    b030:	e0fffd17 	ldw	r3,-12(fp)
    b034:	00880004 	movi	r2,8192
    b038:	18800115 	stw	r2,4(r3)
      return 0;
    b03c:	e03ffe15 	stw	zero,-8(fp)
    b040:	00000606 	br	b05c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b044:	000b0740 	call	b074 <alt_get_errno>
    b048:	1007883a 	mov	r3,r2
    b04c:	00801444 	movi	r2,81
    b050:	18800015 	stw	r2,0(r3)
    return -1;
    b054:	00bfffc4 	movi	r2,-1
    b058:	e0bffe15 	stw	r2,-8(fp)
    b05c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    b060:	e037883a 	mov	sp,fp
    b064:	dfc00117 	ldw	ra,4(sp)
    b068:	df000017 	ldw	fp,0(sp)
    b06c:	dec00204 	addi	sp,sp,8
    b070:	f800283a 	ret

0000b074 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b074:	defffd04 	addi	sp,sp,-12
    b078:	dfc00215 	stw	ra,8(sp)
    b07c:	df000115 	stw	fp,4(sp)
    b080:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b084:	008000b4 	movhi	r2,2
    b088:	10a69504 	addi	r2,r2,-26028
    b08c:	10800017 	ldw	r2,0(r2)
    b090:	1005003a 	cmpeq	r2,r2,zero
    b094:	1000061e 	bne	r2,zero,b0b0 <alt_get_errno+0x3c>
    b098:	008000b4 	movhi	r2,2
    b09c:	10a69504 	addi	r2,r2,-26028
    b0a0:	10800017 	ldw	r2,0(r2)
    b0a4:	103ee83a 	callr	r2
    b0a8:	e0bfff15 	stw	r2,-4(fp)
    b0ac:	00000306 	br	b0bc <alt_get_errno+0x48>
    b0b0:	008000b4 	movhi	r2,2
    b0b4:	10adc504 	addi	r2,r2,-18668
    b0b8:	e0bfff15 	stw	r2,-4(fp)
    b0bc:	e0bfff17 	ldw	r2,-4(fp)
}
    b0c0:	e037883a 	mov	sp,fp
    b0c4:	dfc00117 	ldw	ra,4(sp)
    b0c8:	df000017 	ldw	fp,0(sp)
    b0cc:	dec00204 	addi	sp,sp,8
    b0d0:	f800283a 	ret

0000b0d4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    b0d4:	deffeb04 	addi	sp,sp,-84
    b0d8:	dfc01415 	stw	ra,80(sp)
    b0dc:	df001315 	stw	fp,76(sp)
    b0e0:	df001304 	addi	fp,sp,76
    b0e4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b0e8:	e0bffd17 	ldw	r2,-12(fp)
    b0ec:	1004803a 	cmplt	r2,r2,zero
    b0f0:	1000081e 	bne	r2,zero,b114 <isatty+0x40>
    b0f4:	e0bffd17 	ldw	r2,-12(fp)
    b0f8:	10800324 	muli	r2,r2,12
    b0fc:	1007883a 	mov	r3,r2
    b100:	008000b4 	movhi	r2,2
    b104:	10a1dd04 	addi	r2,r2,-30860
    b108:	1887883a 	add	r3,r3,r2
    b10c:	e0ffff15 	stw	r3,-4(fp)
    b110:	00000106 	br	b118 <isatty+0x44>
    b114:	e03fff15 	stw	zero,-4(fp)
    b118:	e0bfff17 	ldw	r2,-4(fp)
    b11c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    b120:	e0bfed17 	ldw	r2,-76(fp)
    b124:	1005003a 	cmpeq	r2,r2,zero
    b128:	10000f1e 	bne	r2,zero,b168 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    b12c:	e0bfed17 	ldw	r2,-76(fp)
    b130:	10800017 	ldw	r2,0(r2)
    b134:	10800817 	ldw	r2,32(r2)
    b138:	1004c03a 	cmpne	r2,r2,zero
    b13c:	1000031e 	bne	r2,zero,b14c <isatty+0x78>
    {
      return 1;
    b140:	00800044 	movi	r2,1
    b144:	e0bffe15 	stw	r2,-8(fp)
    b148:	00000c06 	br	b17c <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    b14c:	e17fee04 	addi	r5,fp,-72
    b150:	e13ffd17 	ldw	r4,-12(fp)
    b154:	000afa00 	call	afa0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    b158:	e0bfef17 	ldw	r2,-68(fp)
    b15c:	10880020 	cmpeqi	r2,r2,8192
    b160:	e0bffe15 	stw	r2,-8(fp)
    b164:	00000506 	br	b17c <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b168:	000b1940 	call	b194 <alt_get_errno>
    b16c:	1007883a 	mov	r3,r2
    b170:	00801444 	movi	r2,81
    b174:	18800015 	stw	r2,0(r3)
    return 0;
    b178:	e03ffe15 	stw	zero,-8(fp)
    b17c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    b180:	e037883a 	mov	sp,fp
    b184:	dfc00117 	ldw	ra,4(sp)
    b188:	df000017 	ldw	fp,0(sp)
    b18c:	dec00204 	addi	sp,sp,8
    b190:	f800283a 	ret

0000b194 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b194:	defffd04 	addi	sp,sp,-12
    b198:	dfc00215 	stw	ra,8(sp)
    b19c:	df000115 	stw	fp,4(sp)
    b1a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b1a4:	008000b4 	movhi	r2,2
    b1a8:	10a69504 	addi	r2,r2,-26028
    b1ac:	10800017 	ldw	r2,0(r2)
    b1b0:	1005003a 	cmpeq	r2,r2,zero
    b1b4:	1000061e 	bne	r2,zero,b1d0 <alt_get_errno+0x3c>
    b1b8:	008000b4 	movhi	r2,2
    b1bc:	10a69504 	addi	r2,r2,-26028
    b1c0:	10800017 	ldw	r2,0(r2)
    b1c4:	103ee83a 	callr	r2
    b1c8:	e0bfff15 	stw	r2,-4(fp)
    b1cc:	00000306 	br	b1dc <alt_get_errno+0x48>
    b1d0:	008000b4 	movhi	r2,2
    b1d4:	10adc504 	addi	r2,r2,-18668
    b1d8:	e0bfff15 	stw	r2,-4(fp)
    b1dc:	e0bfff17 	ldw	r2,-4(fp)
}
    b1e0:	e037883a 	mov	sp,fp
    b1e4:	dfc00117 	ldw	ra,4(sp)
    b1e8:	df000017 	ldw	fp,0(sp)
    b1ec:	dec00204 	addi	sp,sp,8
    b1f0:	f800283a 	ret

0000b1f4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    b1f4:	defffe04 	addi	sp,sp,-8
    b1f8:	dfc00115 	stw	ra,4(sp)
    b1fc:	df000015 	stw	fp,0(sp)
    b200:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    b204:	010000b4 	movhi	r4,2
    b208:	2126bb04 	addi	r4,r4,-25876
    b20c:	01400074 	movhi	r5,1
    b210:	295fce04 	addi	r5,r5,32568
    b214:	018000b4 	movhi	r6,2
    b218:	31a6bb04 	addi	r6,r6,-25876
    b21c:	000b2740 	call	b274 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    b220:	01000034 	movhi	r4,0
    b224:	21000804 	addi	r4,r4,32
    b228:	01400034 	movhi	r5,0
    b22c:	29400804 	addi	r5,r5,32
    b230:	01800034 	movhi	r6,0
    b234:	31806f04 	addi	r6,r6,444
    b238:	000b2740 	call	b274 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    b23c:	01000074 	movhi	r4,1
    b240:	211e8704 	addi	r4,r4,31260
    b244:	01400074 	movhi	r5,1
    b248:	295e8704 	addi	r5,r5,31260
    b24c:	01800074 	movhi	r6,1
    b250:	319fce04 	addi	r6,r6,32568
    b254:	000b2740 	call	b274 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    b258:	0015ff80 	call	15ff8 <alt_dcache_flush_all>
  alt_icache_flush_all();
    b25c:	00162e80 	call	162e8 <alt_icache_flush_all>
}
    b260:	e037883a 	mov	sp,fp
    b264:	dfc00117 	ldw	ra,4(sp)
    b268:	df000017 	ldw	fp,0(sp)
    b26c:	dec00204 	addi	sp,sp,8
    b270:	f800283a 	ret

0000b274 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    b274:	defffc04 	addi	sp,sp,-16
    b278:	df000315 	stw	fp,12(sp)
    b27c:	df000304 	addi	fp,sp,12
    b280:	e13ffd15 	stw	r4,-12(fp)
    b284:	e17ffe15 	stw	r5,-8(fp)
    b288:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    b28c:	e0fffe17 	ldw	r3,-8(fp)
    b290:	e0bffd17 	ldw	r2,-12(fp)
    b294:	18800e26 	beq	r3,r2,b2d0 <alt_load_section+0x5c>
  {
    while( to != end )
    b298:	00000a06 	br	b2c4 <alt_load_section+0x50>
    {
      *to++ = *from++;
    b29c:	e0bffd17 	ldw	r2,-12(fp)
    b2a0:	10c00017 	ldw	r3,0(r2)
    b2a4:	e0bffe17 	ldw	r2,-8(fp)
    b2a8:	10c00015 	stw	r3,0(r2)
    b2ac:	e0bffe17 	ldw	r2,-8(fp)
    b2b0:	10800104 	addi	r2,r2,4
    b2b4:	e0bffe15 	stw	r2,-8(fp)
    b2b8:	e0bffd17 	ldw	r2,-12(fp)
    b2bc:	10800104 	addi	r2,r2,4
    b2c0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    b2c4:	e0fffe17 	ldw	r3,-8(fp)
    b2c8:	e0bfff17 	ldw	r2,-4(fp)
    b2cc:	18bff31e 	bne	r3,r2,b29c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    b2d0:	e037883a 	mov	sp,fp
    b2d4:	df000017 	ldw	fp,0(sp)
    b2d8:	dec00104 	addi	sp,sp,4
    b2dc:	f800283a 	ret

0000b2e0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    b2e0:	defff804 	addi	sp,sp,-32
    b2e4:	dfc00715 	stw	ra,28(sp)
    b2e8:	df000615 	stw	fp,24(sp)
    b2ec:	df000604 	addi	fp,sp,24
    b2f0:	e13ffc15 	stw	r4,-16(fp)
    b2f4:	e17ffd15 	stw	r5,-12(fp)
    b2f8:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    b2fc:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b300:	e0bffc17 	ldw	r2,-16(fp)
    b304:	1004803a 	cmplt	r2,r2,zero
    b308:	1000081e 	bne	r2,zero,b32c <lseek+0x4c>
    b30c:	e0bffc17 	ldw	r2,-16(fp)
    b310:	10800324 	muli	r2,r2,12
    b314:	1007883a 	mov	r3,r2
    b318:	008000b4 	movhi	r2,2
    b31c:	10a1dd04 	addi	r2,r2,-30860
    b320:	1887883a 	add	r3,r3,r2
    b324:	e0ffff15 	stw	r3,-4(fp)
    b328:	00000106 	br	b330 <lseek+0x50>
    b32c:	e03fff15 	stw	zero,-4(fp)
    b330:	e0bfff17 	ldw	r2,-4(fp)
    b334:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    b338:	e0bffb17 	ldw	r2,-20(fp)
    b33c:	1005003a 	cmpeq	r2,r2,zero
    b340:	1000111e 	bne	r2,zero,b388 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    b344:	e0bffb17 	ldw	r2,-20(fp)
    b348:	10800017 	ldw	r2,0(r2)
    b34c:	10800717 	ldw	r2,28(r2)
    b350:	1005003a 	cmpeq	r2,r2,zero
    b354:	1000091e 	bne	r2,zero,b37c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    b358:	e0bffb17 	ldw	r2,-20(fp)
    b35c:	10800017 	ldw	r2,0(r2)
    b360:	10800717 	ldw	r2,28(r2)
    b364:	e13ffb17 	ldw	r4,-20(fp)
    b368:	e17ffd17 	ldw	r5,-12(fp)
    b36c:	e1bffe17 	ldw	r6,-8(fp)
    b370:	103ee83a 	callr	r2
    b374:	e0bffa15 	stw	r2,-24(fp)
    b378:	00000506 	br	b390 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    b37c:	00bfde84 	movi	r2,-134
    b380:	e0bffa15 	stw	r2,-24(fp)
    b384:	00000206 	br	b390 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    b388:	00bfebc4 	movi	r2,-81
    b38c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    b390:	e0bffa17 	ldw	r2,-24(fp)
    b394:	1004403a 	cmpge	r2,r2,zero
    b398:	1000071e 	bne	r2,zero,b3b8 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    b39c:	000b3d00 	call	b3d0 <alt_get_errno>
    b3a0:	1007883a 	mov	r3,r2
    b3a4:	e0bffa17 	ldw	r2,-24(fp)
    b3a8:	0085c83a 	sub	r2,zero,r2
    b3ac:	18800015 	stw	r2,0(r3)
    rc = -1;
    b3b0:	00bfffc4 	movi	r2,-1
    b3b4:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    b3b8:	e0bffa17 	ldw	r2,-24(fp)
}
    b3bc:	e037883a 	mov	sp,fp
    b3c0:	dfc00117 	ldw	ra,4(sp)
    b3c4:	df000017 	ldw	fp,0(sp)
    b3c8:	dec00204 	addi	sp,sp,8
    b3cc:	f800283a 	ret

0000b3d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b3d0:	defffd04 	addi	sp,sp,-12
    b3d4:	dfc00215 	stw	ra,8(sp)
    b3d8:	df000115 	stw	fp,4(sp)
    b3dc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b3e0:	008000b4 	movhi	r2,2
    b3e4:	10a69504 	addi	r2,r2,-26028
    b3e8:	10800017 	ldw	r2,0(r2)
    b3ec:	1005003a 	cmpeq	r2,r2,zero
    b3f0:	1000061e 	bne	r2,zero,b40c <alt_get_errno+0x3c>
    b3f4:	008000b4 	movhi	r2,2
    b3f8:	10a69504 	addi	r2,r2,-26028
    b3fc:	10800017 	ldw	r2,0(r2)
    b400:	103ee83a 	callr	r2
    b404:	e0bfff15 	stw	r2,-4(fp)
    b408:	00000306 	br	b418 <alt_get_errno+0x48>
    b40c:	008000b4 	movhi	r2,2
    b410:	10adc504 	addi	r2,r2,-18668
    b414:	e0bfff15 	stw	r2,-4(fp)
    b418:	e0bfff17 	ldw	r2,-4(fp)
}
    b41c:	e037883a 	mov	sp,fp
    b420:	dfc00117 	ldw	ra,4(sp)
    b424:	df000017 	ldw	fp,0(sp)
    b428:	dec00204 	addi	sp,sp,8
    b42c:	f800283a 	ret

0000b430 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    b430:	defffb04 	addi	sp,sp,-20
    b434:	dfc00415 	stw	ra,16(sp)
    b438:	df000315 	stw	fp,12(sp)
    b43c:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    b440:	0009883a 	mov	r4,zero
    b444:	0013ec00 	call	13ec0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    b448:	000c51c0 	call	c51c <OSInit>
    b44c:	01000044 	movi	r4,1
    b450:	00113e00 	call	113e0 <OSSemCreate>
    b454:	1007883a 	mov	r3,r2
    b458:	008000b4 	movhi	r2,2
    b45c:	10adcb04 	addi	r2,r2,-18644
    b460:	10c00015 	stw	r3,0(r2)
    b464:	01000044 	movi	r4,1
    b468:	00113e00 	call	113e0 <OSSemCreate>
    b46c:	1007883a 	mov	r3,r2
    b470:	008000b4 	movhi	r2,2
    b474:	10adcd04 	addi	r2,r2,-18636
    b478:	10c00015 	stw	r3,0(r2)
    b47c:	008000b4 	movhi	r2,2
    b480:	10adc604 	addi	r2,r2,-18664
    b484:	e0bffd15 	stw	r2,-12(fp)
    b488:	00800044 	movi	r2,1
    b48c:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    b490:	e13ffe0b 	ldhu	r4,-8(fp)
    b494:	00113e00 	call	113e0 <OSSemCreate>
    b498:	1007883a 	mov	r3,r2
    b49c:	e0bffd17 	ldw	r2,-12(fp)
    b4a0:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    b4a4:	0013ef40 	call	13ef4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    b4a8:	01000074 	movhi	r4,1
    b4ac:	211f7a04 	addi	r4,r4,32232
    b4b0:	01400074 	movhi	r5,1
    b4b4:	295f7a04 	addi	r5,r5,32232
    b4b8:	01800074 	movhi	r6,1
    b4bc:	319f7a04 	addi	r6,r6,32232
    b4c0:	00166a80 	call	166a8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    b4c4:	00161500 	call	16150 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    b4c8:	01000074 	movhi	r4,1
    b4cc:	21186d04 	addi	r4,r4,25012
    b4d0:	00176040 	call	17604 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    b4d4:	d1273d17 	ldw	r4,-25356(gp)
    b4d8:	d1673e17 	ldw	r5,-25352(gp)
    b4dc:	d1a73f17 	ldw	r6,-25348(gp)
    b4e0:	00006900 	call	690 <main>
    b4e4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    b4e8:	01000044 	movi	r4,1
    b4ec:	000ae180 	call	ae18 <close>
  exit (result);
    b4f0:	e13fff17 	ldw	r4,-4(fp)
    b4f4:	00176180 	call	17618 <exit>

0000b4f8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    b4f8:	defff704 	addi	sp,sp,-36
    b4fc:	dfc00815 	stw	ra,32(sp)
    b500:	df000715 	stw	fp,28(sp)
    b504:	df000704 	addi	fp,sp,28
    b508:	e13ffb15 	stw	r4,-20(fp)
    b50c:	e17ffc15 	stw	r5,-16(fp)
    b510:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b514:	e0bffb17 	ldw	r2,-20(fp)
    b518:	1004803a 	cmplt	r2,r2,zero
    b51c:	1000081e 	bne	r2,zero,b540 <read+0x48>
    b520:	e0bffb17 	ldw	r2,-20(fp)
    b524:	10800324 	muli	r2,r2,12
    b528:	1007883a 	mov	r3,r2
    b52c:	008000b4 	movhi	r2,2
    b530:	10a1dd04 	addi	r2,r2,-30860
    b534:	1887883a 	add	r3,r3,r2
    b538:	e0ffff15 	stw	r3,-4(fp)
    b53c:	00000106 	br	b544 <read+0x4c>
    b540:	e03fff15 	stw	zero,-4(fp)
    b544:	e0bfff17 	ldw	r2,-4(fp)
    b548:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    b54c:	e0bffa17 	ldw	r2,-24(fp)
    b550:	1005003a 	cmpeq	r2,r2,zero
    b554:	1000241e 	bne	r2,zero,b5e8 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    b558:	e0bffa17 	ldw	r2,-24(fp)
    b55c:	10800217 	ldw	r2,8(r2)
    b560:	108000cc 	andi	r2,r2,3
    b564:	10800060 	cmpeqi	r2,r2,1
    b568:	10001a1e 	bne	r2,zero,b5d4 <read+0xdc>
    b56c:	e0bffa17 	ldw	r2,-24(fp)
    b570:	10800017 	ldw	r2,0(r2)
    b574:	10800517 	ldw	r2,20(r2)
    b578:	1005003a 	cmpeq	r2,r2,zero
    b57c:	1000151e 	bne	r2,zero,b5d4 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    b580:	e0bffa17 	ldw	r2,-24(fp)
    b584:	10800017 	ldw	r2,0(r2)
    b588:	10800517 	ldw	r2,20(r2)
    b58c:	e17ffc17 	ldw	r5,-16(fp)
    b590:	e1bffd17 	ldw	r6,-12(fp)
    b594:	e13ffa17 	ldw	r4,-24(fp)
    b598:	103ee83a 	callr	r2
    b59c:	e0bff915 	stw	r2,-28(fp)
    b5a0:	e0bff917 	ldw	r2,-28(fp)
    b5a4:	1004403a 	cmpge	r2,r2,zero
    b5a8:	1000071e 	bne	r2,zero,b5c8 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    b5ac:	000b6180 	call	b618 <alt_get_errno>
    b5b0:	e0fff917 	ldw	r3,-28(fp)
    b5b4:	00c7c83a 	sub	r3,zero,r3
    b5b8:	10c00015 	stw	r3,0(r2)
          return -1;
    b5bc:	00bfffc4 	movi	r2,-1
    b5c0:	e0bffe15 	stw	r2,-8(fp)
    b5c4:	00000e06 	br	b600 <read+0x108>
        }
        return rval;
    b5c8:	e0bff917 	ldw	r2,-28(fp)
    b5cc:	e0bffe15 	stw	r2,-8(fp)
    b5d0:	00000b06 	br	b600 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    b5d4:	000b6180 	call	b618 <alt_get_errno>
    b5d8:	1007883a 	mov	r3,r2
    b5dc:	00800344 	movi	r2,13
    b5e0:	18800015 	stw	r2,0(r3)
    b5e4:	00000406 	br	b5f8 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    b5e8:	000b6180 	call	b618 <alt_get_errno>
    b5ec:	1007883a 	mov	r3,r2
    b5f0:	00801444 	movi	r2,81
    b5f4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b5f8:	00bfffc4 	movi	r2,-1
    b5fc:	e0bffe15 	stw	r2,-8(fp)
    b600:	e0bffe17 	ldw	r2,-8(fp)
}
    b604:	e037883a 	mov	sp,fp
    b608:	dfc00117 	ldw	ra,4(sp)
    b60c:	df000017 	ldw	fp,0(sp)
    b610:	dec00204 	addi	sp,sp,8
    b614:	f800283a 	ret

0000b618 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b618:	defffd04 	addi	sp,sp,-12
    b61c:	dfc00215 	stw	ra,8(sp)
    b620:	df000115 	stw	fp,4(sp)
    b624:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b628:	008000b4 	movhi	r2,2
    b62c:	10a69504 	addi	r2,r2,-26028
    b630:	10800017 	ldw	r2,0(r2)
    b634:	1005003a 	cmpeq	r2,r2,zero
    b638:	1000061e 	bne	r2,zero,b654 <alt_get_errno+0x3c>
    b63c:	008000b4 	movhi	r2,2
    b640:	10a69504 	addi	r2,r2,-26028
    b644:	10800017 	ldw	r2,0(r2)
    b648:	103ee83a 	callr	r2
    b64c:	e0bfff15 	stw	r2,-4(fp)
    b650:	00000306 	br	b660 <alt_get_errno+0x48>
    b654:	008000b4 	movhi	r2,2
    b658:	10adc504 	addi	r2,r2,-18668
    b65c:	e0bfff15 	stw	r2,-4(fp)
    b660:	e0bfff17 	ldw	r2,-4(fp)
}
    b664:	e037883a 	mov	sp,fp
    b668:	dfc00117 	ldw	ra,4(sp)
    b66c:	df000017 	ldw	fp,0(sp)
    b670:	dec00204 	addi	sp,sp,8
    b674:	f800283a 	ret

0000b678 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    b678:	defffe04 	addi	sp,sp,-8
    b67c:	df000115 	stw	fp,4(sp)
    b680:	df000104 	addi	fp,sp,4
    b684:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    b688:	e0bfff17 	ldw	r2,-4(fp)
    b68c:	108000d0 	cmplti	r2,r2,3
    b690:	10000d1e 	bne	r2,zero,b6c8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    b694:	e0bfff17 	ldw	r2,-4(fp)
    b698:	00c000b4 	movhi	r3,2
    b69c:	18e1dd04 	addi	r3,r3,-30860
    b6a0:	10800324 	muli	r2,r2,12
    b6a4:	10c5883a 	add	r2,r2,r3
    b6a8:	10800204 	addi	r2,r2,8
    b6ac:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    b6b0:	e0bfff17 	ldw	r2,-4(fp)
    b6b4:	00c000b4 	movhi	r3,2
    b6b8:	18e1dd04 	addi	r3,r3,-30860
    b6bc:	10800324 	muli	r2,r2,12
    b6c0:	10c5883a 	add	r2,r2,r3
    b6c4:	10000015 	stw	zero,0(r2)
  }
}
    b6c8:	e037883a 	mov	sp,fp
    b6cc:	df000017 	ldw	fp,0(sp)
    b6d0:	dec00104 	addi	sp,sp,4
    b6d4:	f800283a 	ret

0000b6d8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    b6d8:	defff804 	addi	sp,sp,-32
    b6dc:	df000715 	stw	fp,28(sp)
    b6e0:	df000704 	addi	fp,sp,28
    b6e4:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b6e8:	0005303a 	rdctl	r2,status
    b6ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b6f0:	e0fffb17 	ldw	r3,-20(fp)
    b6f4:	00bfff84 	movi	r2,-2
    b6f8:	1884703a 	and	r2,r3,r2
    b6fc:	1001703a 	wrctl	status,r2
  
  return context;
    b700:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    b704:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    b708:	d0a00c17 	ldw	r2,-32720(gp)
    b70c:	10c000c4 	addi	r3,r2,3
    b710:	00bfff04 	movi	r2,-4
    b714:	1884703a 	and	r2,r3,r2
    b718:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    b71c:	d0e00c17 	ldw	r3,-32720(gp)
    b720:	e0bffe17 	ldw	r2,-8(fp)
    b724:	1887883a 	add	r3,r3,r2
    b728:	00804434 	movhi	r2,272
    b72c:	10800004 	addi	r2,r2,0
    b730:	10c0072e 	bgeu	r2,r3,b750 <sbrk+0x78>
    b734:	e0bffd17 	ldw	r2,-12(fp)
    b738:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b73c:	e0bffa17 	ldw	r2,-24(fp)
    b740:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    b744:	00bfffc4 	movi	r2,-1
    b748:	e0bfff15 	stw	r2,-4(fp)
    b74c:	00000c06 	br	b780 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    b750:	d0a00c17 	ldw	r2,-32720(gp)
    b754:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    b758:	d0e00c17 	ldw	r3,-32720(gp)
    b75c:	e0bffe17 	ldw	r2,-8(fp)
    b760:	1885883a 	add	r2,r3,r2
    b764:	d0a00c15 	stw	r2,-32720(gp)
    b768:	e0bffd17 	ldw	r2,-12(fp)
    b76c:	e0bff915 	stw	r2,-28(fp)
    b770:	e0bff917 	ldw	r2,-28(fp)
    b774:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    b778:	e0bffc17 	ldw	r2,-16(fp)
    b77c:	e0bfff15 	stw	r2,-4(fp)
    b780:	e0bfff17 	ldw	r2,-4(fp)
} 
    b784:	e037883a 	mov	sp,fp
    b788:	df000017 	ldw	fp,0(sp)
    b78c:	dec00104 	addi	sp,sp,4
    b790:	f800283a 	ret

0000b794 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    b794:	defff704 	addi	sp,sp,-36
    b798:	dfc00815 	stw	ra,32(sp)
    b79c:	df000715 	stw	fp,28(sp)
    b7a0:	df000704 	addi	fp,sp,28
    b7a4:	e13ffb15 	stw	r4,-20(fp)
    b7a8:	e17ffc15 	stw	r5,-16(fp)
    b7ac:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b7b0:	e0bffb17 	ldw	r2,-20(fp)
    b7b4:	1004803a 	cmplt	r2,r2,zero
    b7b8:	1000081e 	bne	r2,zero,b7dc <write+0x48>
    b7bc:	e0bffb17 	ldw	r2,-20(fp)
    b7c0:	10800324 	muli	r2,r2,12
    b7c4:	1007883a 	mov	r3,r2
    b7c8:	008000b4 	movhi	r2,2
    b7cc:	10a1dd04 	addi	r2,r2,-30860
    b7d0:	1887883a 	add	r3,r3,r2
    b7d4:	e0ffff15 	stw	r3,-4(fp)
    b7d8:	00000106 	br	b7e0 <write+0x4c>
    b7dc:	e03fff15 	stw	zero,-4(fp)
    b7e0:	e0bfff17 	ldw	r2,-4(fp)
    b7e4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    b7e8:	e0bffa17 	ldw	r2,-24(fp)
    b7ec:	1005003a 	cmpeq	r2,r2,zero
    b7f0:	1000241e 	bne	r2,zero,b884 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    b7f4:	e0bffa17 	ldw	r2,-24(fp)
    b7f8:	10800217 	ldw	r2,8(r2)
    b7fc:	108000cc 	andi	r2,r2,3
    b800:	1005003a 	cmpeq	r2,r2,zero
    b804:	10001a1e 	bne	r2,zero,b870 <write+0xdc>
    b808:	e0bffa17 	ldw	r2,-24(fp)
    b80c:	10800017 	ldw	r2,0(r2)
    b810:	10800617 	ldw	r2,24(r2)
    b814:	1005003a 	cmpeq	r2,r2,zero
    b818:	1000151e 	bne	r2,zero,b870 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    b81c:	e0bffa17 	ldw	r2,-24(fp)
    b820:	10800017 	ldw	r2,0(r2)
    b824:	10800617 	ldw	r2,24(r2)
    b828:	e17ffc17 	ldw	r5,-16(fp)
    b82c:	e1bffd17 	ldw	r6,-12(fp)
    b830:	e13ffa17 	ldw	r4,-24(fp)
    b834:	103ee83a 	callr	r2
    b838:	e0bff915 	stw	r2,-28(fp)
    b83c:	e0bff917 	ldw	r2,-28(fp)
    b840:	1004403a 	cmpge	r2,r2,zero
    b844:	1000071e 	bne	r2,zero,b864 <write+0xd0>
      {
        ALT_ERRNO = -rval;
    b848:	000b8b40 	call	b8b4 <alt_get_errno>
    b84c:	e0fff917 	ldw	r3,-28(fp)
    b850:	00c7c83a 	sub	r3,zero,r3
    b854:	10c00015 	stw	r3,0(r2)
        return -1;
    b858:	00bfffc4 	movi	r2,-1
    b85c:	e0bffe15 	stw	r2,-8(fp)
    b860:	00000e06 	br	b89c <write+0x108>
      }
      return rval;
    b864:	e0bff917 	ldw	r2,-28(fp)
    b868:	e0bffe15 	stw	r2,-8(fp)
    b86c:	00000b06 	br	b89c <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    b870:	000b8b40 	call	b8b4 <alt_get_errno>
    b874:	1007883a 	mov	r3,r2
    b878:	00800344 	movi	r2,13
    b87c:	18800015 	stw	r2,0(r3)
    b880:	00000406 	br	b894 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    b884:	000b8b40 	call	b8b4 <alt_get_errno>
    b888:	1007883a 	mov	r3,r2
    b88c:	00801444 	movi	r2,81
    b890:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b894:	00bfffc4 	movi	r2,-1
    b898:	e0bffe15 	stw	r2,-8(fp)
    b89c:	e0bffe17 	ldw	r2,-8(fp)
}
    b8a0:	e037883a 	mov	sp,fp
    b8a4:	dfc00117 	ldw	ra,4(sp)
    b8a8:	df000017 	ldw	fp,0(sp)
    b8ac:	dec00204 	addi	sp,sp,8
    b8b0:	f800283a 	ret

0000b8b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b8b4:	defffd04 	addi	sp,sp,-12
    b8b8:	dfc00215 	stw	ra,8(sp)
    b8bc:	df000115 	stw	fp,4(sp)
    b8c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b8c4:	008000b4 	movhi	r2,2
    b8c8:	10a69504 	addi	r2,r2,-26028
    b8cc:	10800017 	ldw	r2,0(r2)
    b8d0:	1005003a 	cmpeq	r2,r2,zero
    b8d4:	1000061e 	bne	r2,zero,b8f0 <alt_get_errno+0x3c>
    b8d8:	008000b4 	movhi	r2,2
    b8dc:	10a69504 	addi	r2,r2,-26028
    b8e0:	10800017 	ldw	r2,0(r2)
    b8e4:	103ee83a 	callr	r2
    b8e8:	e0bfff15 	stw	r2,-4(fp)
    b8ec:	00000306 	br	b8fc <alt_get_errno+0x48>
    b8f0:	008000b4 	movhi	r2,2
    b8f4:	10adc504 	addi	r2,r2,-18668
    b8f8:	e0bfff15 	stw	r2,-4(fp)
    b8fc:	e0bfff17 	ldw	r2,-4(fp)
}
    b900:	e037883a 	mov	sp,fp
    b904:	dfc00117 	ldw	ra,4(sp)
    b908:	df000017 	ldw	fp,0(sp)
    b90c:	dec00204 	addi	sp,sp,8
    b910:	f800283a 	ret

0000b914 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    b914:	deffdf04 	addi	sp,sp,-132
    b918:	dfc02015 	stw	ra,128(sp)
    b91c:	df001f15 	stw	fp,124(sp)
    b920:	df001f04 	addi	fp,sp,124
    b924:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    b928:	e17fe204 	addi	r5,fp,-120
    b92c:	01003fc4 	movi	r4,255
    b930:	00137680 	call	13768 <OSTaskQuery>
    b934:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    b938:	e0bffe83 	ldbu	r2,-6(fp)
    b93c:	10803fcc 	andi	r2,r2,255
    b940:	1004c03a 	cmpne	r2,r2,zero
    b944:	1000191e 	bne	r2,zero,b9ac <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
    b948:	e0bfee83 	ldbu	r2,-70(fp)
    b94c:	10803fcc 	andi	r2,r2,255
    b950:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    b954:	d1274117 	ldw	r4,-25340(gp)
    b958:	e17ffd04 	addi	r5,fp,-12
    b95c:	0011cb40 	call	11cb4 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    b960:	e0bffe43 	ldbu	r2,-7(fp)
    b964:	10803fcc 	andi	r2,r2,255
    b968:	1005003a 	cmpeq	r2,r2,zero
    b96c:	1000071e 	bne	r2,zero,b98c <__env_lock+0x78>
    b970:	d0e00d17 	ldw	r3,-32716(gp)
    b974:	e0bfe117 	ldw	r2,-124(fp)
    b978:	10c0041e 	bne	r2,r3,b98c <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
    b97c:	d0a74017 	ldw	r2,-25344(gp)
    b980:	10800044 	addi	r2,r2,1
    b984:	d0a74015 	stw	r2,-25344(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
    b988:	00000806 	br	b9ac <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    b98c:	d1274117 	ldw	r4,-25340(gp)
    b990:	e1bffe84 	addi	r6,fp,-6
    b994:	000b883a 	mov	r5,zero
    b998:	00117940 	call	11794 <OSSemPend>
    locks  = 1;
    b99c:	00800044 	movi	r2,1
    b9a0:	d0a74015 	stw	r2,-25344(gp)
    lockid = id;
    b9a4:	e0bfe117 	ldw	r2,-124(fp)
    b9a8:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    b9ac:	e037883a 	mov	sp,fp
    b9b0:	dfc00117 	ldw	ra,4(sp)
    b9b4:	df000017 	ldw	fp,0(sp)
    b9b8:	dec00204 	addi	sp,sp,8
    b9bc:	f800283a 	ret

0000b9c0 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    b9c0:	defffd04 	addi	sp,sp,-12
    b9c4:	dfc00215 	stw	ra,8(sp)
    b9c8:	df000115 	stw	fp,4(sp)
    b9cc:	df000104 	addi	fp,sp,4
    b9d0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    b9d4:	d0a74017 	ldw	r2,-25344(gp)
    b9d8:	1005003a 	cmpeq	r2,r2,zero
    b9dc:	10000a1e 	bne	r2,zero,ba08 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    b9e0:	d0a74017 	ldw	r2,-25344(gp)
    b9e4:	10bfffc4 	addi	r2,r2,-1
    b9e8:	d0a74015 	stw	r2,-25344(gp)
    b9ec:	d0a74017 	ldw	r2,-25344(gp)
    b9f0:	1004c03a 	cmpne	r2,r2,zero
    b9f4:	1000041e 	bne	r2,zero,ba08 <__env_unlock+0x48>
  {
    lockid = -1;
    b9f8:	00bfffc4 	movi	r2,-1
    b9fc:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
    ba00:	d1274117 	ldw	r4,-25340(gp)
    ba04:	0011b8c0 	call	11b8c <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    ba08:	e037883a 	mov	sp,fp
    ba0c:	dfc00117 	ldw	ra,4(sp)
    ba10:	df000017 	ldw	fp,0(sp)
    ba14:	dec00204 	addi	sp,sp,8
    ba18:	f800283a 	ret

0000ba1c <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    ba1c:	deffdb04 	addi	sp,sp,-148
    ba20:	dfc02415 	stw	ra,144(sp)
    ba24:	df002315 	stw	fp,140(sp)
    ba28:	df002304 	addi	fp,sp,140
    ba2c:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    ba30:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    ba34:	008000b4 	movhi	r2,2
    ba38:	10adce44 	addi	r2,r2,-18631
    ba3c:	10800003 	ldbu	r2,0(r2)
    ba40:	10803fcc 	andi	r2,r2,255
    ba44:	10800058 	cmpnei	r2,r2,1
    ba48:	1000311e 	bne	r2,zero,bb10 <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    ba4c:	e17fe204 	addi	r5,fp,-120
    ba50:	01003fc4 	movi	r4,255
    ba54:	00137680 	call	13768 <OSTaskQuery>
    ba58:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    ba5c:	e0bffe83 	ldbu	r2,-6(fp)
    ba60:	10803fcc 	andi	r2,r2,255
    ba64:	1004c03a 	cmpne	r2,r2,zero
    ba68:	1000291e 	bne	r2,zero,bb10 <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
    ba6c:	e0bfee83 	ldbu	r2,-70(fp)
    ba70:	10803fcc 	andi	r2,r2,255
    ba74:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    ba78:	d1274317 	ldw	r4,-25332(gp)
    ba7c:	e17ffd04 	addi	r5,fp,-12
    ba80:	0011cb40 	call	11cb4 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ba84:	0005303a 	rdctl	r2,status
    ba88:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ba8c:	e0ffdf17 	ldw	r3,-132(fp)
    ba90:	00bfff84 	movi	r2,-2
    ba94:	1884703a 	and	r2,r3,r2
    ba98:	1001703a 	wrctl	status,r2
  
  return context;
    ba9c:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
    baa0:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
    baa4:	e0bffd0b 	ldhu	r2,-12(fp)
    baa8:	10bfffcc 	andi	r2,r2,65535
    baac:	1004c03a 	cmpne	r2,r2,zero
    bab0:	10000b1e 	bne	r2,zero,bae0 <__malloc_lock+0xc4>
    bab4:	d0e00e17 	ldw	r3,-32712(gp)
    bab8:	e0bfe117 	ldw	r2,-124(fp)
    babc:	10c0081e 	bne	r2,r3,bae0 <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
    bac0:	d0a74217 	ldw	r2,-25336(gp)
    bac4:	10800044 	addi	r2,r2,1
    bac8:	d0a74215 	stw	r2,-25336(gp)
    bacc:	e0bfe017 	ldw	r2,-128(fp)
    bad0:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bad4:	e0bfde17 	ldw	r2,-136(fp)
    bad8:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
    badc:	00000c06 	br	bb10 <__malloc_lock+0xf4>
    bae0:	e0bfe017 	ldw	r2,-128(fp)
    bae4:	e0bfdd15 	stw	r2,-140(fp)
    bae8:	e0bfdd17 	ldw	r2,-140(fp)
    baec:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    baf0:	d1274317 	ldw	r4,-25332(gp)
    baf4:	e1bffe84 	addi	r6,fp,-6
    baf8:	000b883a 	mov	r5,zero
    bafc:	00117940 	call	11794 <OSSemPend>
    locks  = 1;
    bb00:	00800044 	movi	r2,1
    bb04:	d0a74215 	stw	r2,-25336(gp)
    lockid = id;
    bb08:	e0bfe117 	ldw	r2,-124(fp)
    bb0c:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    bb10:	e037883a 	mov	sp,fp
    bb14:	dfc00117 	ldw	ra,4(sp)
    bb18:	df000017 	ldw	fp,0(sp)
    bb1c:	dec00204 	addi	sp,sp,8
    bb20:	f800283a 	ret

0000bb24 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    bb24:	defff804 	addi	sp,sp,-32
    bb28:	dfc00715 	stw	ra,28(sp)
    bb2c:	df000615 	stw	fp,24(sp)
    bb30:	df000604 	addi	fp,sp,24
    bb34:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    bb38:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
    bb3c:	008000b4 	movhi	r2,2
    bb40:	10adce44 	addi	r2,r2,-18631
    bb44:	10800003 	ldbu	r2,0(r2)
    bb48:	10803fcc 	andi	r2,r2,255
    bb4c:	10800058 	cmpnei	r2,r2,1
    bb50:	1000231e 	bne	r2,zero,bbe0 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bb54:	0005303a 	rdctl	r2,status
    bb58:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bb5c:	e0fffd17 	ldw	r3,-12(fp)
    bb60:	00bfff84 	movi	r2,-2
    bb64:	1884703a 	and	r2,r3,r2
    bb68:	1001703a 	wrctl	status,r2
  
  return context;
    bb6c:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
    bb70:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
    bb74:	d0a74217 	ldw	r2,-25336(gp)
    bb78:	1004c03a 	cmpne	r2,r2,zero
    bb7c:	1000051e 	bne	r2,zero,bb94 <__malloc_unlock+0x70>
    bb80:	e0bffe17 	ldw	r2,-8(fp)
    bb84:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bb88:	e0bffc17 	ldw	r2,-16(fp)
    bb8c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    bb90:	00001306 	br	bbe0 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    bb94:	d0a74217 	ldw	r2,-25336(gp)
    bb98:	10bfffc4 	addi	r2,r2,-1
    bb9c:	d0a74215 	stw	r2,-25336(gp)
    bba0:	d0a74217 	ldw	r2,-25336(gp)
    bba4:	1004c03a 	cmpne	r2,r2,zero
    bba8:	1000091e 	bne	r2,zero,bbd0 <__malloc_unlock+0xac>
  {
    lockid = -1;
    bbac:	00bfffc4 	movi	r2,-1
    bbb0:	d0a00e15 	stw	r2,-32712(gp)
    bbb4:	e0bffe17 	ldw	r2,-8(fp)
    bbb8:	e0bffb15 	stw	r2,-20(fp)
    bbbc:	e0bffb17 	ldw	r2,-20(fp)
    bbc0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    bbc4:	d1274317 	ldw	r4,-25332(gp)
    bbc8:	0011b8c0 	call	11b8c <OSSemPost>
    bbcc:	00000406 	br	bbe0 <__malloc_unlock+0xbc>
    bbd0:	e0bffe17 	ldw	r2,-8(fp)
    bbd4:	e0bffa15 	stw	r2,-24(fp)
    bbd8:	e0bffa17 	ldw	r2,-24(fp)
    bbdc:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    bbe0:	e037883a 	mov	sp,fp
    bbe4:	dfc00117 	ldw	ra,4(sp)
    bbe8:	df000017 	ldw	fp,0(sp)
    bbec:	dec00204 	addi	sp,sp,8
    bbf0:	f800283a 	ret

0000bbf4 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    bbf4:	defff604 	addi	sp,sp,-40
    bbf8:	dfc00915 	stw	ra,36(sp)
    bbfc:	df000815 	stw	fp,32(sp)
    bc00:	df000804 	addi	fp,sp,32
    bc04:	e13ffc15 	stw	r4,-16(fp)
    bc08:	e17ffd15 	stw	r5,-12(fp)
    bc0c:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    bc10:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    bc14:	e0bffe17 	ldw	r2,-8(fp)
    bc18:	1004c03a 	cmpne	r2,r2,zero
    bc1c:	1000021e 	bne	r2,zero,bc28 <OSEventNameGet+0x34>
        return (0);
    bc20:	e03fff15 	stw	zero,-4(fp)
    bc24:	00003906 	br	bd0c <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    bc28:	e0bffc17 	ldw	r2,-16(fp)
    bc2c:	1004c03a 	cmpne	r2,r2,zero
    bc30:	1000051e 	bne	r2,zero,bc48 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
    bc34:	e0fffe17 	ldw	r3,-8(fp)
    bc38:	00800104 	movi	r2,4
    bc3c:	18800005 	stb	r2,0(r3)
        return (0);
    bc40:	e03fff15 	stw	zero,-4(fp)
    bc44:	00003106 	br	bd0c <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    bc48:	e0bffd17 	ldw	r2,-12(fp)
    bc4c:	1004c03a 	cmpne	r2,r2,zero
    bc50:	1000051e 	bne	r2,zero,bc68 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
    bc54:	e0fffe17 	ldw	r3,-8(fp)
    bc58:	00800304 	movi	r2,12
    bc5c:	18800005 	stb	r2,0(r3)
        return (0);
    bc60:	e03fff15 	stw	zero,-4(fp)
    bc64:	00002906 	br	bd0c <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    bc68:	d0a75203 	ldbu	r2,-25272(gp)
    bc6c:	10803fcc 	andi	r2,r2,255
    bc70:	1005003a 	cmpeq	r2,r2,zero
    bc74:	1000051e 	bne	r2,zero,bc8c <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
    bc78:	e0fffe17 	ldw	r3,-8(fp)
    bc7c:	00800444 	movi	r2,17
    bc80:	18800005 	stb	r2,0(r3)
        return (0);
    bc84:	e03fff15 	stw	zero,-4(fp)
    bc88:	00002006 	br	bd0c <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
    bc8c:	e0bffc17 	ldw	r2,-16(fp)
    bc90:	10800003 	ldbu	r2,0(r2)
    bc94:	10803fcc 	andi	r2,r2,255
    bc98:	10bfffc4 	addi	r2,r2,-1
    bc9c:	10800128 	cmpgeui	r2,r2,4
    bca0:	1000161e 	bne	r2,zero,bcfc <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bca4:	0005303a 	rdctl	r2,status
    bca8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bcac:	e0fff917 	ldw	r3,-28(fp)
    bcb0:	00bfff84 	movi	r2,-2
    bcb4:	1884703a 	and	r2,r3,r2
    bcb8:	1001703a 	wrctl	status,r2
  
  return context;
    bcbc:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    bcc0:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    bcc4:	e0bffc17 	ldw	r2,-16(fp)
    bcc8:	11400384 	addi	r5,r2,14
    bccc:	e13ffd17 	ldw	r4,-12(fp)
    bcd0:	000d7780 	call	d778 <OS_StrCopy>
    bcd4:	e0bffb05 	stb	r2,-20(fp)
    bcd8:	e0bffa17 	ldw	r2,-24(fp)
    bcdc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bce0:	e0bff817 	ldw	r2,-32(fp)
    bce4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    bce8:	e0bffe17 	ldw	r2,-8(fp)
    bcec:	10000005 	stb	zero,0(r2)
    return (len);
    bcf0:	e0bffb03 	ldbu	r2,-20(fp)
    bcf4:	e0bfff15 	stw	r2,-4(fp)
    bcf8:	00000406 	br	bd0c <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    bcfc:	e0fffe17 	ldw	r3,-8(fp)
    bd00:	00800044 	movi	r2,1
    bd04:	18800005 	stb	r2,0(r3)
             return (0);
    bd08:	e03fff15 	stw	zero,-4(fp)
    bd0c:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
    bd10:	e037883a 	mov	sp,fp
    bd14:	dfc00117 	ldw	ra,4(sp)
    bd18:	df000017 	ldw	fp,0(sp)
    bd1c:	dec00204 	addi	sp,sp,8
    bd20:	f800283a 	ret

0000bd24 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    bd24:	defff604 	addi	sp,sp,-40
    bd28:	dfc00915 	stw	ra,36(sp)
    bd2c:	df000815 	stw	fp,32(sp)
    bd30:	df000804 	addi	fp,sp,32
    bd34:	e13ffd15 	stw	r4,-12(fp)
    bd38:	e17ffe15 	stw	r5,-8(fp)
    bd3c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    bd40:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    bd44:	e0bfff17 	ldw	r2,-4(fp)
    bd48:	1005003a 	cmpeq	r2,r2,zero
    bd4c:	1000411e 	bne	r2,zero,be54 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    bd50:	e0bffd17 	ldw	r2,-12(fp)
    bd54:	1004c03a 	cmpne	r2,r2,zero
    bd58:	1000041e 	bne	r2,zero,bd6c <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
    bd5c:	e0ffff17 	ldw	r3,-4(fp)
    bd60:	00800104 	movi	r2,4
    bd64:	18800005 	stb	r2,0(r3)
        return;
    bd68:	00003a06 	br	be54 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    bd6c:	e0bffe17 	ldw	r2,-8(fp)
    bd70:	1004c03a 	cmpne	r2,r2,zero
    bd74:	1000041e 	bne	r2,zero,bd88 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
    bd78:	e0ffff17 	ldw	r3,-4(fp)
    bd7c:	00800304 	movi	r2,12
    bd80:	18800005 	stb	r2,0(r3)
        return;
    bd84:	00003306 	br	be54 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    bd88:	d0a75203 	ldbu	r2,-25272(gp)
    bd8c:	10803fcc 	andi	r2,r2,255
    bd90:	1005003a 	cmpeq	r2,r2,zero
    bd94:	1000041e 	bne	r2,zero,bda8 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
    bd98:	e0ffff17 	ldw	r3,-4(fp)
    bd9c:	00800484 	movi	r2,18
    bda0:	18800005 	stb	r2,0(r3)
        return;
    bda4:	00002b06 	br	be54 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
    bda8:	e0bffd17 	ldw	r2,-12(fp)
    bdac:	10800003 	ldbu	r2,0(r2)
    bdb0:	10803fcc 	andi	r2,r2,255
    bdb4:	10bfffc4 	addi	r2,r2,-1
    bdb8:	10800128 	cmpgeui	r2,r2,4
    bdbc:	10000f1e 	bne	r2,zero,bdfc <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bdc0:	0005303a 	rdctl	r2,status
    bdc4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bdc8:	e0fffa17 	ldw	r3,-24(fp)
    bdcc:	00bfff84 	movi	r2,-2
    bdd0:	1884703a 	and	r2,r3,r2
    bdd4:	1001703a 	wrctl	status,r2
  
  return context;
    bdd8:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    bddc:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    bde0:	e13ffe17 	ldw	r4,-8(fp)
    bde4:	000d7f80 	call	d7f8 <OS_StrLen>
    bde8:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    bdec:	e0bffc03 	ldbu	r2,-16(fp)
    bdf0:	10800828 	cmpgeui	r2,r2,32
    bdf4:	1000051e 	bne	r2,zero,be0c <OSEventNameSet+0xe8>
    bdf8:	00000c06 	br	be2c <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    bdfc:	e0ffff17 	ldw	r3,-4(fp)
    be00:	00800044 	movi	r2,1
    be04:	18800005 	stb	r2,0(r3)
             return;
    be08:	00001206 	br	be54 <OSEventNameSet+0x130>
    be0c:	e0bffb17 	ldw	r2,-20(fp)
    be10:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    be14:	e0bff917 	ldw	r2,-28(fp)
    be18:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    be1c:	e0ffff17 	ldw	r3,-4(fp)
    be20:	008002c4 	movi	r2,11
    be24:	18800005 	stb	r2,0(r3)
        return;
    be28:	00000a06 	br	be54 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    be2c:	e0bffd17 	ldw	r2,-12(fp)
    be30:	11000384 	addi	r4,r2,14
    be34:	e17ffe17 	ldw	r5,-8(fp)
    be38:	000d7780 	call	d778 <OS_StrCopy>
    be3c:	e0bffb17 	ldw	r2,-20(fp)
    be40:	e0bff815 	stw	r2,-32(fp)
    be44:	e0bff817 	ldw	r2,-32(fp)
    be48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    be4c:	e0bfff17 	ldw	r2,-4(fp)
    be50:	10000005 	stb	zero,0(r2)
}
    be54:	e037883a 	mov	sp,fp
    be58:	dfc00117 	ldw	ra,4(sp)
    be5c:	df000017 	ldw	fp,0(sp)
    be60:	dec00204 	addi	sp,sp,8
    be64:	f800283a 	ret

0000be68 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    be68:	deffe704 	addi	sp,sp,-100
    be6c:	dfc01815 	stw	ra,96(sp)
    be70:	df001715 	stw	fp,92(sp)
    be74:	df001704 	addi	fp,sp,92
    be78:	e13ff615 	stw	r4,-40(fp)
    be7c:	e17ff715 	stw	r5,-36(fp)
    be80:	e1bff815 	stw	r6,-32(fp)
    be84:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    be88:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    be8c:	e0800217 	ldw	r2,8(fp)
    be90:	1004c03a 	cmpne	r2,r2,zero
    be94:	1000021e 	bne	r2,zero,bea0 <OSEventPendMulti+0x38>
        return (0);
    be98:	e03fff15 	stw	zero,-4(fp)
    be9c:	00019906 	br	c504 <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    bea0:	e0bff617 	ldw	r2,-40(fp)
    bea4:	1004c03a 	cmpne	r2,r2,zero
    bea8:	1000051e 	bne	r2,zero,bec0 <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
    beac:	e0c00217 	ldw	r3,8(fp)
    beb0:	00800104 	movi	r2,4
    beb4:	18800005 	stb	r2,0(r3)
        return (0);
    beb8:	e03fff15 	stw	zero,-4(fp)
    bebc:	00019106 	br	c504 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    bec0:	e0bff717 	ldw	r2,-36(fp)
    bec4:	1004c03a 	cmpne	r2,r2,zero
    bec8:	1000051e 	bne	r2,zero,bee0 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
    becc:	e0c00217 	ldw	r3,8(fp)
    bed0:	00800104 	movi	r2,4
    bed4:	18800005 	stb	r2,0(r3)
        return (0);
    bed8:	e03fff15 	stw	zero,-4(fp)
    bedc:	00018906 	br	c504 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    bee0:	e0bff817 	ldw	r2,-32(fp)
    bee4:	1004c03a 	cmpne	r2,r2,zero
    bee8:	1000051e 	bne	r2,zero,bf00 <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
    beec:	e0c00217 	ldw	r3,8(fp)
    bef0:	00800104 	movi	r2,4
    bef4:	18800005 	stb	r2,0(r3)
        return (0);
    bef8:	e03fff15 	stw	zero,-4(fp)
    befc:	00018106 	br	c504 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    bf00:	e0bff717 	ldw	r2,-36(fp)
    bf04:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    bf08:	e0bff617 	ldw	r2,-40(fp)
    bf0c:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
    bf10:	e0bff517 	ldw	r2,-44(fp)
    bf14:	10800017 	ldw	r2,0(r2)
    bf18:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
    bf1c:	00001806 	br	bf80 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    bf20:	e0bff417 	ldw	r2,-48(fp)
    bf24:	10800003 	ldbu	r2,0(r2)
    bf28:	10803fcc 	andi	r2,r2,255
    bf2c:	e0bffe15 	stw	r2,-8(fp)
    bf30:	e0fffe17 	ldw	r3,-8(fp)
    bf34:	188000a0 	cmpeqi	r2,r3,2
    bf38:	10000b1e 	bne	r2,zero,bf68 <OSEventPendMulti+0x100>
    bf3c:	e0fffe17 	ldw	r3,-8(fp)
    bf40:	188000e0 	cmpeqi	r2,r3,3
    bf44:	1000081e 	bne	r2,zero,bf68 <OSEventPendMulti+0x100>
    bf48:	e0fffe17 	ldw	r3,-8(fp)
    bf4c:	18800060 	cmpeqi	r2,r3,1
    bf50:	1000051e 	bne	r2,zero,bf68 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    bf54:	e0c00217 	ldw	r3,8(fp)
    bf58:	00800044 	movi	r2,1
    bf5c:	18800005 	stb	r2,0(r3)
                 return (0);
    bf60:	e03fff15 	stw	zero,-4(fp)
    bf64:	00016706 	br	c504 <OSEventPendMulti+0x69c>
        }
        pevents++;
    bf68:	e0bff517 	ldw	r2,-44(fp)
    bf6c:	10800104 	addi	r2,r2,4
    bf70:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
    bf74:	e0bff517 	ldw	r2,-44(fp)
    bf78:	10800017 	ldw	r2,0(r2)
    bf7c:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    bf80:	e0bff417 	ldw	r2,-48(fp)
    bf84:	1004c03a 	cmpne	r2,r2,zero
    bf88:	103fe51e 	bne	r2,zero,bf20 <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    bf8c:	d0a75203 	ldbu	r2,-25272(gp)
    bf90:	10803fcc 	andi	r2,r2,255
    bf94:	1005003a 	cmpeq	r2,r2,zero
    bf98:	1000051e 	bne	r2,zero,bfb0 <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    bf9c:	e0c00217 	ldw	r3,8(fp)
    bfa0:	00800084 	movi	r2,2
    bfa4:	18800005 	stb	r2,0(r3)
        return (0);
    bfa8:	e03fff15 	stw	zero,-4(fp)
    bfac:	00015506 	br	c504 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    bfb0:	d0a74403 	ldbu	r2,-25328(gp)
    bfb4:	10803fcc 	andi	r2,r2,255
    bfb8:	1005003a 	cmpeq	r2,r2,zero
    bfbc:	1000051e 	bne	r2,zero,bfd4 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    bfc0:	e0c00217 	ldw	r3,8(fp)
    bfc4:	00800344 	movi	r2,13
    bfc8:	18800005 	stb	r2,0(r3)
        return (0);
    bfcc:	e03fff15 	stw	zero,-4(fp)
    bfd0:	00014c06 	br	c504 <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bfd4:	0005303a 	rdctl	r2,status
    bfd8:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bfdc:	e0ffef17 	ldw	r3,-68(fp)
    bfe0:	00bfff84 	movi	r2,-2
    bfe4:	1884703a 	and	r2,r3,r2
    bfe8:	1001703a 	wrctl	status,r2
  
  return context;
    bfec:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    bff0:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    bff4:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
    bff8:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    bffc:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
    c000:	e0bff617 	ldw	r2,-40(fp)
    c004:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
    c008:	e0bff517 	ldw	r2,-44(fp)
    c00c:	10800017 	ldw	r2,0(r2)
    c010:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    c014:	00008f06 	br	c254 <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
    c018:	e0bff417 	ldw	r2,-48(fp)
    c01c:	10800003 	ldbu	r2,0(r2)
    c020:	10803fcc 	andi	r2,r2,255
    c024:	e0bffd15 	stw	r2,-12(fp)
    c028:	e0fffd17 	ldw	r3,-12(fp)
    c02c:	188000a0 	cmpeqi	r2,r3,2
    c030:	1000441e 	bne	r2,zero,c144 <OSEventPendMulti+0x2dc>
    c034:	e0fffd17 	ldw	r3,-12(fp)
    c038:	188000e0 	cmpeqi	r2,r3,3
    c03c:	1000041e 	bne	r2,zero,c050 <OSEventPendMulti+0x1e8>
    c040:	e0fffd17 	ldw	r3,-12(fp)
    c044:	18800060 	cmpeqi	r2,r3,1
    c048:	1000211e 	bne	r2,zero,c0d0 <OSEventPendMulti+0x268>
    c04c:	00006f06 	br	c20c <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    c050:	e0bff417 	ldw	r2,-48(fp)
    c054:	1080020b 	ldhu	r2,8(r2)
    c058:	10bfffcc 	andi	r2,r2,65535
    c05c:	1005003a 	cmpeq	r2,r2,zero
    c060:	1000171e 	bne	r2,zero,c0c0 <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    c064:	e0bff417 	ldw	r2,-48(fp)
    c068:	1080020b 	ldhu	r2,8(r2)
    c06c:	10bfffc4 	addi	r2,r2,-1
    c070:	1007883a 	mov	r3,r2
    c074:	e0bff417 	ldw	r2,-48(fp)
    c078:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    c07c:	e0fff717 	ldw	r3,-36(fp)
    c080:	e0bff417 	ldw	r2,-48(fp)
    c084:	18800015 	stw	r2,0(r3)
    c088:	e0bff717 	ldw	r2,-36(fp)
    c08c:	10800104 	addi	r2,r2,4
    c090:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
    c094:	00800044 	movi	r2,1
    c098:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    c09c:	e0bff817 	ldw	r2,-32(fp)
    c0a0:	10000015 	stw	zero,0(r2)
    c0a4:	e0bff817 	ldw	r2,-32(fp)
    c0a8:	10800104 	addi	r2,r2,4
    c0ac:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
    c0b0:	e0bff18b 	ldhu	r2,-58(fp)
    c0b4:	10800044 	addi	r2,r2,1
    c0b8:	e0bff18d 	sth	r2,-58(fp)
    c0bc:	00005f06 	br	c23c <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    c0c0:	e0bff103 	ldbu	r2,-60(fp)
    c0c4:	10800054 	ori	r2,r2,1
    c0c8:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
    c0cc:	00005b06 	br	c23c <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    c0d0:	e0bff417 	ldw	r2,-48(fp)
    c0d4:	10800117 	ldw	r2,4(r2)
    c0d8:	1005003a 	cmpeq	r2,r2,zero
    c0dc:	1000151e 	bne	r2,zero,c134 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    c0e0:	e0bff417 	ldw	r2,-48(fp)
    c0e4:	10c00117 	ldw	r3,4(r2)
    c0e8:	e0bff817 	ldw	r2,-32(fp)
    c0ec:	10c00015 	stw	r3,0(r2)
    c0f0:	e0bff817 	ldw	r2,-32(fp)
    c0f4:	10800104 	addi	r2,r2,4
    c0f8:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
    c0fc:	e0bff417 	ldw	r2,-48(fp)
    c100:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    c104:	e0fff717 	ldw	r3,-36(fp)
    c108:	e0bff417 	ldw	r2,-48(fp)
    c10c:	18800015 	stw	r2,0(r3)
    c110:	e0bff717 	ldw	r2,-36(fp)
    c114:	10800104 	addi	r2,r2,4
    c118:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
    c11c:	00800044 	movi	r2,1
    c120:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
    c124:	e0bff18b 	ldhu	r2,-58(fp)
    c128:	10800044 	addi	r2,r2,1
    c12c:	e0bff18d 	sth	r2,-58(fp)
    c130:	00004206 	br	c23c <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    c134:	e0bff103 	ldbu	r2,-60(fp)
    c138:	10800094 	ori	r2,r2,2
    c13c:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
    c140:	00003e06 	br	c23c <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    c144:	e0bff417 	ldw	r2,-48(fp)
    c148:	10800117 	ldw	r2,4(r2)
    c14c:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    c150:	e0bff317 	ldw	r2,-52(fp)
    c154:	1080058b 	ldhu	r2,22(r2)
    c158:	10bfffcc 	andi	r2,r2,65535
    c15c:	1005003a 	cmpeq	r2,r2,zero
    c160:	1000261e 	bne	r2,zero,c1fc <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    c164:	e0bff317 	ldw	r2,-52(fp)
    c168:	11000417 	ldw	r4,16(r2)
    c16c:	20c00017 	ldw	r3,0(r4)
    c170:	e0bff817 	ldw	r2,-32(fp)
    c174:	10c00015 	stw	r3,0(r2)
    c178:	e0bff817 	ldw	r2,-32(fp)
    c17c:	10800104 	addi	r2,r2,4
    c180:	e0bff815 	stw	r2,-32(fp)
    c184:	20c00104 	addi	r3,r4,4
    c188:	e0bff317 	ldw	r2,-52(fp)
    c18c:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    c190:	e0bff317 	ldw	r2,-52(fp)
    c194:	10c00417 	ldw	r3,16(r2)
    c198:	e0bff317 	ldw	r2,-52(fp)
    c19c:	10800217 	ldw	r2,8(r2)
    c1a0:	1880041e 	bne	r3,r2,c1b4 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    c1a4:	e0bff317 	ldw	r2,-52(fp)
    c1a8:	10c00117 	ldw	r3,4(r2)
    c1ac:	e0bff317 	ldw	r2,-52(fp)
    c1b0:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    c1b4:	e0bff317 	ldw	r2,-52(fp)
    c1b8:	1080058b 	ldhu	r2,22(r2)
    c1bc:	10bfffc4 	addi	r2,r2,-1
    c1c0:	1007883a 	mov	r3,r2
    c1c4:	e0bff317 	ldw	r2,-52(fp)
    c1c8:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    c1cc:	e0fff717 	ldw	r3,-36(fp)
    c1d0:	e0bff417 	ldw	r2,-48(fp)
    c1d4:	18800015 	stw	r2,0(r3)
    c1d8:	e0bff717 	ldw	r2,-36(fp)
    c1dc:	10800104 	addi	r2,r2,4
    c1e0:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
    c1e4:	00800044 	movi	r2,1
    c1e8:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
    c1ec:	e0bff18b 	ldhu	r2,-58(fp)
    c1f0:	10800044 	addi	r2,r2,1
    c1f4:	e0bff18d 	sth	r2,-58(fp)
    c1f8:	00001006 	br	c23c <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    c1fc:	e0bff103 	ldbu	r2,-60(fp)
    c200:	10800114 	ori	r2,r2,4
    c204:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
    c208:	00000c06 	br	c23c <OSEventPendMulti+0x3d4>
    c20c:	e0bff017 	ldw	r2,-64(fp)
    c210:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c214:	e0bfee17 	ldw	r2,-72(fp)
    c218:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    c21c:	e0bff717 	ldw	r2,-36(fp)
    c220:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    c224:	e0c00217 	ldw	r3,8(fp)
    c228:	00800044 	movi	r2,1
    c22c:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
    c230:	e0bff18b 	ldhu	r2,-58(fp)
    c234:	e0bfff15 	stw	r2,-4(fp)
    c238:	0000b206 	br	c504 <OSEventPendMulti+0x69c>
        }
        pevents++;
    c23c:	e0bff517 	ldw	r2,-44(fp)
    c240:	10800104 	addi	r2,r2,4
    c244:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
    c248:	e0bff517 	ldw	r2,-44(fp)
    c24c:	10800017 	ldw	r2,0(r2)
    c250:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    c254:	e0bff417 	ldw	r2,-48(fp)
    c258:	1004c03a 	cmpne	r2,r2,zero
    c25c:	103f6e1e 	bne	r2,zero,c018 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    c260:	e0bff203 	ldbu	r2,-56(fp)
    c264:	10800058 	cmpnei	r2,r2,1
    c268:	10000b1e 	bne	r2,zero,c298 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    c26c:	e0bff717 	ldw	r2,-36(fp)
    c270:	10000015 	stw	zero,0(r2)
    c274:	e0bff017 	ldw	r2,-64(fp)
    c278:	e0bfed15 	stw	r2,-76(fp)
    c27c:	e0bfed17 	ldw	r2,-76(fp)
    c280:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    c284:	e0800217 	ldw	r2,8(fp)
    c288:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    c28c:	e0fff18b 	ldhu	r3,-58(fp)
    c290:	e0ffff15 	stw	r3,-4(fp)
    c294:	00009b06 	br	c504 <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    c298:	d1275317 	ldw	r4,-25268(gp)
    c29c:	d0a75317 	ldw	r2,-25268(gp)
    c2a0:	10c00c03 	ldbu	r3,48(r2)
    c2a4:	e0bff103 	ldbu	r2,-60(fp)
    c2a8:	1884b03a 	or	r2,r3,r2
    c2ac:	1007883a 	mov	r3,r2
    c2b0:	00bfe004 	movi	r2,-128
    c2b4:	1884b03a 	or	r2,r3,r2
    c2b8:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    c2bc:	d0a75317 	ldw	r2,-25268(gp)
    c2c0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    c2c4:	d0e75317 	ldw	r3,-25268(gp)
    c2c8:	e0bff90b 	ldhu	r2,-28(fp)
    c2cc:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    c2d0:	e13ff617 	ldw	r4,-40(fp)
    c2d4:	000ce980 	call	ce98 <OS_EventTaskWaitMulti>
    c2d8:	e0bff017 	ldw	r2,-64(fp)
    c2dc:	e0bfec15 	stw	r2,-80(fp)
    c2e0:	e0bfec17 	ldw	r2,-80(fp)
    c2e4:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    c2e8:	000d6340 	call	d634 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c2ec:	0005303a 	rdctl	r2,status
    c2f0:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c2f4:	e0ffeb17 	ldw	r3,-84(fp)
    c2f8:	00bfff84 	movi	r2,-2
    c2fc:	1884703a 	and	r2,r3,r2
    c300:	1001703a 	wrctl	status,r2
  
  return context;
    c304:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
    c308:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    c30c:	d0a75317 	ldw	r2,-25268(gp)
    c310:	10800c43 	ldbu	r2,49(r2)
    c314:	10803fcc 	andi	r2,r2,255
    c318:	e0bffc15 	stw	r2,-16(fp)
    c31c:	e0fffc17 	ldw	r3,-16(fp)
    c320:	1805003a 	cmpeq	r2,r3,zero
    c324:	1000041e 	bne	r2,zero,c338 <OSEventPendMulti+0x4d0>
    c328:	e0fffc17 	ldw	r3,-16(fp)
    c32c:	188000a0 	cmpeqi	r2,r3,2
    c330:	1000011e 	bne	r2,zero,c338 <OSEventPendMulti+0x4d0>
    c334:	00001906 	br	c39c <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    c338:	d0a75317 	ldw	r2,-25268(gp)
    c33c:	10800717 	ldw	r2,28(r2)
    c340:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    c344:	e0bff417 	ldw	r2,-48(fp)
    c348:	1005003a 	cmpeq	r2,r2,zero
    c34c:	10000c1e 	bne	r2,zero,c380 <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    c350:	e0fff717 	ldw	r3,-36(fp)
    c354:	e0bff417 	ldw	r2,-48(fp)
    c358:	18800015 	stw	r2,0(r3)
    c35c:	e0bff717 	ldw	r2,-36(fp)
    c360:	10800104 	addi	r2,r2,4
    c364:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    c368:	e0bff717 	ldw	r2,-36(fp)
    c36c:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    c370:	e0bff18b 	ldhu	r2,-58(fp)
    c374:	10800044 	addi	r2,r2,1
    c378:	e0bff18d 	sth	r2,-58(fp)
    c37c:	00000a06 	br	c3a8 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    c380:	d0a75317 	ldw	r2,-25268(gp)
    c384:	00c00044 	movi	r3,1
    c388:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    c38c:	d1275317 	ldw	r4,-25268(gp)
    c390:	e17ff617 	ldw	r5,-40(fp)
    c394:	000d0a40 	call	d0a4 <OS_EventTaskRemoveMulti>
             }
			 break;
    c398:	00000306 	br	c3a8 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    c39c:	d1275317 	ldw	r4,-25268(gp)
    c3a0:	e17ff617 	ldw	r5,-40(fp)
    c3a4:	000d0a40 	call	d0a4 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
    c3a8:	d0a75317 	ldw	r2,-25268(gp)
    c3ac:	10800c43 	ldbu	r2,49(r2)
    c3b0:	10803fcc 	andi	r2,r2,255
    c3b4:	e0bffb15 	stw	r2,-20(fp)
    c3b8:	e0fffb17 	ldw	r3,-20(fp)
    c3bc:	1805003a 	cmpeq	r2,r3,zero
    c3c0:	1000041e 	bne	r2,zero,c3d4 <OSEventPendMulti+0x56c>
    c3c4:	e0fffb17 	ldw	r3,-20(fp)
    c3c8:	188000a0 	cmpeqi	r2,r3,2
    c3cc:	10002c1e 	bne	r2,zero,c480 <OSEventPendMulti+0x618>
    c3d0:	00003406 	br	c4a4 <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    c3d4:	e0bff417 	ldw	r2,-48(fp)
    c3d8:	10800003 	ldbu	r2,0(r2)
    c3dc:	10803fcc 	andi	r2,r2,255
    c3e0:	e0bffa15 	stw	r2,-24(fp)
    c3e4:	e0fffa17 	ldw	r3,-24(fp)
    c3e8:	18800050 	cmplti	r2,r3,1
    c3ec:	1000151e 	bne	r2,zero,c444 <OSEventPendMulti+0x5dc>
    c3f0:	e0fffa17 	ldw	r3,-24(fp)
    c3f4:	188000d0 	cmplti	r2,r3,3
    c3f8:	10000a1e 	bne	r2,zero,c424 <OSEventPendMulti+0x5bc>
    c3fc:	e0fffa17 	ldw	r3,-24(fp)
    c400:	188000e0 	cmpeqi	r2,r3,3
    c404:	1000011e 	bne	r2,zero,c40c <OSEventPendMulti+0x5a4>
    c408:	00000e06 	br	c444 <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    c40c:	e0bff817 	ldw	r2,-32(fp)
    c410:	10000015 	stw	zero,0(r2)
    c414:	e0bff817 	ldw	r2,-32(fp)
    c418:	10800104 	addi	r2,r2,4
    c41c:	e0bff815 	stw	r2,-32(fp)
                      break;
    c420:	00001406 	br	c474 <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    c424:	d0a75317 	ldw	r2,-25268(gp)
    c428:	10c00917 	ldw	r3,36(r2)
    c42c:	e0bff817 	ldw	r2,-32(fp)
    c430:	10c00015 	stw	r3,0(r2)
    c434:	e0bff817 	ldw	r2,-32(fp)
    c438:	10800104 	addi	r2,r2,4
    c43c:	e0bff815 	stw	r2,-32(fp)
                      break;
    c440:	00000c06 	br	c474 <OSEventPendMulti+0x60c>
    c444:	e0bff017 	ldw	r2,-64(fp)
    c448:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c44c:	e0bfea17 	ldw	r2,-88(fp)
    c450:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    c454:	e0bff717 	ldw	r2,-36(fp)
    c458:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    c45c:	e0c00217 	ldw	r3,8(fp)
    c460:	00800044 	movi	r2,1
    c464:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
    c468:	e0bff18b 	ldhu	r2,-58(fp)
    c46c:	e0bfff15 	stw	r2,-4(fp)
    c470:	00002406 	br	c504 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
    c474:	e0800217 	ldw	r2,8(fp)
    c478:	10000005 	stb	zero,0(r2)
             break;
    c47c:	00001106 	br	c4c4 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    c480:	e0bff817 	ldw	r2,-32(fp)
    c484:	10000015 	stw	zero,0(r2)
    c488:	e0bff817 	ldw	r2,-32(fp)
    c48c:	10800104 	addi	r2,r2,4
    c490:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    c494:	e0c00217 	ldw	r3,8(fp)
    c498:	00800384 	movi	r2,14
    c49c:	18800005 	stb	r2,0(r3)
             break;
    c4a0:	00000806 	br	c4c4 <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    c4a4:	e0bff817 	ldw	r2,-32(fp)
    c4a8:	10000015 	stw	zero,0(r2)
    c4ac:	e0bff817 	ldw	r2,-32(fp)
    c4b0:	10800104 	addi	r2,r2,4
    c4b4:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    c4b8:	e0c00217 	ldw	r3,8(fp)
    c4bc:	00800284 	movi	r2,10
    c4c0:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    c4c4:	d0a75317 	ldw	r2,-25268(gp)
    c4c8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    c4cc:	d0a75317 	ldw	r2,-25268(gp)
    c4d0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    c4d4:	d0a75317 	ldw	r2,-25268(gp)
    c4d8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    c4dc:	d0a75317 	ldw	r2,-25268(gp)
    c4e0:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    c4e4:	d0a75317 	ldw	r2,-25268(gp)
    c4e8:	10000915 	stw	zero,36(r2)
    c4ec:	e0bff017 	ldw	r2,-64(fp)
    c4f0:	e0bfe915 	stw	r2,-92(fp)
    c4f4:	e0bfe917 	ldw	r2,-92(fp)
    c4f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    c4fc:	e0fff18b 	ldhu	r3,-58(fp)
    c500:	e0ffff15 	stw	r3,-4(fp)
    c504:	e0bfff17 	ldw	r2,-4(fp)
}
    c508:	e037883a 	mov	sp,fp
    c50c:	dfc00117 	ldw	ra,4(sp)
    c510:	df000017 	ldw	fp,0(sp)
    c514:	dec00204 	addi	sp,sp,8
    c518:	f800283a 	ret

0000c51c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    c51c:	defffe04 	addi	sp,sp,-8
    c520:	dfc00115 	stw	ra,4(sp)
    c524:	df000015 	stw	fp,0(sp)
    c528:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    c52c:	00170200 	call	17020 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    c530:	000d2ec0 	call	d2ec <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    c534:	000d3300 	call	d330 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    c538:	000d4940 	call	d494 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    c53c:	000d2100 	call	d210 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    c540:	000f5440 	call	f544 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    c544:	000ff1c0 	call	ff1c <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    c548:	00112740 	call	11274 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    c54c:	000d39c0 	call	d39c <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    c550:	000d4180 	call	d418 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    c554:	001703c0 	call	1703c <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    c558:	000dd1c0 	call	dd1c <OSDebugInit>
#endif
}
    c55c:	e037883a 	mov	sp,fp
    c560:	dfc00117 	ldw	ra,4(sp)
    c564:	df000017 	ldw	fp,0(sp)
    c568:	dec00204 	addi	sp,sp,8
    c56c:	f800283a 	ret

0000c570 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    c570:	defffc04 	addi	sp,sp,-16
    c574:	df000315 	stw	fp,12(sp)
    c578:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    c57c:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
    c580:	d0a74443 	ldbu	r2,-25327(gp)
    c584:	10803fcc 	andi	r2,r2,255
    c588:	10800058 	cmpnei	r2,r2,1
    c58c:	1000131e 	bne	r2,zero,c5dc <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c590:	0005303a 	rdctl	r2,status
    c594:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c598:	e0fffe17 	ldw	r3,-8(fp)
    c59c:	00bfff84 	movi	r2,-2
    c5a0:	1884703a 	and	r2,r3,r2
    c5a4:	1001703a 	wrctl	status,r2
  
  return context;
    c5a8:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    c5ac:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
    c5b0:	d0a75203 	ldbu	r2,-25272(gp)
    c5b4:	10803fcc 	andi	r2,r2,255
    c5b8:	10803fe0 	cmpeqi	r2,r2,255
    c5bc:	1000031e 	bne	r2,zero,c5cc <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    c5c0:	d0a75203 	ldbu	r2,-25272(gp)
    c5c4:	10800044 	addi	r2,r2,1
    c5c8:	d0a75205 	stb	r2,-25272(gp)
    c5cc:	e0bfff17 	ldw	r2,-4(fp)
    c5d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c5d4:	e0bffd17 	ldw	r2,-12(fp)
    c5d8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
    c5dc:	e037883a 	mov	sp,fp
    c5e0:	df000017 	ldw	fp,0(sp)
    c5e4:	dec00104 	addi	sp,sp,4
    c5e8:	f800283a 	ret

0000c5ec <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    c5ec:	defffb04 	addi	sp,sp,-20
    c5f0:	dfc00415 	stw	ra,16(sp)
    c5f4:	df000315 	stw	fp,12(sp)
    c5f8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    c5fc:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
    c600:	d0a74443 	ldbu	r2,-25327(gp)
    c604:	10803fcc 	andi	r2,r2,255
    c608:	10800058 	cmpnei	r2,r2,1
    c60c:	1000321e 	bne	r2,zero,c6d8 <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c610:	0005303a 	rdctl	r2,status
    c614:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c618:	e0fffe17 	ldw	r3,-8(fp)
    c61c:	00bfff84 	movi	r2,-2
    c620:	1884703a 	and	r2,r3,r2
    c624:	1001703a 	wrctl	status,r2
  
  return context;
    c628:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    c62c:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    c630:	d0a75203 	ldbu	r2,-25272(gp)
    c634:	10803fcc 	andi	r2,r2,255
    c638:	1005003a 	cmpeq	r2,r2,zero
    c63c:	1000031e 	bne	r2,zero,c64c <OSIntExit+0x60>
            OSIntNesting--;
    c640:	d0a75203 	ldbu	r2,-25272(gp)
    c644:	10bfffc4 	addi	r2,r2,-1
    c648:	d0a75205 	stb	r2,-25272(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    c64c:	d0a75203 	ldbu	r2,-25272(gp)
    c650:	10803fcc 	andi	r2,r2,255
    c654:	1004c03a 	cmpne	r2,r2,zero
    c658:	10001b1e 	bne	r2,zero,c6c8 <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    c65c:	d0a74403 	ldbu	r2,-25328(gp)
    c660:	10803fcc 	andi	r2,r2,255
    c664:	1004c03a 	cmpne	r2,r2,zero
    c668:	1000171e 	bne	r2,zero,c6c8 <OSIntExit+0xdc>
                OS_SchedNew();
    c66c:	000d7080 	call	d708 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    c670:	d0a74603 	ldbu	r2,-25320(gp)
    c674:	d0e74643 	ldbu	r3,-25319(gp)
    c678:	11003fcc 	andi	r4,r2,255
    c67c:	18803fcc 	andi	r2,r3,255
    c680:	20801126 	beq	r4,r2,c6c8 <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    c684:	d0a74603 	ldbu	r2,-25320(gp)
    c688:	10803fcc 	andi	r2,r2,255
    c68c:	00c000b4 	movhi	r3,2
    c690:	18ca7c04 	addi	r3,r3,10736
    c694:	1085883a 	add	r2,r2,r2
    c698:	1085883a 	add	r2,r2,r2
    c69c:	10c5883a 	add	r2,r2,r3
    c6a0:	10800017 	ldw	r2,0(r2)
    c6a4:	d0a74e15 	stw	r2,-25288(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    c6a8:	d0e74e17 	ldw	r3,-25288(gp)
    c6ac:	18800e17 	ldw	r2,56(r3)
    c6b0:	10800044 	addi	r2,r2,1
    c6b4:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    c6b8:	d0a74917 	ldw	r2,-25308(gp)
    c6bc:	10800044 	addi	r2,r2,1
    c6c0:	d0a74915 	stw	r2,-25308(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    c6c4:	0016bac0 	call	16bac <OSCtxSw>
    c6c8:	e0bfff17 	ldw	r2,-4(fp)
    c6cc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c6d0:	e0bffd17 	ldw	r2,-12(fp)
    c6d4:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    c6d8:	e037883a 	mov	sp,fp
    c6dc:	dfc00117 	ldw	ra,4(sp)
    c6e0:	df000017 	ldw	fp,0(sp)
    c6e4:	dec00204 	addi	sp,sp,8
    c6e8:	f800283a 	ret

0000c6ec <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    c6ec:	defffc04 	addi	sp,sp,-16
    c6f0:	df000315 	stw	fp,12(sp)
    c6f4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    c6f8:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    c6fc:	d0a74443 	ldbu	r2,-25327(gp)
    c700:	10803fcc 	andi	r2,r2,255
    c704:	10800058 	cmpnei	r2,r2,1
    c708:	1000171e 	bne	r2,zero,c768 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c70c:	0005303a 	rdctl	r2,status
    c710:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c714:	e0fffe17 	ldw	r3,-8(fp)
    c718:	00bfff84 	movi	r2,-2
    c71c:	1884703a 	and	r2,r3,r2
    c720:	1001703a 	wrctl	status,r2
  
  return context;
    c724:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    c728:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    c72c:	d0a75203 	ldbu	r2,-25272(gp)
    c730:	10803fcc 	andi	r2,r2,255
    c734:	1004c03a 	cmpne	r2,r2,zero
    c738:	1000071e 	bne	r2,zero,c758 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    c73c:	d0a74403 	ldbu	r2,-25328(gp)
    c740:	10803fcc 	andi	r2,r2,255
    c744:	10803fe0 	cmpeqi	r2,r2,255
    c748:	1000031e 	bne	r2,zero,c758 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    c74c:	d0a74403 	ldbu	r2,-25328(gp)
    c750:	10800044 	addi	r2,r2,1
    c754:	d0a74405 	stb	r2,-25328(gp)
    c758:	e0bfff17 	ldw	r2,-4(fp)
    c75c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c760:	e0bffd17 	ldw	r2,-12(fp)
    c764:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    c768:	e037883a 	mov	sp,fp
    c76c:	df000017 	ldw	fp,0(sp)
    c770:	dec00104 	addi	sp,sp,4
    c774:	f800283a 	ret

0000c778 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    c778:	defff804 	addi	sp,sp,-32
    c77c:	dfc00715 	stw	ra,28(sp)
    c780:	df000615 	stw	fp,24(sp)
    c784:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    c788:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    c78c:	d0a74443 	ldbu	r2,-25327(gp)
    c790:	10803fcc 	andi	r2,r2,255
    c794:	10800058 	cmpnei	r2,r2,1
    c798:	10002b1e 	bne	r2,zero,c848 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c79c:	0005303a 	rdctl	r2,status
    c7a0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c7a4:	e0fffe17 	ldw	r3,-8(fp)
    c7a8:	00bfff84 	movi	r2,-2
    c7ac:	1884703a 	and	r2,r3,r2
    c7b0:	1001703a 	wrctl	status,r2
  
  return context;
    c7b4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    c7b8:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    c7bc:	d0a74403 	ldbu	r2,-25328(gp)
    c7c0:	10803fcc 	andi	r2,r2,255
    c7c4:	1005003a 	cmpeq	r2,r2,zero
    c7c8:	10001b1e 	bne	r2,zero,c838 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    c7cc:	d0a74403 	ldbu	r2,-25328(gp)
    c7d0:	10bfffc4 	addi	r2,r2,-1
    c7d4:	d0a74405 	stb	r2,-25328(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    c7d8:	d0a74403 	ldbu	r2,-25328(gp)
    c7dc:	10803fcc 	andi	r2,r2,255
    c7e0:	1004c03a 	cmpne	r2,r2,zero
    c7e4:	10000f1e 	bne	r2,zero,c824 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    c7e8:	d0a75203 	ldbu	r2,-25272(gp)
    c7ec:	10803fcc 	andi	r2,r2,255
    c7f0:	1004c03a 	cmpne	r2,r2,zero
    c7f4:	1000061e 	bne	r2,zero,c810 <OSSchedUnlock+0x98>
    c7f8:	e0bfff17 	ldw	r2,-4(fp)
    c7fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c800:	e0bffd17 	ldw	r2,-12(fp)
    c804:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    c808:	000d6340 	call	d634 <OS_Sched>
    c80c:	00000e06 	br	c848 <OSSchedUnlock+0xd0>
    c810:	e0bfff17 	ldw	r2,-4(fp)
    c814:	e0bffc15 	stw	r2,-16(fp)
    c818:	e0bffc17 	ldw	r2,-16(fp)
    c81c:	1001703a 	wrctl	status,r2
    c820:	00000906 	br	c848 <OSSchedUnlock+0xd0>
    c824:	e0bfff17 	ldw	r2,-4(fp)
    c828:	e0bffb15 	stw	r2,-20(fp)
    c82c:	e0bffb17 	ldw	r2,-20(fp)
    c830:	1001703a 	wrctl	status,r2
    c834:	00000406 	br	c848 <OSSchedUnlock+0xd0>
    c838:	e0bfff17 	ldw	r2,-4(fp)
    c83c:	e0bffa15 	stw	r2,-24(fp)
    c840:	e0bffa17 	ldw	r2,-24(fp)
    c844:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    c848:	e037883a 	mov	sp,fp
    c84c:	dfc00117 	ldw	ra,4(sp)
    c850:	df000017 	ldw	fp,0(sp)
    c854:	dec00204 	addi	sp,sp,8
    c858:	f800283a 	ret

0000c85c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    c85c:	defffe04 	addi	sp,sp,-8
    c860:	dfc00115 	stw	ra,4(sp)
    c864:	df000015 	stw	fp,0(sp)
    c868:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    c86c:	d0a74443 	ldbu	r2,-25327(gp)
    c870:	10803fcc 	andi	r2,r2,255
    c874:	1004c03a 	cmpne	r2,r2,zero
    c878:	10000f1e 	bne	r2,zero,c8b8 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    c87c:	000d7080 	call	d708 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    c880:	d0a74603 	ldbu	r2,-25320(gp)
    c884:	d0a74645 	stb	r2,-25319(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    c888:	d0a74603 	ldbu	r2,-25320(gp)
    c88c:	10803fcc 	andi	r2,r2,255
    c890:	00c000b4 	movhi	r3,2
    c894:	18ca7c04 	addi	r3,r3,10736
    c898:	1085883a 	add	r2,r2,r2
    c89c:	1085883a 	add	r2,r2,r2
    c8a0:	10c5883a 	add	r2,r2,r3
    c8a4:	10800017 	ldw	r2,0(r2)
    c8a8:	d0a74e15 	stw	r2,-25288(gp)
        OSTCBCur      = OSTCBHighRdy;
    c8ac:	d0a74e17 	ldw	r2,-25288(gp)
    c8b0:	d0a75315 	stw	r2,-25268(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    c8b4:	0016c380 	call	16c38 <OSStartHighRdy>
    }
}
    c8b8:	e037883a 	mov	sp,fp
    c8bc:	dfc00117 	ldw	ra,4(sp)
    c8c0:	df000017 	ldw	fp,0(sp)
    c8c4:	dec00204 	addi	sp,sp,8
    c8c8:	f800283a 	ret

0000c8cc <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    c8cc:	defff904 	addi	sp,sp,-28
    c8d0:	dfc00615 	stw	ra,24(sp)
    c8d4:	df000515 	stw	fp,20(sp)
    c8d8:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    c8dc:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    c8e0:	01000084 	movi	r4,2
    c8e4:	00139280 	call	13928 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c8e8:	0005303a 	rdctl	r2,status
    c8ec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c8f0:	e0fffe17 	ldw	r3,-8(fp)
    c8f4:	00bfff84 	movi	r2,-2
    c8f8:	1884703a 	and	r2,r3,r2
    c8fc:	1001703a 	wrctl	status,r2
  
  return context;
    c900:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    c904:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    c908:	d0274515 	stw	zero,-25324(gp)
    c90c:	e0bfff17 	ldw	r2,-4(fp)
    c910:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c914:	e0bffd17 	ldw	r2,-12(fp)
    c918:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    c91c:	01001904 	movi	r4,100
    c920:	00139280 	call	13928 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c924:	0005303a 	rdctl	r2,status
    c928:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c92c:	e0fffc17 	ldw	r3,-16(fp)
    c930:	00bfff84 	movi	r2,-2
    c934:	1884703a 	and	r2,r3,r2
    c938:	1001703a 	wrctl	status,r2
  
  return context;
    c93c:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    c940:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    c944:	d0a74517 	ldw	r2,-25324(gp)
    c948:	d0a74a15 	stw	r2,-25304(gp)
    OSStatRdy    = OS_TRUE;
    c94c:	00800044 	movi	r2,1
    c950:	d0a75605 	stb	r2,-25256(gp)
    c954:	e0bfff17 	ldw	r2,-4(fp)
    c958:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c95c:	e0bffb17 	ldw	r2,-20(fp)
    c960:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    c964:	e037883a 	mov	sp,fp
    c968:	dfc00117 	ldw	ra,4(sp)
    c96c:	df000017 	ldw	fp,0(sp)
    c970:	dec00204 	addi	sp,sp,8
    c974:	f800283a 	ret

0000c978 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    c978:	defff604 	addi	sp,sp,-40
    c97c:	dfc00915 	stw	ra,36(sp)
    c980:	df000815 	stw	fp,32(sp)
    c984:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    c988:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    c98c:	00170040 	call	17004 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c990:	0005303a 	rdctl	r2,status
    c994:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c998:	e0fffb17 	ldw	r3,-20(fp)
    c99c:	00bfff84 	movi	r2,-2
    c9a0:	1884703a 	and	r2,r3,r2
    c9a4:	1001703a 	wrctl	status,r2
  
  return context;
    c9a8:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    c9ac:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
    c9b0:	d0a75417 	ldw	r2,-25264(gp)
    c9b4:	10800044 	addi	r2,r2,1
    c9b8:	d0a75415 	stw	r2,-25264(gp)
    c9bc:	e0bffc17 	ldw	r2,-16(fp)
    c9c0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c9c4:	e0bffa17 	ldw	r2,-24(fp)
    c9c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    c9cc:	d0a74443 	ldbu	r2,-25327(gp)
    c9d0:	10803fcc 	andi	r2,r2,255
    c9d4:	10800058 	cmpnei	r2,r2,1
    c9d8:	1000721e 	bne	r2,zero,cba4 <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    c9dc:	d0a74803 	ldbu	r2,-25312(gp)
    c9e0:	10803fcc 	andi	r2,r2,255
    c9e4:	e0bfff15 	stw	r2,-4(fp)
    c9e8:	e0ffff17 	ldw	r3,-4(fp)
    c9ec:	18800060 	cmpeqi	r2,r3,1
    c9f0:	10000a1e 	bne	r2,zero,ca1c <OSTimeTick+0xa4>
    c9f4:	e0ffff17 	ldw	r3,-4(fp)
    c9f8:	188000a0 	cmpeqi	r2,r3,2
    c9fc:	1000091e 	bne	r2,zero,ca24 <OSTimeTick+0xac>
    ca00:	e0ffff17 	ldw	r3,-4(fp)
    ca04:	1805003a 	cmpeq	r2,r3,zero
    ca08:	1000011e 	bne	r2,zero,ca10 <OSTimeTick+0x98>
    ca0c:	00000a06 	br	ca38 <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    ca10:	00800044 	movi	r2,1
    ca14:	e0bffd05 	stb	r2,-12(fp)
                 break;
    ca18:	00000a06 	br	ca44 <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    ca1c:	e03ffd05 	stb	zero,-12(fp)
                 break;
    ca20:	00000806 	br	ca44 <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    ca24:	00800044 	movi	r2,1
    ca28:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    ca2c:	00800044 	movi	r2,1
    ca30:	d0a74805 	stb	r2,-25312(gp)
                 break;
    ca34:	00000306 	br	ca44 <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    ca38:	00800044 	movi	r2,1
    ca3c:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    ca40:	d0274805 	stb	zero,-25312(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    ca44:	e0bffd03 	ldbu	r2,-12(fp)
    ca48:	1005003a 	cmpeq	r2,r2,zero
    ca4c:	1000551e 	bne	r2,zero,cba4 <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    ca50:	d0a74717 	ldw	r2,-25316(gp)
    ca54:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    ca58:	00004d06 	br	cb90 <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ca5c:	0005303a 	rdctl	r2,status
    ca60:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ca64:	e0fff917 	ldw	r3,-28(fp)
    ca68:	00bfff84 	movi	r2,-2
    ca6c:	1884703a 	and	r2,r3,r2
    ca70:	1001703a 	wrctl	status,r2
  
  return context;
    ca74:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
    ca78:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    ca7c:	e0bffe17 	ldw	r2,-8(fp)
    ca80:	10800b8b 	ldhu	r2,46(r2)
    ca84:	10bfffcc 	andi	r2,r2,65535
    ca88:	1005003a 	cmpeq	r2,r2,zero
    ca8c:	1000391e 	bne	r2,zero,cb74 <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    ca90:	e0bffe17 	ldw	r2,-8(fp)
    ca94:	10800b8b 	ldhu	r2,46(r2)
    ca98:	10bfffc4 	addi	r2,r2,-1
    ca9c:	1007883a 	mov	r3,r2
    caa0:	e0bffe17 	ldw	r2,-8(fp)
    caa4:	10c00b8d 	sth	r3,46(r2)
    caa8:	e0bffe17 	ldw	r2,-8(fp)
    caac:	10800b8b 	ldhu	r2,46(r2)
    cab0:	10bfffcc 	andi	r2,r2,65535
    cab4:	1004c03a 	cmpne	r2,r2,zero
    cab8:	10002e1e 	bne	r2,zero,cb74 <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    cabc:	e0bffe17 	ldw	r2,-8(fp)
    cac0:	10800c03 	ldbu	r2,48(r2)
    cac4:	10803fcc 	andi	r2,r2,255
    cac8:	10800dcc 	andi	r2,r2,55
    cacc:	1005003a 	cmpeq	r2,r2,zero
    cad0:	10000b1e 	bne	r2,zero,cb00 <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    cad4:	e0bffe17 	ldw	r2,-8(fp)
    cad8:	10c00c03 	ldbu	r3,48(r2)
    cadc:	00bff204 	movi	r2,-56
    cae0:	1884703a 	and	r2,r3,r2
    cae4:	1007883a 	mov	r3,r2
    cae8:	e0bffe17 	ldw	r2,-8(fp)
    caec:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    caf0:	e0fffe17 	ldw	r3,-8(fp)
    caf4:	00800044 	movi	r2,1
    caf8:	18800c45 	stb	r2,49(r3)
    cafc:	00000206 	br	cb08 <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    cb00:	e0bffe17 	ldw	r2,-8(fp)
    cb04:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    cb08:	e0bffe17 	ldw	r2,-8(fp)
    cb0c:	10800c03 	ldbu	r2,48(r2)
    cb10:	10803fcc 	andi	r2,r2,255
    cb14:	1080020c 	andi	r2,r2,8
    cb18:	1004c03a 	cmpne	r2,r2,zero
    cb1c:	1000151e 	bne	r2,zero,cb74 <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    cb20:	e0bffe17 	ldw	r2,-8(fp)
    cb24:	10c00d83 	ldbu	r3,54(r2)
    cb28:	d0a75003 	ldbu	r2,-25280(gp)
    cb2c:	1884b03a 	or	r2,r3,r2
    cb30:	d0a75005 	stb	r2,-25280(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    cb34:	e0bffe17 	ldw	r2,-8(fp)
    cb38:	10800d03 	ldbu	r2,52(r2)
    cb3c:	11003fcc 	andi	r4,r2,255
    cb40:	e0bffe17 	ldw	r2,-8(fp)
    cb44:	10800d03 	ldbu	r2,52(r2)
    cb48:	10c03fcc 	andi	r3,r2,255
    cb4c:	d0a75044 	addi	r2,gp,-25279
    cb50:	1885883a 	add	r2,r3,r2
    cb54:	10c00003 	ldbu	r3,0(r2)
    cb58:	e0bffe17 	ldw	r2,-8(fp)
    cb5c:	10800d43 	ldbu	r2,53(r2)
    cb60:	1884b03a 	or	r2,r3,r2
    cb64:	1007883a 	mov	r3,r2
    cb68:	d0a75044 	addi	r2,gp,-25279
    cb6c:	2085883a 	add	r2,r4,r2
    cb70:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    cb74:	e0bffe17 	ldw	r2,-8(fp)
    cb78:	10800517 	ldw	r2,20(r2)
    cb7c:	e0bffe15 	stw	r2,-8(fp)
    cb80:	e0bffc17 	ldw	r2,-16(fp)
    cb84:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cb88:	e0bff817 	ldw	r2,-32(fp)
    cb8c:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    cb90:	e0bffe17 	ldw	r2,-8(fp)
    cb94:	10800c83 	ldbu	r2,50(r2)
    cb98:	10803fcc 	andi	r2,r2,255
    cb9c:	10800518 	cmpnei	r2,r2,20
    cba0:	103fae1e 	bne	r2,zero,ca5c <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    cba4:	e037883a 	mov	sp,fp
    cba8:	dfc00117 	ldw	ra,4(sp)
    cbac:	df000017 	ldw	fp,0(sp)
    cbb0:	dec00204 	addi	sp,sp,8
    cbb4:	f800283a 	ret

0000cbb8 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    cbb8:	deffff04 	addi	sp,sp,-4
    cbbc:	df000015 	stw	fp,0(sp)
    cbc0:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    cbc4:	00804784 	movi	r2,286
}
    cbc8:	e037883a 	mov	sp,fp
    cbcc:	df000017 	ldw	fp,0(sp)
    cbd0:	dec00104 	addi	sp,sp,4
    cbd4:	f800283a 	ret

0000cbd8 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    cbd8:	deffff04 	addi	sp,sp,-4
    cbdc:	df000015 	stw	fp,0(sp)
    cbe0:	d839883a 	mov	fp,sp
}
    cbe4:	e037883a 	mov	sp,fp
    cbe8:	df000017 	ldw	fp,0(sp)
    cbec:	dec00104 	addi	sp,sp,4
    cbf0:	f800283a 	ret

0000cbf4 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    cbf4:	defff804 	addi	sp,sp,-32
    cbf8:	dfc00715 	stw	ra,28(sp)
    cbfc:	df000615 	stw	fp,24(sp)
    cc00:	df000604 	addi	fp,sp,24
    cc04:	e13ffc15 	stw	r4,-16(fp)
    cc08:	e17ffd15 	stw	r5,-12(fp)
    cc0c:	e1bffe05 	stb	r6,-8(fp)
    cc10:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    cc14:	e0bffc17 	ldw	r2,-16(fp)
    cc18:	10800283 	ldbu	r2,10(r2)
    cc1c:	10c03fcc 	andi	r3,r2,255
    cc20:	00800074 	movhi	r2,1
    cc24:	109f7e04 	addi	r2,r2,32248
    cc28:	10c5883a 	add	r2,r2,r3
    cc2c:	10800003 	ldbu	r2,0(r2)
    cc30:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    cc34:	e0fffa83 	ldbu	r3,-22(fp)
    cc38:	e0bffc17 	ldw	r2,-16(fp)
    cc3c:	1885883a 	add	r2,r3,r2
    cc40:	10800204 	addi	r2,r2,8
    cc44:	108000c3 	ldbu	r2,3(r2)
    cc48:	10c03fcc 	andi	r3,r2,255
    cc4c:	00800074 	movhi	r2,1
    cc50:	109f7e04 	addi	r2,r2,32248
    cc54:	10c5883a 	add	r2,r2,r3
    cc58:	10800003 	ldbu	r2,0(r2)
    cc5c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    cc60:	e0bffa83 	ldbu	r2,-22(fp)
    cc64:	100490fa 	slli	r2,r2,3
    cc68:	1007883a 	mov	r3,r2
    cc6c:	e0bffa43 	ldbu	r2,-23(fp)
    cc70:	1885883a 	add	r2,r3,r2
    cc74:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    cc78:	e0bffa03 	ldbu	r2,-24(fp)
    cc7c:	00c000b4 	movhi	r3,2
    cc80:	18ca7c04 	addi	r3,r3,10736
    cc84:	1085883a 	add	r2,r2,r2
    cc88:	1085883a 	add	r2,r2,r2
    cc8c:	10c5883a 	add	r2,r2,r3
    cc90:	10800017 	ldw	r2,0(r2)
    cc94:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    cc98:	e0bffb17 	ldw	r2,-20(fp)
    cc9c:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    cca0:	e0fffb17 	ldw	r3,-20(fp)
    cca4:	e0bffd17 	ldw	r2,-12(fp)
    cca8:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    ccac:	e0bffb17 	ldw	r2,-20(fp)
    ccb0:	10800c03 	ldbu	r2,48(r2)
    ccb4:	1007883a 	mov	r3,r2
    ccb8:	e0bffe03 	ldbu	r2,-8(fp)
    ccbc:	0084303a 	nor	r2,zero,r2
    ccc0:	1884703a 	and	r2,r3,r2
    ccc4:	1007883a 	mov	r3,r2
    ccc8:	e0bffb17 	ldw	r2,-20(fp)
    cccc:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    ccd0:	e0fffb17 	ldw	r3,-20(fp)
    ccd4:	e0bfff03 	ldbu	r2,-4(fp)
    ccd8:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    ccdc:	e0bffb17 	ldw	r2,-20(fp)
    cce0:	10800c03 	ldbu	r2,48(r2)
    cce4:	10803fcc 	andi	r2,r2,255
    cce8:	1080020c 	andi	r2,r2,8
    ccec:	1004c03a 	cmpne	r2,r2,zero
    ccf0:	1000111e 	bne	r2,zero,cd38 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    ccf4:	e0bffb17 	ldw	r2,-20(fp)
    ccf8:	10c00d83 	ldbu	r3,54(r2)
    ccfc:	d0a75003 	ldbu	r2,-25280(gp)
    cd00:	1884b03a 	or	r2,r3,r2
    cd04:	d0a75005 	stb	r2,-25280(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    cd08:	e13ffa83 	ldbu	r4,-22(fp)
    cd0c:	e0fffa83 	ldbu	r3,-22(fp)
    cd10:	d0a75044 	addi	r2,gp,-25279
    cd14:	1885883a 	add	r2,r3,r2
    cd18:	10c00003 	ldbu	r3,0(r2)
    cd1c:	e0bffb17 	ldw	r2,-20(fp)
    cd20:	10800d43 	ldbu	r2,53(r2)
    cd24:	1884b03a 	or	r2,r3,r2
    cd28:	1007883a 	mov	r3,r2
    cd2c:	d0a75044 	addi	r2,gp,-25279
    cd30:	2085883a 	add	r2,r4,r2
    cd34:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    cd38:	e13ffb17 	ldw	r4,-20(fp)
    cd3c:	e17ffc17 	ldw	r5,-16(fp)
    cd40:	000cfec0 	call	cfec <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    cd44:	e0bffb17 	ldw	r2,-20(fp)
    cd48:	10800817 	ldw	r2,32(r2)
    cd4c:	1005003a 	cmpeq	r2,r2,zero
    cd50:	1000071e 	bne	r2,zero,cd70 <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    cd54:	e0bffb17 	ldw	r2,-20(fp)
    cd58:	11400817 	ldw	r5,32(r2)
    cd5c:	e13ffb17 	ldw	r4,-20(fp)
    cd60:	000d0a40 	call	d0a4 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    cd64:	e0fffb17 	ldw	r3,-20(fp)
    cd68:	e0bffc17 	ldw	r2,-16(fp)
    cd6c:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
    cd70:	e0bffa03 	ldbu	r2,-24(fp)
}
    cd74:	e037883a 	mov	sp,fp
    cd78:	dfc00117 	ldw	ra,4(sp)
    cd7c:	df000017 	ldw	fp,0(sp)
    cd80:	dec00204 	addi	sp,sp,8
    cd84:	f800283a 	ret

0000cd88 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    cd88:	defffd04 	addi	sp,sp,-12
    cd8c:	df000215 	stw	fp,8(sp)
    cd90:	df000204 	addi	fp,sp,8
    cd94:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    cd98:	d0e75317 	ldw	r3,-25268(gp)
    cd9c:	e0bfff17 	ldw	r2,-4(fp)
    cda0:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    cda4:	d0a75317 	ldw	r2,-25268(gp)
    cda8:	10800d03 	ldbu	r2,52(r2)
    cdac:	11003fcc 	andi	r4,r2,255
    cdb0:	d0a75317 	ldw	r2,-25268(gp)
    cdb4:	10800d03 	ldbu	r2,52(r2)
    cdb8:	10c03fcc 	andi	r3,r2,255
    cdbc:	e0bfff17 	ldw	r2,-4(fp)
    cdc0:	1885883a 	add	r2,r3,r2
    cdc4:	10800204 	addi	r2,r2,8
    cdc8:	10c000c3 	ldbu	r3,3(r2)
    cdcc:	d0a75317 	ldw	r2,-25268(gp)
    cdd0:	10800d43 	ldbu	r2,53(r2)
    cdd4:	1884b03a 	or	r2,r3,r2
    cdd8:	1007883a 	mov	r3,r2
    cddc:	e0bfff17 	ldw	r2,-4(fp)
    cde0:	2085883a 	add	r2,r4,r2
    cde4:	10800204 	addi	r2,r2,8
    cde8:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    cdec:	e0bfff17 	ldw	r2,-4(fp)
    cdf0:	10c00283 	ldbu	r3,10(r2)
    cdf4:	d0a75317 	ldw	r2,-25268(gp)
    cdf8:	10800d83 	ldbu	r2,54(r2)
    cdfc:	1884b03a 	or	r2,r3,r2
    ce00:	1007883a 	mov	r3,r2
    ce04:	e0bfff17 	ldw	r2,-4(fp)
    ce08:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    ce0c:	d0a75317 	ldw	r2,-25268(gp)
    ce10:	10800d03 	ldbu	r2,52(r2)
    ce14:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    ce18:	e13ffe03 	ldbu	r4,-8(fp)
    ce1c:	e0fffe03 	ldbu	r3,-8(fp)
    ce20:	d0a75044 	addi	r2,gp,-25279
    ce24:	1885883a 	add	r2,r3,r2
    ce28:	10800003 	ldbu	r2,0(r2)
    ce2c:	1007883a 	mov	r3,r2
    ce30:	d0a75317 	ldw	r2,-25268(gp)
    ce34:	10800d43 	ldbu	r2,53(r2)
    ce38:	0084303a 	nor	r2,zero,r2
    ce3c:	1884703a 	and	r2,r3,r2
    ce40:	1007883a 	mov	r3,r2
    ce44:	d0a75044 	addi	r2,gp,-25279
    ce48:	2085883a 	add	r2,r4,r2
    ce4c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
    ce50:	e0fffe03 	ldbu	r3,-8(fp)
    ce54:	d0a75044 	addi	r2,gp,-25279
    ce58:	1885883a 	add	r2,r3,r2
    ce5c:	10800003 	ldbu	r2,0(r2)
    ce60:	10803fcc 	andi	r2,r2,255
    ce64:	1004c03a 	cmpne	r2,r2,zero
    ce68:	1000071e 	bne	r2,zero,ce88 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    ce6c:	d0a75317 	ldw	r2,-25268(gp)
    ce70:	10800d83 	ldbu	r2,54(r2)
    ce74:	0084303a 	nor	r2,zero,r2
    ce78:	1007883a 	mov	r3,r2
    ce7c:	d0a75003 	ldbu	r2,-25280(gp)
    ce80:	1884703a 	and	r2,r3,r2
    ce84:	d0a75005 	stb	r2,-25280(gp)
    }
}
    ce88:	e037883a 	mov	sp,fp
    ce8c:	df000017 	ldw	fp,0(sp)
    ce90:	dec00104 	addi	sp,sp,4
    ce94:	f800283a 	ret

0000ce98 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    ce98:	defffb04 	addi	sp,sp,-20
    ce9c:	df000415 	stw	fp,16(sp)
    cea0:	df000404 	addi	fp,sp,16
    cea4:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    cea8:	d0a75317 	ldw	r2,-25268(gp)
    ceac:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    ceb0:	d0e75317 	ldw	r3,-25268(gp)
    ceb4:	e0bfff17 	ldw	r2,-4(fp)
    ceb8:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
    cebc:	e0bfff17 	ldw	r2,-4(fp)
    cec0:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
    cec4:	e0bffe17 	ldw	r2,-8(fp)
    cec8:	10800017 	ldw	r2,0(r2)
    cecc:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    ced0:	00002006 	br	cf54 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    ced4:	d0a75317 	ldw	r2,-25268(gp)
    ced8:	10800d03 	ldbu	r2,52(r2)
    cedc:	11003fcc 	andi	r4,r2,255
    cee0:	d0a75317 	ldw	r2,-25268(gp)
    cee4:	10800d03 	ldbu	r2,52(r2)
    cee8:	10c03fcc 	andi	r3,r2,255
    ceec:	e0bffd17 	ldw	r2,-12(fp)
    cef0:	1885883a 	add	r2,r3,r2
    cef4:	10800204 	addi	r2,r2,8
    cef8:	10c000c3 	ldbu	r3,3(r2)
    cefc:	d0a75317 	ldw	r2,-25268(gp)
    cf00:	10800d43 	ldbu	r2,53(r2)
    cf04:	1884b03a 	or	r2,r3,r2
    cf08:	1007883a 	mov	r3,r2
    cf0c:	e0bffd17 	ldw	r2,-12(fp)
    cf10:	2085883a 	add	r2,r4,r2
    cf14:	10800204 	addi	r2,r2,8
    cf18:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    cf1c:	e0bffd17 	ldw	r2,-12(fp)
    cf20:	10c00283 	ldbu	r3,10(r2)
    cf24:	d0a75317 	ldw	r2,-25268(gp)
    cf28:	10800d83 	ldbu	r2,54(r2)
    cf2c:	1884b03a 	or	r2,r3,r2
    cf30:	1007883a 	mov	r3,r2
    cf34:	e0bffd17 	ldw	r2,-12(fp)
    cf38:	10c00285 	stb	r3,10(r2)
        pevents++;
    cf3c:	e0bffe17 	ldw	r2,-8(fp)
    cf40:	10800104 	addi	r2,r2,4
    cf44:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
    cf48:	e0bffe17 	ldw	r2,-8(fp)
    cf4c:	10800017 	ldw	r2,0(r2)
    cf50:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    cf54:	e0bffd17 	ldw	r2,-12(fp)
    cf58:	1004c03a 	cmpne	r2,r2,zero
    cf5c:	103fdd1e 	bne	r2,zero,ced4 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    cf60:	d0a75317 	ldw	r2,-25268(gp)
    cf64:	10800d03 	ldbu	r2,52(r2)
    cf68:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    cf6c:	e13ffc03 	ldbu	r4,-16(fp)
    cf70:	e0fffc03 	ldbu	r3,-16(fp)
    cf74:	d0a75044 	addi	r2,gp,-25279
    cf78:	1885883a 	add	r2,r3,r2
    cf7c:	10800003 	ldbu	r2,0(r2)
    cf80:	1007883a 	mov	r3,r2
    cf84:	d0a75317 	ldw	r2,-25268(gp)
    cf88:	10800d43 	ldbu	r2,53(r2)
    cf8c:	0084303a 	nor	r2,zero,r2
    cf90:	1884703a 	and	r2,r3,r2
    cf94:	1007883a 	mov	r3,r2
    cf98:	d0a75044 	addi	r2,gp,-25279
    cf9c:	2085883a 	add	r2,r4,r2
    cfa0:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
    cfa4:	e0fffc03 	ldbu	r3,-16(fp)
    cfa8:	d0a75044 	addi	r2,gp,-25279
    cfac:	1885883a 	add	r2,r3,r2
    cfb0:	10800003 	ldbu	r2,0(r2)
    cfb4:	10803fcc 	andi	r2,r2,255
    cfb8:	1004c03a 	cmpne	r2,r2,zero
    cfbc:	1000071e 	bne	r2,zero,cfdc <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    cfc0:	d0a75317 	ldw	r2,-25268(gp)
    cfc4:	10800d83 	ldbu	r2,54(r2)
    cfc8:	0084303a 	nor	r2,zero,r2
    cfcc:	1007883a 	mov	r3,r2
    cfd0:	d0a75003 	ldbu	r2,-25280(gp)
    cfd4:	1884703a 	and	r2,r3,r2
    cfd8:	d0a75005 	stb	r2,-25280(gp)
    }
}
    cfdc:	e037883a 	mov	sp,fp
    cfe0:	df000017 	ldw	fp,0(sp)
    cfe4:	dec00104 	addi	sp,sp,4
    cfe8:	f800283a 	ret

0000cfec <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    cfec:	defffc04 	addi	sp,sp,-16
    cff0:	df000315 	stw	fp,12(sp)
    cff4:	df000304 	addi	fp,sp,12
    cff8:	e13ffe15 	stw	r4,-8(fp)
    cffc:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    d000:	e0bffe17 	ldw	r2,-8(fp)
    d004:	10800d03 	ldbu	r2,52(r2)
    d008:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    d00c:	e13ffd03 	ldbu	r4,-12(fp)
    d010:	e0fffd03 	ldbu	r3,-12(fp)
    d014:	e0bfff17 	ldw	r2,-4(fp)
    d018:	1885883a 	add	r2,r3,r2
    d01c:	10800204 	addi	r2,r2,8
    d020:	108000c3 	ldbu	r2,3(r2)
    d024:	1007883a 	mov	r3,r2
    d028:	e0bffe17 	ldw	r2,-8(fp)
    d02c:	10800d43 	ldbu	r2,53(r2)
    d030:	0084303a 	nor	r2,zero,r2
    d034:	1884703a 	and	r2,r3,r2
    d038:	1007883a 	mov	r3,r2
    d03c:	e0bfff17 	ldw	r2,-4(fp)
    d040:	2085883a 	add	r2,r4,r2
    d044:	10800204 	addi	r2,r2,8
    d048:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
    d04c:	e0fffd03 	ldbu	r3,-12(fp)
    d050:	e0bfff17 	ldw	r2,-4(fp)
    d054:	1885883a 	add	r2,r3,r2
    d058:	10800204 	addi	r2,r2,8
    d05c:	108000c3 	ldbu	r2,3(r2)
    d060:	10803fcc 	andi	r2,r2,255
    d064:	1004c03a 	cmpne	r2,r2,zero
    d068:	10000a1e 	bne	r2,zero,d094 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    d06c:	e0bfff17 	ldw	r2,-4(fp)
    d070:	10800283 	ldbu	r2,10(r2)
    d074:	1007883a 	mov	r3,r2
    d078:	e0bffe17 	ldw	r2,-8(fp)
    d07c:	10800d83 	ldbu	r2,54(r2)
    d080:	0084303a 	nor	r2,zero,r2
    d084:	1884703a 	and	r2,r3,r2
    d088:	1007883a 	mov	r3,r2
    d08c:	e0bfff17 	ldw	r2,-4(fp)
    d090:	10c00285 	stb	r3,10(r2)
    }
}
    d094:	e037883a 	mov	sp,fp
    d098:	df000017 	ldw	fp,0(sp)
    d09c:	dec00104 	addi	sp,sp,4
    d0a0:	f800283a 	ret

0000d0a4 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    d0a4:	defffa04 	addi	sp,sp,-24
    d0a8:	df000515 	stw	fp,20(sp)
    d0ac:	df000504 	addi	fp,sp,20
    d0b0:	e13ffe15 	stw	r4,-8(fp)
    d0b4:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    d0b8:	e0bffe17 	ldw	r2,-8(fp)
    d0bc:	10800d03 	ldbu	r2,52(r2)
    d0c0:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
    d0c4:	e0bffe17 	ldw	r2,-8(fp)
    d0c8:	10800d83 	ldbu	r2,54(r2)
    d0cc:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
    d0d0:	e0bffe17 	ldw	r2,-8(fp)
    d0d4:	10800d43 	ldbu	r2,53(r2)
    d0d8:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
    d0dc:	e0bfff17 	ldw	r2,-4(fp)
    d0e0:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
    d0e4:	e0bffd17 	ldw	r2,-12(fp)
    d0e8:	10800017 	ldw	r2,0(r2)
    d0ec:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    d0f0:	00002606 	br	d18c <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
    d0f4:	e13ffb83 	ldbu	r4,-18(fp)
    d0f8:	e0fffb83 	ldbu	r3,-18(fp)
    d0fc:	e0bffc17 	ldw	r2,-16(fp)
    d100:	1885883a 	add	r2,r3,r2
    d104:	10800204 	addi	r2,r2,8
    d108:	108000c3 	ldbu	r2,3(r2)
    d10c:	1007883a 	mov	r3,r2
    d110:	e0bffb03 	ldbu	r2,-20(fp)
    d114:	0084303a 	nor	r2,zero,r2
    d118:	1884703a 	and	r2,r3,r2
    d11c:	1007883a 	mov	r3,r2
    d120:	e0bffc17 	ldw	r2,-16(fp)
    d124:	2085883a 	add	r2,r4,r2
    d128:	10800204 	addi	r2,r2,8
    d12c:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
    d130:	e0fffb83 	ldbu	r3,-18(fp)
    d134:	e0bffc17 	ldw	r2,-16(fp)
    d138:	1885883a 	add	r2,r3,r2
    d13c:	10800204 	addi	r2,r2,8
    d140:	108000c3 	ldbu	r2,3(r2)
    d144:	10803fcc 	andi	r2,r2,255
    d148:	1004c03a 	cmpne	r2,r2,zero
    d14c:	1000091e 	bne	r2,zero,d174 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
    d150:	e0bffc17 	ldw	r2,-16(fp)
    d154:	10800283 	ldbu	r2,10(r2)
    d158:	1007883a 	mov	r3,r2
    d15c:	e0bffb43 	ldbu	r2,-19(fp)
    d160:	0084303a 	nor	r2,zero,r2
    d164:	1884703a 	and	r2,r3,r2
    d168:	1007883a 	mov	r3,r2
    d16c:	e0bffc17 	ldw	r2,-16(fp)
    d170:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    d174:	e0bffd17 	ldw	r2,-12(fp)
    d178:	10800104 	addi	r2,r2,4
    d17c:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
    d180:	e0bffd17 	ldw	r2,-12(fp)
    d184:	10800017 	ldw	r2,0(r2)
    d188:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    d18c:	e0bffc17 	ldw	r2,-16(fp)
    d190:	1004c03a 	cmpne	r2,r2,zero
    d194:	103fd71e 	bne	r2,zero,d0f4 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    d198:	e037883a 	mov	sp,fp
    d19c:	df000017 	ldw	fp,0(sp)
    d1a0:	dec00104 	addi	sp,sp,4
    d1a4:	f800283a 	ret

0000d1a8 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    d1a8:	defffc04 	addi	sp,sp,-16
    d1ac:	df000315 	stw	fp,12(sp)
    d1b0:	df000304 	addi	fp,sp,12
    d1b4:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    d1b8:	e0bfff17 	ldw	r2,-4(fp)
    d1bc:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    d1c0:	e0bfff17 	ldw	r2,-4(fp)
    d1c4:	108002c4 	addi	r2,r2,11
    d1c8:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    d1cc:	e03ffd05 	stb	zero,-12(fp)
    d1d0:	00000806 	br	d1f4 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
    d1d4:	e0bffe17 	ldw	r2,-8(fp)
    d1d8:	10000005 	stb	zero,0(r2)
    d1dc:	e0bffe17 	ldw	r2,-8(fp)
    d1e0:	10800044 	addi	r2,r2,1
    d1e4:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    d1e8:	e0bffd03 	ldbu	r2,-12(fp)
    d1ec:	10800044 	addi	r2,r2,1
    d1f0:	e0bffd05 	stb	r2,-12(fp)
    d1f4:	e0bffd03 	ldbu	r2,-12(fp)
    d1f8:	108000f0 	cmpltui	r2,r2,3
    d1fc:	103ff51e 	bne	r2,zero,d1d4 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
    d200:	e037883a 	mov	sp,fp
    d204:	df000017 	ldw	fp,0(sp)
    d208:	dec00104 	addi	sp,sp,4
    d20c:	f800283a 	ret

0000d210 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    d210:	defffb04 	addi	sp,sp,-20
    d214:	dfc00415 	stw	ra,16(sp)
    d218:	df000315 	stw	fp,12(sp)
    d21c:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    d220:	010000b4 	movhi	r4,2
    d224:	21066804 	addi	r4,r4,6560
    d228:	0142d004 	movi	r5,2880
    d22c:	000d5740 	call	d574 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    d230:	008000b4 	movhi	r2,2
    d234:	10866804 	addi	r2,r2,6560
    d238:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    d23c:	008000b4 	movhi	r2,2
    d240:	10867404 	addi	r2,r2,6608
    d244:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    d248:	e03fff0d 	sth	zero,-4(fp)
    d24c:	00001306 	br	d29c <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    d250:	e0bffe17 	ldw	r2,-8(fp)
    d254:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    d258:	e0fffe17 	ldw	r3,-8(fp)
    d25c:	e0bffd17 	ldw	r2,-12(fp)
    d260:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    d264:	e0fffe17 	ldw	r3,-8(fp)
    d268:	00800fc4 	movi	r2,63
    d26c:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    d270:	e0bffe17 	ldw	r2,-8(fp)
    d274:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    d278:	e0bffe17 	ldw	r2,-8(fp)
    d27c:	10800c04 	addi	r2,r2,48
    d280:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    d284:	e0bffd17 	ldw	r2,-12(fp)
    d288:	10800c04 	addi	r2,r2,48
    d28c:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    d290:	e0bfff0b 	ldhu	r2,-4(fp)
    d294:	10800044 	addi	r2,r2,1
    d298:	e0bfff0d 	sth	r2,-4(fp)
    d29c:	e0bfff0b 	ldhu	r2,-4(fp)
    d2a0:	10800ef0 	cmpltui	r2,r2,59
    d2a4:	103fea1e 	bne	r2,zero,d250 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    d2a8:	e0bffe17 	ldw	r2,-8(fp)
    d2ac:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    d2b0:	e0bffe17 	ldw	r2,-8(fp)
    d2b4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    d2b8:	e0fffe17 	ldw	r3,-8(fp)
    d2bc:	00800fc4 	movi	r2,63
    d2c0:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    d2c4:	e0bffe17 	ldw	r2,-8(fp)
    d2c8:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    d2cc:	008000b4 	movhi	r2,2
    d2d0:	10866804 	addi	r2,r2,6560
    d2d4:	d0a75115 	stw	r2,-25276(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    d2d8:	e037883a 	mov	sp,fp
    d2dc:	dfc00117 	ldw	ra,4(sp)
    d2e0:	df000017 	ldw	fp,0(sp)
    d2e4:	dec00204 	addi	sp,sp,8
    d2e8:	f800283a 	ret

0000d2ec <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    d2ec:	deffff04 	addi	sp,sp,-4
    d2f0:	df000015 	stw	fp,0(sp)
    d2f4:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    d2f8:	d0275415 	stw	zero,-25264(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    d2fc:	d0275205 	stb	zero,-25272(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    d300:	d0274405 	stb	zero,-25328(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    d304:	d0274c45 	stb	zero,-25295(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    d308:	d0274445 	stb	zero,-25327(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    d30c:	d0274915 	stw	zero,-25308(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    d310:	d0274515 	stw	zero,-25324(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    d314:	d0275715 	stw	zero,-25252(gp)
    OSIdleCtrMax  = 0L;
    d318:	d0274a15 	stw	zero,-25304(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    d31c:	d0275605 	stb	zero,-25256(gp)
#endif
}
    d320:	e037883a 	mov	sp,fp
    d324:	df000017 	ldw	fp,0(sp)
    d328:	dec00104 	addi	sp,sp,4
    d32c:	f800283a 	ret

0000d330 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    d330:	defffd04 	addi	sp,sp,-12
    d334:	df000215 	stw	fp,8(sp)
    d338:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    d33c:	d0275005 	stb	zero,-25280(gp)
    prdytbl       = &OSRdyTbl[0];
    d340:	d0a75044 	addi	r2,gp,-25279
    d344:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    d348:	e03fff05 	stb	zero,-4(fp)
    d34c:	00000806 	br	d370 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
    d350:	e0bffe17 	ldw	r2,-8(fp)
    d354:	10000005 	stb	zero,0(r2)
    d358:	e0bffe17 	ldw	r2,-8(fp)
    d35c:	10800044 	addi	r2,r2,1
    d360:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    d364:	e0bfff03 	ldbu	r2,-4(fp)
    d368:	10800044 	addi	r2,r2,1
    d36c:	e0bfff05 	stb	r2,-4(fp)
    d370:	e0bfff03 	ldbu	r2,-4(fp)
    d374:	108000f0 	cmpltui	r2,r2,3
    d378:	103ff51e 	bne	r2,zero,d350 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    d37c:	d0274645 	stb	zero,-25319(gp)
    OSPrioHighRdy = 0;
    d380:	d0274605 	stb	zero,-25320(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    d384:	d0274e15 	stw	zero,-25288(gp)
    OSTCBCur      = (OS_TCB *)0;
    d388:	d0275315 	stw	zero,-25268(gp)
}
    d38c:	e037883a 	mov	sp,fp
    d390:	df000017 	ldw	fp,0(sp)
    d394:	dec00104 	addi	sp,sp,4
    d398:	f800283a 	ret

0000d39c <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    d39c:	defff804 	addi	sp,sp,-32
    d3a0:	dfc00715 	stw	ra,28(sp)
    d3a4:	df000615 	stw	fp,24(sp)
    d3a8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    d3ac:	018000b4 	movhi	r6,2
    d3b0:	31866704 	addi	r6,r6,6556
    d3b4:	00bfffd4 	movui	r2,65535
    d3b8:	d8800015 	stw	r2,0(sp)
    d3bc:	008000b4 	movhi	r2,2
    d3c0:	10846804 	addi	r2,r2,4512
    d3c4:	d8800115 	stw	r2,4(sp)
    d3c8:	00808004 	movi	r2,512
    d3cc:	d8800215 	stw	r2,8(sp)
    d3d0:	d8000315 	stw	zero,12(sp)
    d3d4:	008000c4 	movi	r2,3
    d3d8:	d8800415 	stw	r2,16(sp)
    d3dc:	01000074 	movhi	r4,1
    d3e0:	21361404 	addi	r4,r4,-10160
    d3e4:	000b883a 	mov	r5,zero
    d3e8:	01c00504 	movi	r7,20
    d3ec:	00126300 	call	12630 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    d3f0:	01400074 	movhi	r5,1
    d3f4:	295fbe04 	addi	r5,r5,32504
    d3f8:	01000504 	movi	r4,20
    d3fc:	e1bfff04 	addi	r6,fp,-4
    d400:	0012f640 	call	12f64 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    d404:	e037883a 	mov	sp,fp
    d408:	dfc00117 	ldw	ra,4(sp)
    d40c:	df000017 	ldw	fp,0(sp)
    d410:	dec00204 	addi	sp,sp,8
    d414:	f800283a 	ret

0000d418 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    d418:	defff804 	addi	sp,sp,-32
    d41c:	dfc00715 	stw	ra,28(sp)
    d420:	df000615 	stw	fp,24(sp)
    d424:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    d428:	018000b4 	movhi	r6,2
    d42c:	3183ef04 	addi	r6,r6,4028
    d430:	00bfff94 	movui	r2,65534
    d434:	d8800015 	stw	r2,0(sp)
    d438:	008000b4 	movhi	r2,2
    d43c:	1081f004 	addi	r2,r2,1984
    d440:	d8800115 	stw	r2,4(sp)
    d444:	00808004 	movi	r2,512
    d448:	d8800215 	stw	r2,8(sp)
    d44c:	d8000315 	stw	zero,12(sp)
    d450:	008000c4 	movi	r2,3
    d454:	d8800415 	stw	r2,16(sp)
    d458:	01000074 	movhi	r4,1
    d45c:	21362b04 	addi	r4,r4,-10068
    d460:	000b883a 	mov	r5,zero
    d464:	01c004c4 	movi	r7,19
    d468:	00126300 	call	12630 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    d46c:	01400074 	movhi	r5,1
    d470:	295fc204 	addi	r5,r5,32520
    d474:	010004c4 	movi	r4,19
    d478:	e1bfff04 	addi	r6,fp,-4
    d47c:	0012f640 	call	12f64 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    d480:	e037883a 	mov	sp,fp
    d484:	dfc00117 	ldw	ra,4(sp)
    d488:	df000017 	ldw	fp,0(sp)
    d48c:	dec00204 	addi	sp,sp,8
    d490:	f800283a 	ret

0000d494 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    d494:	defffb04 	addi	sp,sp,-20
    d498:	dfc00415 	stw	ra,16(sp)
    d49c:	df000315 	stw	fp,12(sp)
    d4a0:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    d4a4:	010000b4 	movhi	r4,2
    d4a8:	21093804 	addi	r4,r4,9440
    d4ac:	01414404 	movi	r5,1296
    d4b0:	000d5740 	call	d574 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    d4b4:	010000b4 	movhi	r4,2
    d4b8:	210a7c04 	addi	r4,r4,10736
    d4bc:	01401504 	movi	r5,84
    d4c0:	000d5740 	call	d574 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    d4c4:	008000b4 	movhi	r2,2
    d4c8:	10893804 	addi	r2,r2,9440
    d4cc:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    d4d0:	008000b4 	movhi	r2,2
    d4d4:	10895304 	addi	r2,r2,9548
    d4d8:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    d4dc:	e03fff05 	stb	zero,-4(fp)
    d4e0:	00001106 	br	d528 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    d4e4:	e0fffe17 	ldw	r3,-8(fp)
    d4e8:	e0bffd17 	ldw	r2,-12(fp)
    d4ec:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    d4f0:	e0fffe17 	ldw	r3,-8(fp)
    d4f4:	00800fc4 	movi	r2,63
    d4f8:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    d4fc:	e0bffe17 	ldw	r2,-8(fp)
    d500:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    d504:	e0bffe17 	ldw	r2,-8(fp)
    d508:	10801b04 	addi	r2,r2,108
    d50c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    d510:	e0bffd17 	ldw	r2,-12(fp)
    d514:	10801b04 	addi	r2,r2,108
    d518:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    d51c:	e0bfff03 	ldbu	r2,-4(fp)
    d520:	10800044 	addi	r2,r2,1
    d524:	e0bfff05 	stb	r2,-4(fp)
    d528:	e0bfff03 	ldbu	r2,-4(fp)
    d52c:	108002f0 	cmpltui	r2,r2,11
    d530:	103fec1e 	bne	r2,zero,d4e4 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    d534:	e0bffe17 	ldw	r2,-8(fp)
    d538:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    d53c:	e0fffe17 	ldw	r3,-8(fp)
    d540:	00800fc4 	movi	r2,63
    d544:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    d548:	e0bffe17 	ldw	r2,-8(fp)
    d54c:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    d550:	d0274715 	stw	zero,-25316(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    d554:	008000b4 	movhi	r2,2
    d558:	10893804 	addi	r2,r2,9440
    d55c:	d0a74b15 	stw	r2,-25300(gp)
}
    d560:	e037883a 	mov	sp,fp
    d564:	dfc00117 	ldw	ra,4(sp)
    d568:	df000017 	ldw	fp,0(sp)
    d56c:	dec00204 	addi	sp,sp,8
    d570:	f800283a 	ret

0000d574 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    d574:	defffd04 	addi	sp,sp,-12
    d578:	df000215 	stw	fp,8(sp)
    d57c:	df000204 	addi	fp,sp,8
    d580:	e13ffe15 	stw	r4,-8(fp)
    d584:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
    d588:	00000806 	br	d5ac <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    d58c:	e0bffe17 	ldw	r2,-8(fp)
    d590:	10000005 	stb	zero,0(r2)
    d594:	e0bffe17 	ldw	r2,-8(fp)
    d598:	10800044 	addi	r2,r2,1
    d59c:	e0bffe15 	stw	r2,-8(fp)
        size--;
    d5a0:	e0bfff0b 	ldhu	r2,-4(fp)
    d5a4:	10bfffc4 	addi	r2,r2,-1
    d5a8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    d5ac:	e0bfff0b 	ldhu	r2,-4(fp)
    d5b0:	1004c03a 	cmpne	r2,r2,zero
    d5b4:	103ff51e 	bne	r2,zero,d58c <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    d5b8:	e037883a 	mov	sp,fp
    d5bc:	df000017 	ldw	fp,0(sp)
    d5c0:	dec00104 	addi	sp,sp,4
    d5c4:	f800283a 	ret

0000d5c8 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    d5c8:	defffc04 	addi	sp,sp,-16
    d5cc:	df000315 	stw	fp,12(sp)
    d5d0:	df000304 	addi	fp,sp,12
    d5d4:	e13ffd15 	stw	r4,-12(fp)
    d5d8:	e17ffe15 	stw	r5,-8(fp)
    d5dc:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
    d5e0:	00000d06 	br	d618 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
    d5e4:	e0bffe17 	ldw	r2,-8(fp)
    d5e8:	10c00003 	ldbu	r3,0(r2)
    d5ec:	e0bffd17 	ldw	r2,-12(fp)
    d5f0:	10c00005 	stb	r3,0(r2)
    d5f4:	e0bffd17 	ldw	r2,-12(fp)
    d5f8:	10800044 	addi	r2,r2,1
    d5fc:	e0bffd15 	stw	r2,-12(fp)
    d600:	e0bffe17 	ldw	r2,-8(fp)
    d604:	10800044 	addi	r2,r2,1
    d608:	e0bffe15 	stw	r2,-8(fp)
        size--;
    d60c:	e0bfff0b 	ldhu	r2,-4(fp)
    d610:	10bfffc4 	addi	r2,r2,-1
    d614:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    d618:	e0bfff0b 	ldhu	r2,-4(fp)
    d61c:	1004c03a 	cmpne	r2,r2,zero
    d620:	103ff01e 	bne	r2,zero,d5e4 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
    d624:	e037883a 	mov	sp,fp
    d628:	df000017 	ldw	fp,0(sp)
    d62c:	dec00104 	addi	sp,sp,4
    d630:	f800283a 	ret

0000d634 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    d634:	defffb04 	addi	sp,sp,-20
    d638:	dfc00415 	stw	ra,16(sp)
    d63c:	df000315 	stw	fp,12(sp)
    d640:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    d644:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d648:	0005303a 	rdctl	r2,status
    d64c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d650:	e0fffe17 	ldw	r3,-8(fp)
    d654:	00bfff84 	movi	r2,-2
    d658:	1884703a 	and	r2,r3,r2
    d65c:	1001703a 	wrctl	status,r2
  
  return context;
    d660:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    d664:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    d668:	d0a75203 	ldbu	r2,-25272(gp)
    d66c:	10803fcc 	andi	r2,r2,255
    d670:	1004c03a 	cmpne	r2,r2,zero
    d674:	10001b1e 	bne	r2,zero,d6e4 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    d678:	d0a74403 	ldbu	r2,-25328(gp)
    d67c:	10803fcc 	andi	r2,r2,255
    d680:	1004c03a 	cmpne	r2,r2,zero
    d684:	1000171e 	bne	r2,zero,d6e4 <OS_Sched+0xb0>
            OS_SchedNew();
    d688:	000d7080 	call	d708 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    d68c:	d0a74603 	ldbu	r2,-25320(gp)
    d690:	d0e74643 	ldbu	r3,-25319(gp)
    d694:	11003fcc 	andi	r4,r2,255
    d698:	18803fcc 	andi	r2,r3,255
    d69c:	20801126 	beq	r4,r2,d6e4 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    d6a0:	d0a74603 	ldbu	r2,-25320(gp)
    d6a4:	10803fcc 	andi	r2,r2,255
    d6a8:	00c000b4 	movhi	r3,2
    d6ac:	18ca7c04 	addi	r3,r3,10736
    d6b0:	1085883a 	add	r2,r2,r2
    d6b4:	1085883a 	add	r2,r2,r2
    d6b8:	10c5883a 	add	r2,r2,r3
    d6bc:	10800017 	ldw	r2,0(r2)
    d6c0:	d0a74e15 	stw	r2,-25288(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    d6c4:	d0e74e17 	ldw	r3,-25288(gp)
    d6c8:	18800e17 	ldw	r2,56(r3)
    d6cc:	10800044 	addi	r2,r2,1
    d6d0:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    d6d4:	d0a74917 	ldw	r2,-25308(gp)
    d6d8:	10800044 	addi	r2,r2,1
    d6dc:	d0a74915 	stw	r2,-25308(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    d6e0:	0016bac0 	call	16bac <OSCtxSw>
    d6e4:	e0bfff17 	ldw	r2,-4(fp)
    d6e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d6ec:	e0bffd17 	ldw	r2,-12(fp)
    d6f0:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    d6f4:	e037883a 	mov	sp,fp
    d6f8:	dfc00117 	ldw	ra,4(sp)
    d6fc:	df000017 	ldw	fp,0(sp)
    d700:	dec00204 	addi	sp,sp,8
    d704:	f800283a 	ret

0000d708 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    d708:	defffe04 	addi	sp,sp,-8
    d70c:	df000115 	stw	fp,4(sp)
    d710:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    d714:	d0a75003 	ldbu	r2,-25280(gp)
    d718:	10c03fcc 	andi	r3,r2,255
    d71c:	00800074 	movhi	r2,1
    d720:	109f7e04 	addi	r2,r2,32248
    d724:	10c5883a 	add	r2,r2,r3
    d728:	10800003 	ldbu	r2,0(r2)
    d72c:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    d730:	e0bfff03 	ldbu	r2,-4(fp)
    d734:	100490fa 	slli	r2,r2,3
    d738:	1009883a 	mov	r4,r2
    d73c:	e0ffff03 	ldbu	r3,-4(fp)
    d740:	d0a75044 	addi	r2,gp,-25279
    d744:	1885883a 	add	r2,r3,r2
    d748:	10800003 	ldbu	r2,0(r2)
    d74c:	10c03fcc 	andi	r3,r2,255
    d750:	00800074 	movhi	r2,1
    d754:	109f7e04 	addi	r2,r2,32248
    d758:	10c5883a 	add	r2,r2,r3
    d75c:	10800003 	ldbu	r2,0(r2)
    d760:	2085883a 	add	r2,r4,r2
    d764:	d0a74605 	stb	r2,-25320(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    d768:	e037883a 	mov	sp,fp
    d76c:	df000017 	ldw	fp,0(sp)
    d770:	dec00104 	addi	sp,sp,4
    d774:	f800283a 	ret

0000d778 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    d778:	defffc04 	addi	sp,sp,-16
    d77c:	df000315 	stw	fp,12(sp)
    d780:	df000304 	addi	fp,sp,12
    d784:	e13ffe15 	stw	r4,-8(fp)
    d788:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    d78c:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    d790:	00000d06 	br	d7c8 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
    d794:	e0bfff17 	ldw	r2,-4(fp)
    d798:	10c00003 	ldbu	r3,0(r2)
    d79c:	e0bffe17 	ldw	r2,-8(fp)
    d7a0:	10c00005 	stb	r3,0(r2)
    d7a4:	e0bffe17 	ldw	r2,-8(fp)
    d7a8:	10800044 	addi	r2,r2,1
    d7ac:	e0bffe15 	stw	r2,-8(fp)
    d7b0:	e0bfff17 	ldw	r2,-4(fp)
    d7b4:	10800044 	addi	r2,r2,1
    d7b8:	e0bfff15 	stw	r2,-4(fp)
        len++;
    d7bc:	e0bffd03 	ldbu	r2,-12(fp)
    d7c0:	10800044 	addi	r2,r2,1
    d7c4:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    d7c8:	e0bfff17 	ldw	r2,-4(fp)
    d7cc:	10800003 	ldbu	r2,0(r2)
    d7d0:	10803fcc 	andi	r2,r2,255
    d7d4:	1004c03a 	cmpne	r2,r2,zero
    d7d8:	103fee1e 	bne	r2,zero,d794 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    d7dc:	e0bffe17 	ldw	r2,-8(fp)
    d7e0:	10000005 	stb	zero,0(r2)
    return (len);
    d7e4:	e0bffd03 	ldbu	r2,-12(fp)
}
    d7e8:	e037883a 	mov	sp,fp
    d7ec:	df000017 	ldw	fp,0(sp)
    d7f0:	dec00104 	addi	sp,sp,4
    d7f4:	f800283a 	ret

0000d7f8 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    d7f8:	defffd04 	addi	sp,sp,-12
    d7fc:	df000215 	stw	fp,8(sp)
    d800:	df000204 	addi	fp,sp,8
    d804:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    d808:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    d80c:	00000606 	br	d828 <OS_StrLen+0x30>
        psrc++;
    d810:	e0bfff17 	ldw	r2,-4(fp)
    d814:	10800044 	addi	r2,r2,1
    d818:	e0bfff15 	stw	r2,-4(fp)
        len++;
    d81c:	e0bffe03 	ldbu	r2,-8(fp)
    d820:	10800044 	addi	r2,r2,1
    d824:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    d828:	e0bfff17 	ldw	r2,-4(fp)
    d82c:	10800003 	ldbu	r2,0(r2)
    d830:	10803fcc 	andi	r2,r2,255
    d834:	1004c03a 	cmpne	r2,r2,zero
    d838:	103ff51e 	bne	r2,zero,d810 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
    d83c:	e0bffe03 	ldbu	r2,-8(fp)
}
    d840:	e037883a 	mov	sp,fp
    d844:	df000017 	ldw	fp,0(sp)
    d848:	dec00104 	addi	sp,sp,4
    d84c:	f800283a 	ret

0000d850 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    d850:	defffa04 	addi	sp,sp,-24
    d854:	dfc00515 	stw	ra,20(sp)
    d858:	df000415 	stw	fp,16(sp)
    d85c:	df000404 	addi	fp,sp,16
    d860:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    d864:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d868:	0005303a 	rdctl	r2,status
    d86c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d870:	e0fffd17 	ldw	r3,-12(fp)
    d874:	00bfff84 	movi	r2,-2
    d878:	1884703a 	and	r2,r3,r2
    d87c:	1001703a 	wrctl	status,r2
  
  return context;
    d880:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    d884:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
    d888:	d0a74517 	ldw	r2,-25324(gp)
    d88c:	10800044 	addi	r2,r2,1
    d890:	d0a74515 	stw	r2,-25324(gp)
    d894:	e0bffe17 	ldw	r2,-8(fp)
    d898:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d89c:	e0bffc17 	ldw	r2,-16(fp)
    d8a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    d8a4:	00170580 	call	17058 <OSTaskIdleHook>
    }
    d8a8:	003fef06 	br	d868 <OS_TaskIdle+0x18>

0000d8ac <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    d8ac:	defffa04 	addi	sp,sp,-24
    d8b0:	dfc00515 	stw	ra,20(sp)
    d8b4:	df000415 	stw	fp,16(sp)
    d8b8:	df000404 	addi	fp,sp,16
    d8bc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    d8c0:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    d8c4:	00000206 	br	d8d0 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    d8c8:	01003204 	movi	r4,200
    d8cc:	00139280 	call	13928 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    d8d0:	d0a75603 	ldbu	r2,-25256(gp)
    d8d4:	10803fcc 	andi	r2,r2,255
    d8d8:	1005003a 	cmpeq	r2,r2,zero
    d8dc:	103ffa1e 	bne	r2,zero,d8c8 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    d8e0:	d1274a17 	ldw	r4,-25304(gp)
    d8e4:	01401904 	movi	r5,100
    d8e8:	0001a440 	call	1a44 <__udivsi3>
    d8ec:	d0a74a15 	stw	r2,-25304(gp)
    if (OSIdleCtrMax == 0L) {
    d8f0:	d0a74a17 	ldw	r2,-25304(gp)
    d8f4:	1004c03a 	cmpne	r2,r2,zero
    d8f8:	1000031e 	bne	r2,zero,d908 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
    d8fc:	d0274c05 	stb	zero,-25296(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    d900:	01003fc4 	movi	r4,255
    d904:	001353c0 	call	1353c <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d908:	0005303a 	rdctl	r2,status
    d90c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d910:	e0fffd17 	ldw	r3,-12(fp)
    d914:	00bfff84 	movi	r2,-2
    d918:	1884703a 	and	r2,r3,r2
    d91c:	1001703a 	wrctl	status,r2
  
  return context;
    d920:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    d924:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    d928:	d0a74517 	ldw	r2,-25324(gp)
    d92c:	d0a75715 	stw	r2,-25252(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    d930:	d0274515 	stw	zero,-25324(gp)
    d934:	e0bffe17 	ldw	r2,-8(fp)
    d938:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d93c:	e0bffc17 	ldw	r2,-16(fp)
    d940:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    d944:	d1275717 	ldw	r4,-25252(gp)
    d948:	d1674a17 	ldw	r5,-25304(gp)
    d94c:	0001a440 	call	1a44 <__udivsi3>
    d950:	1007883a 	mov	r3,r2
    d954:	00801904 	movi	r2,100
    d958:	10c5c83a 	sub	r2,r2,r3
    d95c:	d0a74c05 	stb	r2,-25296(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    d960:	0016fe80 	call	16fe8 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    d964:	000d9740 	call	d974 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    d968:	01001904 	movi	r4,100
    d96c:	00139280 	call	13928 <OSTimeDly>
    }
    d970:	003fe506 	br	d908 <OS_TaskStat+0x5c>

0000d974 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    d974:	defffa04 	addi	sp,sp,-24
    d978:	dfc00515 	stw	ra,20(sp)
    d97c:	df000415 	stw	fp,16(sp)
    d980:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    d984:	e03ffc05 	stb	zero,-16(fp)
    d988:	00002406 	br	da1c <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    d98c:	e13ffc03 	ldbu	r4,-16(fp)
    d990:	e17ffe04 	addi	r5,fp,-8
    d994:	00133400 	call	13340 <OSTaskStkChk>
    d998:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    d99c:	e0bffc43 	ldbu	r2,-15(fp)
    d9a0:	1004c03a 	cmpne	r2,r2,zero
    d9a4:	10001a1e 	bne	r2,zero,da10 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    d9a8:	e0bffc03 	ldbu	r2,-16(fp)
    d9ac:	00c000b4 	movhi	r3,2
    d9b0:	18ca7c04 	addi	r3,r3,10736
    d9b4:	1085883a 	add	r2,r2,r2
    d9b8:	1085883a 	add	r2,r2,r2
    d9bc:	10c5883a 	add	r2,r2,r3
    d9c0:	10800017 	ldw	r2,0(r2)
    d9c4:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    d9c8:	e0bffd17 	ldw	r2,-12(fp)
    d9cc:	1005003a 	cmpeq	r2,r2,zero
    d9d0:	10000f1e 	bne	r2,zero,da10 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    d9d4:	e0bffd17 	ldw	r2,-12(fp)
    d9d8:	10800060 	cmpeqi	r2,r2,1
    d9dc:	10000c1e 	bne	r2,zero,da10 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    d9e0:	e0bffd17 	ldw	r2,-12(fp)
    d9e4:	10c00217 	ldw	r3,8(r2)
    d9e8:	e0bffd17 	ldw	r2,-12(fp)
    d9ec:	10800317 	ldw	r2,12(r2)
    d9f0:	1085883a 	add	r2,r2,r2
    d9f4:	1085883a 	add	r2,r2,r2
    d9f8:	1887883a 	add	r3,r3,r2
    d9fc:	e0bffd17 	ldw	r2,-12(fp)
    da00:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    da04:	e0ffff17 	ldw	r3,-4(fp)
    da08:	e0bffd17 	ldw	r2,-12(fp)
    da0c:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    da10:	e0bffc03 	ldbu	r2,-16(fp)
    da14:	10800044 	addi	r2,r2,1
    da18:	e0bffc05 	stb	r2,-16(fp)
    da1c:	e0bffc03 	ldbu	r2,-16(fp)
    da20:	10800570 	cmpltui	r2,r2,21
    da24:	103fd91e 	bne	r2,zero,d98c <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
    da28:	e037883a 	mov	sp,fp
    da2c:	dfc00117 	ldw	ra,4(sp)
    da30:	df000017 	ldw	fp,0(sp)
    da34:	dec00204 	addi	sp,sp,8
    da38:	f800283a 	ret

0000da3c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    da3c:	defff104 	addi	sp,sp,-60
    da40:	dfc00e15 	stw	ra,56(sp)
    da44:	df000d15 	stw	fp,52(sp)
    da48:	df000d04 	addi	fp,sp,52
    da4c:	e17ffb15 	stw	r5,-20(fp)
    da50:	e1bffc15 	stw	r6,-16(fp)
    da54:	e0800417 	ldw	r2,16(fp)
    da58:	e13ffa05 	stb	r4,-24(fp)
    da5c:	e1fffd0d 	sth	r7,-12(fp)
    da60:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    da64:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    da68:	0005303a 	rdctl	r2,status
    da6c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    da70:	e0fff717 	ldw	r3,-36(fp)
    da74:	00bfff84 	movi	r2,-2
    da78:	1884703a 	and	r2,r3,r2
    da7c:	1001703a 	wrctl	status,r2
  
  return context;
    da80:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
    da84:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    da88:	d0a74b17 	ldw	r2,-25300(gp)
    da8c:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
    da90:	e0bff917 	ldw	r2,-28(fp)
    da94:	1005003a 	cmpeq	r2,r2,zero
    da98:	1000941e 	bne	r2,zero,dcec <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    da9c:	e0bff917 	ldw	r2,-28(fp)
    daa0:	10800517 	ldw	r2,20(r2)
    daa4:	d0a74b15 	stw	r2,-25300(gp)
    daa8:	e0bff817 	ldw	r2,-32(fp)
    daac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dab0:	e0bff617 	ldw	r2,-40(fp)
    dab4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    dab8:	e0fff917 	ldw	r3,-28(fp)
    dabc:	e0bffb17 	ldw	r2,-20(fp)
    dac0:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    dac4:	e0fff917 	ldw	r3,-28(fp)
    dac8:	e0bffa03 	ldbu	r2,-24(fp)
    dacc:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    dad0:	e0bff917 	ldw	r2,-28(fp)
    dad4:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    dad8:	e0bff917 	ldw	r2,-28(fp)
    dadc:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    dae0:	e0bff917 	ldw	r2,-28(fp)
    dae4:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    dae8:	e0fff917 	ldw	r3,-28(fp)
    daec:	e0800317 	ldw	r2,12(fp)
    daf0:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    daf4:	e0fff917 	ldw	r3,-28(fp)
    daf8:	e0800217 	ldw	r2,8(fp)
    dafc:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    db00:	e0fff917 	ldw	r3,-28(fp)
    db04:	e0bffc17 	ldw	r2,-16(fp)
    db08:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    db0c:	e0fff917 	ldw	r3,-28(fp)
    db10:	e0bffe0b 	ldhu	r2,-8(fp)
    db14:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    db18:	e0fff917 	ldw	r3,-28(fp)
    db1c:	e0bffd0b 	ldhu	r2,-12(fp)
    db20:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    db24:	e0bff917 	ldw	r2,-28(fp)
    db28:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    db2c:	e0bffa03 	ldbu	r2,-24(fp)
    db30:	1004d0fa 	srli	r2,r2,3
    db34:	1007883a 	mov	r3,r2
    db38:	e0bff917 	ldw	r2,-28(fp)
    db3c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    db40:	e0bffa03 	ldbu	r2,-24(fp)
    db44:	108001cc 	andi	r2,r2,7
    db48:	1007883a 	mov	r3,r2
    db4c:	e0bff917 	ldw	r2,-28(fp)
    db50:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    db54:	e0bff917 	ldw	r2,-28(fp)
    db58:	10800d03 	ldbu	r2,52(r2)
    db5c:	10c03fcc 	andi	r3,r2,255
    db60:	00800044 	movi	r2,1
    db64:	10c4983a 	sll	r2,r2,r3
    db68:	1007883a 	mov	r3,r2
    db6c:	e0bff917 	ldw	r2,-28(fp)
    db70:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    db74:	e0bff917 	ldw	r2,-28(fp)
    db78:	10800cc3 	ldbu	r2,51(r2)
    db7c:	10c03fcc 	andi	r3,r2,255
    db80:	00800044 	movi	r2,1
    db84:	10c4983a 	sll	r2,r2,r3
    db88:	1007883a 	mov	r3,r2
    db8c:	e0bff917 	ldw	r2,-28(fp)
    db90:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    db94:	e0bff917 	ldw	r2,-28(fp)
    db98:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    db9c:	e0bff917 	ldw	r2,-28(fp)
    dba0:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    dba4:	e0bff917 	ldw	r2,-28(fp)
    dba8:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    dbac:	e0bff917 	ldw	r2,-28(fp)
    dbb0:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    dbb4:	e0bff917 	ldw	r2,-28(fp)
    dbb8:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    dbbc:	e0bff917 	ldw	r2,-28(fp)
    dbc0:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    dbc4:	e0bff917 	ldw	r2,-28(fp)
    dbc8:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    dbcc:	e0bff917 	ldw	r2,-28(fp)
    dbd0:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    dbd4:	e0bff917 	ldw	r2,-28(fp)
    dbd8:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    dbdc:	e0fff917 	ldw	r3,-28(fp)
    dbe0:	00800fc4 	movi	r2,63
    dbe4:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    dbe8:	e0bff917 	ldw	r2,-28(fp)
    dbec:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    dbf0:	e13ff917 	ldw	r4,-28(fp)
    dbf4:	00170740 	call	17074 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    dbf8:	e13ff917 	ldw	r4,-28(fp)
    dbfc:	0016f8c0 	call	16f8c <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dc00:	0005303a 	rdctl	r2,status
    dc04:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dc08:	e0fff517 	ldw	r3,-44(fp)
    dc0c:	00bfff84 	movi	r2,-2
    dc10:	1884703a 	and	r2,r3,r2
    dc14:	1001703a 	wrctl	status,r2
  
  return context;
    dc18:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
    dc1c:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
    dc20:	e0bffa03 	ldbu	r2,-24(fp)
    dc24:	00c000b4 	movhi	r3,2
    dc28:	18ca7c04 	addi	r3,r3,10736
    dc2c:	1085883a 	add	r2,r2,r2
    dc30:	1085883a 	add	r2,r2,r2
    dc34:	10c7883a 	add	r3,r2,r3
    dc38:	e0bff917 	ldw	r2,-28(fp)
    dc3c:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    dc40:	d0e74717 	ldw	r3,-25316(gp)
    dc44:	e0bff917 	ldw	r2,-28(fp)
    dc48:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    dc4c:	e0bff917 	ldw	r2,-28(fp)
    dc50:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    dc54:	d0a74717 	ldw	r2,-25316(gp)
    dc58:	1005003a 	cmpeq	r2,r2,zero
    dc5c:	1000031e 	bne	r2,zero,dc6c <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
    dc60:	d0e74717 	ldw	r3,-25316(gp)
    dc64:	e0bff917 	ldw	r2,-28(fp)
    dc68:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
    dc6c:	e0bff917 	ldw	r2,-28(fp)
    dc70:	d0a74715 	stw	r2,-25316(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    dc74:	e0bff917 	ldw	r2,-28(fp)
    dc78:	10c00d83 	ldbu	r3,54(r2)
    dc7c:	d0a75003 	ldbu	r2,-25280(gp)
    dc80:	1884b03a 	or	r2,r3,r2
    dc84:	d0a75005 	stb	r2,-25280(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    dc88:	e0bff917 	ldw	r2,-28(fp)
    dc8c:	10800d03 	ldbu	r2,52(r2)
    dc90:	11003fcc 	andi	r4,r2,255
    dc94:	e0bff917 	ldw	r2,-28(fp)
    dc98:	10800d03 	ldbu	r2,52(r2)
    dc9c:	10c03fcc 	andi	r3,r2,255
    dca0:	d0a75044 	addi	r2,gp,-25279
    dca4:	1885883a 	add	r2,r3,r2
    dca8:	10c00003 	ldbu	r3,0(r2)
    dcac:	e0bff917 	ldw	r2,-28(fp)
    dcb0:	10800d43 	ldbu	r2,53(r2)
    dcb4:	1884b03a 	or	r2,r3,r2
    dcb8:	1007883a 	mov	r3,r2
    dcbc:	d0a75044 	addi	r2,gp,-25279
    dcc0:	2085883a 	add	r2,r4,r2
    dcc4:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    dcc8:	d0a74c43 	ldbu	r2,-25295(gp)
    dccc:	10800044 	addi	r2,r2,1
    dcd0:	d0a74c45 	stb	r2,-25295(gp)
    dcd4:	e0bff817 	ldw	r2,-32(fp)
    dcd8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dcdc:	e0bff417 	ldw	r2,-48(fp)
    dce0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    dce4:	e03fff15 	stw	zero,-4(fp)
    dce8:	00000606 	br	dd04 <OS_TCBInit+0x2c8>
    dcec:	e0bff817 	ldw	r2,-32(fp)
    dcf0:	e0bff315 	stw	r2,-52(fp)
    dcf4:	e0bff317 	ldw	r2,-52(fp)
    dcf8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    dcfc:	00801084 	movi	r2,66
    dd00:	e0bfff15 	stw	r2,-4(fp)
    dd04:	e0bfff17 	ldw	r2,-4(fp)
}
    dd08:	e037883a 	mov	sp,fp
    dd0c:	dfc00117 	ldw	ra,4(sp)
    dd10:	df000017 	ldw	fp,0(sp)
    dd14:	dec00204 	addi	sp,sp,8
    dd18:	f800283a 	ret

0000dd1c <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    dd1c:	defffe04 	addi	sp,sp,-8
    dd20:	df000115 	stw	fp,4(sp)
    dd24:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    dd28:	d0a00f04 	addi	r2,gp,-32708
    dd2c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
    dd30:	d0a01004 	addi	r2,gp,-32704
    dd34:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
    dd38:	d0a01184 	addi	r2,gp,-32698
    dd3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
    dd40:	d0a01204 	addi	r2,gp,-32696
    dd44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
    dd48:	d0a01104 	addi	r2,gp,-32700
    dd4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
    dd50:	d0a01284 	addi	r2,gp,-32694
    dd54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
    dd58:	d0a01304 	addi	r2,gp,-32692
    dd5c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
    dd60:	d0a01384 	addi	r2,gp,-32690
    dd64:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
    dd68:	d0a01404 	addi	r2,gp,-32688
    dd6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
    dd70:	d0a01484 	addi	r2,gp,-32686
    dd74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
    dd78:	d0a01504 	addi	r2,gp,-32684
    dd7c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
    dd80:	d0a01584 	addi	r2,gp,-32682
    dd84:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
    dd88:	d0a01604 	addi	r2,gp,-32680
    dd8c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
    dd90:	d0a01684 	addi	r2,gp,-32678
    dd94:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
    dd98:	d0a01704 	addi	r2,gp,-32676
    dd9c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
    dda0:	d0a01784 	addi	r2,gp,-32674
    dda4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
    dda8:	d0a01804 	addi	r2,gp,-32672
    ddac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
    ddb0:	d0a01884 	addi	r2,gp,-32670
    ddb4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
    ddb8:	d0a01904 	addi	r2,gp,-32668
    ddbc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
    ddc0:	d0a01984 	addi	r2,gp,-32666
    ddc4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
    ddc8:	d0a01a04 	addi	r2,gp,-32664
    ddcc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
    ddd0:	d0a01a84 	addi	r2,gp,-32662
    ddd4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
    ddd8:	d0a01b04 	addi	r2,gp,-32660
    dddc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
    dde0:	d0a01b84 	addi	r2,gp,-32658
    dde4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
    dde8:	d0a01c04 	addi	r2,gp,-32656
    ddec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
    ddf0:	d0a01c84 	addi	r2,gp,-32654
    ddf4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
    ddf8:	d0a01d04 	addi	r2,gp,-32652
    ddfc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
    de00:	d0a01d84 	addi	r2,gp,-32650
    de04:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
    de08:	d0a01e04 	addi	r2,gp,-32648
    de0c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
    de10:	d0a01e84 	addi	r2,gp,-32646
    de14:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
    de18:	d0a01f04 	addi	r2,gp,-32644
    de1c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
    de20:	d0a01f84 	addi	r2,gp,-32642
    de24:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
    de28:	d0a02004 	addi	r2,gp,-32640
    de2c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
    de30:	d0a02084 	addi	r2,gp,-32638
    de34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
    de38:	d0a02104 	addi	r2,gp,-32636
    de3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
    de40:	d0a02184 	addi	r2,gp,-32634
    de44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
    de48:	d0a02204 	addi	r2,gp,-32632
    de4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
    de50:	d0a02284 	addi	r2,gp,-32630
    de54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
    de58:	d0a02304 	addi	r2,gp,-32628
    de5c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
    de60:	d0a02384 	addi	r2,gp,-32626
    de64:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
    de68:	d0a02404 	addi	r2,gp,-32624
    de6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
    de70:	d0a02484 	addi	r2,gp,-32622
    de74:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
    de78:	d0a02504 	addi	r2,gp,-32620
    de7c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
    de80:	d0a02584 	addi	r2,gp,-32618
    de84:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
    de88:	d0a02604 	addi	r2,gp,-32616
    de8c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
    de90:	d0a02b04 	addi	r2,gp,-32596
    de94:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    de98:	e037883a 	mov	sp,fp
    de9c:	df000017 	ldw	fp,0(sp)
    dea0:	dec00104 	addi	sp,sp,4
    dea4:	f800283a 	ret

0000dea8 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
    dea8:	defff104 	addi	sp,sp,-60
    deac:	df000e15 	stw	fp,56(sp)
    deb0:	df000e04 	addi	fp,sp,56
    deb4:	e13ffa15 	stw	r4,-24(fp)
    deb8:	e1fffd15 	stw	r7,-12(fp)
    debc:	e17ffb0d 	sth	r5,-20(fp)
    dec0:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    dec4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    dec8:	e0bffd17 	ldw	r2,-12(fp)
    decc:	1004c03a 	cmpne	r2,r2,zero
    ded0:	1000021e 	bne	r2,zero,dedc <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
    ded4:	e03fff15 	stw	zero,-4(fp)
    ded8:	0000bb06 	br	e1c8 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    dedc:	e0bffa17 	ldw	r2,-24(fp)
    dee0:	1004c03a 	cmpne	r2,r2,zero
    dee4:	1000051e 	bne	r2,zero,defc <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    dee8:	e0fffd17 	ldw	r3,-12(fp)
    deec:	00801b84 	movi	r2,110
    def0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
    def4:	e03fff15 	stw	zero,-4(fp)
    def8:	0000b306 	br	e1c8 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    defc:	e0bffa17 	ldw	r2,-24(fp)
    df00:	10800003 	ldbu	r2,0(r2)
    df04:	10803fcc 	andi	r2,r2,255
    df08:	10800160 	cmpeqi	r2,r2,5
    df0c:	1000051e 	bne	r2,zero,df24 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
    df10:	e0fffd17 	ldw	r3,-12(fp)
    df14:	00800044 	movi	r2,1
    df18:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
    df1c:	e03fff15 	stw	zero,-4(fp)
    df20:	0000a906 	br	e1c8 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    df24:	e0fffc03 	ldbu	r3,-16(fp)
    df28:	00bfe004 	movi	r2,-128
    df2c:	1884703a 	and	r2,r3,r2
    df30:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    df34:	e0bff943 	ldbu	r2,-27(fp)
    df38:	1005003a 	cmpeq	r2,r2,zero
    df3c:	1000061e 	bne	r2,zero,df58 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
    df40:	e0bffc03 	ldbu	r2,-16(fp)
    df44:	10801fcc 	andi	r2,r2,127
    df48:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
    df4c:	00800044 	movi	r2,1
    df50:	e0bff905 	stb	r2,-28(fp)
    df54:	00000106 	br	df5c <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
    df58:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    df5c:	e0bffd17 	ldw	r2,-12(fp)
    df60:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    df64:	0005303a 	rdctl	r2,status
    df68:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    df6c:	e0fff717 	ldw	r3,-36(fp)
    df70:	00bfff84 	movi	r2,-2
    df74:	1884703a 	and	r2,r3,r2
    df78:	1001703a 	wrctl	status,r2
  
  return context;
    df7c:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
    df80:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
    df84:	e0bffc03 	ldbu	r2,-16(fp)
    df88:	e0bffe15 	stw	r2,-8(fp)
    df8c:	e0fffe17 	ldw	r3,-8(fp)
    df90:	18800060 	cmpeqi	r2,r3,1
    df94:	1000651e 	bne	r2,zero,e12c <OSFlagAccept+0x284>
    df98:	e0fffe17 	ldw	r3,-8(fp)
    df9c:	18800088 	cmpgei	r2,r3,2
    dfa0:	1000041e 	bne	r2,zero,dfb4 <OSFlagAccept+0x10c>
    dfa4:	e0fffe17 	ldw	r3,-8(fp)
    dfa8:	1805003a 	cmpeq	r2,r3,zero
    dfac:	1000421e 	bne	r2,zero,e0b8 <OSFlagAccept+0x210>
    dfb0:	00007b06 	br	e1a0 <OSFlagAccept+0x2f8>
    dfb4:	e0fffe17 	ldw	r3,-8(fp)
    dfb8:	188000a0 	cmpeqi	r2,r3,2
    dfbc:	1000041e 	bne	r2,zero,dfd0 <OSFlagAccept+0x128>
    dfc0:	e0fffe17 	ldw	r3,-8(fp)
    dfc4:	188000e0 	cmpeqi	r2,r3,3
    dfc8:	10001e1e 	bne	r2,zero,e044 <OSFlagAccept+0x19c>
    dfcc:	00007406 	br	e1a0 <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    dfd0:	e0bffa17 	ldw	r2,-24(fp)
    dfd4:	10c0020b 	ldhu	r3,8(r2)
    dfd8:	e0bffb0b 	ldhu	r2,-20(fp)
    dfdc:	1884703a 	and	r2,r3,r2
    dfe0:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    dfe4:	e0fff98b 	ldhu	r3,-26(fp)
    dfe8:	e0bffb0b 	ldhu	r2,-20(fp)
    dfec:	18800d1e 	bne	r3,r2,e024 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    dff0:	e0bff903 	ldbu	r2,-28(fp)
    dff4:	10800058 	cmpnei	r2,r2,1
    dff8:	10000d1e 	bne	r2,zero,e030 <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    dffc:	e0bffa17 	ldw	r2,-24(fp)
    e000:	1080020b 	ldhu	r2,8(r2)
    e004:	1007883a 	mov	r3,r2
    e008:	e0bff98b 	ldhu	r2,-26(fp)
    e00c:	0084303a 	nor	r2,zero,r2
    e010:	1884703a 	and	r2,r3,r2
    e014:	1007883a 	mov	r3,r2
    e018:	e0bffa17 	ldw	r2,-24(fp)
    e01c:	10c0020d 	sth	r3,8(r2)
    e020:	00000306 	br	e030 <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    e024:	e0fffd17 	ldw	r3,-12(fp)
    e028:	00801c04 	movi	r2,112
    e02c:	18800005 	stb	r2,0(r3)
    e030:	e0bff817 	ldw	r2,-32(fp)
    e034:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e038:	e0bff617 	ldw	r2,-40(fp)
    e03c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    e040:	00005f06 	br	e1c0 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    e044:	e0bffa17 	ldw	r2,-24(fp)
    e048:	10c0020b 	ldhu	r3,8(r2)
    e04c:	e0bffb0b 	ldhu	r2,-20(fp)
    e050:	1884703a 	and	r2,r3,r2
    e054:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    e058:	e0bff98b 	ldhu	r2,-26(fp)
    e05c:	1005003a 	cmpeq	r2,r2,zero
    e060:	10000d1e 	bne	r2,zero,e098 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    e064:	e0bff903 	ldbu	r2,-28(fp)
    e068:	10800058 	cmpnei	r2,r2,1
    e06c:	10000d1e 	bne	r2,zero,e0a4 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    e070:	e0bffa17 	ldw	r2,-24(fp)
    e074:	1080020b 	ldhu	r2,8(r2)
    e078:	1007883a 	mov	r3,r2
    e07c:	e0bff98b 	ldhu	r2,-26(fp)
    e080:	0084303a 	nor	r2,zero,r2
    e084:	1884703a 	and	r2,r3,r2
    e088:	1007883a 	mov	r3,r2
    e08c:	e0bffa17 	ldw	r2,-24(fp)
    e090:	10c0020d 	sth	r3,8(r2)
    e094:	00000306 	br	e0a4 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    e098:	e0fffd17 	ldw	r3,-12(fp)
    e09c:	00801c04 	movi	r2,112
    e0a0:	18800005 	stb	r2,0(r3)
    e0a4:	e0bff817 	ldw	r2,-32(fp)
    e0a8:	e0bff515 	stw	r2,-44(fp)
    e0ac:	e0bff517 	ldw	r2,-44(fp)
    e0b0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    e0b4:	00004206 	br	e1c0 <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    e0b8:	e0bffa17 	ldw	r2,-24(fp)
    e0bc:	1080020b 	ldhu	r2,8(r2)
    e0c0:	0084303a 	nor	r2,zero,r2
    e0c4:	1007883a 	mov	r3,r2
    e0c8:	e0bffb0b 	ldhu	r2,-20(fp)
    e0cc:	1884703a 	and	r2,r3,r2
    e0d0:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    e0d4:	e0fff98b 	ldhu	r3,-26(fp)
    e0d8:	e0bffb0b 	ldhu	r2,-20(fp)
    e0dc:	18800b1e 	bne	r3,r2,e10c <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    e0e0:	e0bff903 	ldbu	r2,-28(fp)
    e0e4:	10800058 	cmpnei	r2,r2,1
    e0e8:	10000b1e 	bne	r2,zero,e118 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    e0ec:	e0bffa17 	ldw	r2,-24(fp)
    e0f0:	10c0020b 	ldhu	r3,8(r2)
    e0f4:	e0bff98b 	ldhu	r2,-26(fp)
    e0f8:	1884b03a 	or	r2,r3,r2
    e0fc:	1007883a 	mov	r3,r2
    e100:	e0bffa17 	ldw	r2,-24(fp)
    e104:	10c0020d 	sth	r3,8(r2)
    e108:	00000306 	br	e118 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    e10c:	e0fffd17 	ldw	r3,-12(fp)
    e110:	00801c04 	movi	r2,112
    e114:	18800005 	stb	r2,0(r3)
    e118:	e0bff817 	ldw	r2,-32(fp)
    e11c:	e0bff415 	stw	r2,-48(fp)
    e120:	e0bff417 	ldw	r2,-48(fp)
    e124:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    e128:	00002506 	br	e1c0 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    e12c:	e0bffa17 	ldw	r2,-24(fp)
    e130:	1080020b 	ldhu	r2,8(r2)
    e134:	0084303a 	nor	r2,zero,r2
    e138:	1007883a 	mov	r3,r2
    e13c:	e0bffb0b 	ldhu	r2,-20(fp)
    e140:	1884703a 	and	r2,r3,r2
    e144:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    e148:	e0bff98b 	ldhu	r2,-26(fp)
    e14c:	1005003a 	cmpeq	r2,r2,zero
    e150:	10000b1e 	bne	r2,zero,e180 <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    e154:	e0bff903 	ldbu	r2,-28(fp)
    e158:	10800058 	cmpnei	r2,r2,1
    e15c:	10000b1e 	bne	r2,zero,e18c <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    e160:	e0bffa17 	ldw	r2,-24(fp)
    e164:	10c0020b 	ldhu	r3,8(r2)
    e168:	e0bff98b 	ldhu	r2,-26(fp)
    e16c:	1884b03a 	or	r2,r3,r2
    e170:	1007883a 	mov	r3,r2
    e174:	e0bffa17 	ldw	r2,-24(fp)
    e178:	10c0020d 	sth	r3,8(r2)
    e17c:	00000306 	br	e18c <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    e180:	e0fffd17 	ldw	r3,-12(fp)
    e184:	00801c04 	movi	r2,112
    e188:	18800005 	stb	r2,0(r3)
    e18c:	e0bff817 	ldw	r2,-32(fp)
    e190:	e0bff315 	stw	r2,-52(fp)
    e194:	e0bff317 	ldw	r2,-52(fp)
    e198:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    e19c:	00000806 	br	e1c0 <OSFlagAccept+0x318>
    e1a0:	e0bff817 	ldw	r2,-32(fp)
    e1a4:	e0bff215 	stw	r2,-56(fp)
    e1a8:	e0bff217 	ldw	r2,-56(fp)
    e1ac:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    e1b0:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
    e1b4:	e0fffd17 	ldw	r3,-12(fp)
    e1b8:	00801bc4 	movi	r2,111
    e1bc:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
    e1c0:	e0bff98b 	ldhu	r2,-26(fp)
    e1c4:	e0bfff15 	stw	r2,-4(fp)
    e1c8:	e0bfff17 	ldw	r2,-4(fp)
}
    e1cc:	e037883a 	mov	sp,fp
    e1d0:	df000017 	ldw	fp,0(sp)
    e1d4:	dec00104 	addi	sp,sp,4
    e1d8:	f800283a 	ret

0000e1dc <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
    e1dc:	defff704 	addi	sp,sp,-36
    e1e0:	df000815 	stw	fp,32(sp)
    e1e4:	df000804 	addi	fp,sp,32
    e1e8:	e17ffe15 	stw	r5,-8(fp)
    e1ec:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
    e1f0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
    e1f4:	e0bffe17 	ldw	r2,-8(fp)
    e1f8:	1004c03a 	cmpne	r2,r2,zero
    e1fc:	1000021e 	bne	r2,zero,e208 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
    e200:	e03fff15 	stw	zero,-4(fp)
    e204:	00003f06 	br	e304 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
    e208:	008000b4 	movhi	r2,2
    e20c:	10addc04 	addi	r2,r2,-18576
    e210:	10800003 	ldbu	r2,0(r2)
    e214:	10803fcc 	andi	r2,r2,255
    e218:	1005003a 	cmpeq	r2,r2,zero
    e21c:	1000051e 	bne	r2,zero,e234 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
    e220:	e0fffe17 	ldw	r3,-8(fp)
    e224:	00800404 	movi	r2,16
    e228:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
    e22c:	e03fff15 	stw	zero,-4(fp)
    e230:	00003406 	br	e304 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e234:	0005303a 	rdctl	r2,status
    e238:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e23c:	e0fffa17 	ldw	r3,-24(fp)
    e240:	00bfff84 	movi	r2,-2
    e244:	1884703a 	and	r2,r3,r2
    e248:	1001703a 	wrctl	status,r2
  
  return context;
    e24c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    e250:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    e254:	008000b4 	movhi	r2,2
    e258:	10addf04 	addi	r2,r2,-18564
    e25c:	10800017 	ldw	r2,0(r2)
    e260:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
    e264:	e0bffc17 	ldw	r2,-16(fp)
    e268:	1005003a 	cmpeq	r2,r2,zero
    e26c:	10001c1e 	bne	r2,zero,e2e0 <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
    e270:	008000b4 	movhi	r2,2
    e274:	10addf04 	addi	r2,r2,-18564
    e278:	10800017 	ldw	r2,0(r2)
    e27c:	10800117 	ldw	r2,4(r2)
    e280:	1007883a 	mov	r3,r2
    e284:	008000b4 	movhi	r2,2
    e288:	10addf04 	addi	r2,r2,-18564
    e28c:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
    e290:	e0fffc17 	ldw	r3,-16(fp)
    e294:	00800144 	movi	r2,5
    e298:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
    e29c:	e0fffc17 	ldw	r3,-16(fp)
    e2a0:	e0bffd0b 	ldhu	r2,-12(fp)
    e2a4:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
    e2a8:	e0bffc17 	ldw	r2,-16(fp)
    e2ac:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
    e2b0:	e0fffc17 	ldw	r3,-16(fp)
    e2b4:	00800fc4 	movi	r2,63
    e2b8:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    e2bc:	e0bffc17 	ldw	r2,-16(fp)
    e2c0:	100002c5 	stb	zero,11(r2)
    e2c4:	e0bffb17 	ldw	r2,-20(fp)
    e2c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e2cc:	e0bff917 	ldw	r2,-28(fp)
    e2d0:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
    e2d4:	e0bffe17 	ldw	r2,-8(fp)
    e2d8:	10000005 	stb	zero,0(r2)
    e2dc:	00000706 	br	e2fc <OSFlagCreate+0x120>
    e2e0:	e0bffb17 	ldw	r2,-20(fp)
    e2e4:	e0bff815 	stw	r2,-32(fp)
    e2e8:	e0bff817 	ldw	r2,-32(fp)
    e2ec:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
    e2f0:	e0fffe17 	ldw	r3,-8(fp)
    e2f4:	00801c84 	movi	r2,114
    e2f8:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
    e2fc:	e0bffc17 	ldw	r2,-16(fp)
    e300:	e0bfff15 	stw	r2,-4(fp)
    e304:	e0bfff17 	ldw	r2,-4(fp)
}
    e308:	e037883a 	mov	sp,fp
    e30c:	df000017 	ldw	fp,0(sp)
    e310:	dec00104 	addi	sp,sp,4
    e314:	f800283a 	ret

0000e318 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
    e318:	defff004 	addi	sp,sp,-64
    e31c:	dfc00f15 	stw	ra,60(sp)
    e320:	df000e15 	stw	fp,56(sp)
    e324:	df000e04 	addi	fp,sp,56
    e328:	e13ffb15 	stw	r4,-20(fp)
    e32c:	e1bffd15 	stw	r6,-12(fp)
    e330:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    e334:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    e338:	e0bffd17 	ldw	r2,-12(fp)
    e33c:	1004c03a 	cmpne	r2,r2,zero
    e340:	1000031e 	bne	r2,zero,e350 <OSFlagDel+0x38>
        return (pgrp);
    e344:	e0bffb17 	ldw	r2,-20(fp)
    e348:	e0bfff15 	stw	r2,-4(fp)
    e34c:	00009606 	br	e5a8 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    e350:	e0bffb17 	ldw	r2,-20(fp)
    e354:	1004c03a 	cmpne	r2,r2,zero
    e358:	1000061e 	bne	r2,zero,e374 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    e35c:	e0fffd17 	ldw	r3,-12(fp)
    e360:	00801b84 	movi	r2,110
    e364:	18800005 	stb	r2,0(r3)
        return (pgrp);
    e368:	e0fffb17 	ldw	r3,-20(fp)
    e36c:	e0ffff15 	stw	r3,-4(fp)
    e370:	00008d06 	br	e5a8 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    e374:	008000b4 	movhi	r2,2
    e378:	10addc04 	addi	r2,r2,-18576
    e37c:	10800003 	ldbu	r2,0(r2)
    e380:	10803fcc 	andi	r2,r2,255
    e384:	1005003a 	cmpeq	r2,r2,zero
    e388:	1000061e 	bne	r2,zero,e3a4 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    e38c:	e0fffd17 	ldw	r3,-12(fp)
    e390:	008003c4 	movi	r2,15
    e394:	18800005 	stb	r2,0(r3)
        return (pgrp);
    e398:	e0bffb17 	ldw	r2,-20(fp)
    e39c:	e0bfff15 	stw	r2,-4(fp)
    e3a0:	00008106 	br	e5a8 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
    e3a4:	e0bffb17 	ldw	r2,-20(fp)
    e3a8:	10800003 	ldbu	r2,0(r2)
    e3ac:	10803fcc 	andi	r2,r2,255
    e3b0:	10800160 	cmpeqi	r2,r2,5
    e3b4:	1000061e 	bne	r2,zero,e3d0 <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
    e3b8:	e0fffd17 	ldw	r3,-12(fp)
    e3bc:	00800044 	movi	r2,1
    e3c0:	18800005 	stb	r2,0(r3)
        return (pgrp);
    e3c4:	e0fffb17 	ldw	r3,-20(fp)
    e3c8:	e0ffff15 	stw	r3,-4(fp)
    e3cc:	00007606 	br	e5a8 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e3d0:	0005303a 	rdctl	r2,status
    e3d4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e3d8:	e0fff617 	ldw	r3,-40(fp)
    e3dc:	00bfff84 	movi	r2,-2
    e3e0:	1884703a 	and	r2,r3,r2
    e3e4:	1001703a 	wrctl	status,r2
  
  return context;
    e3e8:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
    e3ec:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
    e3f0:	e0bffb17 	ldw	r2,-20(fp)
    e3f4:	10800117 	ldw	r2,4(r2)
    e3f8:	1005003a 	cmpeq	r2,r2,zero
    e3fc:	1000031e 	bne	r2,zero,e40c <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    e400:	00800044 	movi	r2,1
    e404:	e0bffa05 	stb	r2,-24(fp)
    e408:	00000106 	br	e410 <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    e40c:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
    e410:	e0bffc03 	ldbu	r2,-16(fp)
    e414:	e0bffe15 	stw	r2,-8(fp)
    e418:	e0fffe17 	ldw	r3,-8(fp)
    e41c:	1805003a 	cmpeq	r2,r3,zero
    e420:	1000041e 	bne	r2,zero,e434 <OSFlagDel+0x11c>
    e424:	e0fffe17 	ldw	r3,-8(fp)
    e428:	18800060 	cmpeqi	r2,r3,1
    e42c:	1000281e 	bne	r2,zero,e4d0 <OSFlagDel+0x1b8>
    e430:	00005206 	br	e57c <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
    e434:	e0bffa03 	ldbu	r2,-24(fp)
    e438:	1004c03a 	cmpne	r2,r2,zero
    e43c:	10001a1e 	bne	r2,zero,e4a8 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
    e440:	e0fffb17 	ldw	r3,-20(fp)
    e444:	00800fc4 	movi	r2,63
    e448:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    e44c:	e0bffb17 	ldw	r2,-20(fp)
    e450:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    e454:	e0bffb17 	ldw	r2,-20(fp)
    e458:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
    e45c:	008000b4 	movhi	r2,2
    e460:	10addf04 	addi	r2,r2,-18564
    e464:	10c00017 	ldw	r3,0(r2)
    e468:	e0bffb17 	ldw	r2,-20(fp)
    e46c:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
    e470:	e0bffb17 	ldw	r2,-20(fp)
    e474:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
    e478:	00c000b4 	movhi	r3,2
    e47c:	18eddf04 	addi	r3,r3,-18564
    e480:	e0bffb17 	ldw	r2,-20(fp)
    e484:	18800015 	stw	r2,0(r3)
    e488:	e0bff717 	ldw	r2,-36(fp)
    e48c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e490:	e0bff517 	ldw	r2,-44(fp)
    e494:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
    e498:	e0bffd17 	ldw	r2,-12(fp)
    e49c:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
    e4a0:	e03ff815 	stw	zero,-32(fp)
    e4a4:	00003e06 	br	e5a0 <OSFlagDel+0x288>
    e4a8:	e0bff717 	ldw	r2,-36(fp)
    e4ac:	e0bff415 	stw	r2,-48(fp)
    e4b0:	e0bff417 	ldw	r2,-48(fp)
    e4b4:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
    e4b8:	e0fffd17 	ldw	r3,-12(fp)
    e4bc:	00801244 	movi	r2,73
    e4c0:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
    e4c4:	e0bffb17 	ldw	r2,-20(fp)
    e4c8:	e0bff815 	stw	r2,-32(fp)
             }
             break;
    e4cc:	00003406 	br	e5a0 <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    e4d0:	e0bffb17 	ldw	r2,-20(fp)
    e4d4:	10800117 	ldw	r2,4(r2)
    e4d8:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    e4dc:	00000606 	br	e4f8 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
    e4e0:	e13ff917 	ldw	r4,-28(fp)
    e4e4:	000b883a 	mov	r5,zero
    e4e8:	000f6280 	call	f628 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    e4ec:	e0bff917 	ldw	r2,-28(fp)
    e4f0:	10800017 	ldw	r2,0(r2)
    e4f4:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    e4f8:	e0bff917 	ldw	r2,-28(fp)
    e4fc:	1004c03a 	cmpne	r2,r2,zero
    e500:	103ff71e 	bne	r2,zero,e4e0 <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
    e504:	e0fffb17 	ldw	r3,-20(fp)
    e508:	00800fc4 	movi	r2,63
    e50c:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    e510:	e0bffb17 	ldw	r2,-20(fp)
    e514:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    e518:	e0bffb17 	ldw	r2,-20(fp)
    e51c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
    e520:	008000b4 	movhi	r2,2
    e524:	10addf04 	addi	r2,r2,-18564
    e528:	10c00017 	ldw	r3,0(r2)
    e52c:	e0bffb17 	ldw	r2,-20(fp)
    e530:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
    e534:	e0bffb17 	ldw	r2,-20(fp)
    e538:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
    e53c:	00c000b4 	movhi	r3,2
    e540:	18eddf04 	addi	r3,r3,-18564
    e544:	e0bffb17 	ldw	r2,-20(fp)
    e548:	18800015 	stw	r2,0(r3)
    e54c:	e0bff717 	ldw	r2,-36(fp)
    e550:	e0bff315 	stw	r2,-52(fp)
    e554:	e0bff317 	ldw	r2,-52(fp)
    e558:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    e55c:	e0bffa03 	ldbu	r2,-24(fp)
    e560:	10800058 	cmpnei	r2,r2,1
    e564:	1000011e 	bne	r2,zero,e56c <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    e568:	000d6340 	call	d634 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
    e56c:	e0bffd17 	ldw	r2,-12(fp)
    e570:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
    e574:	e03ff815 	stw	zero,-32(fp)
             break;
    e578:	00000906 	br	e5a0 <OSFlagDel+0x288>
    e57c:	e0bff717 	ldw	r2,-36(fp)
    e580:	e0bff215 	stw	r2,-56(fp)
    e584:	e0bff217 	ldw	r2,-56(fp)
    e588:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
    e58c:	e0fffd17 	ldw	r3,-12(fp)
    e590:	008001c4 	movi	r2,7
    e594:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
    e598:	e0bffb17 	ldw	r2,-20(fp)
    e59c:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
    e5a0:	e0bff817 	ldw	r2,-32(fp)
    e5a4:	e0bfff15 	stw	r2,-4(fp)
    e5a8:	e0bfff17 	ldw	r2,-4(fp)
}
    e5ac:	e037883a 	mov	sp,fp
    e5b0:	dfc00117 	ldw	ra,4(sp)
    e5b4:	df000017 	ldw	fp,0(sp)
    e5b8:	dec00204 	addi	sp,sp,8
    e5bc:	f800283a 	ret

0000e5c0 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    e5c0:	defff504 	addi	sp,sp,-44
    e5c4:	dfc00a15 	stw	ra,40(sp)
    e5c8:	df000915 	stw	fp,36(sp)
    e5cc:	df000904 	addi	fp,sp,36
    e5d0:	e13ffc15 	stw	r4,-16(fp)
    e5d4:	e17ffd15 	stw	r5,-12(fp)
    e5d8:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e5dc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    e5e0:	e0bffe17 	ldw	r2,-8(fp)
    e5e4:	1004c03a 	cmpne	r2,r2,zero
    e5e8:	1000021e 	bne	r2,zero,e5f4 <OSFlagNameGet+0x34>
        return (0);
    e5ec:	e03fff15 	stw	zero,-4(fp)
    e5f0:	00003e06 	br	e6ec <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    e5f4:	e0bffc17 	ldw	r2,-16(fp)
    e5f8:	1004c03a 	cmpne	r2,r2,zero
    e5fc:	1000051e 	bne	r2,zero,e614 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    e600:	e0fffe17 	ldw	r3,-8(fp)
    e604:	00801b84 	movi	r2,110
    e608:	18800005 	stb	r2,0(r3)
        return (0);
    e60c:	e03fff15 	stw	zero,-4(fp)
    e610:	00003606 	br	e6ec <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    e614:	e0bffd17 	ldw	r2,-12(fp)
    e618:	1004c03a 	cmpne	r2,r2,zero
    e61c:	1000051e 	bne	r2,zero,e634 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
    e620:	e0fffe17 	ldw	r3,-8(fp)
    e624:	00800304 	movi	r2,12
    e628:	18800005 	stb	r2,0(r3)
        return (0);
    e62c:	e03fff15 	stw	zero,-4(fp)
    e630:	00002e06 	br	e6ec <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    e634:	008000b4 	movhi	r2,2
    e638:	10addc04 	addi	r2,r2,-18576
    e63c:	10800003 	ldbu	r2,0(r2)
    e640:	10803fcc 	andi	r2,r2,255
    e644:	1005003a 	cmpeq	r2,r2,zero
    e648:	1000051e 	bne	r2,zero,e660 <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
    e64c:	e0fffe17 	ldw	r3,-8(fp)
    e650:	00800444 	movi	r2,17
    e654:	18800005 	stb	r2,0(r3)
        return (0);
    e658:	e03fff15 	stw	zero,-4(fp)
    e65c:	00002306 	br	e6ec <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e660:	0005303a 	rdctl	r2,status
    e664:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e668:	e0fff917 	ldw	r3,-28(fp)
    e66c:	00bfff84 	movi	r2,-2
    e670:	1884703a 	and	r2,r3,r2
    e674:	1001703a 	wrctl	status,r2
  
  return context;
    e678:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    e67c:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    e680:	e0bffc17 	ldw	r2,-16(fp)
    e684:	10800003 	ldbu	r2,0(r2)
    e688:	10803fcc 	andi	r2,r2,255
    e68c:	10800160 	cmpeqi	r2,r2,5
    e690:	1000091e 	bne	r2,zero,e6b8 <OSFlagNameGet+0xf8>
    e694:	e0bffa17 	ldw	r2,-24(fp)
    e698:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e69c:	e0bff817 	ldw	r2,-32(fp)
    e6a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    e6a4:	e0fffe17 	ldw	r3,-8(fp)
    e6a8:	00800044 	movi	r2,1
    e6ac:	18800005 	stb	r2,0(r3)
        return (0);
    e6b0:	e03fff15 	stw	zero,-4(fp)
    e6b4:	00000d06 	br	e6ec <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    e6b8:	e0bffc17 	ldw	r2,-16(fp)
    e6bc:	11400284 	addi	r5,r2,10
    e6c0:	e13ffd17 	ldw	r4,-12(fp)
    e6c4:	000d7780 	call	d778 <OS_StrCopy>
    e6c8:	e0bffb05 	stb	r2,-20(fp)
    e6cc:	e0bffa17 	ldw	r2,-24(fp)
    e6d0:	e0bff715 	stw	r2,-36(fp)
    e6d4:	e0bff717 	ldw	r2,-36(fp)
    e6d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    e6dc:	e0bffe17 	ldw	r2,-8(fp)
    e6e0:	10000005 	stb	zero,0(r2)
    return (len);
    e6e4:	e0bffb03 	ldbu	r2,-20(fp)
    e6e8:	e0bfff15 	stw	r2,-4(fp)
    e6ec:	e0bfff17 	ldw	r2,-4(fp)
}
    e6f0:	e037883a 	mov	sp,fp
    e6f4:	dfc00117 	ldw	ra,4(sp)
    e6f8:	df000017 	ldw	fp,0(sp)
    e6fc:	dec00204 	addi	sp,sp,8
    e700:	f800283a 	ret

0000e704 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    e704:	defff504 	addi	sp,sp,-44
    e708:	dfc00a15 	stw	ra,40(sp)
    e70c:	df000915 	stw	fp,36(sp)
    e710:	df000904 	addi	fp,sp,36
    e714:	e13ffd15 	stw	r4,-12(fp)
    e718:	e17ffe15 	stw	r5,-8(fp)
    e71c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e720:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    e724:	e0bfff17 	ldw	r2,-4(fp)
    e728:	1005003a 	cmpeq	r2,r2,zero
    e72c:	1000451e 	bne	r2,zero,e844 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    e730:	e0bffd17 	ldw	r2,-12(fp)
    e734:	1004c03a 	cmpne	r2,r2,zero
    e738:	1000041e 	bne	r2,zero,e74c <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    e73c:	e0ffff17 	ldw	r3,-4(fp)
    e740:	00801b84 	movi	r2,110
    e744:	18800005 	stb	r2,0(r3)
        return;
    e748:	00003e06 	br	e844 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    e74c:	e0bffe17 	ldw	r2,-8(fp)
    e750:	1004c03a 	cmpne	r2,r2,zero
    e754:	1000041e 	bne	r2,zero,e768 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
    e758:	e0ffff17 	ldw	r3,-4(fp)
    e75c:	00800304 	movi	r2,12
    e760:	18800005 	stb	r2,0(r3)
        return;
    e764:	00003706 	br	e844 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    e768:	008000b4 	movhi	r2,2
    e76c:	10addc04 	addi	r2,r2,-18576
    e770:	10800003 	ldbu	r2,0(r2)
    e774:	10803fcc 	andi	r2,r2,255
    e778:	1005003a 	cmpeq	r2,r2,zero
    e77c:	1000041e 	bne	r2,zero,e790 <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
    e780:	e0ffff17 	ldw	r3,-4(fp)
    e784:	00800484 	movi	r2,18
    e788:	18800005 	stb	r2,0(r3)
        return;
    e78c:	00002d06 	br	e844 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e790:	0005303a 	rdctl	r2,status
    e794:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e798:	e0fffa17 	ldw	r3,-24(fp)
    e79c:	00bfff84 	movi	r2,-2
    e7a0:	1884703a 	and	r2,r3,r2
    e7a4:	1001703a 	wrctl	status,r2
  
  return context;
    e7a8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    e7ac:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    e7b0:	e0bffd17 	ldw	r2,-12(fp)
    e7b4:	10800003 	ldbu	r2,0(r2)
    e7b8:	10803fcc 	andi	r2,r2,255
    e7bc:	10800160 	cmpeqi	r2,r2,5
    e7c0:	1000081e 	bne	r2,zero,e7e4 <OSFlagNameSet+0xe0>
    e7c4:	e0bffb17 	ldw	r2,-20(fp)
    e7c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e7cc:	e0bff917 	ldw	r2,-28(fp)
    e7d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    e7d4:	e0ffff17 	ldw	r3,-4(fp)
    e7d8:	00800044 	movi	r2,1
    e7dc:	18800005 	stb	r2,0(r3)
        return;
    e7e0:	00001806 	br	e844 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    e7e4:	e13ffe17 	ldw	r4,-8(fp)
    e7e8:	000d7f80 	call	d7f8 <OS_StrLen>
    e7ec:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
    e7f0:	e0bffc03 	ldbu	r2,-16(fp)
    e7f4:	10800830 	cmpltui	r2,r2,32
    e7f8:	1000081e 	bne	r2,zero,e81c <OSFlagNameSet+0x118>
    e7fc:	e0bffb17 	ldw	r2,-20(fp)
    e800:	e0bff815 	stw	r2,-32(fp)
    e804:	e0bff817 	ldw	r2,-32(fp)
    e808:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
    e80c:	e0ffff17 	ldw	r3,-4(fp)
    e810:	00801cc4 	movi	r2,115
    e814:	18800005 	stb	r2,0(r3)
        return;
    e818:	00000a06 	br	e844 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    e81c:	e0bffd17 	ldw	r2,-12(fp)
    e820:	11000284 	addi	r4,r2,10
    e824:	e17ffe17 	ldw	r5,-8(fp)
    e828:	000d7780 	call	d778 <OS_StrCopy>
    e82c:	e0bffb17 	ldw	r2,-20(fp)
    e830:	e0bff715 	stw	r2,-36(fp)
    e834:	e0bff717 	ldw	r2,-36(fp)
    e838:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    e83c:	e0bfff17 	ldw	r2,-4(fp)
    e840:	10000005 	stb	zero,0(r2)
    return;
}
    e844:	e037883a 	mov	sp,fp
    e848:	dfc00117 	ldw	ra,4(sp)
    e84c:	df000017 	ldw	fp,0(sp)
    e850:	dec00204 	addi	sp,sp,8
    e854:	f800283a 	ret

0000e858 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
    e858:	deffe004 	addi	sp,sp,-128
    e85c:	dfc01f15 	stw	ra,124(sp)
    e860:	df001e15 	stw	fp,120(sp)
    e864:	df001e04 	addi	fp,sp,120
    e868:	e13ff915 	stw	r4,-28(fp)
    e86c:	e17ffa0d 	sth	r5,-24(fp)
    e870:	e1bffb05 	stb	r6,-20(fp)
    e874:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    e878:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    e87c:	e0800217 	ldw	r2,8(fp)
    e880:	1004c03a 	cmpne	r2,r2,zero
    e884:	1000021e 	bne	r2,zero,e890 <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
    e888:	e03fff15 	stw	zero,-4(fp)
    e88c:	00017d06 	br	ee84 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    e890:	e0bff917 	ldw	r2,-28(fp)
    e894:	1004c03a 	cmpne	r2,r2,zero
    e898:	1000051e 	bne	r2,zero,e8b0 <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    e89c:	e0c00217 	ldw	r3,8(fp)
    e8a0:	00801b84 	movi	r2,110
    e8a4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
    e8a8:	e03fff15 	stw	zero,-4(fp)
    e8ac:	00017506 	br	ee84 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    e8b0:	008000b4 	movhi	r2,2
    e8b4:	10addc04 	addi	r2,r2,-18576
    e8b8:	10800003 	ldbu	r2,0(r2)
    e8bc:	10803fcc 	andi	r2,r2,255
    e8c0:	1005003a 	cmpeq	r2,r2,zero
    e8c4:	1000051e 	bne	r2,zero,e8dc <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
    e8c8:	e0c00217 	ldw	r3,8(fp)
    e8cc:	00800084 	movi	r2,2
    e8d0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
    e8d4:	e03fff15 	stw	zero,-4(fp)
    e8d8:	00016a06 	br	ee84 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
    e8dc:	008000b4 	movhi	r2,2
    e8e0:	10adce04 	addi	r2,r2,-18632
    e8e4:	10800003 	ldbu	r2,0(r2)
    e8e8:	10803fcc 	andi	r2,r2,255
    e8ec:	1005003a 	cmpeq	r2,r2,zero
    e8f0:	1000051e 	bne	r2,zero,e908 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
    e8f4:	e0c00217 	ldw	r3,8(fp)
    e8f8:	00800344 	movi	r2,13
    e8fc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
    e900:	e03fff15 	stw	zero,-4(fp)
    e904:	00015f06 	br	ee84 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    e908:	e0bff917 	ldw	r2,-28(fp)
    e90c:	10800003 	ldbu	r2,0(r2)
    e910:	10803fcc 	andi	r2,r2,255
    e914:	10800160 	cmpeqi	r2,r2,5
    e918:	1000051e 	bne	r2,zero,e930 <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
    e91c:	e0c00217 	ldw	r3,8(fp)
    e920:	00800044 	movi	r2,1
    e924:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
    e928:	e03fff15 	stw	zero,-4(fp)
    e92c:	00015506 	br	ee84 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    e930:	e0fffb03 	ldbu	r3,-20(fp)
    e934:	00bfe004 	movi	r2,-128
    e938:	1884703a 	and	r2,r3,r2
    e93c:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
    e940:	e0bff283 	ldbu	r2,-54(fp)
    e944:	1005003a 	cmpeq	r2,r2,zero
    e948:	1000071e 	bne	r2,zero,e968 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
    e94c:	00c01fc4 	movi	r3,127
    e950:	e0bffb03 	ldbu	r2,-20(fp)
    e954:	10c4703a 	and	r2,r2,r3
    e958:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
    e95c:	00800044 	movi	r2,1
    e960:	e0bff205 	stb	r2,-56(fp)
    e964:	00000106 	br	e96c <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
    e968:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e96c:	0005303a 	rdctl	r2,status
    e970:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e974:	e0fff017 	ldw	r3,-64(fp)
    e978:	00bfff84 	movi	r2,-2
    e97c:	1884703a 	and	r2,r3,r2
    e980:	1001703a 	wrctl	status,r2
  
  return context;
    e984:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    e988:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
    e98c:	e0bffb03 	ldbu	r2,-20(fp)
    e990:	e0bffe15 	stw	r2,-8(fp)
    e994:	e0fffe17 	ldw	r3,-8(fp)
    e998:	18800060 	cmpeqi	r2,r3,1
    e99c:	1000981e 	bne	r2,zero,ec00 <OSFlagPend+0x3a8>
    e9a0:	e0fffe17 	ldw	r3,-8(fp)
    e9a4:	18800088 	cmpgei	r2,r3,2
    e9a8:	1000041e 	bne	r2,zero,e9bc <OSFlagPend+0x164>
    e9ac:	e0fffe17 	ldw	r3,-8(fp)
    e9b0:	1805003a 	cmpeq	r2,r3,zero
    e9b4:	1000641e 	bne	r2,zero,eb48 <OSFlagPend+0x2f0>
    e9b8:	0000bf06 	br	ecb8 <OSFlagPend+0x460>
    e9bc:	e0fffe17 	ldw	r3,-8(fp)
    e9c0:	188000a0 	cmpeqi	r2,r3,2
    e9c4:	1000041e 	bne	r2,zero,e9d8 <OSFlagPend+0x180>
    e9c8:	e0fffe17 	ldw	r3,-8(fp)
    e9cc:	188000e0 	cmpeqi	r2,r3,3
    e9d0:	10002f1e 	bne	r2,zero,ea90 <OSFlagPend+0x238>
    e9d4:	0000b806 	br	ecb8 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
    e9d8:	e0bff917 	ldw	r2,-28(fp)
    e9dc:	10c0020b 	ldhu	r3,8(r2)
    e9e0:	e0bffa0b 	ldhu	r2,-24(fp)
    e9e4:	1884703a 	and	r2,r3,r2
    e9e8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    e9ec:	e0fff30b 	ldhu	r3,-52(fp)
    e9f0:	e0bffa0b 	ldhu	r2,-24(fp)
    e9f4:	18801a1e 	bne	r3,r2,ea60 <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    e9f8:	e0bff203 	ldbu	r2,-56(fp)
    e9fc:	10800058 	cmpnei	r2,r2,1
    ea00:	1000091e 	bne	r2,zero,ea28 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    ea04:	e0bff917 	ldw	r2,-28(fp)
    ea08:	1080020b 	ldhu	r2,8(r2)
    ea0c:	1007883a 	mov	r3,r2
    ea10:	e0bff30b 	ldhu	r2,-52(fp)
    ea14:	0084303a 	nor	r2,zero,r2
    ea18:	1884703a 	and	r2,r3,r2
    ea1c:	1007883a 	mov	r3,r2
    ea20:	e0bff917 	ldw	r2,-28(fp)
    ea24:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    ea28:	008000b4 	movhi	r2,2
    ea2c:	10addd04 	addi	r2,r2,-18572
    ea30:	10c00017 	ldw	r3,0(r2)
    ea34:	e0bff30b 	ldhu	r2,-52(fp)
    ea38:	18800b0d 	sth	r2,44(r3)
    ea3c:	e0bff117 	ldw	r2,-60(fp)
    ea40:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ea44:	e0bfef17 	ldw	r2,-68(fp)
    ea48:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    ea4c:	e0800217 	ldw	r2,8(fp)
    ea50:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    ea54:	e0bff30b 	ldhu	r2,-52(fp)
    ea58:	e0bfff15 	stw	r2,-4(fp)
    ea5c:	00010906 	br	ee84 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    ea60:	e1bffa0b 	ldhu	r6,-24(fp)
    ea64:	e1fffb03 	ldbu	r7,-20(fp)
    ea68:	e0bffc0b 	ldhu	r2,-16(fp)
    ea6c:	e17ff404 	addi	r5,fp,-48
    ea70:	d8800015 	stw	r2,0(sp)
    ea74:	e13ff917 	ldw	r4,-28(fp)
    ea78:	000f3800 	call	f380 <OS_FlagBlock>
    ea7c:	e0bff117 	ldw	r2,-60(fp)
    ea80:	e0bfee15 	stw	r2,-72(fp)
    ea84:	e0bfee17 	ldw	r2,-72(fp)
    ea88:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    ea8c:	00009506 	br	ece4 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
    ea90:	e0bff917 	ldw	r2,-28(fp)
    ea94:	10c0020b 	ldhu	r3,8(r2)
    ea98:	e0bffa0b 	ldhu	r2,-24(fp)
    ea9c:	1884703a 	and	r2,r3,r2
    eaa0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    eaa4:	e0bff30b 	ldhu	r2,-52(fp)
    eaa8:	1005003a 	cmpeq	r2,r2,zero
    eaac:	10001a1e 	bne	r2,zero,eb18 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    eab0:	e0bff203 	ldbu	r2,-56(fp)
    eab4:	10800058 	cmpnei	r2,r2,1
    eab8:	1000091e 	bne	r2,zero,eae0 <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    eabc:	e0bff917 	ldw	r2,-28(fp)
    eac0:	1080020b 	ldhu	r2,8(r2)
    eac4:	1007883a 	mov	r3,r2
    eac8:	e0bff30b 	ldhu	r2,-52(fp)
    eacc:	0084303a 	nor	r2,zero,r2
    ead0:	1884703a 	and	r2,r3,r2
    ead4:	1007883a 	mov	r3,r2
    ead8:	e0bff917 	ldw	r2,-28(fp)
    eadc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    eae0:	008000b4 	movhi	r2,2
    eae4:	10addd04 	addi	r2,r2,-18572
    eae8:	10c00017 	ldw	r3,0(r2)
    eaec:	e0bff30b 	ldhu	r2,-52(fp)
    eaf0:	18800b0d 	sth	r2,44(r3)
    eaf4:	e0bff117 	ldw	r2,-60(fp)
    eaf8:	e0bfed15 	stw	r2,-76(fp)
    eafc:	e0bfed17 	ldw	r2,-76(fp)
    eb00:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    eb04:	e0800217 	ldw	r2,8(fp)
    eb08:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    eb0c:	e0fff30b 	ldhu	r3,-52(fp)
    eb10:	e0ffff15 	stw	r3,-4(fp)
    eb14:	0000db06 	br	ee84 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    eb18:	e1bffa0b 	ldhu	r6,-24(fp)
    eb1c:	e1fffb03 	ldbu	r7,-20(fp)
    eb20:	e0bffc0b 	ldhu	r2,-16(fp)
    eb24:	e17ff404 	addi	r5,fp,-48
    eb28:	d8800015 	stw	r2,0(sp)
    eb2c:	e13ff917 	ldw	r4,-28(fp)
    eb30:	000f3800 	call	f380 <OS_FlagBlock>
    eb34:	e0bff117 	ldw	r2,-60(fp)
    eb38:	e0bfec15 	stw	r2,-80(fp)
    eb3c:	e0bfec17 	ldw	r2,-80(fp)
    eb40:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    eb44:	00006706 	br	ece4 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    eb48:	e0bff917 	ldw	r2,-28(fp)
    eb4c:	1080020b 	ldhu	r2,8(r2)
    eb50:	0084303a 	nor	r2,zero,r2
    eb54:	1007883a 	mov	r3,r2
    eb58:	e0bffa0b 	ldhu	r2,-24(fp)
    eb5c:	1884703a 	and	r2,r3,r2
    eb60:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    eb64:	e0fff30b 	ldhu	r3,-52(fp)
    eb68:	e0bffa0b 	ldhu	r2,-24(fp)
    eb6c:	1880181e 	bne	r3,r2,ebd0 <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    eb70:	e0bff203 	ldbu	r2,-56(fp)
    eb74:	10800058 	cmpnei	r2,r2,1
    eb78:	1000071e 	bne	r2,zero,eb98 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    eb7c:	e0bff917 	ldw	r2,-28(fp)
    eb80:	10c0020b 	ldhu	r3,8(r2)
    eb84:	e0bff30b 	ldhu	r2,-52(fp)
    eb88:	1884b03a 	or	r2,r3,r2
    eb8c:	1007883a 	mov	r3,r2
    eb90:	e0bff917 	ldw	r2,-28(fp)
    eb94:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    eb98:	008000b4 	movhi	r2,2
    eb9c:	10addd04 	addi	r2,r2,-18572
    eba0:	10c00017 	ldw	r3,0(r2)
    eba4:	e0bff30b 	ldhu	r2,-52(fp)
    eba8:	18800b0d 	sth	r2,44(r3)
    ebac:	e0bff117 	ldw	r2,-60(fp)
    ebb0:	e0bfeb15 	stw	r2,-84(fp)
    ebb4:	e0bfeb17 	ldw	r2,-84(fp)
    ebb8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    ebbc:	e0800217 	ldw	r2,8(fp)
    ebc0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    ebc4:	e0bff30b 	ldhu	r2,-52(fp)
    ebc8:	e0bfff15 	stw	r2,-4(fp)
    ebcc:	0000ad06 	br	ee84 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    ebd0:	e1bffa0b 	ldhu	r6,-24(fp)
    ebd4:	e1fffb03 	ldbu	r7,-20(fp)
    ebd8:	e0bffc0b 	ldhu	r2,-16(fp)
    ebdc:	e17ff404 	addi	r5,fp,-48
    ebe0:	d8800015 	stw	r2,0(sp)
    ebe4:	e13ff917 	ldw	r4,-28(fp)
    ebe8:	000f3800 	call	f380 <OS_FlagBlock>
    ebec:	e0bff117 	ldw	r2,-60(fp)
    ebf0:	e0bfea15 	stw	r2,-88(fp)
    ebf4:	e0bfea17 	ldw	r2,-88(fp)
    ebf8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    ebfc:	00003906 	br	ece4 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    ec00:	e0bff917 	ldw	r2,-28(fp)
    ec04:	1080020b 	ldhu	r2,8(r2)
    ec08:	0084303a 	nor	r2,zero,r2
    ec0c:	1007883a 	mov	r3,r2
    ec10:	e0bffa0b 	ldhu	r2,-24(fp)
    ec14:	1884703a 	and	r2,r3,r2
    ec18:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    ec1c:	e0bff30b 	ldhu	r2,-52(fp)
    ec20:	1005003a 	cmpeq	r2,r2,zero
    ec24:	1000181e 	bne	r2,zero,ec88 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    ec28:	e0bff203 	ldbu	r2,-56(fp)
    ec2c:	10800058 	cmpnei	r2,r2,1
    ec30:	1000071e 	bne	r2,zero,ec50 <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    ec34:	e0bff917 	ldw	r2,-28(fp)
    ec38:	10c0020b 	ldhu	r3,8(r2)
    ec3c:	e0bff30b 	ldhu	r2,-52(fp)
    ec40:	1884b03a 	or	r2,r3,r2
    ec44:	1007883a 	mov	r3,r2
    ec48:	e0bff917 	ldw	r2,-28(fp)
    ec4c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    ec50:	008000b4 	movhi	r2,2
    ec54:	10addd04 	addi	r2,r2,-18572
    ec58:	10c00017 	ldw	r3,0(r2)
    ec5c:	e0bff30b 	ldhu	r2,-52(fp)
    ec60:	18800b0d 	sth	r2,44(r3)
    ec64:	e0bff117 	ldw	r2,-60(fp)
    ec68:	e0bfe915 	stw	r2,-92(fp)
    ec6c:	e0bfe917 	ldw	r2,-92(fp)
    ec70:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    ec74:	e0800217 	ldw	r2,8(fp)
    ec78:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    ec7c:	e0fff30b 	ldhu	r3,-52(fp)
    ec80:	e0ffff15 	stw	r3,-4(fp)
    ec84:	00007f06 	br	ee84 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    ec88:	e1bffa0b 	ldhu	r6,-24(fp)
    ec8c:	e1fffb03 	ldbu	r7,-20(fp)
    ec90:	e0bffc0b 	ldhu	r2,-16(fp)
    ec94:	e17ff404 	addi	r5,fp,-48
    ec98:	d8800015 	stw	r2,0(sp)
    ec9c:	e13ff917 	ldw	r4,-28(fp)
    eca0:	000f3800 	call	f380 <OS_FlagBlock>
    eca4:	e0bff117 	ldw	r2,-60(fp)
    eca8:	e0bfe815 	stw	r2,-96(fp)
    ecac:	e0bfe817 	ldw	r2,-96(fp)
    ecb0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    ecb4:	00000b06 	br	ece4 <OSFlagPend+0x48c>
    ecb8:	e0bff117 	ldw	r2,-60(fp)
    ecbc:	e0bfe715 	stw	r2,-100(fp)
    ecc0:	e0bfe717 	ldw	r2,-100(fp)
    ecc4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    ecc8:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
    eccc:	e0c00217 	ldw	r3,8(fp)
    ecd0:	00801bc4 	movi	r2,111
    ecd4:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
    ecd8:	e0bff30b 	ldhu	r2,-52(fp)
    ecdc:	e0bfff15 	stw	r2,-4(fp)
    ece0:	00006806 	br	ee84 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
    ece4:	000d6340 	call	d634 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ece8:	0005303a 	rdctl	r2,status
    ecec:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ecf0:	e0ffe617 	ldw	r3,-104(fp)
    ecf4:	00bfff84 	movi	r2,-2
    ecf8:	1884703a 	and	r2,r3,r2
    ecfc:	1001703a 	wrctl	status,r2
  
  return context;
    ed00:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
    ed04:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
    ed08:	008000b4 	movhi	r2,2
    ed0c:	10addd04 	addi	r2,r2,-18572
    ed10:	10800017 	ldw	r2,0(r2)
    ed14:	10800c43 	ldbu	r2,49(r2)
    ed18:	10803fcc 	andi	r2,r2,255
    ed1c:	1005003a 	cmpeq	r2,r2,zero
    ed20:	1000221e 	bne	r2,zero,edac <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
    ed24:	008000b4 	movhi	r2,2
    ed28:	10addd04 	addi	r2,r2,-18572
    ed2c:	10800017 	ldw	r2,0(r2)
    ed30:	10800c43 	ldbu	r2,49(r2)
    ed34:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    ed38:	008000b4 	movhi	r2,2
    ed3c:	10addd04 	addi	r2,r2,-18572
    ed40:	10800017 	ldw	r2,0(r2)
    ed44:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
    ed48:	e13ff404 	addi	r4,fp,-48
    ed4c:	000f7380 	call	f738 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
    ed50:	008000b4 	movhi	r2,2
    ed54:	10addd04 	addi	r2,r2,-18572
    ed58:	10800017 	ldw	r2,0(r2)
    ed5c:	10000c05 	stb	zero,48(r2)
    ed60:	e0bff117 	ldw	r2,-60(fp)
    ed64:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ed68:	e0bfe517 	ldw	r2,-108(fp)
    ed6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
    ed70:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
    ed74:	e0bff243 	ldbu	r2,-55(fp)
    ed78:	108000a0 	cmpeqi	r2,r2,2
    ed7c:	1000011e 	bne	r2,zero,ed84 <OSFlagPend+0x52c>
    ed80:	00000406 	br	ed94 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
    ed84:	e0c00217 	ldw	r3,8(fp)
    ed88:	00800384 	movi	r2,14
    ed8c:	18800005 	stb	r2,0(r3)
                 break;
    ed90:	00000306 	br	eda0 <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
    ed94:	e0c00217 	ldw	r3,8(fp)
    ed98:	00800284 	movi	r2,10
    ed9c:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
    eda0:	e0fff30b 	ldhu	r3,-52(fp)
    eda4:	e0ffff15 	stw	r3,-4(fp)
    eda8:	00003606 	br	ee84 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
    edac:	008000b4 	movhi	r2,2
    edb0:	10addd04 	addi	r2,r2,-18572
    edb4:	10800017 	ldw	r2,0(r2)
    edb8:	10800b0b 	ldhu	r2,44(r2)
    edbc:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
    edc0:	e0bff203 	ldbu	r2,-56(fp)
    edc4:	10800058 	cmpnei	r2,r2,1
    edc8:	1000261e 	bne	r2,zero,ee64 <OSFlagPend+0x60c>
        switch (wait_type) {
    edcc:	e0bffb03 	ldbu	r2,-20(fp)
    edd0:	e0bffd15 	stw	r2,-12(fp)
    edd4:	e0fffd17 	ldw	r3,-12(fp)
    edd8:	1804803a 	cmplt	r2,r3,zero
    eddc:	1000181e 	bne	r2,zero,ee40 <OSFlagPend+0x5e8>
    ede0:	e0fffd17 	ldw	r3,-12(fp)
    ede4:	18800090 	cmplti	r2,r3,2
    ede8:	10000d1e 	bne	r2,zero,ee20 <OSFlagPend+0x5c8>
    edec:	e0fffd17 	ldw	r3,-12(fp)
    edf0:	18800108 	cmpgei	r2,r3,4
    edf4:	1000121e 	bne	r2,zero,ee40 <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
    edf8:	e0bff917 	ldw	r2,-28(fp)
    edfc:	1080020b 	ldhu	r2,8(r2)
    ee00:	1007883a 	mov	r3,r2
    ee04:	e0bff30b 	ldhu	r2,-52(fp)
    ee08:	0084303a 	nor	r2,zero,r2
    ee0c:	1884703a 	and	r2,r3,r2
    ee10:	1007883a 	mov	r3,r2
    ee14:	e0bff917 	ldw	r2,-28(fp)
    ee18:	10c0020d 	sth	r3,8(r2)
                 break;
    ee1c:	00001106 	br	ee64 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
    ee20:	e0bff917 	ldw	r2,-28(fp)
    ee24:	10c0020b 	ldhu	r3,8(r2)
    ee28:	e0bff30b 	ldhu	r2,-52(fp)
    ee2c:	1884b03a 	or	r2,r3,r2
    ee30:	1007883a 	mov	r3,r2
    ee34:	e0bff917 	ldw	r2,-28(fp)
    ee38:	10c0020d 	sth	r3,8(r2)
                 break;
    ee3c:	00000906 	br	ee64 <OSFlagPend+0x60c>
    ee40:	e0bff117 	ldw	r2,-60(fp)
    ee44:	e0bfe415 	stw	r2,-112(fp)
    ee48:	e0bfe417 	ldw	r2,-112(fp)
    ee4c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    ee50:	e0c00217 	ldw	r3,8(fp)
    ee54:	00801bc4 	movi	r2,111
    ee58:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
    ee5c:	e03fff15 	stw	zero,-4(fp)
    ee60:	00000806 	br	ee84 <OSFlagPend+0x62c>
    ee64:	e0bff117 	ldw	r2,-60(fp)
    ee68:	e0bfe315 	stw	r2,-116(fp)
    ee6c:	e0bfe317 	ldw	r2,-116(fp)
    ee70:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
    ee74:	e0800217 	ldw	r2,8(fp)
    ee78:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
    ee7c:	e0bff30b 	ldhu	r2,-52(fp)
    ee80:	e0bfff15 	stw	r2,-4(fp)
    ee84:	e0bfff17 	ldw	r2,-4(fp)
}
    ee88:	e037883a 	mov	sp,fp
    ee8c:	dfc00117 	ldw	ra,4(sp)
    ee90:	df000017 	ldw	fp,0(sp)
    ee94:	dec00204 	addi	sp,sp,8
    ee98:	f800283a 	ret

0000ee9c <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
    ee9c:	defffb04 	addi	sp,sp,-20
    eea0:	df000415 	stw	fp,16(sp)
    eea4:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    eea8:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eeac:	0005303a 	rdctl	r2,status
    eeb0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eeb4:	e0fffd17 	ldw	r3,-12(fp)
    eeb8:	00bfff84 	movi	r2,-2
    eebc:	1884703a 	and	r2,r3,r2
    eec0:	1001703a 	wrctl	status,r2
  
  return context;
    eec4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
    eec8:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
    eecc:	008000b4 	movhi	r2,2
    eed0:	10addd04 	addi	r2,r2,-18572
    eed4:	10800017 	ldw	r2,0(r2)
    eed8:	10800b0b 	ldhu	r2,44(r2)
    eedc:	e0bfff0d 	sth	r2,-4(fp)
    eee0:	e0bffe17 	ldw	r2,-8(fp)
    eee4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eee8:	e0bffc17 	ldw	r2,-16(fp)
    eeec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
    eef0:	e0bfff0b 	ldhu	r2,-4(fp)
}
    eef4:	e037883a 	mov	sp,fp
    eef8:	df000017 	ldw	fp,0(sp)
    eefc:	dec00104 	addi	sp,sp,4
    ef00:	f800283a 	ret

0000ef04 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
    ef04:	deffed04 	addi	sp,sp,-76
    ef08:	dfc01215 	stw	ra,72(sp)
    ef0c:	df001115 	stw	fp,68(sp)
    ef10:	df001104 	addi	fp,sp,68
    ef14:	e13ff915 	stw	r4,-28(fp)
    ef18:	e1fffc15 	stw	r7,-16(fp)
    ef1c:	e17ffa0d 	sth	r5,-24(fp)
    ef20:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
    ef24:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    ef28:	e0bffc17 	ldw	r2,-16(fp)
    ef2c:	1004c03a 	cmpne	r2,r2,zero
    ef30:	1000021e 	bne	r2,zero,ef3c <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
    ef34:	e03fff15 	stw	zero,-4(fp)
    ef38:	0000d606 	br	f294 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
    ef3c:	e0bff917 	ldw	r2,-28(fp)
    ef40:	1004c03a 	cmpne	r2,r2,zero
    ef44:	1000051e 	bne	r2,zero,ef5c <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    ef48:	e0fffc17 	ldw	r3,-16(fp)
    ef4c:	00801b84 	movi	r2,110
    ef50:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
    ef54:	e03fff15 	stw	zero,-4(fp)
    ef58:	0000ce06 	br	f294 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
    ef5c:	e0bff917 	ldw	r2,-28(fp)
    ef60:	10800003 	ldbu	r2,0(r2)
    ef64:	10803fcc 	andi	r2,r2,255
    ef68:	10800160 	cmpeqi	r2,r2,5
    ef6c:	1000051e 	bne	r2,zero,ef84 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
    ef70:	e0fffc17 	ldw	r3,-16(fp)
    ef74:	00800044 	movi	r2,1
    ef78:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
    ef7c:	e03fff15 	stw	zero,-4(fp)
    ef80:	0000c406 	br	f294 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ef84:	0005303a 	rdctl	r2,status
    ef88:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ef8c:	e0fff417 	ldw	r3,-48(fp)
    ef90:	00bfff84 	movi	r2,-2
    ef94:	1884703a 	and	r2,r3,r2
    ef98:	1001703a 	wrctl	status,r2
  
  return context;
    ef9c:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    efa0:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
    efa4:	e0bffb03 	ldbu	r2,-20(fp)
    efa8:	e0bffe15 	stw	r2,-8(fp)
    efac:	e0fffe17 	ldw	r3,-8(fp)
    efb0:	1805003a 	cmpeq	r2,r3,zero
    efb4:	1000041e 	bne	r2,zero,efc8 <OSFlagPost+0xc4>
    efb8:	e0fffe17 	ldw	r3,-8(fp)
    efbc:	18800060 	cmpeqi	r2,r3,1
    efc0:	10000b1e 	bne	r2,zero,eff0 <OSFlagPost+0xec>
    efc4:	00001206 	br	f010 <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
    efc8:	e0bff917 	ldw	r2,-28(fp)
    efcc:	1080020b 	ldhu	r2,8(r2)
    efd0:	1007883a 	mov	r3,r2
    efd4:	e0bffa0b 	ldhu	r2,-24(fp)
    efd8:	0084303a 	nor	r2,zero,r2
    efdc:	1884703a 	and	r2,r3,r2
    efe0:	1007883a 	mov	r3,r2
    efe4:	e0bff917 	ldw	r2,-28(fp)
    efe8:	10c0020d 	sth	r3,8(r2)
             break;
    efec:	00001106 	br	f034 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
    eff0:	e0bff917 	ldw	r2,-28(fp)
    eff4:	10c0020b 	ldhu	r3,8(r2)
    eff8:	e0bffa0b 	ldhu	r2,-24(fp)
    effc:	1884b03a 	or	r2,r3,r2
    f000:	1007883a 	mov	r3,r2
    f004:	e0bff917 	ldw	r2,-28(fp)
    f008:	10c0020d 	sth	r3,8(r2)
             break;
    f00c:	00000906 	br	f034 <OSFlagPost+0x130>
    f010:	e0bff517 	ldw	r2,-44(fp)
    f014:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f018:	e0bff317 	ldw	r2,-52(fp)
    f01c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
    f020:	e0fffc17 	ldw	r3,-16(fp)
    f024:	00801c44 	movi	r2,113
    f028:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
    f02c:	e03fff15 	stw	zero,-4(fp)
    f030:	00009806 	br	f294 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    f034:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    f038:	e0bff917 	ldw	r2,-28(fp)
    f03c:	10800117 	ldw	r2,4(r2)
    f040:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    f044:	00007506 	br	f21c <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
    f048:	e0bff817 	ldw	r2,-32(fp)
    f04c:	10800483 	ldbu	r2,18(r2)
    f050:	10803fcc 	andi	r2,r2,255
    f054:	e0bffd15 	stw	r2,-12(fp)
    f058:	e0fffd17 	ldw	r3,-12(fp)
    f05c:	18800060 	cmpeqi	r2,r3,1
    f060:	10004d1e 	bne	r2,zero,f198 <OSFlagPost+0x294>
    f064:	e0fffd17 	ldw	r3,-12(fp)
    f068:	18800088 	cmpgei	r2,r3,2
    f06c:	1000041e 	bne	r2,zero,f080 <OSFlagPost+0x17c>
    f070:	e0fffd17 	ldw	r3,-12(fp)
    f074:	1805003a 	cmpeq	r2,r3,zero
    f078:	1000301e 	bne	r2,zero,f13c <OSFlagPost+0x238>
    f07c:	00005b06 	br	f1ec <OSFlagPost+0x2e8>
    f080:	e0fffd17 	ldw	r3,-12(fp)
    f084:	188000a0 	cmpeqi	r2,r3,2
    f088:	1000041e 	bne	r2,zero,f09c <OSFlagPost+0x198>
    f08c:	e0fffd17 	ldw	r3,-12(fp)
    f090:	188000e0 	cmpeqi	r2,r3,3
    f094:	1000161e 	bne	r2,zero,f0f0 <OSFlagPost+0x1ec>
    f098:	00005406 	br	f1ec <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    f09c:	e0bff917 	ldw	r2,-28(fp)
    f0a0:	10c0020b 	ldhu	r3,8(r2)
    f0a4:	e0bff817 	ldw	r2,-32(fp)
    f0a8:	1080040b 	ldhu	r2,16(r2)
    f0ac:	1884703a 	and	r2,r3,r2
    f0b0:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    f0b4:	e0bff817 	ldw	r2,-32(fp)
    f0b8:	1080040b 	ldhu	r2,16(r2)
    f0bc:	10ffffcc 	andi	r3,r2,65535
    f0c0:	e0bff68b 	ldhu	r2,-38(fp)
    f0c4:	1880521e 	bne	r3,r2,f210 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    f0c8:	e17ff68b 	ldhu	r5,-38(fp)
    f0cc:	e13ff817 	ldw	r4,-32(fp)
    f0d0:	000f6280 	call	f628 <OS_FlagTaskRdy>
    f0d4:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
    f0d8:	e0bff603 	ldbu	r2,-40(fp)
    f0dc:	10800058 	cmpnei	r2,r2,1
    f0e0:	10004b1e 	bne	r2,zero,f210 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    f0e4:	00800044 	movi	r2,1
    f0e8:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
    f0ec:	00004806 	br	f210 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    f0f0:	e0bff917 	ldw	r2,-28(fp)
    f0f4:	10c0020b 	ldhu	r3,8(r2)
    f0f8:	e0bff817 	ldw	r2,-32(fp)
    f0fc:	1080040b 	ldhu	r2,16(r2)
    f100:	1884703a 	and	r2,r3,r2
    f104:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    f108:	e0bff68b 	ldhu	r2,-38(fp)
    f10c:	1005003a 	cmpeq	r2,r2,zero
    f110:	10003f1e 	bne	r2,zero,f210 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    f114:	e17ff68b 	ldhu	r5,-38(fp)
    f118:	e13ff817 	ldw	r4,-32(fp)
    f11c:	000f6280 	call	f628 <OS_FlagTaskRdy>
    f120:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
    f124:	e0bff603 	ldbu	r2,-40(fp)
    f128:	10800058 	cmpnei	r2,r2,1
    f12c:	1000381e 	bne	r2,zero,f210 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    f130:	00800044 	movi	r2,1
    f134:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
    f138:	00003506 	br	f210 <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    f13c:	e0bff917 	ldw	r2,-28(fp)
    f140:	1080020b 	ldhu	r2,8(r2)
    f144:	0084303a 	nor	r2,zero,r2
    f148:	1007883a 	mov	r3,r2
    f14c:	e0bff817 	ldw	r2,-32(fp)
    f150:	1080040b 	ldhu	r2,16(r2)
    f154:	1884703a 	and	r2,r3,r2
    f158:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    f15c:	e0bff817 	ldw	r2,-32(fp)
    f160:	1080040b 	ldhu	r2,16(r2)
    f164:	10ffffcc 	andi	r3,r2,65535
    f168:	e0bff68b 	ldhu	r2,-38(fp)
    f16c:	1880281e 	bne	r3,r2,f210 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    f170:	e17ff68b 	ldhu	r5,-38(fp)
    f174:	e13ff817 	ldw	r4,-32(fp)
    f178:	000f6280 	call	f628 <OS_FlagTaskRdy>
    f17c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
    f180:	e0bff603 	ldbu	r2,-40(fp)
    f184:	10800058 	cmpnei	r2,r2,1
    f188:	1000211e 	bne	r2,zero,f210 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    f18c:	00800044 	movi	r2,1
    f190:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
    f194:	00001e06 	br	f210 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    f198:	e0bff917 	ldw	r2,-28(fp)
    f19c:	1080020b 	ldhu	r2,8(r2)
    f1a0:	0084303a 	nor	r2,zero,r2
    f1a4:	1007883a 	mov	r3,r2
    f1a8:	e0bff817 	ldw	r2,-32(fp)
    f1ac:	1080040b 	ldhu	r2,16(r2)
    f1b0:	1884703a 	and	r2,r3,r2
    f1b4:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    f1b8:	e0bff68b 	ldhu	r2,-38(fp)
    f1bc:	1005003a 	cmpeq	r2,r2,zero
    f1c0:	1000131e 	bne	r2,zero,f210 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    f1c4:	e17ff68b 	ldhu	r5,-38(fp)
    f1c8:	e13ff817 	ldw	r4,-32(fp)
    f1cc:	000f6280 	call	f628 <OS_FlagTaskRdy>
    f1d0:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
    f1d4:	e0bff603 	ldbu	r2,-40(fp)
    f1d8:	10800058 	cmpnei	r2,r2,1
    f1dc:	10000c1e 	bne	r2,zero,f210 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    f1e0:	00800044 	movi	r2,1
    f1e4:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
    f1e8:	00000906 	br	f210 <OSFlagPost+0x30c>
    f1ec:	e0bff517 	ldw	r2,-44(fp)
    f1f0:	e0bff215 	stw	r2,-56(fp)
    f1f4:	e0bff217 	ldw	r2,-56(fp)
    f1f8:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    f1fc:	e0fffc17 	ldw	r3,-16(fp)
    f200:	00801bc4 	movi	r2,111
    f204:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
    f208:	e03fff15 	stw	zero,-4(fp)
    f20c:	00002106 	br	f294 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    f210:	e0bff817 	ldw	r2,-32(fp)
    f214:	10800017 	ldw	r2,0(r2)
    f218:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    f21c:	e0bff817 	ldw	r2,-32(fp)
    f220:	1004c03a 	cmpne	r2,r2,zero
    f224:	103f881e 	bne	r2,zero,f048 <OSFlagPost+0x144>
    f228:	e0bff517 	ldw	r2,-44(fp)
    f22c:	e0bff115 	stw	r2,-60(fp)
    f230:	e0bff117 	ldw	r2,-60(fp)
    f234:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
    f238:	e0bff783 	ldbu	r2,-34(fp)
    f23c:	10800058 	cmpnei	r2,r2,1
    f240:	1000011e 	bne	r2,zero,f248 <OSFlagPost+0x344>
        OS_Sched();
    f244:	000d6340 	call	d634 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f248:	0005303a 	rdctl	r2,status
    f24c:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f250:	e0fff017 	ldw	r3,-64(fp)
    f254:	00bfff84 	movi	r2,-2
    f258:	1884703a 	and	r2,r3,r2
    f25c:	1001703a 	wrctl	status,r2
  
  return context;
    f260:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
    f264:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
    f268:	e0bff917 	ldw	r2,-28(fp)
    f26c:	1080020b 	ldhu	r2,8(r2)
    f270:	e0bff70d 	sth	r2,-36(fp)
    f274:	e0bff517 	ldw	r2,-44(fp)
    f278:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f27c:	e0bfef17 	ldw	r2,-68(fp)
    f280:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
    f284:	e0bffc17 	ldw	r2,-16(fp)
    f288:	10000005 	stb	zero,0(r2)
    return (flags_cur);
    f28c:	e0bff70b 	ldhu	r2,-36(fp)
    f290:	e0bfff15 	stw	r2,-4(fp)
    f294:	e0bfff17 	ldw	r2,-4(fp)
}
    f298:	e037883a 	mov	sp,fp
    f29c:	dfc00117 	ldw	ra,4(sp)
    f2a0:	df000017 	ldw	fp,0(sp)
    f2a4:	dec00204 	addi	sp,sp,8
    f2a8:	f800283a 	ret

0000f2ac <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
    f2ac:	defff804 	addi	sp,sp,-32
    f2b0:	df000715 	stw	fp,28(sp)
    f2b4:	df000704 	addi	fp,sp,28
    f2b8:	e13ffd15 	stw	r4,-12(fp)
    f2bc:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
    f2c0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
    f2c4:	e0bffe17 	ldw	r2,-8(fp)
    f2c8:	1004c03a 	cmpne	r2,r2,zero
    f2cc:	1000021e 	bne	r2,zero,f2d8 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
    f2d0:	e03fff15 	stw	zero,-4(fp)
    f2d4:	00002506 	br	f36c <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
    f2d8:	e0bffd17 	ldw	r2,-12(fp)
    f2dc:	1004c03a 	cmpne	r2,r2,zero
    f2e0:	1000051e 	bne	r2,zero,f2f8 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    f2e4:	e0fffe17 	ldw	r3,-8(fp)
    f2e8:	00801b84 	movi	r2,110
    f2ec:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
    f2f0:	e03fff15 	stw	zero,-4(fp)
    f2f4:	00001d06 	br	f36c <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
    f2f8:	e0bffd17 	ldw	r2,-12(fp)
    f2fc:	10800003 	ldbu	r2,0(r2)
    f300:	10803fcc 	andi	r2,r2,255
    f304:	10800160 	cmpeqi	r2,r2,5
    f308:	1000051e 	bne	r2,zero,f320 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
    f30c:	e0fffe17 	ldw	r3,-8(fp)
    f310:	00800044 	movi	r2,1
    f314:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
    f318:	e03fff15 	stw	zero,-4(fp)
    f31c:	00001306 	br	f36c <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f320:	0005303a 	rdctl	r2,status
    f324:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f328:	e0fffa17 	ldw	r3,-24(fp)
    f32c:	00bfff84 	movi	r2,-2
    f330:	1884703a 	and	r2,r3,r2
    f334:	1001703a 	wrctl	status,r2
  
  return context;
    f338:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    f33c:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
    f340:	e0bffd17 	ldw	r2,-12(fp)
    f344:	1080020b 	ldhu	r2,8(r2)
    f348:	e0bffc0d 	sth	r2,-16(fp)
    f34c:	e0bffb17 	ldw	r2,-20(fp)
    f350:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f354:	e0bff917 	ldw	r2,-28(fp)
    f358:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    f35c:	e0bffe17 	ldw	r2,-8(fp)
    f360:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
    f364:	e0bffc0b 	ldhu	r2,-16(fp)
    f368:	e0bfff15 	stw	r2,-4(fp)
    f36c:	e0bfff17 	ldw	r2,-4(fp)
}
    f370:	e037883a 	mov	sp,fp
    f374:	df000017 	ldw	fp,0(sp)
    f378:	dec00104 	addi	sp,sp,4
    f37c:	f800283a 	ret

0000f380 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
    f380:	defff804 	addi	sp,sp,-32
    f384:	df000715 	stw	fp,28(sp)
    f388:	df000704 	addi	fp,sp,28
    f38c:	e13ffb15 	stw	r4,-20(fp)
    f390:	e17ffc15 	stw	r5,-16(fp)
    f394:	e0800117 	ldw	r2,4(fp)
    f398:	e1bffd0d 	sth	r6,-12(fp)
    f39c:	e1fffe05 	stb	r7,-8(fp)
    f3a0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
    f3a4:	008000b4 	movhi	r2,2
    f3a8:	10addd04 	addi	r2,r2,-18572
    f3ac:	10c00017 	ldw	r3,0(r2)
    f3b0:	008000b4 	movhi	r2,2
    f3b4:	10addd04 	addi	r2,r2,-18572
    f3b8:	10800017 	ldw	r2,0(r2)
    f3bc:	10800c03 	ldbu	r2,48(r2)
    f3c0:	10800814 	ori	r2,r2,32
    f3c4:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
    f3c8:	008000b4 	movhi	r2,2
    f3cc:	10addd04 	addi	r2,r2,-18572
    f3d0:	10800017 	ldw	r2,0(r2)
    f3d4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
    f3d8:	008000b4 	movhi	r2,2
    f3dc:	10addd04 	addi	r2,r2,-18572
    f3e0:	10c00017 	ldw	r3,0(r2)
    f3e4:	e0bfff0b 	ldhu	r2,-4(fp)
    f3e8:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
    f3ec:	008000b4 	movhi	r2,2
    f3f0:	10addd04 	addi	r2,r2,-18572
    f3f4:	10c00017 	ldw	r3,0(r2)
    f3f8:	e0bffc17 	ldw	r2,-16(fp)
    f3fc:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    f400:	e0fffc17 	ldw	r3,-16(fp)
    f404:	e0bffd0b 	ldhu	r2,-12(fp)
    f408:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    f40c:	e0fffc17 	ldw	r3,-16(fp)
    f410:	e0bffe03 	ldbu	r2,-8(fp)
    f414:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
    f418:	008000b4 	movhi	r2,2
    f41c:	10addd04 	addi	r2,r2,-18572
    f420:	10c00017 	ldw	r3,0(r2)
    f424:	e0bffc17 	ldw	r2,-16(fp)
    f428:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
    f42c:	e0bffb17 	ldw	r2,-20(fp)
    f430:	10c00117 	ldw	r3,4(r2)
    f434:	e0bffc17 	ldw	r2,-16(fp)
    f438:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
    f43c:	e0bffc17 	ldw	r2,-16(fp)
    f440:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
    f444:	e0fffc17 	ldw	r3,-16(fp)
    f448:	e0bffb17 	ldw	r2,-20(fp)
    f44c:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    f450:	e0bffb17 	ldw	r2,-20(fp)
    f454:	10800117 	ldw	r2,4(r2)
    f458:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
    f45c:	e0bffa17 	ldw	r2,-24(fp)
    f460:	1005003a 	cmpeq	r2,r2,zero
    f464:	1000031e 	bne	r2,zero,f474 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
    f468:	e0fffa17 	ldw	r3,-24(fp)
    f46c:	e0bffc17 	ldw	r2,-16(fp)
    f470:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
    f474:	e0fffb17 	ldw	r3,-20(fp)
    f478:	e0bffc17 	ldw	r2,-16(fp)
    f47c:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
    f480:	008000b4 	movhi	r2,2
    f484:	10addd04 	addi	r2,r2,-18572
    f488:	10800017 	ldw	r2,0(r2)
    f48c:	10800d03 	ldbu	r2,52(r2)
    f490:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    f494:	e13ff903 	ldbu	r4,-28(fp)
    f498:	e0fff903 	ldbu	r3,-28(fp)
    f49c:	008000b4 	movhi	r2,2
    f4a0:	10adda44 	addi	r2,r2,-18583
    f4a4:	10c5883a 	add	r2,r2,r3
    f4a8:	10800003 	ldbu	r2,0(r2)
    f4ac:	1007883a 	mov	r3,r2
    f4b0:	008000b4 	movhi	r2,2
    f4b4:	10addd04 	addi	r2,r2,-18572
    f4b8:	10800017 	ldw	r2,0(r2)
    f4bc:	10800d43 	ldbu	r2,53(r2)
    f4c0:	0084303a 	nor	r2,zero,r2
    f4c4:	1884703a 	and	r2,r3,r2
    f4c8:	1007883a 	mov	r3,r2
    f4cc:	008000b4 	movhi	r2,2
    f4d0:	10adda44 	addi	r2,r2,-18583
    f4d4:	1105883a 	add	r2,r2,r4
    f4d8:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
    f4dc:	e0fff903 	ldbu	r3,-28(fp)
    f4e0:	008000b4 	movhi	r2,2
    f4e4:	10adda44 	addi	r2,r2,-18583
    f4e8:	10c5883a 	add	r2,r2,r3
    f4ec:	10800003 	ldbu	r2,0(r2)
    f4f0:	10803fcc 	andi	r2,r2,255
    f4f4:	1004c03a 	cmpne	r2,r2,zero
    f4f8:	10000e1e 	bne	r2,zero,f534 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    f4fc:	008000b4 	movhi	r2,2
    f500:	10addd04 	addi	r2,r2,-18572
    f504:	10800017 	ldw	r2,0(r2)
    f508:	10800d83 	ldbu	r2,54(r2)
    f50c:	0084303a 	nor	r2,zero,r2
    f510:	1007883a 	mov	r3,r2
    f514:	008000b4 	movhi	r2,2
    f518:	10adda04 	addi	r2,r2,-18584
    f51c:	10800003 	ldbu	r2,0(r2)
    f520:	1884703a 	and	r2,r3,r2
    f524:	1007883a 	mov	r3,r2
    f528:	008000b4 	movhi	r2,2
    f52c:	10adda04 	addi	r2,r2,-18584
    f530:	10c00005 	stb	r3,0(r2)
    }
}
    f534:	e037883a 	mov	sp,fp
    f538:	df000017 	ldw	fp,0(sp)
    f53c:	dec00104 	addi	sp,sp,4
    f540:	f800283a 	ret

0000f544 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
    f544:	defffb04 	addi	sp,sp,-20
    f548:	dfc00415 	stw	ra,16(sp)
    f54c:	df000315 	stw	fp,12(sp)
    f550:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    f554:	010000b4 	movhi	r4,2
    f558:	213e0804 	addi	r4,r4,-2016
    f55c:	0140dc04 	movi	r5,880
    f560:	000d5740 	call	d574 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
    f564:	008000b4 	movhi	r2,2
    f568:	10be0804 	addi	r2,r2,-2016
    f56c:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
    f570:	008000b4 	movhi	r2,2
    f574:	10be1304 	addi	r2,r2,-1972
    f578:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    f57c:	e03fff0d 	sth	zero,-4(fp)
    f580:	00001306 	br	f5d0 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    f584:	e0bffe17 	ldw	r2,-8(fp)
    f588:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
    f58c:	e0fffe17 	ldw	r3,-8(fp)
    f590:	e0bffd17 	ldw	r2,-12(fp)
    f594:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
    f598:	e0fffe17 	ldw	r3,-8(fp)
    f59c:	00800fc4 	movi	r2,63
    f5a0:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    f5a4:	e0bffe17 	ldw	r2,-8(fp)
    f5a8:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
    f5ac:	e0bffe17 	ldw	r2,-8(fp)
    f5b0:	10800b04 	addi	r2,r2,44
    f5b4:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
    f5b8:	e0bffd17 	ldw	r2,-12(fp)
    f5bc:	10800b04 	addi	r2,r2,44
    f5c0:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    f5c4:	e0bfff0b 	ldhu	r2,-4(fp)
    f5c8:	10800044 	addi	r2,r2,1
    f5cc:	e0bfff0d 	sth	r2,-4(fp)
    f5d0:	e0bfff0b 	ldhu	r2,-4(fp)
    f5d4:	108004f0 	cmpltui	r2,r2,19
    f5d8:	103fea1e 	bne	r2,zero,f584 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    f5dc:	e0bffe17 	ldw	r2,-8(fp)
    f5e0:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
    f5e4:	e0bffe17 	ldw	r2,-8(fp)
    f5e8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    f5ec:	e0fffe17 	ldw	r3,-8(fp)
    f5f0:	00800fc4 	movi	r2,63
    f5f4:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    f5f8:	e0bffe17 	ldw	r2,-8(fp)
    f5fc:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
    f600:	00c000b4 	movhi	r3,2
    f604:	18eddf04 	addi	r3,r3,-18564
    f608:	008000b4 	movhi	r2,2
    f60c:	10be0804 	addi	r2,r2,-2016
    f610:	18800015 	stw	r2,0(r3)
#endif
}
    f614:	e037883a 	mov	sp,fp
    f618:	dfc00117 	ldw	ra,4(sp)
    f61c:	df000017 	ldw	fp,0(sp)
    f620:	dec00204 	addi	sp,sp,8
    f624:	f800283a 	ret

0000f628 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
    f628:	defffa04 	addi	sp,sp,-24
    f62c:	dfc00515 	stw	ra,20(sp)
    f630:	df000415 	stw	fp,16(sp)
    f634:	df000404 	addi	fp,sp,16
    f638:	e13ffe15 	stw	r4,-8(fp)
    f63c:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    f640:	e0bffe17 	ldw	r2,-8(fp)
    f644:	10800217 	ldw	r2,8(r2)
    f648:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
    f64c:	e0bffd17 	ldw	r2,-12(fp)
    f650:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    f654:	e0fffd17 	ldw	r3,-12(fp)
    f658:	e0bfff0b 	ldhu	r2,-4(fp)
    f65c:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    f660:	e0bffd17 	ldw	r2,-12(fp)
    f664:	10c00c03 	ldbu	r3,48(r2)
    f668:	00bff7c4 	movi	r2,-33
    f66c:	1884703a 	and	r2,r3,r2
    f670:	1007883a 	mov	r3,r2
    f674:	e0bffd17 	ldw	r2,-12(fp)
    f678:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    f67c:	e0bffd17 	ldw	r2,-12(fp)
    f680:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
    f684:	e0bffd17 	ldw	r2,-12(fp)
    f688:	10800c03 	ldbu	r2,48(r2)
    f68c:	10803fcc 	andi	r2,r2,255
    f690:	1004c03a 	cmpne	r2,r2,zero
    f694:	10001f1e 	bne	r2,zero,f714 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
    f698:	e0bffd17 	ldw	r2,-12(fp)
    f69c:	10c00d83 	ldbu	r3,54(r2)
    f6a0:	008000b4 	movhi	r2,2
    f6a4:	10adda04 	addi	r2,r2,-18584
    f6a8:	10800003 	ldbu	r2,0(r2)
    f6ac:	1884b03a 	or	r2,r3,r2
    f6b0:	1007883a 	mov	r3,r2
    f6b4:	008000b4 	movhi	r2,2
    f6b8:	10adda04 	addi	r2,r2,-18584
    f6bc:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    f6c0:	e0bffd17 	ldw	r2,-12(fp)
    f6c4:	10800d03 	ldbu	r2,52(r2)
    f6c8:	11003fcc 	andi	r4,r2,255
    f6cc:	e0bffd17 	ldw	r2,-12(fp)
    f6d0:	10800d03 	ldbu	r2,52(r2)
    f6d4:	10c03fcc 	andi	r3,r2,255
    f6d8:	008000b4 	movhi	r2,2
    f6dc:	10adda44 	addi	r2,r2,-18583
    f6e0:	10c5883a 	add	r2,r2,r3
    f6e4:	10c00003 	ldbu	r3,0(r2)
    f6e8:	e0bffd17 	ldw	r2,-12(fp)
    f6ec:	10800d43 	ldbu	r2,53(r2)
    f6f0:	1884b03a 	or	r2,r3,r2
    f6f4:	1007883a 	mov	r3,r2
    f6f8:	008000b4 	movhi	r2,2
    f6fc:	10adda44 	addi	r2,r2,-18583
    f700:	1105883a 	add	r2,r2,r4
    f704:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
    f708:	00800044 	movi	r2,1
    f70c:	e0bffc05 	stb	r2,-16(fp)
    f710:	00000106 	br	f718 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
    f714:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
    f718:	e13ffe17 	ldw	r4,-8(fp)
    f71c:	000f7380 	call	f738 <OS_FlagUnlink>
    return (sched);
    f720:	e0bffc03 	ldbu	r2,-16(fp)
}
    f724:	e037883a 	mov	sp,fp
    f728:	dfc00117 	ldw	ra,4(sp)
    f72c:	df000017 	ldw	fp,0(sp)
    f730:	dec00204 	addi	sp,sp,8
    f734:	f800283a 	ret

0000f738 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
    f738:	defffa04 	addi	sp,sp,-24
    f73c:	df000515 	stw	fp,20(sp)
    f740:	df000504 	addi	fp,sp,20
    f744:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
    f748:	e0bfff17 	ldw	r2,-4(fp)
    f74c:	10800117 	ldw	r2,4(r2)
    f750:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    f754:	e0bfff17 	ldw	r2,-4(fp)
    f758:	10800017 	ldw	r2,0(r2)
    f75c:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
    f760:	e0bffc17 	ldw	r2,-16(fp)
    f764:	1004c03a 	cmpne	r2,r2,zero
    f768:	10000c1e 	bne	r2,zero,f79c <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
    f76c:	e0bfff17 	ldw	r2,-4(fp)
    f770:	10800317 	ldw	r2,12(r2)
    f774:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
    f778:	e0fffd17 	ldw	r3,-12(fp)
    f77c:	e0bffb17 	ldw	r2,-20(fp)
    f780:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
    f784:	e0bffb17 	ldw	r2,-20(fp)
    f788:	1005003a 	cmpeq	r2,r2,zero
    f78c:	10000c1e 	bne	r2,zero,f7c0 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
    f790:	e0bffb17 	ldw	r2,-20(fp)
    f794:	10000115 	stw	zero,4(r2)
    f798:	00000906 	br	f7c0 <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
    f79c:	e0fffc17 	ldw	r3,-16(fp)
    f7a0:	e0bffb17 	ldw	r2,-20(fp)
    f7a4:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
    f7a8:	e0bffb17 	ldw	r2,-20(fp)
    f7ac:	1005003a 	cmpeq	r2,r2,zero
    f7b0:	1000031e 	bne	r2,zero,f7c0 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
    f7b4:	e0fffb17 	ldw	r3,-20(fp)
    f7b8:	e0bffc17 	ldw	r2,-16(fp)
    f7bc:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
    f7c0:	e0bfff17 	ldw	r2,-4(fp)
    f7c4:	10800217 	ldw	r2,8(r2)
    f7c8:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
    f7cc:	e0bffe17 	ldw	r2,-8(fp)
    f7d0:	10000a15 	stw	zero,40(r2)
#endif
}
    f7d4:	e037883a 	mov	sp,fp
    f7d8:	df000017 	ldw	fp,0(sp)
    f7dc:	dec00104 	addi	sp,sp,4
    f7e0:	f800283a 	ret

0000f7e4 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
    f7e4:	defff304 	addi	sp,sp,-52
    f7e8:	df000c15 	stw	fp,48(sp)
    f7ec:	df000c04 	addi	fp,sp,48
    f7f0:	e13ffb15 	stw	r4,-20(fp)
    f7f4:	e17ffc15 	stw	r5,-16(fp)
    f7f8:	e1bffd15 	stw	r6,-12(fp)
    f7fc:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    f800:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    f804:	e0bffe17 	ldw	r2,-8(fp)
    f808:	1004c03a 	cmpne	r2,r2,zero
    f80c:	1000021e 	bne	r2,zero,f818 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
    f810:	e03fff15 	stw	zero,-4(fp)
    f814:	00007506 	br	f9ec <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
    f818:	e0bffb17 	ldw	r2,-20(fp)
    f81c:	1004c03a 	cmpne	r2,r2,zero
    f820:	1000051e 	bne	r2,zero,f838 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    f824:	e0fffe17 	ldw	r3,-8(fp)
    f828:	00801884 	movi	r2,98
    f82c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
    f830:	e03fff15 	stw	zero,-4(fp)
    f834:	00006d06 	br	f9ec <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
    f838:	e0bffb17 	ldw	r2,-20(fp)
    f83c:	108000cc 	andi	r2,r2,3
    f840:	1005003a 	cmpeq	r2,r2,zero
    f844:	1000051e 	bne	r2,zero,f85c <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    f848:	e0fffe17 	ldw	r3,-8(fp)
    f84c:	00801884 	movi	r2,98
    f850:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
    f854:	e03fff15 	stw	zero,-4(fp)
    f858:	00006406 	br	f9ec <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
    f85c:	e0bffc17 	ldw	r2,-16(fp)
    f860:	108000a8 	cmpgeui	r2,r2,2
    f864:	1000051e 	bne	r2,zero,f87c <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
    f868:	e0fffe17 	ldw	r3,-8(fp)
    f86c:	008016c4 	movi	r2,91
    f870:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
    f874:	e03fff15 	stw	zero,-4(fp)
    f878:	00005c06 	br	f9ec <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
    f87c:	e0bffd17 	ldw	r2,-12(fp)
    f880:	10800128 	cmpgeui	r2,r2,4
    f884:	1000051e 	bne	r2,zero,f89c <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
    f888:	e0fffe17 	ldw	r3,-8(fp)
    f88c:	00801704 	movi	r2,92
    f890:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
    f894:	e03fff15 	stw	zero,-4(fp)
    f898:	00005406 	br	f9ec <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f89c:	0005303a 	rdctl	r2,status
    f8a0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f8a4:	e0fff517 	ldw	r3,-44(fp)
    f8a8:	00bfff84 	movi	r2,-2
    f8ac:	1884703a 	and	r2,r3,r2
    f8b0:	1001703a 	wrctl	status,r2
  
  return context;
    f8b4:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    f8b8:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
    f8bc:	008000b4 	movhi	r2,2
    f8c0:	10add704 	addi	r2,r2,-18596
    f8c4:	10800017 	ldw	r2,0(r2)
    f8c8:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
    f8cc:	008000b4 	movhi	r2,2
    f8d0:	10add704 	addi	r2,r2,-18596
    f8d4:	10800017 	ldw	r2,0(r2)
    f8d8:	1005003a 	cmpeq	r2,r2,zero
    f8dc:	1000081e 	bne	r2,zero,f900 <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
    f8e0:	008000b4 	movhi	r2,2
    f8e4:	10add704 	addi	r2,r2,-18596
    f8e8:	10800017 	ldw	r2,0(r2)
    f8ec:	10800117 	ldw	r2,4(r2)
    f8f0:	1007883a 	mov	r3,r2
    f8f4:	008000b4 	movhi	r2,2
    f8f8:	10add704 	addi	r2,r2,-18596
    f8fc:	10c00015 	stw	r3,0(r2)
    f900:	e0bff617 	ldw	r2,-40(fp)
    f904:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f908:	e0bff417 	ldw	r2,-48(fp)
    f90c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
    f910:	e0bffa17 	ldw	r2,-24(fp)
    f914:	1004c03a 	cmpne	r2,r2,zero
    f918:	1000051e 	bne	r2,zero,f930 <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
    f91c:	e0fffe17 	ldw	r3,-8(fp)
    f920:	00801684 	movi	r2,90
    f924:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
    f928:	e03fff15 	stw	zero,-4(fp)
    f92c:	00002f06 	br	f9ec <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    f930:	e0bffb17 	ldw	r2,-20(fp)
    f934:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
    f938:	e0bffb17 	ldw	r2,-20(fp)
    f93c:	1007883a 	mov	r3,r2
    f940:	e0bffd17 	ldw	r2,-12(fp)
    f944:	1885883a 	add	r2,r3,r2
    f948:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
    f94c:	e03ff715 	stw	zero,-36(fp)
    f950:	00000d06 	br	f988 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
    f954:	e0fff817 	ldw	r3,-32(fp)
    f958:	e0bff917 	ldw	r2,-28(fp)
    f95c:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
    f960:	e0bff917 	ldw	r2,-28(fp)
    f964:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    f968:	e0bff917 	ldw	r2,-28(fp)
    f96c:	1007883a 	mov	r3,r2
    f970:	e0bffd17 	ldw	r2,-12(fp)
    f974:	1885883a 	add	r2,r3,r2
    f978:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
    f97c:	e0bff717 	ldw	r2,-36(fp)
    f980:	10800044 	addi	r2,r2,1
    f984:	e0bff715 	stw	r2,-36(fp)
    f988:	e0bffc17 	ldw	r2,-16(fp)
    f98c:	10ffffc4 	addi	r3,r2,-1
    f990:	e0bff717 	ldw	r2,-36(fp)
    f994:	10ffef36 	bltu	r2,r3,f954 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
    f998:	e0bff817 	ldw	r2,-32(fp)
    f99c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
    f9a0:	e0fffa17 	ldw	r3,-24(fp)
    f9a4:	e0bffb17 	ldw	r2,-20(fp)
    f9a8:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
    f9ac:	e0fffa17 	ldw	r3,-24(fp)
    f9b0:	e0bffb17 	ldw	r2,-20(fp)
    f9b4:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
    f9b8:	e0fffa17 	ldw	r3,-24(fp)
    f9bc:	e0bffc17 	ldw	r2,-16(fp)
    f9c0:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
    f9c4:	e0fffa17 	ldw	r3,-24(fp)
    f9c8:	e0bffc17 	ldw	r2,-16(fp)
    f9cc:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
    f9d0:	e0fffa17 	ldw	r3,-24(fp)
    f9d4:	e0bffd17 	ldw	r2,-12(fp)
    f9d8:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
    f9dc:	e0bffe17 	ldw	r2,-8(fp)
    f9e0:	10000005 	stb	zero,0(r2)
    return (pmem);
    f9e4:	e0bffa17 	ldw	r2,-24(fp)
    f9e8:	e0bfff15 	stw	r2,-4(fp)
    f9ec:	e0bfff17 	ldw	r2,-4(fp)
}
    f9f0:	e037883a 	mov	sp,fp
    f9f4:	df000017 	ldw	fp,0(sp)
    f9f8:	dec00104 	addi	sp,sp,4
    f9fc:	f800283a 	ret

0000fa00 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
    fa00:	defff704 	addi	sp,sp,-36
    fa04:	df000815 	stw	fp,32(sp)
    fa08:	df000804 	addi	fp,sp,32
    fa0c:	e13ffd15 	stw	r4,-12(fp)
    fa10:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    fa14:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    fa18:	e0bffe17 	ldw	r2,-8(fp)
    fa1c:	1004c03a 	cmpne	r2,r2,zero
    fa20:	1000021e 	bne	r2,zero,fa2c <OSMemGet+0x2c>
        return ((void *)0);
    fa24:	e03fff15 	stw	zero,-4(fp)
    fa28:	00003106 	br	faf0 <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
    fa2c:	e0bffd17 	ldw	r2,-12(fp)
    fa30:	1004c03a 	cmpne	r2,r2,zero
    fa34:	1000051e 	bne	r2,zero,fa4c <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    fa38:	e0fffe17 	ldw	r3,-8(fp)
    fa3c:	00801804 	movi	r2,96
    fa40:	18800005 	stb	r2,0(r3)
        return ((void *)0);
    fa44:	e03fff15 	stw	zero,-4(fp)
    fa48:	00002906 	br	faf0 <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fa4c:	0005303a 	rdctl	r2,status
    fa50:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fa54:	e0fffa17 	ldw	r3,-24(fp)
    fa58:	00bfff84 	movi	r2,-2
    fa5c:	1884703a 	and	r2,r3,r2
    fa60:	1001703a 	wrctl	status,r2
  
  return context;
    fa64:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    fa68:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
    fa6c:	e0bffd17 	ldw	r2,-12(fp)
    fa70:	10800417 	ldw	r2,16(r2)
    fa74:	1005003a 	cmpeq	r2,r2,zero
    fa78:	1000151e 	bne	r2,zero,fad0 <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
    fa7c:	e0bffd17 	ldw	r2,-12(fp)
    fa80:	10800117 	ldw	r2,4(r2)
    fa84:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
    fa88:	e0bffc17 	ldw	r2,-16(fp)
    fa8c:	10c00017 	ldw	r3,0(r2)
    fa90:	e0bffd17 	ldw	r2,-12(fp)
    fa94:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
    fa98:	e0bffd17 	ldw	r2,-12(fp)
    fa9c:	10800417 	ldw	r2,16(r2)
    faa0:	10ffffc4 	addi	r3,r2,-1
    faa4:	e0bffd17 	ldw	r2,-12(fp)
    faa8:	10c00415 	stw	r3,16(r2)
    faac:	e0bffb17 	ldw	r2,-20(fp)
    fab0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fab4:	e0bff917 	ldw	r2,-28(fp)
    fab8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
    fabc:	e0bffe17 	ldw	r2,-8(fp)
    fac0:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
    fac4:	e0bffc17 	ldw	r2,-16(fp)
    fac8:	e0bfff15 	stw	r2,-4(fp)
    facc:	00000806 	br	faf0 <OSMemGet+0xf0>
    fad0:	e0bffb17 	ldw	r2,-20(fp)
    fad4:	e0bff815 	stw	r2,-32(fp)
    fad8:	e0bff817 	ldw	r2,-32(fp)
    fadc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
    fae0:	e0fffe17 	ldw	r3,-8(fp)
    fae4:	00801744 	movi	r2,93
    fae8:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
    faec:	e03fff15 	stw	zero,-4(fp)
    faf0:	e0bfff17 	ldw	r2,-4(fp)
}
    faf4:	e037883a 	mov	sp,fp
    faf8:	df000017 	ldw	fp,0(sp)
    fafc:	dec00104 	addi	sp,sp,4
    fb00:	f800283a 	ret

0000fb04 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    fb04:	defff604 	addi	sp,sp,-40
    fb08:	dfc00915 	stw	ra,36(sp)
    fb0c:	df000815 	stw	fp,32(sp)
    fb10:	df000804 	addi	fp,sp,32
    fb14:	e13ffc15 	stw	r4,-16(fp)
    fb18:	e17ffd15 	stw	r5,-12(fp)
    fb1c:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    fb20:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    fb24:	e0bffe17 	ldw	r2,-8(fp)
    fb28:	1004c03a 	cmpne	r2,r2,zero
    fb2c:	1000021e 	bne	r2,zero,fb38 <OSMemNameGet+0x34>
        return (0);
    fb30:	e03fff15 	stw	zero,-4(fp)
    fb34:	00003006 	br	fbf8 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    fb38:	e0bffc17 	ldw	r2,-16(fp)
    fb3c:	1004c03a 	cmpne	r2,r2,zero
    fb40:	1000051e 	bne	r2,zero,fb58 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    fb44:	e0fffe17 	ldw	r3,-8(fp)
    fb48:	00801804 	movi	r2,96
    fb4c:	18800005 	stb	r2,0(r3)
        return (0);
    fb50:	e03fff15 	stw	zero,-4(fp)
    fb54:	00002806 	br	fbf8 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    fb58:	e0bffd17 	ldw	r2,-12(fp)
    fb5c:	1004c03a 	cmpne	r2,r2,zero
    fb60:	1000051e 	bne	r2,zero,fb78 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
    fb64:	e0fffe17 	ldw	r3,-8(fp)
    fb68:	00800304 	movi	r2,12
    fb6c:	18800005 	stb	r2,0(r3)
        return (0);
    fb70:	e03fff15 	stw	zero,-4(fp)
    fb74:	00002006 	br	fbf8 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    fb78:	008000b4 	movhi	r2,2
    fb7c:	10addc04 	addi	r2,r2,-18576
    fb80:	10800003 	ldbu	r2,0(r2)
    fb84:	10803fcc 	andi	r2,r2,255
    fb88:	1005003a 	cmpeq	r2,r2,zero
    fb8c:	1000051e 	bne	r2,zero,fba4 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
    fb90:	e0fffe17 	ldw	r3,-8(fp)
    fb94:	00800444 	movi	r2,17
    fb98:	18800005 	stb	r2,0(r3)
        return (0);
    fb9c:	e03fff15 	stw	zero,-4(fp)
    fba0:	00001506 	br	fbf8 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fba4:	0005303a 	rdctl	r2,status
    fba8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fbac:	e0fff917 	ldw	r3,-28(fp)
    fbb0:	00bfff84 	movi	r2,-2
    fbb4:	1884703a 	and	r2,r3,r2
    fbb8:	1001703a 	wrctl	status,r2
  
  return context;
    fbbc:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
    fbc0:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
    fbc4:	e0bffc17 	ldw	r2,-16(fp)
    fbc8:	11400504 	addi	r5,r2,20
    fbcc:	e13ffd17 	ldw	r4,-12(fp)
    fbd0:	000d7780 	call	d778 <OS_StrCopy>
    fbd4:	e0bffb05 	stb	r2,-20(fp)
    fbd8:	e0bffa17 	ldw	r2,-24(fp)
    fbdc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fbe0:	e0bff817 	ldw	r2,-32(fp)
    fbe4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    fbe8:	e0bffe17 	ldw	r2,-8(fp)
    fbec:	10000005 	stb	zero,0(r2)
    return (len);
    fbf0:	e0bffb03 	ldbu	r2,-20(fp)
    fbf4:	e0bfff15 	stw	r2,-4(fp)
    fbf8:	e0bfff17 	ldw	r2,-4(fp)
}
    fbfc:	e037883a 	mov	sp,fp
    fc00:	dfc00117 	ldw	ra,4(sp)
    fc04:	df000017 	ldw	fp,0(sp)
    fc08:	dec00204 	addi	sp,sp,8
    fc0c:	f800283a 	ret

0000fc10 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    fc10:	defff604 	addi	sp,sp,-40
    fc14:	dfc00915 	stw	ra,36(sp)
    fc18:	df000815 	stw	fp,32(sp)
    fc1c:	df000804 	addi	fp,sp,32
    fc20:	e13ffd15 	stw	r4,-12(fp)
    fc24:	e17ffe15 	stw	r5,-8(fp)
    fc28:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    fc2c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    fc30:	e0bfff17 	ldw	r2,-4(fp)
    fc34:	1005003a 	cmpeq	r2,r2,zero
    fc38:	1000381e 	bne	r2,zero,fd1c <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    fc3c:	e0bffd17 	ldw	r2,-12(fp)
    fc40:	1004c03a 	cmpne	r2,r2,zero
    fc44:	1000041e 	bne	r2,zero,fc58 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    fc48:	e0ffff17 	ldw	r3,-4(fp)
    fc4c:	00801804 	movi	r2,96
    fc50:	18800005 	stb	r2,0(r3)
        return;
    fc54:	00003106 	br	fd1c <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    fc58:	e0bffe17 	ldw	r2,-8(fp)
    fc5c:	1004c03a 	cmpne	r2,r2,zero
    fc60:	1000041e 	bne	r2,zero,fc74 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
    fc64:	e0ffff17 	ldw	r3,-4(fp)
    fc68:	00800304 	movi	r2,12
    fc6c:	18800005 	stb	r2,0(r3)
        return;
    fc70:	00002a06 	br	fd1c <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    fc74:	008000b4 	movhi	r2,2
    fc78:	10addc04 	addi	r2,r2,-18576
    fc7c:	10800003 	ldbu	r2,0(r2)
    fc80:	10803fcc 	andi	r2,r2,255
    fc84:	1005003a 	cmpeq	r2,r2,zero
    fc88:	1000041e 	bne	r2,zero,fc9c <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
    fc8c:	e0ffff17 	ldw	r3,-4(fp)
    fc90:	00800484 	movi	r2,18
    fc94:	18800005 	stb	r2,0(r3)
        return;
    fc98:	00002006 	br	fd1c <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fc9c:	0005303a 	rdctl	r2,status
    fca0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fca4:	e0fffa17 	ldw	r3,-24(fp)
    fca8:	00bfff84 	movi	r2,-2
    fcac:	1884703a 	and	r2,r3,r2
    fcb0:	1001703a 	wrctl	status,r2
  
  return context;
    fcb4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    fcb8:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    fcbc:	e13ffe17 	ldw	r4,-8(fp)
    fcc0:	000d7f80 	call	d7f8 <OS_StrLen>
    fcc4:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
    fcc8:	e0bffc03 	ldbu	r2,-16(fp)
    fccc:	10800830 	cmpltui	r2,r2,32
    fcd0:	1000081e 	bne	r2,zero,fcf4 <OSMemNameSet+0xe4>
    fcd4:	e0bffb17 	ldw	r2,-20(fp)
    fcd8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fcdc:	e0bff917 	ldw	r2,-28(fp)
    fce0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
    fce4:	e0ffff17 	ldw	r3,-4(fp)
    fce8:	008018c4 	movi	r2,99
    fcec:	18800005 	stb	r2,0(r3)
        return;
    fcf0:	00000a06 	br	fd1c <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    fcf4:	e0bffd17 	ldw	r2,-12(fp)
    fcf8:	11000504 	addi	r4,r2,20
    fcfc:	e17ffe17 	ldw	r5,-8(fp)
    fd00:	000d7780 	call	d778 <OS_StrCopy>
    fd04:	e0bffb17 	ldw	r2,-20(fp)
    fd08:	e0bff815 	stw	r2,-32(fp)
    fd0c:	e0bff817 	ldw	r2,-32(fp)
    fd10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    fd14:	e0bfff17 	ldw	r2,-4(fp)
    fd18:	10000005 	stb	zero,0(r2)
}
    fd1c:	e037883a 	mov	sp,fp
    fd20:	dfc00117 	ldw	ra,4(sp)
    fd24:	df000017 	ldw	fp,0(sp)
    fd28:	dec00204 	addi	sp,sp,8
    fd2c:	f800283a 	ret

0000fd30 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
    fd30:	defff804 	addi	sp,sp,-32
    fd34:	df000715 	stw	fp,28(sp)
    fd38:	df000704 	addi	fp,sp,28
    fd3c:	e13ffd15 	stw	r4,-12(fp)
    fd40:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    fd44:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    fd48:	e0bffd17 	ldw	r2,-12(fp)
    fd4c:	1004c03a 	cmpne	r2,r2,zero
    fd50:	1000031e 	bne	r2,zero,fd60 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
    fd54:	00801804 	movi	r2,96
    fd58:	e0bfff15 	stw	r2,-4(fp)
    fd5c:	00002b06 	br	fe0c <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
    fd60:	e0bffe17 	ldw	r2,-8(fp)
    fd64:	1004c03a 	cmpne	r2,r2,zero
    fd68:	1000031e 	bne	r2,zero,fd78 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
    fd6c:	008017c4 	movi	r2,95
    fd70:	e0bfff15 	stw	r2,-4(fp)
    fd74:	00002506 	br	fe0c <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fd78:	0005303a 	rdctl	r2,status
    fd7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fd80:	e0fffb17 	ldw	r3,-20(fp)
    fd84:	00bfff84 	movi	r2,-2
    fd88:	1884703a 	and	r2,r3,r2
    fd8c:	1001703a 	wrctl	status,r2
  
  return context;
    fd90:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    fd94:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
    fd98:	e0bffd17 	ldw	r2,-12(fp)
    fd9c:	10c00417 	ldw	r3,16(r2)
    fda0:	e0bffd17 	ldw	r2,-12(fp)
    fda4:	10800317 	ldw	r2,12(r2)
    fda8:	18800736 	bltu	r3,r2,fdc8 <OSMemPut+0x98>
    fdac:	e0bffc17 	ldw	r2,-16(fp)
    fdb0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fdb4:	e0bffa17 	ldw	r2,-24(fp)
    fdb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
    fdbc:	00801784 	movi	r2,94
    fdc0:	e0bfff15 	stw	r2,-4(fp)
    fdc4:	00001106 	br	fe0c <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
    fdc8:	e0fffe17 	ldw	r3,-8(fp)
    fdcc:	e0bffd17 	ldw	r2,-12(fp)
    fdd0:	10800117 	ldw	r2,4(r2)
    fdd4:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
    fdd8:	e0fffd17 	ldw	r3,-12(fp)
    fddc:	e0bffe17 	ldw	r2,-8(fp)
    fde0:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
    fde4:	e0bffd17 	ldw	r2,-12(fp)
    fde8:	10800417 	ldw	r2,16(r2)
    fdec:	10c00044 	addi	r3,r2,1
    fdf0:	e0bffd17 	ldw	r2,-12(fp)
    fdf4:	10c00415 	stw	r3,16(r2)
    fdf8:	e0bffc17 	ldw	r2,-16(fp)
    fdfc:	e0bff915 	stw	r2,-28(fp)
    fe00:	e0bff917 	ldw	r2,-28(fp)
    fe04:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
    fe08:	e03fff15 	stw	zero,-4(fp)
    fe0c:	e0bfff17 	ldw	r2,-4(fp)
}
    fe10:	e037883a 	mov	sp,fp
    fe14:	df000017 	ldw	fp,0(sp)
    fe18:	dec00104 	addi	sp,sp,4
    fe1c:	f800283a 	ret

0000fe20 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
    fe20:	defff904 	addi	sp,sp,-28
    fe24:	df000615 	stw	fp,24(sp)
    fe28:	df000604 	addi	fp,sp,24
    fe2c:	e13ffd15 	stw	r4,-12(fp)
    fe30:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    fe34:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    fe38:	e0bffd17 	ldw	r2,-12(fp)
    fe3c:	1004c03a 	cmpne	r2,r2,zero
    fe40:	1000031e 	bne	r2,zero,fe50 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
    fe44:	00801804 	movi	r2,96
    fe48:	e0bfff15 	stw	r2,-4(fp)
    fe4c:	00002e06 	br	ff08 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
    fe50:	e0bffe17 	ldw	r2,-8(fp)
    fe54:	1004c03a 	cmpne	r2,r2,zero
    fe58:	1000031e 	bne	r2,zero,fe68 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
    fe5c:	00801844 	movi	r2,97
    fe60:	e0bfff15 	stw	r2,-4(fp)
    fe64:	00002806 	br	ff08 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fe68:	0005303a 	rdctl	r2,status
    fe6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fe70:	e0fffb17 	ldw	r3,-20(fp)
    fe74:	00bfff84 	movi	r2,-2
    fe78:	1884703a 	and	r2,r3,r2
    fe7c:	1001703a 	wrctl	status,r2
  
  return context;
    fe80:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    fe84:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
    fe88:	e0bffd17 	ldw	r2,-12(fp)
    fe8c:	10c00017 	ldw	r3,0(r2)
    fe90:	e0bffe17 	ldw	r2,-8(fp)
    fe94:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
    fe98:	e0bffd17 	ldw	r2,-12(fp)
    fe9c:	10c00117 	ldw	r3,4(r2)
    fea0:	e0bffe17 	ldw	r2,-8(fp)
    fea4:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
    fea8:	e0bffd17 	ldw	r2,-12(fp)
    feac:	10c00217 	ldw	r3,8(r2)
    feb0:	e0bffe17 	ldw	r2,-8(fp)
    feb4:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
    feb8:	e0bffd17 	ldw	r2,-12(fp)
    febc:	10c00317 	ldw	r3,12(r2)
    fec0:	e0bffe17 	ldw	r2,-8(fp)
    fec4:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
    fec8:	e0bffd17 	ldw	r2,-12(fp)
    fecc:	10c00417 	ldw	r3,16(r2)
    fed0:	e0bffe17 	ldw	r2,-8(fp)
    fed4:	10c00415 	stw	r3,16(r2)
    fed8:	e0bffc17 	ldw	r2,-16(fp)
    fedc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fee0:	e0bffa17 	ldw	r2,-24(fp)
    fee4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
    fee8:	e0bffe17 	ldw	r2,-8(fp)
    feec:	10c00317 	ldw	r3,12(r2)
    fef0:	e0bffe17 	ldw	r2,-8(fp)
    fef4:	10800417 	ldw	r2,16(r2)
    fef8:	1887c83a 	sub	r3,r3,r2
    fefc:	e0bffe17 	ldw	r2,-8(fp)
    ff00:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
    ff04:	e03fff15 	stw	zero,-4(fp)
    ff08:	e0bfff17 	ldw	r2,-4(fp)
}
    ff0c:	e037883a 	mov	sp,fp
    ff10:	df000017 	ldw	fp,0(sp)
    ff14:	dec00104 	addi	sp,sp,4
    ff18:	f800283a 	ret

0000ff1c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
    ff1c:	defffc04 	addi	sp,sp,-16
    ff20:	dfc00315 	stw	ra,12(sp)
    ff24:	df000215 	stw	fp,8(sp)
    ff28:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    ff2c:	010000b4 	movhi	r4,2
    ff30:	213ee404 	addi	r4,r4,-1136
    ff34:	01430c04 	movi	r5,3120
    ff38:	000d5740 	call	d574 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    ff3c:	008000b4 	movhi	r2,2
    ff40:	10bee404 	addi	r2,r2,-1136
    ff44:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    ff48:	e03ffe0d 	sth	zero,-8(fp)
    ff4c:	00001306 	br	ff9c <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
    ff50:	e0bffe0b 	ldhu	r2,-8(fp)
    ff54:	10800d24 	muli	r2,r2,52
    ff58:	1007883a 	mov	r3,r2
    ff5c:	008000b4 	movhi	r2,2
    ff60:	10bef104 	addi	r2,r2,-1084
    ff64:	1887883a 	add	r3,r3,r2
    ff68:	e0bfff17 	ldw	r2,-4(fp)
    ff6c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
    ff70:	e0ffff17 	ldw	r3,-4(fp)
    ff74:	00800fc4 	movi	r2,63
    ff78:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
    ff7c:	e0bfff17 	ldw	r2,-4(fp)
    ff80:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
    ff84:	e0bfff17 	ldw	r2,-4(fp)
    ff88:	10800d04 	addi	r2,r2,52
    ff8c:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    ff90:	e0bffe0b 	ldhu	r2,-8(fp)
    ff94:	10800044 	addi	r2,r2,1
    ff98:	e0bffe0d 	sth	r2,-8(fp)
    ff9c:	e0bffe0b 	ldhu	r2,-8(fp)
    ffa0:	10800ef0 	cmpltui	r2,r2,59
    ffa4:	103fea1e 	bne	r2,zero,ff50 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
    ffa8:	e0bfff17 	ldw	r2,-4(fp)
    ffac:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
    ffb0:	e0ffff17 	ldw	r3,-4(fp)
    ffb4:	00800fc4 	movi	r2,63
    ffb8:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
    ffbc:	e0bfff17 	ldw	r2,-4(fp)
    ffc0:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
    ffc4:	00c000b4 	movhi	r3,2
    ffc8:	18edd704 	addi	r3,r3,-18596
    ffcc:	008000b4 	movhi	r2,2
    ffd0:	10bee404 	addi	r2,r2,-1136
    ffd4:	18800015 	stw	r2,0(r3)
#endif
}
    ffd8:	e037883a 	mov	sp,fp
    ffdc:	dfc00117 	ldw	ra,4(sp)
    ffe0:	df000017 	ldw	fp,0(sp)
    ffe4:	dec00204 	addi	sp,sp,8
    ffe8:	f800283a 	ret

0000ffec <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
    ffec:	defff704 	addi	sp,sp,-36
    fff0:	df000815 	stw	fp,32(sp)
    fff4:	df000804 	addi	fp,sp,32
    fff8:	e13ffd15 	stw	r4,-12(fp)
    fffc:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10000:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   10004:	e0bffe17 	ldw	r2,-8(fp)
   10008:	1004c03a 	cmpne	r2,r2,zero
   1000c:	1000021e 	bne	r2,zero,10018 <OSQAccept+0x2c>
        return ((void *)0);
   10010:	e03fff15 	stw	zero,-4(fp)
   10014:	00004506 	br	1012c <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   10018:	e0bffd17 	ldw	r2,-12(fp)
   1001c:	1004c03a 	cmpne	r2,r2,zero
   10020:	1000051e 	bne	r2,zero,10038 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   10024:	e0fffe17 	ldw	r3,-8(fp)
   10028:	00800104 	movi	r2,4
   1002c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   10030:	e03fff15 	stw	zero,-4(fp)
   10034:	00003d06 	br	1012c <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   10038:	e0bffd17 	ldw	r2,-12(fp)
   1003c:	10800003 	ldbu	r2,0(r2)
   10040:	10803fcc 	andi	r2,r2,255
   10044:	108000a0 	cmpeqi	r2,r2,2
   10048:	1000051e 	bne	r2,zero,10060 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
   1004c:	e0fffe17 	ldw	r3,-8(fp)
   10050:	00800044 	movi	r2,1
   10054:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   10058:	e03fff15 	stw	zero,-4(fp)
   1005c:	00003306 	br	1012c <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10060:	0005303a 	rdctl	r2,status
   10064:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10068:	e0fff917 	ldw	r3,-28(fp)
   1006c:	00bfff84 	movi	r2,-2
   10070:	1884703a 	and	r2,r3,r2
   10074:	1001703a 	wrctl	status,r2
  
  return context;
   10078:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   1007c:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   10080:	e0bffd17 	ldw	r2,-12(fp)
   10084:	10800117 	ldw	r2,4(r2)
   10088:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   1008c:	e0bffb17 	ldw	r2,-20(fp)
   10090:	1080058b 	ldhu	r2,22(r2)
   10094:	10bfffcc 	andi	r2,r2,65535
   10098:	1005003a 	cmpeq	r2,r2,zero
   1009c:	1000191e 	bne	r2,zero,10104 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   100a0:	e0bffb17 	ldw	r2,-20(fp)
   100a4:	10c00417 	ldw	r3,16(r2)
   100a8:	18800017 	ldw	r2,0(r3)
   100ac:	e0bffc15 	stw	r2,-16(fp)
   100b0:	18c00104 	addi	r3,r3,4
   100b4:	e0bffb17 	ldw	r2,-20(fp)
   100b8:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   100bc:	e0bffb17 	ldw	r2,-20(fp)
   100c0:	1080058b 	ldhu	r2,22(r2)
   100c4:	10bfffc4 	addi	r2,r2,-1
   100c8:	1007883a 	mov	r3,r2
   100cc:	e0bffb17 	ldw	r2,-20(fp)
   100d0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   100d4:	e0bffb17 	ldw	r2,-20(fp)
   100d8:	10c00417 	ldw	r3,16(r2)
   100dc:	e0bffb17 	ldw	r2,-20(fp)
   100e0:	10800217 	ldw	r2,8(r2)
   100e4:	1880041e 	bne	r3,r2,100f8 <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
   100e8:	e0bffb17 	ldw	r2,-20(fp)
   100ec:	10c00117 	ldw	r3,4(r2)
   100f0:	e0bffb17 	ldw	r2,-20(fp)
   100f4:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   100f8:	e0bffe17 	ldw	r2,-8(fp)
   100fc:	10000005 	stb	zero,0(r2)
   10100:	00000406 	br	10114 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   10104:	e0fffe17 	ldw	r3,-8(fp)
   10108:	008007c4 	movi	r2,31
   1010c:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   10110:	e03ffc15 	stw	zero,-16(fp)
   10114:	e0bffa17 	ldw	r2,-24(fp)
   10118:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1011c:	e0bff817 	ldw	r2,-32(fp)
   10120:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   10124:	e0bffc17 	ldw	r2,-16(fp)
   10128:	e0bfff15 	stw	r2,-4(fp)
   1012c:	e0bfff17 	ldw	r2,-4(fp)
}
   10130:	e037883a 	mov	sp,fp
   10134:	df000017 	ldw	fp,0(sp)
   10138:	dec00104 	addi	sp,sp,4
   1013c:	f800283a 	ret

00010140 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   10140:	defff304 	addi	sp,sp,-52
   10144:	dfc00c15 	stw	ra,48(sp)
   10148:	df000b15 	stw	fp,44(sp)
   1014c:	df000b04 	addi	fp,sp,44
   10150:	e13ffd15 	stw	r4,-12(fp)
   10154:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10158:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   1015c:	008000b4 	movhi	r2,2
   10160:	10addc04 	addi	r2,r2,-18576
   10164:	10800003 	ldbu	r2,0(r2)
   10168:	10803fcc 	andi	r2,r2,255
   1016c:	1005003a 	cmpeq	r2,r2,zero
   10170:	1000021e 	bne	r2,zero,1017c <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   10174:	e03fff15 	stw	zero,-4(fp)
   10178:	00007006 	br	1033c <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1017c:	0005303a 	rdctl	r2,status
   10180:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10184:	e0fff917 	ldw	r3,-28(fp)
   10188:	00bfff84 	movi	r2,-2
   1018c:	1884703a 	and	r2,r3,r2
   10190:	1001703a 	wrctl	status,r2
  
  return context;
   10194:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   10198:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   1019c:	008000b4 	movhi	r2,2
   101a0:	10addb04 	addi	r2,r2,-18580
   101a4:	10800017 	ldw	r2,0(r2)
   101a8:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   101ac:	008000b4 	movhi	r2,2
   101b0:	10addb04 	addi	r2,r2,-18580
   101b4:	10800017 	ldw	r2,0(r2)
   101b8:	1005003a 	cmpeq	r2,r2,zero
   101bc:	1000081e 	bne	r2,zero,101e0 <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   101c0:	008000b4 	movhi	r2,2
   101c4:	10addb04 	addi	r2,r2,-18580
   101c8:	10800017 	ldw	r2,0(r2)
   101cc:	10800117 	ldw	r2,4(r2)
   101d0:	1007883a 	mov	r3,r2
   101d4:	008000b4 	movhi	r2,2
   101d8:	10addb04 	addi	r2,r2,-18580
   101dc:	10c00015 	stw	r3,0(r2)
   101e0:	e0bffa17 	ldw	r2,-24(fp)
   101e4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   101e8:	e0bff817 	ldw	r2,-32(fp)
   101ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   101f0:	e0bffc17 	ldw	r2,-16(fp)
   101f4:	1005003a 	cmpeq	r2,r2,zero
   101f8:	10004e1e 	bne	r2,zero,10334 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   101fc:	0005303a 	rdctl	r2,status
   10200:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10204:	e0fff717 	ldw	r3,-36(fp)
   10208:	00bfff84 	movi	r2,-2
   1020c:	1884703a 	and	r2,r3,r2
   10210:	1001703a 	wrctl	status,r2
  
  return context;
   10214:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
   10218:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   1021c:	008000b4 	movhi	r2,2
   10220:	10add904 	addi	r2,r2,-18588
   10224:	10800017 	ldw	r2,0(r2)
   10228:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   1022c:	e0bffb17 	ldw	r2,-20(fp)
   10230:	1005003a 	cmpeq	r2,r2,zero
   10234:	1000311e 	bne	r2,zero,102fc <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   10238:	008000b4 	movhi	r2,2
   1023c:	10add904 	addi	r2,r2,-18588
   10240:	10800017 	ldw	r2,0(r2)
   10244:	10c00017 	ldw	r3,0(r2)
   10248:	008000b4 	movhi	r2,2
   1024c:	10add904 	addi	r2,r2,-18588
   10250:	10c00015 	stw	r3,0(r2)
   10254:	e0bffa17 	ldw	r2,-24(fp)
   10258:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1025c:	e0bff617 	ldw	r2,-40(fp)
   10260:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   10264:	e0fffb17 	ldw	r3,-20(fp)
   10268:	e0bffd17 	ldw	r2,-12(fp)
   1026c:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
   10270:	e0bffe0b 	ldhu	r2,-8(fp)
   10274:	1085883a 	add	r2,r2,r2
   10278:	1085883a 	add	r2,r2,r2
   1027c:	1007883a 	mov	r3,r2
   10280:	e0bffd17 	ldw	r2,-12(fp)
   10284:	1887883a 	add	r3,r3,r2
   10288:	e0bffb17 	ldw	r2,-20(fp)
   1028c:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   10290:	e0fffb17 	ldw	r3,-20(fp)
   10294:	e0bffd17 	ldw	r2,-12(fp)
   10298:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
   1029c:	e0fffb17 	ldw	r3,-20(fp)
   102a0:	e0bffd17 	ldw	r2,-12(fp)
   102a4:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
   102a8:	e0fffb17 	ldw	r3,-20(fp)
   102ac:	e0bffe0b 	ldhu	r2,-8(fp)
   102b0:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
   102b4:	e0bffb17 	ldw	r2,-20(fp)
   102b8:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   102bc:	e0fffc17 	ldw	r3,-16(fp)
   102c0:	00800084 	movi	r2,2
   102c4:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
   102c8:	e0bffc17 	ldw	r2,-16(fp)
   102cc:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   102d0:	e0fffc17 	ldw	r3,-16(fp)
   102d4:	e0bffb17 	ldw	r2,-20(fp)
   102d8:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   102dc:	e0fffc17 	ldw	r3,-16(fp)
   102e0:	00800fc4 	movi	r2,63
   102e4:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   102e8:	e0bffc17 	ldw	r2,-16(fp)
   102ec:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   102f0:	e13ffc17 	ldw	r4,-16(fp)
   102f4:	000d1a80 	call	d1a8 <OS_EventWaitListInit>
   102f8:	00000e06 	br	10334 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   102fc:	008000b4 	movhi	r2,2
   10300:	10addb04 	addi	r2,r2,-18580
   10304:	10c00017 	ldw	r3,0(r2)
   10308:	e0bffc17 	ldw	r2,-16(fp)
   1030c:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   10310:	00c000b4 	movhi	r3,2
   10314:	18eddb04 	addi	r3,r3,-18580
   10318:	e0bffc17 	ldw	r2,-16(fp)
   1031c:	18800015 	stw	r2,0(r3)
   10320:	e0bffa17 	ldw	r2,-24(fp)
   10324:	e0bff515 	stw	r2,-44(fp)
   10328:	e0bff517 	ldw	r2,-44(fp)
   1032c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   10330:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
   10334:	e0bffc17 	ldw	r2,-16(fp)
   10338:	e0bfff15 	stw	r2,-4(fp)
   1033c:	e0bfff17 	ldw	r2,-4(fp)
}
   10340:	e037883a 	mov	sp,fp
   10344:	dfc00117 	ldw	ra,4(sp)
   10348:	df000017 	ldw	fp,0(sp)
   1034c:	dec00204 	addi	sp,sp,8
   10350:	f800283a 	ret

00010354 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   10354:	defff004 	addi	sp,sp,-64
   10358:	dfc00f15 	stw	ra,60(sp)
   1035c:	df000e15 	stw	fp,56(sp)
   10360:	df000e04 	addi	fp,sp,56
   10364:	e13ffb15 	stw	r4,-20(fp)
   10368:	e1bffd15 	stw	r6,-12(fp)
   1036c:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   10370:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   10374:	e0bffd17 	ldw	r2,-12(fp)
   10378:	1004c03a 	cmpne	r2,r2,zero
   1037c:	1000031e 	bne	r2,zero,1038c <OSQDel+0x38>
        return (pevent);
   10380:	e0bffb17 	ldw	r2,-20(fp)
   10384:	e0bfff15 	stw	r2,-4(fp)
   10388:	0000ac06 	br	1063c <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1038c:	e0bffb17 	ldw	r2,-20(fp)
   10390:	1004c03a 	cmpne	r2,r2,zero
   10394:	1000061e 	bne	r2,zero,103b0 <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
   10398:	e0fffd17 	ldw	r3,-12(fp)
   1039c:	00800104 	movi	r2,4
   103a0:	18800005 	stb	r2,0(r3)
        return (pevent);
   103a4:	e0fffb17 	ldw	r3,-20(fp)
   103a8:	e0ffff15 	stw	r3,-4(fp)
   103ac:	0000a306 	br	1063c <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   103b0:	e0bffb17 	ldw	r2,-20(fp)
   103b4:	10800003 	ldbu	r2,0(r2)
   103b8:	10803fcc 	andi	r2,r2,255
   103bc:	108000a0 	cmpeqi	r2,r2,2
   103c0:	1000061e 	bne	r2,zero,103dc <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
   103c4:	e0fffd17 	ldw	r3,-12(fp)
   103c8:	00800044 	movi	r2,1
   103cc:	18800005 	stb	r2,0(r3)
        return (pevent);
   103d0:	e0bffb17 	ldw	r2,-20(fp)
   103d4:	e0bfff15 	stw	r2,-4(fp)
   103d8:	00009806 	br	1063c <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   103dc:	008000b4 	movhi	r2,2
   103e0:	10addc04 	addi	r2,r2,-18576
   103e4:	10800003 	ldbu	r2,0(r2)
   103e8:	10803fcc 	andi	r2,r2,255
   103ec:	1005003a 	cmpeq	r2,r2,zero
   103f0:	1000061e 	bne	r2,zero,1040c <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   103f4:	e0fffd17 	ldw	r3,-12(fp)
   103f8:	008003c4 	movi	r2,15
   103fc:	18800005 	stb	r2,0(r3)
        return (pevent);
   10400:	e0fffb17 	ldw	r3,-20(fp)
   10404:	e0ffff15 	stw	r3,-4(fp)
   10408:	00008c06 	br	1063c <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1040c:	0005303a 	rdctl	r2,status
   10410:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10414:	e0fff617 	ldw	r3,-40(fp)
   10418:	00bfff84 	movi	r2,-2
   1041c:	1884703a 	and	r2,r3,r2
   10420:	1001703a 	wrctl	status,r2
  
  return context;
   10424:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
   10428:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   1042c:	e0bffb17 	ldw	r2,-20(fp)
   10430:	10800283 	ldbu	r2,10(r2)
   10434:	10803fcc 	andi	r2,r2,255
   10438:	1005003a 	cmpeq	r2,r2,zero
   1043c:	1000031e 	bne	r2,zero,1044c <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   10440:	00800044 	movi	r2,1
   10444:	e0bffa05 	stb	r2,-24(fp)
   10448:	00000106 	br	10450 <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1044c:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
   10450:	e0bffc03 	ldbu	r2,-16(fp)
   10454:	e0bffe15 	stw	r2,-8(fp)
   10458:	e0fffe17 	ldw	r3,-8(fp)
   1045c:	1805003a 	cmpeq	r2,r3,zero
   10460:	1000041e 	bne	r2,zero,10474 <OSQDel+0x120>
   10464:	e0fffe17 	ldw	r3,-8(fp)
   10468:	18800060 	cmpeqi	r2,r3,1
   1046c:	1000391e 	bne	r2,zero,10554 <OSQDel+0x200>
   10470:	00006706 	br	10610 <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   10474:	e0bffa03 	ldbu	r2,-24(fp)
   10478:	1004c03a 	cmpne	r2,r2,zero
   1047c:	1000261e 	bne	r2,zero,10518 <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   10480:	e0fffb17 	ldw	r3,-20(fp)
   10484:	00800fc4 	movi	r2,63
   10488:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   1048c:	e0bffb17 	ldw	r2,-20(fp)
   10490:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   10494:	e0bffb17 	ldw	r2,-20(fp)
   10498:	10800117 	ldw	r2,4(r2)
   1049c:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   104a0:	008000b4 	movhi	r2,2
   104a4:	10add904 	addi	r2,r2,-18588
   104a8:	10c00017 	ldw	r3,0(r2)
   104ac:	e0bff817 	ldw	r2,-32(fp)
   104b0:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   104b4:	00c000b4 	movhi	r3,2
   104b8:	18edd904 	addi	r3,r3,-18588
   104bc:	e0bff817 	ldw	r2,-32(fp)
   104c0:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   104c4:	e0bffb17 	ldw	r2,-20(fp)
   104c8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   104cc:	008000b4 	movhi	r2,2
   104d0:	10addb04 	addi	r2,r2,-18580
   104d4:	10c00017 	ldw	r3,0(r2)
   104d8:	e0bffb17 	ldw	r2,-20(fp)
   104dc:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   104e0:	e0bffb17 	ldw	r2,-20(fp)
   104e4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   104e8:	00c000b4 	movhi	r3,2
   104ec:	18eddb04 	addi	r3,r3,-18580
   104f0:	e0bffb17 	ldw	r2,-20(fp)
   104f4:	18800015 	stw	r2,0(r3)
   104f8:	e0bff717 	ldw	r2,-36(fp)
   104fc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10500:	e0bff517 	ldw	r2,-44(fp)
   10504:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   10508:	e0bffd17 	ldw	r2,-12(fp)
   1050c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   10510:	e03ff915 	stw	zero,-28(fp)
   10514:	00004706 	br	10634 <OSQDel+0x2e0>
   10518:	e0bff717 	ldw	r2,-36(fp)
   1051c:	e0bff415 	stw	r2,-48(fp)
   10520:	e0bff417 	ldw	r2,-48(fp)
   10524:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   10528:	e0fffd17 	ldw	r3,-12(fp)
   1052c:	00801244 	movi	r2,73
   10530:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
   10534:	e0bffb17 	ldw	r2,-20(fp)
   10538:	e0bff915 	stw	r2,-28(fp)
             }
             break;
   1053c:	00003d06 	br	10634 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   10540:	e13ffb17 	ldw	r4,-20(fp)
   10544:	000b883a 	mov	r5,zero
   10548:	01800104 	movi	r6,4
   1054c:	000f883a 	mov	r7,zero
   10550:	000cbf40 	call	cbf4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   10554:	e0bffb17 	ldw	r2,-20(fp)
   10558:	10800283 	ldbu	r2,10(r2)
   1055c:	10803fcc 	andi	r2,r2,255
   10560:	1004c03a 	cmpne	r2,r2,zero
   10564:	103ff61e 	bne	r2,zero,10540 <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   10568:	e0fffb17 	ldw	r3,-20(fp)
   1056c:	00800fc4 	movi	r2,63
   10570:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   10574:	e0bffb17 	ldw	r2,-20(fp)
   10578:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   1057c:	e0bffb17 	ldw	r2,-20(fp)
   10580:	10800117 	ldw	r2,4(r2)
   10584:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   10588:	008000b4 	movhi	r2,2
   1058c:	10add904 	addi	r2,r2,-18588
   10590:	10c00017 	ldw	r3,0(r2)
   10594:	e0bff817 	ldw	r2,-32(fp)
   10598:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   1059c:	00c000b4 	movhi	r3,2
   105a0:	18edd904 	addi	r3,r3,-18588
   105a4:	e0bff817 	ldw	r2,-32(fp)
   105a8:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   105ac:	e0bffb17 	ldw	r2,-20(fp)
   105b0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   105b4:	008000b4 	movhi	r2,2
   105b8:	10addb04 	addi	r2,r2,-18580
   105bc:	10c00017 	ldw	r3,0(r2)
   105c0:	e0bffb17 	ldw	r2,-20(fp)
   105c4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   105c8:	e0bffb17 	ldw	r2,-20(fp)
   105cc:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   105d0:	00c000b4 	movhi	r3,2
   105d4:	18eddb04 	addi	r3,r3,-18580
   105d8:	e0bffb17 	ldw	r2,-20(fp)
   105dc:	18800015 	stw	r2,0(r3)
   105e0:	e0bff717 	ldw	r2,-36(fp)
   105e4:	e0bff315 	stw	r2,-52(fp)
   105e8:	e0bff317 	ldw	r2,-52(fp)
   105ec:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   105f0:	e0bffa03 	ldbu	r2,-24(fp)
   105f4:	10800058 	cmpnei	r2,r2,1
   105f8:	1000011e 	bne	r2,zero,10600 <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   105fc:	000d6340 	call	d634 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   10600:	e0bffd17 	ldw	r2,-12(fp)
   10604:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   10608:	e03ff915 	stw	zero,-28(fp)
             break;
   1060c:	00000906 	br	10634 <OSQDel+0x2e0>
   10610:	e0bff717 	ldw	r2,-36(fp)
   10614:	e0bff215 	stw	r2,-56(fp)
   10618:	e0bff217 	ldw	r2,-56(fp)
   1061c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   10620:	e0fffd17 	ldw	r3,-12(fp)
   10624:	008001c4 	movi	r2,7
   10628:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
   1062c:	e0bffb17 	ldw	r2,-20(fp)
   10630:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
   10634:	e0bff917 	ldw	r2,-28(fp)
   10638:	e0bfff15 	stw	r2,-4(fp)
   1063c:	e0bfff17 	ldw	r2,-4(fp)
}
   10640:	e037883a 	mov	sp,fp
   10644:	dfc00117 	ldw	ra,4(sp)
   10648:	df000017 	ldw	fp,0(sp)
   1064c:	dec00204 	addi	sp,sp,8
   10650:	f800283a 	ret

00010654 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   10654:	defff904 	addi	sp,sp,-28
   10658:	df000615 	stw	fp,24(sp)
   1065c:	df000604 	addi	fp,sp,24
   10660:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   10664:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   10668:	e0bffe17 	ldw	r2,-8(fp)
   1066c:	1004c03a 	cmpne	r2,r2,zero
   10670:	1000031e 	bne	r2,zero,10680 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
   10674:	00800104 	movi	r2,4
   10678:	e0bfff15 	stw	r2,-4(fp)
   1067c:	00002206 	br	10708 <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   10680:	e0bffe17 	ldw	r2,-8(fp)
   10684:	10800003 	ldbu	r2,0(r2)
   10688:	10803fcc 	andi	r2,r2,255
   1068c:	108000a0 	cmpeqi	r2,r2,2
   10690:	1000031e 	bne	r2,zero,106a0 <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
   10694:	00800044 	movi	r2,1
   10698:	e0bfff15 	stw	r2,-4(fp)
   1069c:	00001a06 	br	10708 <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   106a0:	0005303a 	rdctl	r2,status
   106a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   106a8:	e0fffb17 	ldw	r3,-20(fp)
   106ac:	00bfff84 	movi	r2,-2
   106b0:	1884703a 	and	r2,r3,r2
   106b4:	1001703a 	wrctl	status,r2
  
  return context;
   106b8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   106bc:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   106c0:	e0bffe17 	ldw	r2,-8(fp)
   106c4:	10800117 	ldw	r2,4(r2)
   106c8:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
   106cc:	e0bffd17 	ldw	r2,-12(fp)
   106d0:	10c00117 	ldw	r3,4(r2)
   106d4:	e0bffd17 	ldw	r2,-12(fp)
   106d8:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   106dc:	e0bffd17 	ldw	r2,-12(fp)
   106e0:	10c00117 	ldw	r3,4(r2)
   106e4:	e0bffd17 	ldw	r2,-12(fp)
   106e8:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   106ec:	e0bffd17 	ldw	r2,-12(fp)
   106f0:	1000058d 	sth	zero,22(r2)
   106f4:	e0bffc17 	ldw	r2,-16(fp)
   106f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   106fc:	e0bffa17 	ldw	r2,-24(fp)
   10700:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   10704:	e03fff15 	stw	zero,-4(fp)
   10708:	e0bfff17 	ldw	r2,-4(fp)
}
   1070c:	e037883a 	mov	sp,fp
   10710:	df000017 	ldw	fp,0(sp)
   10714:	dec00104 	addi	sp,sp,4
   10718:	f800283a 	ret

0001071c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   1071c:	defff104 	addi	sp,sp,-60
   10720:	dfc00e15 	stw	ra,56(sp)
   10724:	df000d15 	stw	fp,52(sp)
   10728:	df000d04 	addi	fp,sp,52
   1072c:	e13ffb15 	stw	r4,-20(fp)
   10730:	e1bffd15 	stw	r6,-12(fp)
   10734:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10738:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1073c:	e0bffd17 	ldw	r2,-12(fp)
   10740:	1004c03a 	cmpne	r2,r2,zero
   10744:	1000021e 	bne	r2,zero,10750 <OSQPend+0x34>
        return ((void *)0);
   10748:	e03fff15 	stw	zero,-4(fp)
   1074c:	0000b506 	br	10a24 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   10750:	e0bffb17 	ldw	r2,-20(fp)
   10754:	1004c03a 	cmpne	r2,r2,zero
   10758:	1000051e 	bne	r2,zero,10770 <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
   1075c:	e0fffd17 	ldw	r3,-12(fp)
   10760:	00800104 	movi	r2,4
   10764:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   10768:	e03fff15 	stw	zero,-4(fp)
   1076c:	0000ad06 	br	10a24 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   10770:	e0bffb17 	ldw	r2,-20(fp)
   10774:	10800003 	ldbu	r2,0(r2)
   10778:	10803fcc 	andi	r2,r2,255
   1077c:	108000a0 	cmpeqi	r2,r2,2
   10780:	1000051e 	bne	r2,zero,10798 <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   10784:	e0fffd17 	ldw	r3,-12(fp)
   10788:	00800044 	movi	r2,1
   1078c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   10790:	e03fff15 	stw	zero,-4(fp)
   10794:	0000a306 	br	10a24 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   10798:	008000b4 	movhi	r2,2
   1079c:	10addc04 	addi	r2,r2,-18576
   107a0:	10800003 	ldbu	r2,0(r2)
   107a4:	10803fcc 	andi	r2,r2,255
   107a8:	1005003a 	cmpeq	r2,r2,zero
   107ac:	1000051e 	bne	r2,zero,107c4 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   107b0:	e0fffd17 	ldw	r3,-12(fp)
   107b4:	00800084 	movi	r2,2
   107b8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   107bc:	e03fff15 	stw	zero,-4(fp)
   107c0:	00009806 	br	10a24 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   107c4:	008000b4 	movhi	r2,2
   107c8:	10adce04 	addi	r2,r2,-18632
   107cc:	10800003 	ldbu	r2,0(r2)
   107d0:	10803fcc 	andi	r2,r2,255
   107d4:	1005003a 	cmpeq	r2,r2,zero
   107d8:	1000051e 	bne	r2,zero,107f0 <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   107dc:	e0fffd17 	ldw	r3,-12(fp)
   107e0:	00800344 	movi	r2,13
   107e4:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   107e8:	e03fff15 	stw	zero,-4(fp)
   107ec:	00008d06 	br	10a24 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   107f0:	0005303a 	rdctl	r2,status
   107f4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   107f8:	e0fff717 	ldw	r3,-36(fp)
   107fc:	00bfff84 	movi	r2,-2
   10800:	1884703a 	and	r2,r3,r2
   10804:	1001703a 	wrctl	status,r2
  
  return context;
   10808:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   1080c:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   10810:	e0bffb17 	ldw	r2,-20(fp)
   10814:	10800117 	ldw	r2,4(r2)
   10818:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   1081c:	e0bff917 	ldw	r2,-28(fp)
   10820:	1080058b 	ldhu	r2,22(r2)
   10824:	10bfffcc 	andi	r2,r2,65535
   10828:	1005003a 	cmpeq	r2,r2,zero
   1082c:	10001f1e 	bne	r2,zero,108ac <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   10830:	e0bff917 	ldw	r2,-28(fp)
   10834:	10c00417 	ldw	r3,16(r2)
   10838:	18800017 	ldw	r2,0(r3)
   1083c:	e0bffa15 	stw	r2,-24(fp)
   10840:	18c00104 	addi	r3,r3,4
   10844:	e0bff917 	ldw	r2,-28(fp)
   10848:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   1084c:	e0bff917 	ldw	r2,-28(fp)
   10850:	1080058b 	ldhu	r2,22(r2)
   10854:	10bfffc4 	addi	r2,r2,-1
   10858:	1007883a 	mov	r3,r2
   1085c:	e0bff917 	ldw	r2,-28(fp)
   10860:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   10864:	e0bff917 	ldw	r2,-28(fp)
   10868:	10c00417 	ldw	r3,16(r2)
   1086c:	e0bff917 	ldw	r2,-28(fp)
   10870:	10800217 	ldw	r2,8(r2)
   10874:	1880041e 	bne	r3,r2,10888 <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
   10878:	e0bff917 	ldw	r2,-28(fp)
   1087c:	10c00117 	ldw	r3,4(r2)
   10880:	e0bff917 	ldw	r2,-28(fp)
   10884:	10c00415 	stw	r3,16(r2)
   10888:	e0bff817 	ldw	r2,-32(fp)
   1088c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10890:	e0bff617 	ldw	r2,-40(fp)
   10894:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   10898:	e0bffd17 	ldw	r2,-12(fp)
   1089c:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   108a0:	e0bffa17 	ldw	r2,-24(fp)
   108a4:	e0bfff15 	stw	r2,-4(fp)
   108a8:	00005e06 	br	10a24 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   108ac:	008000b4 	movhi	r2,2
   108b0:	10addd04 	addi	r2,r2,-18572
   108b4:	10c00017 	ldw	r3,0(r2)
   108b8:	008000b4 	movhi	r2,2
   108bc:	10addd04 	addi	r2,r2,-18572
   108c0:	10800017 	ldw	r2,0(r2)
   108c4:	10800c03 	ldbu	r2,48(r2)
   108c8:	10800114 	ori	r2,r2,4
   108cc:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   108d0:	008000b4 	movhi	r2,2
   108d4:	10addd04 	addi	r2,r2,-18572
   108d8:	10800017 	ldw	r2,0(r2)
   108dc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   108e0:	008000b4 	movhi	r2,2
   108e4:	10addd04 	addi	r2,r2,-18572
   108e8:	10c00017 	ldw	r3,0(r2)
   108ec:	e0bffc0b 	ldhu	r2,-16(fp)
   108f0:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   108f4:	e13ffb17 	ldw	r4,-20(fp)
   108f8:	000cd880 	call	cd88 <OS_EventTaskWait>
   108fc:	e0bff817 	ldw	r2,-32(fp)
   10900:	e0bff515 	stw	r2,-44(fp)
   10904:	e0bff517 	ldw	r2,-44(fp)
   10908:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   1090c:	000d6340 	call	d634 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10910:	0005303a 	rdctl	r2,status
   10914:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10918:	e0fff417 	ldw	r3,-48(fp)
   1091c:	00bfff84 	movi	r2,-2
   10920:	1884703a 	and	r2,r3,r2
   10924:	1001703a 	wrctl	status,r2
  
  return context;
   10928:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
   1092c:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   10930:	008000b4 	movhi	r2,2
   10934:	10addd04 	addi	r2,r2,-18572
   10938:	10800017 	ldw	r2,0(r2)
   1093c:	10800c43 	ldbu	r2,49(r2)
   10940:	10803fcc 	andi	r2,r2,255
   10944:	e0bffe15 	stw	r2,-8(fp)
   10948:	e0fffe17 	ldw	r3,-8(fp)
   1094c:	1805003a 	cmpeq	r2,r3,zero
   10950:	1000041e 	bne	r2,zero,10964 <OSQPend+0x248>
   10954:	e0fffe17 	ldw	r3,-8(fp)
   10958:	188000a0 	cmpeqi	r2,r3,2
   1095c:	1000091e 	bne	r2,zero,10984 <OSQPend+0x268>
   10960:	00000d06 	br	10998 <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   10964:	008000b4 	movhi	r2,2
   10968:	10addd04 	addi	r2,r2,-18572
   1096c:	10800017 	ldw	r2,0(r2)
   10970:	10800917 	ldw	r2,36(r2)
   10974:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
   10978:	e0bffd17 	ldw	r2,-12(fp)
   1097c:	10000005 	stb	zero,0(r2)
             break;
   10980:	00000e06 	br	109bc <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   10984:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   10988:	e0fffd17 	ldw	r3,-12(fp)
   1098c:	00800384 	movi	r2,14
   10990:	18800005 	stb	r2,0(r3)
             break;
   10994:	00000906 	br	109bc <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   10998:	008000b4 	movhi	r2,2
   1099c:	10addd04 	addi	r2,r2,-18572
   109a0:	11000017 	ldw	r4,0(r2)
   109a4:	e17ffb17 	ldw	r5,-20(fp)
   109a8:	000cfec0 	call	cfec <OS_EventTaskRemove>
             pmsg = (void *)0;
   109ac:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   109b0:	e0fffd17 	ldw	r3,-12(fp)
   109b4:	00800284 	movi	r2,10
   109b8:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   109bc:	008000b4 	movhi	r2,2
   109c0:	10addd04 	addi	r2,r2,-18572
   109c4:	10800017 	ldw	r2,0(r2)
   109c8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   109cc:	008000b4 	movhi	r2,2
   109d0:	10addd04 	addi	r2,r2,-18572
   109d4:	10800017 	ldw	r2,0(r2)
   109d8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   109dc:	008000b4 	movhi	r2,2
   109e0:	10addd04 	addi	r2,r2,-18572
   109e4:	10800017 	ldw	r2,0(r2)
   109e8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   109ec:	008000b4 	movhi	r2,2
   109f0:	10addd04 	addi	r2,r2,-18572
   109f4:	10800017 	ldw	r2,0(r2)
   109f8:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   109fc:	008000b4 	movhi	r2,2
   10a00:	10addd04 	addi	r2,r2,-18572
   10a04:	10800017 	ldw	r2,0(r2)
   10a08:	10000915 	stw	zero,36(r2)
   10a0c:	e0bff817 	ldw	r2,-32(fp)
   10a10:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10a14:	e0bff317 	ldw	r2,-52(fp)
   10a18:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   10a1c:	e0bffa17 	ldw	r2,-24(fp)
   10a20:	e0bfff15 	stw	r2,-4(fp)
   10a24:	e0bfff17 	ldw	r2,-4(fp)
}
   10a28:	e037883a 	mov	sp,fp
   10a2c:	dfc00117 	ldw	ra,4(sp)
   10a30:	df000017 	ldw	fp,0(sp)
   10a34:	dec00204 	addi	sp,sp,8
   10a38:	f800283a 	ret

00010a3c <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   10a3c:	defff504 	addi	sp,sp,-44
   10a40:	dfc00a15 	stw	ra,40(sp)
   10a44:	df000915 	stw	fp,36(sp)
   10a48:	df000904 	addi	fp,sp,36
   10a4c:	e13ffc15 	stw	r4,-16(fp)
   10a50:	e1bffe15 	stw	r6,-8(fp)
   10a54:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   10a58:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   10a5c:	e0bffe17 	ldw	r2,-8(fp)
   10a60:	1004c03a 	cmpne	r2,r2,zero
   10a64:	1000021e 	bne	r2,zero,10a70 <OSQPendAbort+0x34>
        return (0);
   10a68:	e03fff15 	stw	zero,-4(fp)
   10a6c:	00004c06 	br	10ba0 <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   10a70:	e0bffc17 	ldw	r2,-16(fp)
   10a74:	1004c03a 	cmpne	r2,r2,zero
   10a78:	1000051e 	bne	r2,zero,10a90 <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
   10a7c:	e0fffe17 	ldw	r3,-8(fp)
   10a80:	00800104 	movi	r2,4
   10a84:	18800005 	stb	r2,0(r3)
        return (0);
   10a88:	e03fff15 	stw	zero,-4(fp)
   10a8c:	00004406 	br	10ba0 <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   10a90:	e0bffc17 	ldw	r2,-16(fp)
   10a94:	10800003 	ldbu	r2,0(r2)
   10a98:	10803fcc 	andi	r2,r2,255
   10a9c:	108000a0 	cmpeqi	r2,r2,2
   10aa0:	1000051e 	bne	r2,zero,10ab8 <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   10aa4:	e0fffe17 	ldw	r3,-8(fp)
   10aa8:	00800044 	movi	r2,1
   10aac:	18800005 	stb	r2,0(r3)
        return (0);
   10ab0:	e03fff15 	stw	zero,-4(fp)
   10ab4:	00003a06 	br	10ba0 <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10ab8:	0005303a 	rdctl	r2,status
   10abc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ac0:	e0fff917 	ldw	r3,-28(fp)
   10ac4:	00bfff84 	movi	r2,-2
   10ac8:	1884703a 	and	r2,r3,r2
   10acc:	1001703a 	wrctl	status,r2
  
  return context;
   10ad0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   10ad4:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   10ad8:	e0bffc17 	ldw	r2,-16(fp)
   10adc:	10800283 	ldbu	r2,10(r2)
   10ae0:	10803fcc 	andi	r2,r2,255
   10ae4:	1005003a 	cmpeq	r2,r2,zero
   10ae8:	1000261e 	bne	r2,zero,10b84 <OSQPendAbort+0x148>
        nbr_tasks = 0;
   10aec:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
   10af0:	e0bffd03 	ldbu	r2,-12(fp)
   10af4:	10800060 	cmpeqi	r2,r2,1
   10af8:	1000091e 	bne	r2,zero,10b20 <OSQPendAbort+0xe4>
   10afc:	00000e06 	br	10b38 <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   10b00:	e13ffc17 	ldw	r4,-16(fp)
   10b04:	000b883a 	mov	r5,zero
   10b08:	01800104 	movi	r6,4
   10b0c:	01c00084 	movi	r7,2
   10b10:	000cbf40 	call	cbf4 <OS_EventTaskRdy>
                     nbr_tasks++;
   10b14:	e0bffb03 	ldbu	r2,-20(fp)
   10b18:	10800044 	addi	r2,r2,1
   10b1c:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   10b20:	e0bffc17 	ldw	r2,-16(fp)
   10b24:	10800283 	ldbu	r2,10(r2)
   10b28:	10803fcc 	andi	r2,r2,255
   10b2c:	1004c03a 	cmpne	r2,r2,zero
   10b30:	103ff31e 	bne	r2,zero,10b00 <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   10b34:	00000806 	br	10b58 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   10b38:	e13ffc17 	ldw	r4,-16(fp)
   10b3c:	000b883a 	mov	r5,zero
   10b40:	01800104 	movi	r6,4
   10b44:	01c00084 	movi	r7,2
   10b48:	000cbf40 	call	cbf4 <OS_EventTaskRdy>
                 nbr_tasks++;
   10b4c:	e0bffb03 	ldbu	r2,-20(fp)
   10b50:	10800044 	addi	r2,r2,1
   10b54:	e0bffb05 	stb	r2,-20(fp)
   10b58:	e0bffa17 	ldw	r2,-24(fp)
   10b5c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10b60:	e0bff817 	ldw	r2,-32(fp)
   10b64:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   10b68:	000d6340 	call	d634 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   10b6c:	e0fffe17 	ldw	r3,-8(fp)
   10b70:	00800384 	movi	r2,14
   10b74:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
   10b78:	e0bffb03 	ldbu	r2,-20(fp)
   10b7c:	e0bfff15 	stw	r2,-4(fp)
   10b80:	00000706 	br	10ba0 <OSQPendAbort+0x164>
   10b84:	e0bffa17 	ldw	r2,-24(fp)
   10b88:	e0bff715 	stw	r2,-36(fp)
   10b8c:	e0bff717 	ldw	r2,-36(fp)
   10b90:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   10b94:	e0bffe17 	ldw	r2,-8(fp)
   10b98:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   10b9c:	e03fff15 	stw	zero,-4(fp)
   10ba0:	e0bfff17 	ldw	r2,-4(fp)
}
   10ba4:	e037883a 	mov	sp,fp
   10ba8:	dfc00117 	ldw	ra,4(sp)
   10bac:	df000017 	ldw	fp,0(sp)
   10bb0:	dec00204 	addi	sp,sp,8
   10bb4:	f800283a 	ret

00010bb8 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   10bb8:	defff504 	addi	sp,sp,-44
   10bbc:	dfc00a15 	stw	ra,40(sp)
   10bc0:	df000915 	stw	fp,36(sp)
   10bc4:	df000904 	addi	fp,sp,36
   10bc8:	e13ffd15 	stw	r4,-12(fp)
   10bcc:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   10bd0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   10bd4:	e0bffd17 	ldw	r2,-12(fp)
   10bd8:	1004c03a 	cmpne	r2,r2,zero
   10bdc:	1000031e 	bne	r2,zero,10bec <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
   10be0:	00800104 	movi	r2,4
   10be4:	e0bfff15 	stw	r2,-4(fp)
   10be8:	00004d06 	br	10d20 <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   10bec:	e0bffd17 	ldw	r2,-12(fp)
   10bf0:	10800003 	ldbu	r2,0(r2)
   10bf4:	10803fcc 	andi	r2,r2,255
   10bf8:	108000a0 	cmpeqi	r2,r2,2
   10bfc:	1000031e 	bne	r2,zero,10c0c <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
   10c00:	00800044 	movi	r2,1
   10c04:	e0bfff15 	stw	r2,-4(fp)
   10c08:	00004506 	br	10d20 <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10c0c:	0005303a 	rdctl	r2,status
   10c10:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c14:	e0fffa17 	ldw	r3,-24(fp)
   10c18:	00bfff84 	movi	r2,-2
   10c1c:	1884703a 	and	r2,r3,r2
   10c20:	1001703a 	wrctl	status,r2
  
  return context;
   10c24:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   10c28:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   10c2c:	e0bffd17 	ldw	r2,-12(fp)
   10c30:	10800283 	ldbu	r2,10(r2)
   10c34:	10803fcc 	andi	r2,r2,255
   10c38:	1005003a 	cmpeq	r2,r2,zero
   10c3c:	10000c1e 	bne	r2,zero,10c70 <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   10c40:	e13ffd17 	ldw	r4,-12(fp)
   10c44:	e17ffe17 	ldw	r5,-8(fp)
   10c48:	01800104 	movi	r6,4
   10c4c:	000f883a 	mov	r7,zero
   10c50:	000cbf40 	call	cbf4 <OS_EventTaskRdy>
   10c54:	e0bffb17 	ldw	r2,-20(fp)
   10c58:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10c5c:	e0bff917 	ldw	r2,-28(fp)
   10c60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   10c64:	000d6340 	call	d634 <OS_Sched>
        return (OS_ERR_NONE);
   10c68:	e03fff15 	stw	zero,-4(fp)
   10c6c:	00002c06 	br	10d20 <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   10c70:	e0bffd17 	ldw	r2,-12(fp)
   10c74:	10800117 	ldw	r2,4(r2)
   10c78:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   10c7c:	e0bffc17 	ldw	r2,-16(fp)
   10c80:	10c0058b 	ldhu	r3,22(r2)
   10c84:	e0bffc17 	ldw	r2,-16(fp)
   10c88:	1080050b 	ldhu	r2,20(r2)
   10c8c:	18ffffcc 	andi	r3,r3,65535
   10c90:	10bfffcc 	andi	r2,r2,65535
   10c94:	18800736 	bltu	r3,r2,10cb4 <OSQPost+0xfc>
   10c98:	e0bffb17 	ldw	r2,-20(fp)
   10c9c:	e0bff815 	stw	r2,-32(fp)
   10ca0:	e0bff817 	ldw	r2,-32(fp)
   10ca4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   10ca8:	00800784 	movi	r2,30
   10cac:	e0bfff15 	stw	r2,-4(fp)
   10cb0:	00001b06 	br	10d20 <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   10cb4:	e0bffc17 	ldw	r2,-16(fp)
   10cb8:	10c00317 	ldw	r3,12(r2)
   10cbc:	e0bffe17 	ldw	r2,-8(fp)
   10cc0:	18800015 	stw	r2,0(r3)
   10cc4:	18c00104 	addi	r3,r3,4
   10cc8:	e0bffc17 	ldw	r2,-16(fp)
   10ccc:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   10cd0:	e0bffc17 	ldw	r2,-16(fp)
   10cd4:	1080058b 	ldhu	r2,22(r2)
   10cd8:	10800044 	addi	r2,r2,1
   10cdc:	1007883a 	mov	r3,r2
   10ce0:	e0bffc17 	ldw	r2,-16(fp)
   10ce4:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   10ce8:	e0bffc17 	ldw	r2,-16(fp)
   10cec:	10c00317 	ldw	r3,12(r2)
   10cf0:	e0bffc17 	ldw	r2,-16(fp)
   10cf4:	10800217 	ldw	r2,8(r2)
   10cf8:	1880041e 	bne	r3,r2,10d0c <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
   10cfc:	e0bffc17 	ldw	r2,-16(fp)
   10d00:	10c00117 	ldw	r3,4(r2)
   10d04:	e0bffc17 	ldw	r2,-16(fp)
   10d08:	10c00315 	stw	r3,12(r2)
   10d0c:	e0bffb17 	ldw	r2,-20(fp)
   10d10:	e0bff715 	stw	r2,-36(fp)
   10d14:	e0bff717 	ldw	r2,-36(fp)
   10d18:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   10d1c:	e03fff15 	stw	zero,-4(fp)
   10d20:	e0bfff17 	ldw	r2,-4(fp)
}
   10d24:	e037883a 	mov	sp,fp
   10d28:	dfc00117 	ldw	ra,4(sp)
   10d2c:	df000017 	ldw	fp,0(sp)
   10d30:	dec00204 	addi	sp,sp,8
   10d34:	f800283a 	ret

00010d38 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   10d38:	defff504 	addi	sp,sp,-44
   10d3c:	dfc00a15 	stw	ra,40(sp)
   10d40:	df000915 	stw	fp,36(sp)
   10d44:	df000904 	addi	fp,sp,36
   10d48:	e13ffd15 	stw	r4,-12(fp)
   10d4c:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   10d50:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   10d54:	e0bffd17 	ldw	r2,-12(fp)
   10d58:	1004c03a 	cmpne	r2,r2,zero
   10d5c:	1000031e 	bne	r2,zero,10d6c <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
   10d60:	00800104 	movi	r2,4
   10d64:	e0bfff15 	stw	r2,-4(fp)
   10d68:	00004f06 	br	10ea8 <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   10d6c:	e0bffd17 	ldw	r2,-12(fp)
   10d70:	10800003 	ldbu	r2,0(r2)
   10d74:	10803fcc 	andi	r2,r2,255
   10d78:	108000a0 	cmpeqi	r2,r2,2
   10d7c:	1000031e 	bne	r2,zero,10d8c <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
   10d80:	00800044 	movi	r2,1
   10d84:	e0bfff15 	stw	r2,-4(fp)
   10d88:	00004706 	br	10ea8 <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d8c:	0005303a 	rdctl	r2,status
   10d90:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d94:	e0fffa17 	ldw	r3,-24(fp)
   10d98:	00bfff84 	movi	r2,-2
   10d9c:	1884703a 	and	r2,r3,r2
   10da0:	1001703a 	wrctl	status,r2
  
  return context;
   10da4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   10da8:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   10dac:	e0bffd17 	ldw	r2,-12(fp)
   10db0:	10800283 	ldbu	r2,10(r2)
   10db4:	10803fcc 	andi	r2,r2,255
   10db8:	1005003a 	cmpeq	r2,r2,zero
   10dbc:	10000c1e 	bne	r2,zero,10df0 <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   10dc0:	e13ffd17 	ldw	r4,-12(fp)
   10dc4:	e17ffe17 	ldw	r5,-8(fp)
   10dc8:	01800104 	movi	r6,4
   10dcc:	000f883a 	mov	r7,zero
   10dd0:	000cbf40 	call	cbf4 <OS_EventTaskRdy>
   10dd4:	e0bffb17 	ldw	r2,-20(fp)
   10dd8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10ddc:	e0bff917 	ldw	r2,-28(fp)
   10de0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   10de4:	000d6340 	call	d634 <OS_Sched>
        return (OS_ERR_NONE);
   10de8:	e03fff15 	stw	zero,-4(fp)
   10dec:	00002e06 	br	10ea8 <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   10df0:	e0bffd17 	ldw	r2,-12(fp)
   10df4:	10800117 	ldw	r2,4(r2)
   10df8:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   10dfc:	e0bffc17 	ldw	r2,-16(fp)
   10e00:	10c0058b 	ldhu	r3,22(r2)
   10e04:	e0bffc17 	ldw	r2,-16(fp)
   10e08:	1080050b 	ldhu	r2,20(r2)
   10e0c:	18ffffcc 	andi	r3,r3,65535
   10e10:	10bfffcc 	andi	r2,r2,65535
   10e14:	18800736 	bltu	r3,r2,10e34 <OSQPostFront+0xfc>
   10e18:	e0bffb17 	ldw	r2,-20(fp)
   10e1c:	e0bff815 	stw	r2,-32(fp)
   10e20:	e0bff817 	ldw	r2,-32(fp)
   10e24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   10e28:	00800784 	movi	r2,30
   10e2c:	e0bfff15 	stw	r2,-4(fp)
   10e30:	00001d06 	br	10ea8 <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   10e34:	e0bffc17 	ldw	r2,-16(fp)
   10e38:	10c00417 	ldw	r3,16(r2)
   10e3c:	e0bffc17 	ldw	r2,-16(fp)
   10e40:	10800117 	ldw	r2,4(r2)
   10e44:	1880041e 	bne	r3,r2,10e58 <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
   10e48:	e0bffc17 	ldw	r2,-16(fp)
   10e4c:	10c00217 	ldw	r3,8(r2)
   10e50:	e0bffc17 	ldw	r2,-16(fp)
   10e54:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   10e58:	e0bffc17 	ldw	r2,-16(fp)
   10e5c:	10800417 	ldw	r2,16(r2)
   10e60:	10ffff04 	addi	r3,r2,-4
   10e64:	e0bffc17 	ldw	r2,-16(fp)
   10e68:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   10e6c:	e0bffc17 	ldw	r2,-16(fp)
   10e70:	10c00417 	ldw	r3,16(r2)
   10e74:	e0bffe17 	ldw	r2,-8(fp)
   10e78:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   10e7c:	e0bffc17 	ldw	r2,-16(fp)
   10e80:	1080058b 	ldhu	r2,22(r2)
   10e84:	10800044 	addi	r2,r2,1
   10e88:	1007883a 	mov	r3,r2
   10e8c:	e0bffc17 	ldw	r2,-16(fp)
   10e90:	10c0058d 	sth	r3,22(r2)
   10e94:	e0bffb17 	ldw	r2,-20(fp)
   10e98:	e0bff715 	stw	r2,-36(fp)
   10e9c:	e0bff717 	ldw	r2,-36(fp)
   10ea0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   10ea4:	e03fff15 	stw	zero,-4(fp)
   10ea8:	e0bfff17 	ldw	r2,-4(fp)
}
   10eac:	e037883a 	mov	sp,fp
   10eb0:	dfc00117 	ldw	ra,4(sp)
   10eb4:	df000017 	ldw	fp,0(sp)
   10eb8:	dec00204 	addi	sp,sp,8
   10ebc:	f800283a 	ret

00010ec0 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   10ec0:	defff404 	addi	sp,sp,-48
   10ec4:	dfc00b15 	stw	ra,44(sp)
   10ec8:	df000a15 	stw	fp,40(sp)
   10ecc:	df000a04 	addi	fp,sp,40
   10ed0:	e13ffc15 	stw	r4,-16(fp)
   10ed4:	e17ffd15 	stw	r5,-12(fp)
   10ed8:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   10edc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   10ee0:	e0bffc17 	ldw	r2,-16(fp)
   10ee4:	1004c03a 	cmpne	r2,r2,zero
   10ee8:	1000031e 	bne	r2,zero,10ef8 <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
   10eec:	00800104 	movi	r2,4
   10ef0:	e0bfff15 	stw	r2,-4(fp)
   10ef4:	00007906 	br	110dc <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   10ef8:	e0bffc17 	ldw	r2,-16(fp)
   10efc:	10800003 	ldbu	r2,0(r2)
   10f00:	10803fcc 	andi	r2,r2,255
   10f04:	108000a0 	cmpeqi	r2,r2,2
   10f08:	1000031e 	bne	r2,zero,10f18 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
   10f0c:	00800044 	movi	r2,1
   10f10:	e0bfff15 	stw	r2,-4(fp)
   10f14:	00007106 	br	110dc <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10f18:	0005303a 	rdctl	r2,status
   10f1c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10f20:	e0fff917 	ldw	r3,-28(fp)
   10f24:	00bfff84 	movi	r2,-2
   10f28:	1884703a 	and	r2,r3,r2
   10f2c:	1001703a 	wrctl	status,r2
  
  return context;
   10f30:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   10f34:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   10f38:	e0bffc17 	ldw	r2,-16(fp)
   10f3c:	10800283 	ldbu	r2,10(r2)
   10f40:	10803fcc 	andi	r2,r2,255
   10f44:	1005003a 	cmpeq	r2,r2,zero
   10f48:	1000211e 	bne	r2,zero,10fd0 <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   10f4c:	e0bffe03 	ldbu	r2,-8(fp)
   10f50:	1080004c 	andi	r2,r2,1
   10f54:	10803fcc 	andi	r2,r2,255
   10f58:	1005003a 	cmpeq	r2,r2,zero
   10f5c:	10000c1e 	bne	r2,zero,10f90 <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   10f60:	00000506 	br	10f78 <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   10f64:	e13ffc17 	ldw	r4,-16(fp)
   10f68:	e17ffd17 	ldw	r5,-12(fp)
   10f6c:	01800104 	movi	r6,4
   10f70:	000f883a 	mov	r7,zero
   10f74:	000cbf40 	call	cbf4 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   10f78:	e0bffc17 	ldw	r2,-16(fp)
   10f7c:	10800283 	ldbu	r2,10(r2)
   10f80:	10803fcc 	andi	r2,r2,255
   10f84:	1004c03a 	cmpne	r2,r2,zero
   10f88:	103ff61e 	bne	r2,zero,10f64 <OSQPostOpt+0xa4>
   10f8c:	00000506 	br	10fa4 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   10f90:	e13ffc17 	ldw	r4,-16(fp)
   10f94:	e17ffd17 	ldw	r5,-12(fp)
   10f98:	01800104 	movi	r6,4
   10f9c:	000f883a 	mov	r7,zero
   10fa0:	000cbf40 	call	cbf4 <OS_EventTaskRdy>
   10fa4:	e0bffa17 	ldw	r2,-24(fp)
   10fa8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10fac:	e0bff817 	ldw	r2,-32(fp)
   10fb0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   10fb4:	e0bffe03 	ldbu	r2,-8(fp)
   10fb8:	1080010c 	andi	r2,r2,4
   10fbc:	1004c03a 	cmpne	r2,r2,zero
   10fc0:	1000011e 	bne	r2,zero,10fc8 <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
   10fc4:	000d6340 	call	d634 <OS_Sched>
        }
        return (OS_ERR_NONE);
   10fc8:	e03fff15 	stw	zero,-4(fp)
   10fcc:	00004306 	br	110dc <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   10fd0:	e0bffc17 	ldw	r2,-16(fp)
   10fd4:	10800117 	ldw	r2,4(r2)
   10fd8:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   10fdc:	e0bffb17 	ldw	r2,-20(fp)
   10fe0:	10c0058b 	ldhu	r3,22(r2)
   10fe4:	e0bffb17 	ldw	r2,-20(fp)
   10fe8:	1080050b 	ldhu	r2,20(r2)
   10fec:	18ffffcc 	andi	r3,r3,65535
   10ff0:	10bfffcc 	andi	r2,r2,65535
   10ff4:	18800736 	bltu	r3,r2,11014 <OSQPostOpt+0x154>
   10ff8:	e0bffa17 	ldw	r2,-24(fp)
   10ffc:	e0bff715 	stw	r2,-36(fp)
   11000:	e0bff717 	ldw	r2,-36(fp)
   11004:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   11008:	00800784 	movi	r2,30
   1100c:	e0bfff15 	stw	r2,-4(fp)
   11010:	00003206 	br	110dc <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   11014:	e0bffe03 	ldbu	r2,-8(fp)
   11018:	1080008c 	andi	r2,r2,2
   1101c:	1005003a 	cmpeq	r2,r2,zero
   11020:	1000131e 	bne	r2,zero,11070 <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   11024:	e0bffb17 	ldw	r2,-20(fp)
   11028:	10c00417 	ldw	r3,16(r2)
   1102c:	e0bffb17 	ldw	r2,-20(fp)
   11030:	10800117 	ldw	r2,4(r2)
   11034:	1880041e 	bne	r3,r2,11048 <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   11038:	e0bffb17 	ldw	r2,-20(fp)
   1103c:	10c00217 	ldw	r3,8(r2)
   11040:	e0bffb17 	ldw	r2,-20(fp)
   11044:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   11048:	e0bffb17 	ldw	r2,-20(fp)
   1104c:	10800417 	ldw	r2,16(r2)
   11050:	10ffff04 	addi	r3,r2,-4
   11054:	e0bffb17 	ldw	r2,-20(fp)
   11058:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   1105c:	e0bffb17 	ldw	r2,-20(fp)
   11060:	10c00417 	ldw	r3,16(r2)
   11064:	e0bffd17 	ldw	r2,-12(fp)
   11068:	18800015 	stw	r2,0(r3)
   1106c:	00001006 	br	110b0 <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   11070:	e0bffb17 	ldw	r2,-20(fp)
   11074:	10c00317 	ldw	r3,12(r2)
   11078:	e0bffd17 	ldw	r2,-12(fp)
   1107c:	18800015 	stw	r2,0(r3)
   11080:	18c00104 	addi	r3,r3,4
   11084:	e0bffb17 	ldw	r2,-20(fp)
   11088:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   1108c:	e0bffb17 	ldw	r2,-20(fp)
   11090:	10c00317 	ldw	r3,12(r2)
   11094:	e0bffb17 	ldw	r2,-20(fp)
   11098:	10800217 	ldw	r2,8(r2)
   1109c:	1880041e 	bne	r3,r2,110b0 <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
   110a0:	e0bffb17 	ldw	r2,-20(fp)
   110a4:	10c00117 	ldw	r3,4(r2)
   110a8:	e0bffb17 	ldw	r2,-20(fp)
   110ac:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   110b0:	e0bffb17 	ldw	r2,-20(fp)
   110b4:	1080058b 	ldhu	r2,22(r2)
   110b8:	10800044 	addi	r2,r2,1
   110bc:	1007883a 	mov	r3,r2
   110c0:	e0bffb17 	ldw	r2,-20(fp)
   110c4:	10c0058d 	sth	r3,22(r2)
   110c8:	e0bffa17 	ldw	r2,-24(fp)
   110cc:	e0bff615 	stw	r2,-40(fp)
   110d0:	e0bff617 	ldw	r2,-40(fp)
   110d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   110d8:	e03fff15 	stw	zero,-4(fp)
   110dc:	e0bfff17 	ldw	r2,-4(fp)
}
   110e0:	e037883a 	mov	sp,fp
   110e4:	dfc00117 	ldw	ra,4(sp)
   110e8:	df000017 	ldw	fp,0(sp)
   110ec:	dec00204 	addi	sp,sp,8
   110f0:	f800283a 	ret

000110f4 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   110f4:	defff504 	addi	sp,sp,-44
   110f8:	df000a15 	stw	fp,40(sp)
   110fc:	df000a04 	addi	fp,sp,40
   11100:	e13ffd15 	stw	r4,-12(fp)
   11104:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   11108:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   1110c:	e0bffd17 	ldw	r2,-12(fp)
   11110:	1004c03a 	cmpne	r2,r2,zero
   11114:	1000031e 	bne	r2,zero,11124 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
   11118:	00800104 	movi	r2,4
   1111c:	e0bfff15 	stw	r2,-4(fp)
   11120:	00004f06 	br	11260 <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   11124:	e0bffe17 	ldw	r2,-8(fp)
   11128:	1004c03a 	cmpne	r2,r2,zero
   1112c:	1000031e 	bne	r2,zero,1113c <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
   11130:	00800244 	movi	r2,9
   11134:	e0bfff15 	stw	r2,-4(fp)
   11138:	00004906 	br	11260 <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   1113c:	e0bffd17 	ldw	r2,-12(fp)
   11140:	10800003 	ldbu	r2,0(r2)
   11144:	10803fcc 	andi	r2,r2,255
   11148:	108000a0 	cmpeqi	r2,r2,2
   1114c:	1000031e 	bne	r2,zero,1115c <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
   11150:	00800044 	movi	r2,1
   11154:	e0bfff15 	stw	r2,-4(fp)
   11158:	00004106 	br	11260 <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1115c:	0005303a 	rdctl	r2,status
   11160:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11164:	e0fff717 	ldw	r3,-36(fp)
   11168:	00bfff84 	movi	r2,-2
   1116c:	1884703a 	and	r2,r3,r2
   11170:	1001703a 	wrctl	status,r2
  
  return context;
   11174:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   11178:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   1117c:	e0bffd17 	ldw	r2,-12(fp)
   11180:	10c00283 	ldbu	r3,10(r2)
   11184:	e0bffe17 	ldw	r2,-8(fp)
   11188:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   1118c:	e0bffd17 	ldw	r2,-12(fp)
   11190:	108002c4 	addi	r2,r2,11
   11194:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   11198:	e0bffe17 	ldw	r2,-8(fp)
   1119c:	10800204 	addi	r2,r2,8
   111a0:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   111a4:	e03ffb05 	stb	zero,-20(fp)
   111a8:	00000d06 	br	111e0 <OSQQuery+0xec>
        *pdest++ = *psrc++;
   111ac:	e0bffa17 	ldw	r2,-24(fp)
   111b0:	10c00003 	ldbu	r3,0(r2)
   111b4:	e0bff917 	ldw	r2,-28(fp)
   111b8:	10c00005 	stb	r3,0(r2)
   111bc:	e0bff917 	ldw	r2,-28(fp)
   111c0:	10800044 	addi	r2,r2,1
   111c4:	e0bff915 	stw	r2,-28(fp)
   111c8:	e0bffa17 	ldw	r2,-24(fp)
   111cc:	10800044 	addi	r2,r2,1
   111d0:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   111d4:	e0bffb03 	ldbu	r2,-20(fp)
   111d8:	10800044 	addi	r2,r2,1
   111dc:	e0bffb05 	stb	r2,-20(fp)
   111e0:	e0bffb03 	ldbu	r2,-20(fp)
   111e4:	108000f0 	cmpltui	r2,r2,3
   111e8:	103ff01e 	bne	r2,zero,111ac <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   111ec:	e0bffd17 	ldw	r2,-12(fp)
   111f0:	10800117 	ldw	r2,4(r2)
   111f4:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   111f8:	e0bffc17 	ldw	r2,-16(fp)
   111fc:	1080058b 	ldhu	r2,22(r2)
   11200:	10bfffcc 	andi	r2,r2,65535
   11204:	1005003a 	cmpeq	r2,r2,zero
   11208:	1000061e 	bne	r2,zero,11224 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   1120c:	e0bffc17 	ldw	r2,-16(fp)
   11210:	10800417 	ldw	r2,16(r2)
   11214:	10c00017 	ldw	r3,0(r2)
   11218:	e0bffe17 	ldw	r2,-8(fp)
   1121c:	10c00015 	stw	r3,0(r2)
   11220:	00000206 	br	1122c <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
   11224:	e0bffe17 	ldw	r2,-8(fp)
   11228:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   1122c:	e0bffc17 	ldw	r2,-16(fp)
   11230:	10c0058b 	ldhu	r3,22(r2)
   11234:	e0bffe17 	ldw	r2,-8(fp)
   11238:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   1123c:	e0bffc17 	ldw	r2,-16(fp)
   11240:	10c0050b 	ldhu	r3,20(r2)
   11244:	e0bffe17 	ldw	r2,-8(fp)
   11248:	10c0018d 	sth	r3,6(r2)
   1124c:	e0bff817 	ldw	r2,-32(fp)
   11250:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11254:	e0bff617 	ldw	r2,-40(fp)
   11258:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1125c:	e03fff15 	stw	zero,-4(fp)
   11260:	e0bfff17 	ldw	r2,-4(fp)
}
   11264:	e037883a 	mov	sp,fp
   11268:	df000017 	ldw	fp,0(sp)
   1126c:	dec00104 	addi	sp,sp,4
   11270:	f800283a 	ret

00011274 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   11274:	defffb04 	addi	sp,sp,-20
   11278:	dfc00415 	stw	ra,16(sp)
   1127c:	df000315 	stw	fp,12(sp)
   11280:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   11284:	010000b4 	movhi	r4,2
   11288:	2103f004 	addi	r4,r4,4032
   1128c:	01407804 	movi	r5,480
   11290:	000d5740 	call	d574 <OS_MemClr>
    pq1 = &OSQTbl[0];
   11294:	008000b4 	movhi	r2,2
   11298:	1083f004 	addi	r2,r2,4032
   1129c:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   112a0:	008000b4 	movhi	r2,2
   112a4:	1083f604 	addi	r2,r2,4056
   112a8:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   112ac:	e03fff0d 	sth	zero,-4(fp)
   112b0:	00000c06 	br	112e4 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   112b4:	e0fffe17 	ldw	r3,-8(fp)
   112b8:	e0bffd17 	ldw	r2,-12(fp)
   112bc:	18800015 	stw	r2,0(r3)
        pq1++;
   112c0:	e0bffe17 	ldw	r2,-8(fp)
   112c4:	10800604 	addi	r2,r2,24
   112c8:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   112cc:	e0bffd17 	ldw	r2,-12(fp)
   112d0:	10800604 	addi	r2,r2,24
   112d4:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   112d8:	e0bfff0b 	ldhu	r2,-4(fp)
   112dc:	10800044 	addi	r2,r2,1
   112e0:	e0bfff0d 	sth	r2,-4(fp)
   112e4:	e0bfff0b 	ldhu	r2,-4(fp)
   112e8:	108004f0 	cmpltui	r2,r2,19
   112ec:	103ff11e 	bne	r2,zero,112b4 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   112f0:	e0bffe17 	ldw	r2,-8(fp)
   112f4:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   112f8:	00c000b4 	movhi	r3,2
   112fc:	18edd904 	addi	r3,r3,-18588
   11300:	008000b4 	movhi	r2,2
   11304:	1083f004 	addi	r2,r2,4032
   11308:	18800015 	stw	r2,0(r3)
#endif
}
   1130c:	e037883a 	mov	sp,fp
   11310:	dfc00117 	ldw	ra,4(sp)
   11314:	df000017 	ldw	fp,0(sp)
   11318:	dec00204 	addi	sp,sp,8
   1131c:	f800283a 	ret

00011320 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   11320:	defff904 	addi	sp,sp,-28
   11324:	df000615 	stw	fp,24(sp)
   11328:	df000604 	addi	fp,sp,24
   1132c:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   11330:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   11334:	e0bffe17 	ldw	r2,-8(fp)
   11338:	1004c03a 	cmpne	r2,r2,zero
   1133c:	1000021e 	bne	r2,zero,11348 <OSSemAccept+0x28>
        return (0);
   11340:	e03fff15 	stw	zero,-4(fp)
   11344:	00002106 	br	113cc <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   11348:	e0bffe17 	ldw	r2,-8(fp)
   1134c:	10800003 	ldbu	r2,0(r2)
   11350:	10803fcc 	andi	r2,r2,255
   11354:	108000e0 	cmpeqi	r2,r2,3
   11358:	1000021e 	bne	r2,zero,11364 <OSSemAccept+0x44>
        return (0);
   1135c:	e03fff15 	stw	zero,-4(fp)
   11360:	00001a06 	br	113cc <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11364:	0005303a 	rdctl	r2,status
   11368:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1136c:	e0fffb17 	ldw	r3,-20(fp)
   11370:	00bfff84 	movi	r2,-2
   11374:	1884703a 	and	r2,r3,r2
   11378:	1001703a 	wrctl	status,r2
  
  return context;
   1137c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   11380:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
   11384:	e0bffe17 	ldw	r2,-8(fp)
   11388:	1080020b 	ldhu	r2,8(r2)
   1138c:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   11390:	e0bffd0b 	ldhu	r2,-12(fp)
   11394:	1005003a 	cmpeq	r2,r2,zero
   11398:	1000061e 	bne	r2,zero,113b4 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   1139c:	e0bffe17 	ldw	r2,-8(fp)
   113a0:	1080020b 	ldhu	r2,8(r2)
   113a4:	10bfffc4 	addi	r2,r2,-1
   113a8:	1007883a 	mov	r3,r2
   113ac:	e0bffe17 	ldw	r2,-8(fp)
   113b0:	10c0020d 	sth	r3,8(r2)
   113b4:	e0bffc17 	ldw	r2,-16(fp)
   113b8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   113bc:	e0bffa17 	ldw	r2,-24(fp)
   113c0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   113c4:	e0bffd0b 	ldhu	r2,-12(fp)
   113c8:	e0bfff15 	stw	r2,-4(fp)
   113cc:	e0bfff17 	ldw	r2,-4(fp)
}
   113d0:	e037883a 	mov	sp,fp
   113d4:	df000017 	ldw	fp,0(sp)
   113d8:	dec00104 	addi	sp,sp,4
   113dc:	f800283a 	ret

000113e0 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   113e0:	defff804 	addi	sp,sp,-32
   113e4:	dfc00715 	stw	ra,28(sp)
   113e8:	df000615 	stw	fp,24(sp)
   113ec:	df000604 	addi	fp,sp,24
   113f0:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   113f4:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   113f8:	008000b4 	movhi	r2,2
   113fc:	10addc04 	addi	r2,r2,-18576
   11400:	10800003 	ldbu	r2,0(r2)
   11404:	10803fcc 	andi	r2,r2,255
   11408:	1005003a 	cmpeq	r2,r2,zero
   1140c:	1000021e 	bne	r2,zero,11418 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   11410:	e03fff15 	stw	zero,-4(fp)
   11414:	00003106 	br	114dc <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11418:	0005303a 	rdctl	r2,status
   1141c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11420:	e0fffb17 	ldw	r3,-20(fp)
   11424:	00bfff84 	movi	r2,-2
   11428:	1884703a 	and	r2,r3,r2
   1142c:	1001703a 	wrctl	status,r2
  
  return context;
   11430:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   11434:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   11438:	008000b4 	movhi	r2,2
   1143c:	10addb04 	addi	r2,r2,-18580
   11440:	10800017 	ldw	r2,0(r2)
   11444:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   11448:	008000b4 	movhi	r2,2
   1144c:	10addb04 	addi	r2,r2,-18580
   11450:	10800017 	ldw	r2,0(r2)
   11454:	1005003a 	cmpeq	r2,r2,zero
   11458:	1000081e 	bne	r2,zero,1147c <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   1145c:	008000b4 	movhi	r2,2
   11460:	10addb04 	addi	r2,r2,-18580
   11464:	10800017 	ldw	r2,0(r2)
   11468:	10800117 	ldw	r2,4(r2)
   1146c:	1007883a 	mov	r3,r2
   11470:	008000b4 	movhi	r2,2
   11474:	10addb04 	addi	r2,r2,-18580
   11478:	10c00015 	stw	r3,0(r2)
   1147c:	e0bffc17 	ldw	r2,-16(fp)
   11480:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11484:	e0bffa17 	ldw	r2,-24(fp)
   11488:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   1148c:	e0bffd17 	ldw	r2,-12(fp)
   11490:	1005003a 	cmpeq	r2,r2,zero
   11494:	10000f1e 	bne	r2,zero,114d4 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   11498:	e0fffd17 	ldw	r3,-12(fp)
   1149c:	008000c4 	movi	r2,3
   114a0:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   114a4:	e0fffd17 	ldw	r3,-12(fp)
   114a8:	e0bffe0b 	ldhu	r2,-8(fp)
   114ac:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   114b0:	e0bffd17 	ldw	r2,-12(fp)
   114b4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   114b8:	e0fffd17 	ldw	r3,-12(fp)
   114bc:	00800fc4 	movi	r2,63
   114c0:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   114c4:	e0bffd17 	ldw	r2,-12(fp)
   114c8:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   114cc:	e13ffd17 	ldw	r4,-12(fp)
   114d0:	000d1a80 	call	d1a8 <OS_EventWaitListInit>
    }
    return (pevent);
   114d4:	e0bffd17 	ldw	r2,-12(fp)
   114d8:	e0bfff15 	stw	r2,-4(fp)
   114dc:	e0bfff17 	ldw	r2,-4(fp)
}
   114e0:	e037883a 	mov	sp,fp
   114e4:	dfc00117 	ldw	ra,4(sp)
   114e8:	df000017 	ldw	fp,0(sp)
   114ec:	dec00204 	addi	sp,sp,8
   114f0:	f800283a 	ret

000114f4 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   114f4:	defff104 	addi	sp,sp,-60
   114f8:	dfc00e15 	stw	ra,56(sp)
   114fc:	df000d15 	stw	fp,52(sp)
   11500:	df000d04 	addi	fp,sp,52
   11504:	e13ffb15 	stw	r4,-20(fp)
   11508:	e1bffd15 	stw	r6,-12(fp)
   1150c:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   11510:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   11514:	e0bffd17 	ldw	r2,-12(fp)
   11518:	1004c03a 	cmpne	r2,r2,zero
   1151c:	1000031e 	bne	r2,zero,1152c <OSSemDel+0x38>
        return (pevent);
   11520:	e0bffb17 	ldw	r2,-20(fp)
   11524:	e0bfff15 	stw	r2,-4(fp)
   11528:	00009406 	br	1177c <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1152c:	e0bffb17 	ldw	r2,-20(fp)
   11530:	1004c03a 	cmpne	r2,r2,zero
   11534:	1000061e 	bne	r2,zero,11550 <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
   11538:	e0fffd17 	ldw	r3,-12(fp)
   1153c:	00800104 	movi	r2,4
   11540:	18800005 	stb	r2,0(r3)
        return (pevent);
   11544:	e0fffb17 	ldw	r3,-20(fp)
   11548:	e0ffff15 	stw	r3,-4(fp)
   1154c:	00008b06 	br	1177c <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   11550:	e0bffb17 	ldw	r2,-20(fp)
   11554:	10800003 	ldbu	r2,0(r2)
   11558:	10803fcc 	andi	r2,r2,255
   1155c:	108000e0 	cmpeqi	r2,r2,3
   11560:	1000061e 	bne	r2,zero,1157c <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
   11564:	e0fffd17 	ldw	r3,-12(fp)
   11568:	00800044 	movi	r2,1
   1156c:	18800005 	stb	r2,0(r3)
        return (pevent);
   11570:	e0bffb17 	ldw	r2,-20(fp)
   11574:	e0bfff15 	stw	r2,-4(fp)
   11578:	00008006 	br	1177c <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1157c:	008000b4 	movhi	r2,2
   11580:	10addc04 	addi	r2,r2,-18576
   11584:	10800003 	ldbu	r2,0(r2)
   11588:	10803fcc 	andi	r2,r2,255
   1158c:	1005003a 	cmpeq	r2,r2,zero
   11590:	1000061e 	bne	r2,zero,115ac <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   11594:	e0fffd17 	ldw	r3,-12(fp)
   11598:	008003c4 	movi	r2,15
   1159c:	18800005 	stb	r2,0(r3)
        return (pevent);
   115a0:	e0fffb17 	ldw	r3,-20(fp)
   115a4:	e0ffff15 	stw	r3,-4(fp)
   115a8:	00007406 	br	1177c <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   115ac:	0005303a 	rdctl	r2,status
   115b0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   115b4:	e0fff717 	ldw	r3,-36(fp)
   115b8:	00bfff84 	movi	r2,-2
   115bc:	1884703a 	and	r2,r3,r2
   115c0:	1001703a 	wrctl	status,r2
  
  return context;
   115c4:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   115c8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   115cc:	e0bffb17 	ldw	r2,-20(fp)
   115d0:	10800283 	ldbu	r2,10(r2)
   115d4:	10803fcc 	andi	r2,r2,255
   115d8:	1005003a 	cmpeq	r2,r2,zero
   115dc:	1000031e 	bne	r2,zero,115ec <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   115e0:	00800044 	movi	r2,1
   115e4:	e0bffa05 	stb	r2,-24(fp)
   115e8:	00000106 	br	115f0 <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   115ec:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
   115f0:	e0bffc03 	ldbu	r2,-16(fp)
   115f4:	e0bffe15 	stw	r2,-8(fp)
   115f8:	e0fffe17 	ldw	r3,-8(fp)
   115fc:	1805003a 	cmpeq	r2,r3,zero
   11600:	1000041e 	bne	r2,zero,11614 <OSSemDel+0x120>
   11604:	e0fffe17 	ldw	r3,-8(fp)
   11608:	18800060 	cmpeqi	r2,r3,1
   1160c:	10002d1e 	bne	r2,zero,116c4 <OSSemDel+0x1d0>
   11610:	00004f06 	br	11750 <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   11614:	e0bffa03 	ldbu	r2,-24(fp)
   11618:	1004c03a 	cmpne	r2,r2,zero
   1161c:	10001a1e 	bne	r2,zero,11688 <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   11620:	e0fffb17 	ldw	r3,-20(fp)
   11624:	00800fc4 	movi	r2,63
   11628:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   1162c:	e0bffb17 	ldw	r2,-20(fp)
   11630:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   11634:	e0bffb17 	ldw	r2,-20(fp)
   11638:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   1163c:	008000b4 	movhi	r2,2
   11640:	10addb04 	addi	r2,r2,-18580
   11644:	10c00017 	ldw	r3,0(r2)
   11648:	e0bffb17 	ldw	r2,-20(fp)
   1164c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   11650:	e0bffb17 	ldw	r2,-20(fp)
   11654:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   11658:	00c000b4 	movhi	r3,2
   1165c:	18eddb04 	addi	r3,r3,-18580
   11660:	e0bffb17 	ldw	r2,-20(fp)
   11664:	18800015 	stw	r2,0(r3)
   11668:	e0bff817 	ldw	r2,-32(fp)
   1166c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11670:	e0bff617 	ldw	r2,-40(fp)
   11674:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   11678:	e0bffd17 	ldw	r2,-12(fp)
   1167c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   11680:	e03ff915 	stw	zero,-28(fp)
   11684:	00003b06 	br	11774 <OSSemDel+0x280>
   11688:	e0bff817 	ldw	r2,-32(fp)
   1168c:	e0bff515 	stw	r2,-44(fp)
   11690:	e0bff517 	ldw	r2,-44(fp)
   11694:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   11698:	e0fffd17 	ldw	r3,-12(fp)
   1169c:	00801244 	movi	r2,73
   116a0:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
   116a4:	e0bffb17 	ldw	r2,-20(fp)
   116a8:	e0bff915 	stw	r2,-28(fp)
             }
             break;
   116ac:	00003106 	br	11774 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   116b0:	e13ffb17 	ldw	r4,-20(fp)
   116b4:	000b883a 	mov	r5,zero
   116b8:	01800044 	movi	r6,1
   116bc:	000f883a 	mov	r7,zero
   116c0:	000cbf40 	call	cbf4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   116c4:	e0bffb17 	ldw	r2,-20(fp)
   116c8:	10800283 	ldbu	r2,10(r2)
   116cc:	10803fcc 	andi	r2,r2,255
   116d0:	1004c03a 	cmpne	r2,r2,zero
   116d4:	103ff61e 	bne	r2,zero,116b0 <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   116d8:	e0fffb17 	ldw	r3,-20(fp)
   116dc:	00800fc4 	movi	r2,63
   116e0:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   116e4:	e0bffb17 	ldw	r2,-20(fp)
   116e8:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   116ec:	e0bffb17 	ldw	r2,-20(fp)
   116f0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   116f4:	008000b4 	movhi	r2,2
   116f8:	10addb04 	addi	r2,r2,-18580
   116fc:	10c00017 	ldw	r3,0(r2)
   11700:	e0bffb17 	ldw	r2,-20(fp)
   11704:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   11708:	e0bffb17 	ldw	r2,-20(fp)
   1170c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   11710:	00c000b4 	movhi	r3,2
   11714:	18eddb04 	addi	r3,r3,-18580
   11718:	e0bffb17 	ldw	r2,-20(fp)
   1171c:	18800015 	stw	r2,0(r3)
   11720:	e0bff817 	ldw	r2,-32(fp)
   11724:	e0bff415 	stw	r2,-48(fp)
   11728:	e0bff417 	ldw	r2,-48(fp)
   1172c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   11730:	e0bffa03 	ldbu	r2,-24(fp)
   11734:	10800058 	cmpnei	r2,r2,1
   11738:	1000011e 	bne	r2,zero,11740 <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1173c:	000d6340 	call	d634 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   11740:	e0bffd17 	ldw	r2,-12(fp)
   11744:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   11748:	e03ff915 	stw	zero,-28(fp)
             break;
   1174c:	00000906 	br	11774 <OSSemDel+0x280>
   11750:	e0bff817 	ldw	r2,-32(fp)
   11754:	e0bff315 	stw	r2,-52(fp)
   11758:	e0bff317 	ldw	r2,-52(fp)
   1175c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   11760:	e0fffd17 	ldw	r3,-12(fp)
   11764:	008001c4 	movi	r2,7
   11768:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
   1176c:	e0bffb17 	ldw	r2,-20(fp)
   11770:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
   11774:	e0bff917 	ldw	r2,-28(fp)
   11778:	e0bfff15 	stw	r2,-4(fp)
   1177c:	e0bfff17 	ldw	r2,-4(fp)
}
   11780:	e037883a 	mov	sp,fp
   11784:	dfc00117 	ldw	ra,4(sp)
   11788:	df000017 	ldw	fp,0(sp)
   1178c:	dec00204 	addi	sp,sp,8
   11790:	f800283a 	ret

00011794 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   11794:	defff404 	addi	sp,sp,-48
   11798:	dfc00b15 	stw	ra,44(sp)
   1179c:	df000a15 	stw	fp,40(sp)
   117a0:	df000a04 	addi	fp,sp,40
   117a4:	e13ffc15 	stw	r4,-16(fp)
   117a8:	e1bffe15 	stw	r6,-8(fp)
   117ac:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   117b0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   117b4:	e0bffe17 	ldw	r2,-8(fp)
   117b8:	1005003a 	cmpeq	r2,r2,zero
   117bc:	10008f1e 	bne	r2,zero,119fc <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   117c0:	e0bffc17 	ldw	r2,-16(fp)
   117c4:	1004c03a 	cmpne	r2,r2,zero
   117c8:	1000041e 	bne	r2,zero,117dc <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   117cc:	e0fffe17 	ldw	r3,-8(fp)
   117d0:	00800104 	movi	r2,4
   117d4:	18800005 	stb	r2,0(r3)
        return;
   117d8:	00008806 	br	119fc <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   117dc:	e0bffc17 	ldw	r2,-16(fp)
   117e0:	10800003 	ldbu	r2,0(r2)
   117e4:	10803fcc 	andi	r2,r2,255
   117e8:	108000e0 	cmpeqi	r2,r2,3
   117ec:	1000041e 	bne	r2,zero,11800 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   117f0:	e0fffe17 	ldw	r3,-8(fp)
   117f4:	00800044 	movi	r2,1
   117f8:	18800005 	stb	r2,0(r3)
        return;
   117fc:	00007f06 	br	119fc <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   11800:	008000b4 	movhi	r2,2
   11804:	10addc04 	addi	r2,r2,-18576
   11808:	10800003 	ldbu	r2,0(r2)
   1180c:	10803fcc 	andi	r2,r2,255
   11810:	1005003a 	cmpeq	r2,r2,zero
   11814:	1000041e 	bne	r2,zero,11828 <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   11818:	e0fffe17 	ldw	r3,-8(fp)
   1181c:	00800084 	movi	r2,2
   11820:	18800005 	stb	r2,0(r3)
        return;
   11824:	00007506 	br	119fc <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   11828:	008000b4 	movhi	r2,2
   1182c:	10adce04 	addi	r2,r2,-18632
   11830:	10800003 	ldbu	r2,0(r2)
   11834:	10803fcc 	andi	r2,r2,255
   11838:	1005003a 	cmpeq	r2,r2,zero
   1183c:	1000041e 	bne	r2,zero,11850 <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   11840:	e0fffe17 	ldw	r3,-8(fp)
   11844:	00800344 	movi	r2,13
   11848:	18800005 	stb	r2,0(r3)
        return;
   1184c:	00006b06 	br	119fc <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11850:	0005303a 	rdctl	r2,status
   11854:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11858:	e0fffa17 	ldw	r3,-24(fp)
   1185c:	00bfff84 	movi	r2,-2
   11860:	1884703a 	and	r2,r3,r2
   11864:	1001703a 	wrctl	status,r2
  
  return context;
   11868:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1186c:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   11870:	e0bffc17 	ldw	r2,-16(fp)
   11874:	1080020b 	ldhu	r2,8(r2)
   11878:	10bfffcc 	andi	r2,r2,65535
   1187c:	1005003a 	cmpeq	r2,r2,zero
   11880:	10000d1e 	bne	r2,zero,118b8 <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   11884:	e0bffc17 	ldw	r2,-16(fp)
   11888:	1080020b 	ldhu	r2,8(r2)
   1188c:	10bfffc4 	addi	r2,r2,-1
   11890:	1007883a 	mov	r3,r2
   11894:	e0bffc17 	ldw	r2,-16(fp)
   11898:	10c0020d 	sth	r3,8(r2)
   1189c:	e0bffb17 	ldw	r2,-20(fp)
   118a0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   118a4:	e0bff917 	ldw	r2,-28(fp)
   118a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   118ac:	e0bffe17 	ldw	r2,-8(fp)
   118b0:	10000005 	stb	zero,0(r2)
        return;
   118b4:	00005106 	br	119fc <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   118b8:	008000b4 	movhi	r2,2
   118bc:	10addd04 	addi	r2,r2,-18572
   118c0:	10c00017 	ldw	r3,0(r2)
   118c4:	008000b4 	movhi	r2,2
   118c8:	10addd04 	addi	r2,r2,-18572
   118cc:	10800017 	ldw	r2,0(r2)
   118d0:	10800c03 	ldbu	r2,48(r2)
   118d4:	10800054 	ori	r2,r2,1
   118d8:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   118dc:	008000b4 	movhi	r2,2
   118e0:	10addd04 	addi	r2,r2,-18572
   118e4:	10800017 	ldw	r2,0(r2)
   118e8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   118ec:	008000b4 	movhi	r2,2
   118f0:	10addd04 	addi	r2,r2,-18572
   118f4:	10c00017 	ldw	r3,0(r2)
   118f8:	e0bffd0b 	ldhu	r2,-12(fp)
   118fc:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   11900:	e13ffc17 	ldw	r4,-16(fp)
   11904:	000cd880 	call	cd88 <OS_EventTaskWait>
   11908:	e0bffb17 	ldw	r2,-20(fp)
   1190c:	e0bff815 	stw	r2,-32(fp)
   11910:	e0bff817 	ldw	r2,-32(fp)
   11914:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   11918:	000d6340 	call	d634 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1191c:	0005303a 	rdctl	r2,status
   11920:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11924:	e0fff717 	ldw	r3,-36(fp)
   11928:	00bfff84 	movi	r2,-2
   1192c:	1884703a 	and	r2,r3,r2
   11930:	1001703a 	wrctl	status,r2
  
  return context;
   11934:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   11938:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1193c:	008000b4 	movhi	r2,2
   11940:	10addd04 	addi	r2,r2,-18572
   11944:	10800017 	ldw	r2,0(r2)
   11948:	10800c43 	ldbu	r2,49(r2)
   1194c:	10803fcc 	andi	r2,r2,255
   11950:	e0bfff15 	stw	r2,-4(fp)
   11954:	e0ffff17 	ldw	r3,-4(fp)
   11958:	1805003a 	cmpeq	r2,r3,zero
   1195c:	1000041e 	bne	r2,zero,11970 <OSSemPend+0x1dc>
   11960:	e0ffff17 	ldw	r3,-4(fp)
   11964:	188000a0 	cmpeqi	r2,r3,2
   11968:	1000041e 	bne	r2,zero,1197c <OSSemPend+0x1e8>
   1196c:	00000706 	br	1198c <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   11970:	e0bffe17 	ldw	r2,-8(fp)
   11974:	10000005 	stb	zero,0(r2)
             break;
   11978:	00000c06 	br	119ac <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   1197c:	e0fffe17 	ldw	r3,-8(fp)
   11980:	00800384 	movi	r2,14
   11984:	18800005 	stb	r2,0(r3)
             break;
   11988:	00000806 	br	119ac <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   1198c:	008000b4 	movhi	r2,2
   11990:	10addd04 	addi	r2,r2,-18572
   11994:	11000017 	ldw	r4,0(r2)
   11998:	e17ffc17 	ldw	r5,-16(fp)
   1199c:	000cfec0 	call	cfec <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   119a0:	e0fffe17 	ldw	r3,-8(fp)
   119a4:	00800284 	movi	r2,10
   119a8:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   119ac:	008000b4 	movhi	r2,2
   119b0:	10addd04 	addi	r2,r2,-18572
   119b4:	10800017 	ldw	r2,0(r2)
   119b8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   119bc:	008000b4 	movhi	r2,2
   119c0:	10addd04 	addi	r2,r2,-18572
   119c4:	10800017 	ldw	r2,0(r2)
   119c8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   119cc:	008000b4 	movhi	r2,2
   119d0:	10addd04 	addi	r2,r2,-18572
   119d4:	10800017 	ldw	r2,0(r2)
   119d8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   119dc:	008000b4 	movhi	r2,2
   119e0:	10addd04 	addi	r2,r2,-18572
   119e4:	10800017 	ldw	r2,0(r2)
   119e8:	10000815 	stw	zero,32(r2)
   119ec:	e0bffb17 	ldw	r2,-20(fp)
   119f0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   119f4:	e0bff617 	ldw	r2,-40(fp)
   119f8:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   119fc:	e037883a 	mov	sp,fp
   11a00:	dfc00117 	ldw	ra,4(sp)
   11a04:	df000017 	ldw	fp,0(sp)
   11a08:	dec00204 	addi	sp,sp,8
   11a0c:	f800283a 	ret

00011a10 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   11a10:	defff504 	addi	sp,sp,-44
   11a14:	dfc00a15 	stw	ra,40(sp)
   11a18:	df000915 	stw	fp,36(sp)
   11a1c:	df000904 	addi	fp,sp,36
   11a20:	e13ffc15 	stw	r4,-16(fp)
   11a24:	e1bffe15 	stw	r6,-8(fp)
   11a28:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   11a2c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   11a30:	e0bffe17 	ldw	r2,-8(fp)
   11a34:	1004c03a 	cmpne	r2,r2,zero
   11a38:	1000021e 	bne	r2,zero,11a44 <OSSemPendAbort+0x34>
        return (0);
   11a3c:	e03fff15 	stw	zero,-4(fp)
   11a40:	00004c06 	br	11b74 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   11a44:	e0bffc17 	ldw	r2,-16(fp)
   11a48:	1004c03a 	cmpne	r2,r2,zero
   11a4c:	1000051e 	bne	r2,zero,11a64 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
   11a50:	e0fffe17 	ldw	r3,-8(fp)
   11a54:	00800104 	movi	r2,4
   11a58:	18800005 	stb	r2,0(r3)
        return (0);
   11a5c:	e03fff15 	stw	zero,-4(fp)
   11a60:	00004406 	br	11b74 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   11a64:	e0bffc17 	ldw	r2,-16(fp)
   11a68:	10800003 	ldbu	r2,0(r2)
   11a6c:	10803fcc 	andi	r2,r2,255
   11a70:	108000e0 	cmpeqi	r2,r2,3
   11a74:	1000051e 	bne	r2,zero,11a8c <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   11a78:	e0fffe17 	ldw	r3,-8(fp)
   11a7c:	00800044 	movi	r2,1
   11a80:	18800005 	stb	r2,0(r3)
        return (0);
   11a84:	e03fff15 	stw	zero,-4(fp)
   11a88:	00003a06 	br	11b74 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11a8c:	0005303a 	rdctl	r2,status
   11a90:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11a94:	e0fff917 	ldw	r3,-28(fp)
   11a98:	00bfff84 	movi	r2,-2
   11a9c:	1884703a 	and	r2,r3,r2
   11aa0:	1001703a 	wrctl	status,r2
  
  return context;
   11aa4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   11aa8:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   11aac:	e0bffc17 	ldw	r2,-16(fp)
   11ab0:	10800283 	ldbu	r2,10(r2)
   11ab4:	10803fcc 	andi	r2,r2,255
   11ab8:	1005003a 	cmpeq	r2,r2,zero
   11abc:	1000261e 	bne	r2,zero,11b58 <OSSemPendAbort+0x148>
        nbr_tasks = 0;
   11ac0:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
   11ac4:	e0bffd03 	ldbu	r2,-12(fp)
   11ac8:	10800060 	cmpeqi	r2,r2,1
   11acc:	1000091e 	bne	r2,zero,11af4 <OSSemPendAbort+0xe4>
   11ad0:	00000e06 	br	11b0c <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   11ad4:	e13ffc17 	ldw	r4,-16(fp)
   11ad8:	000b883a 	mov	r5,zero
   11adc:	01800044 	movi	r6,1
   11ae0:	01c00084 	movi	r7,2
   11ae4:	000cbf40 	call	cbf4 <OS_EventTaskRdy>
                     nbr_tasks++;
   11ae8:	e0bffb03 	ldbu	r2,-20(fp)
   11aec:	10800044 	addi	r2,r2,1
   11af0:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   11af4:	e0bffc17 	ldw	r2,-16(fp)
   11af8:	10800283 	ldbu	r2,10(r2)
   11afc:	10803fcc 	andi	r2,r2,255
   11b00:	1004c03a 	cmpne	r2,r2,zero
   11b04:	103ff31e 	bne	r2,zero,11ad4 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   11b08:	00000806 	br	11b2c <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   11b0c:	e13ffc17 	ldw	r4,-16(fp)
   11b10:	000b883a 	mov	r5,zero
   11b14:	01800044 	movi	r6,1
   11b18:	01c00084 	movi	r7,2
   11b1c:	000cbf40 	call	cbf4 <OS_EventTaskRdy>
                 nbr_tasks++;
   11b20:	e0bffb03 	ldbu	r2,-20(fp)
   11b24:	10800044 	addi	r2,r2,1
   11b28:	e0bffb05 	stb	r2,-20(fp)
   11b2c:	e0bffa17 	ldw	r2,-24(fp)
   11b30:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11b34:	e0bff817 	ldw	r2,-32(fp)
   11b38:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   11b3c:	000d6340 	call	d634 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   11b40:	e0fffe17 	ldw	r3,-8(fp)
   11b44:	00800384 	movi	r2,14
   11b48:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
   11b4c:	e0bffb03 	ldbu	r2,-20(fp)
   11b50:	e0bfff15 	stw	r2,-4(fp)
   11b54:	00000706 	br	11b74 <OSSemPendAbort+0x164>
   11b58:	e0bffa17 	ldw	r2,-24(fp)
   11b5c:	e0bff715 	stw	r2,-36(fp)
   11b60:	e0bff717 	ldw	r2,-36(fp)
   11b64:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11b68:	e0bffe17 	ldw	r2,-8(fp)
   11b6c:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   11b70:	e03fff15 	stw	zero,-4(fp)
   11b74:	e0bfff17 	ldw	r2,-4(fp)
}
   11b78:	e037883a 	mov	sp,fp
   11b7c:	dfc00117 	ldw	ra,4(sp)
   11b80:	df000017 	ldw	fp,0(sp)
   11b84:	dec00204 	addi	sp,sp,8
   11b88:	f800283a 	ret

00011b8c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   11b8c:	defff704 	addi	sp,sp,-36
   11b90:	dfc00815 	stw	ra,32(sp)
   11b94:	df000715 	stw	fp,28(sp)
   11b98:	df000704 	addi	fp,sp,28
   11b9c:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   11ba0:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   11ba4:	e0bffe17 	ldw	r2,-8(fp)
   11ba8:	1004c03a 	cmpne	r2,r2,zero
   11bac:	1000031e 	bne	r2,zero,11bbc <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
   11bb0:	00800104 	movi	r2,4
   11bb4:	e0bfff15 	stw	r2,-4(fp)
   11bb8:	00003806 	br	11c9c <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   11bbc:	e0bffe17 	ldw	r2,-8(fp)
   11bc0:	10800003 	ldbu	r2,0(r2)
   11bc4:	10803fcc 	andi	r2,r2,255
   11bc8:	108000e0 	cmpeqi	r2,r2,3
   11bcc:	1000031e 	bne	r2,zero,11bdc <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
   11bd0:	00800044 	movi	r2,1
   11bd4:	e0bfff15 	stw	r2,-4(fp)
   11bd8:	00003006 	br	11c9c <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11bdc:	0005303a 	rdctl	r2,status
   11be0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11be4:	e0fffc17 	ldw	r3,-16(fp)
   11be8:	00bfff84 	movi	r2,-2
   11bec:	1884703a 	and	r2,r3,r2
   11bf0:	1001703a 	wrctl	status,r2
  
  return context;
   11bf4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   11bf8:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   11bfc:	e0bffe17 	ldw	r2,-8(fp)
   11c00:	10800283 	ldbu	r2,10(r2)
   11c04:	10803fcc 	andi	r2,r2,255
   11c08:	1005003a 	cmpeq	r2,r2,zero
   11c0c:	10000c1e 	bne	r2,zero,11c40 <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   11c10:	e13ffe17 	ldw	r4,-8(fp)
   11c14:	000b883a 	mov	r5,zero
   11c18:	01800044 	movi	r6,1
   11c1c:	000f883a 	mov	r7,zero
   11c20:	000cbf40 	call	cbf4 <OS_EventTaskRdy>
   11c24:	e0bffd17 	ldw	r2,-12(fp)
   11c28:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11c2c:	e0bffb17 	ldw	r2,-20(fp)
   11c30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   11c34:	000d6340 	call	d634 <OS_Sched>
        return (OS_ERR_NONE);
   11c38:	e03fff15 	stw	zero,-4(fp)
   11c3c:	00001706 	br	11c9c <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   11c40:	e0bffe17 	ldw	r2,-8(fp)
   11c44:	1080020b 	ldhu	r2,8(r2)
   11c48:	10ffffcc 	andi	r3,r2,65535
   11c4c:	00bfffd4 	movui	r2,65535
   11c50:	18800c26 	beq	r3,r2,11c84 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   11c54:	e0bffe17 	ldw	r2,-8(fp)
   11c58:	1080020b 	ldhu	r2,8(r2)
   11c5c:	10800044 	addi	r2,r2,1
   11c60:	1007883a 	mov	r3,r2
   11c64:	e0bffe17 	ldw	r2,-8(fp)
   11c68:	10c0020d 	sth	r3,8(r2)
   11c6c:	e0bffd17 	ldw	r2,-12(fp)
   11c70:	e0bffa15 	stw	r2,-24(fp)
   11c74:	e0bffa17 	ldw	r2,-24(fp)
   11c78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   11c7c:	e03fff15 	stw	zero,-4(fp)
   11c80:	00000606 	br	11c9c <OSSemPost+0x110>
   11c84:	e0bffd17 	ldw	r2,-12(fp)
   11c88:	e0bff915 	stw	r2,-28(fp)
   11c8c:	e0bff917 	ldw	r2,-28(fp)
   11c90:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   11c94:	00800c84 	movi	r2,50
   11c98:	e0bfff15 	stw	r2,-4(fp)
   11c9c:	e0bfff17 	ldw	r2,-4(fp)
}
   11ca0:	e037883a 	mov	sp,fp
   11ca4:	dfc00117 	ldw	ra,4(sp)
   11ca8:	df000017 	ldw	fp,0(sp)
   11cac:	dec00204 	addi	sp,sp,8
   11cb0:	f800283a 	ret

00011cb4 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   11cb4:	defff604 	addi	sp,sp,-40
   11cb8:	df000915 	stw	fp,36(sp)
   11cbc:	df000904 	addi	fp,sp,36
   11cc0:	e13ffd15 	stw	r4,-12(fp)
   11cc4:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   11cc8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   11ccc:	e0bffd17 	ldw	r2,-12(fp)
   11cd0:	1004c03a 	cmpne	r2,r2,zero
   11cd4:	1000031e 	bne	r2,zero,11ce4 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
   11cd8:	00800104 	movi	r2,4
   11cdc:	e0bfff15 	stw	r2,-4(fp)
   11ce0:	00003b06 	br	11dd0 <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   11ce4:	e0bffe17 	ldw	r2,-8(fp)
   11ce8:	1004c03a 	cmpne	r2,r2,zero
   11cec:	1000031e 	bne	r2,zero,11cfc <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
   11cf0:	00800244 	movi	r2,9
   11cf4:	e0bfff15 	stw	r2,-4(fp)
   11cf8:	00003506 	br	11dd0 <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   11cfc:	e0bffd17 	ldw	r2,-12(fp)
   11d00:	10800003 	ldbu	r2,0(r2)
   11d04:	10803fcc 	andi	r2,r2,255
   11d08:	108000e0 	cmpeqi	r2,r2,3
   11d0c:	1000031e 	bne	r2,zero,11d1c <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
   11d10:	00800044 	movi	r2,1
   11d14:	e0bfff15 	stw	r2,-4(fp)
   11d18:	00002d06 	br	11dd0 <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11d1c:	0005303a 	rdctl	r2,status
   11d20:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11d24:	e0fff817 	ldw	r3,-32(fp)
   11d28:	00bfff84 	movi	r2,-2
   11d2c:	1884703a 	and	r2,r3,r2
   11d30:	1001703a 	wrctl	status,r2
  
  return context;
   11d34:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   11d38:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   11d3c:	e0bffd17 	ldw	r2,-12(fp)
   11d40:	10c00283 	ldbu	r3,10(r2)
   11d44:	e0bffe17 	ldw	r2,-8(fp)
   11d48:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   11d4c:	e0bffd17 	ldw	r2,-12(fp)
   11d50:	108002c4 	addi	r2,r2,11
   11d54:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   11d58:	e0bffe17 	ldw	r2,-8(fp)
   11d5c:	10800084 	addi	r2,r2,2
   11d60:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   11d64:	e03ffa05 	stb	zero,-24(fp)
   11d68:	00000d06 	br	11da0 <OSSemQuery+0xec>
        *pdest++ = *psrc++;
   11d6c:	e0bffc17 	ldw	r2,-16(fp)
   11d70:	10c00003 	ldbu	r3,0(r2)
   11d74:	e0bffb17 	ldw	r2,-20(fp)
   11d78:	10c00005 	stb	r3,0(r2)
   11d7c:	e0bffb17 	ldw	r2,-20(fp)
   11d80:	10800044 	addi	r2,r2,1
   11d84:	e0bffb15 	stw	r2,-20(fp)
   11d88:	e0bffc17 	ldw	r2,-16(fp)
   11d8c:	10800044 	addi	r2,r2,1
   11d90:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   11d94:	e0bffa03 	ldbu	r2,-24(fp)
   11d98:	10800044 	addi	r2,r2,1
   11d9c:	e0bffa05 	stb	r2,-24(fp)
   11da0:	e0bffa03 	ldbu	r2,-24(fp)
   11da4:	108000f0 	cmpltui	r2,r2,3
   11da8:	103ff01e 	bne	r2,zero,11d6c <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   11dac:	e0bffd17 	ldw	r2,-12(fp)
   11db0:	10c0020b 	ldhu	r3,8(r2)
   11db4:	e0bffe17 	ldw	r2,-8(fp)
   11db8:	10c0000d 	sth	r3,0(r2)
   11dbc:	e0bff917 	ldw	r2,-28(fp)
   11dc0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11dc4:	e0bff717 	ldw	r2,-36(fp)
   11dc8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   11dcc:	e03fff15 	stw	zero,-4(fp)
   11dd0:	e0bfff17 	ldw	r2,-4(fp)
}
   11dd4:	e037883a 	mov	sp,fp
   11dd8:	df000017 	ldw	fp,0(sp)
   11ddc:	dec00104 	addi	sp,sp,4
   11de0:	f800283a 	ret

00011de4 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   11de4:	defff904 	addi	sp,sp,-28
   11de8:	df000615 	stw	fp,24(sp)
   11dec:	df000604 	addi	fp,sp,24
   11df0:	e13ffd15 	stw	r4,-12(fp)
   11df4:	e1bfff15 	stw	r6,-4(fp)
   11df8:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   11dfc:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   11e00:	e0bfff17 	ldw	r2,-4(fp)
   11e04:	1005003a 	cmpeq	r2,r2,zero
   11e08:	1000331e 	bne	r2,zero,11ed8 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   11e0c:	e0bffd17 	ldw	r2,-12(fp)
   11e10:	1004c03a 	cmpne	r2,r2,zero
   11e14:	1000041e 	bne	r2,zero,11e28 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   11e18:	e0ffff17 	ldw	r3,-4(fp)
   11e1c:	00800104 	movi	r2,4
   11e20:	18800005 	stb	r2,0(r3)
        return;
   11e24:	00002c06 	br	11ed8 <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   11e28:	e0bffd17 	ldw	r2,-12(fp)
   11e2c:	10800003 	ldbu	r2,0(r2)
   11e30:	10803fcc 	andi	r2,r2,255
   11e34:	108000e0 	cmpeqi	r2,r2,3
   11e38:	1000041e 	bne	r2,zero,11e4c <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   11e3c:	e0ffff17 	ldw	r3,-4(fp)
   11e40:	00800044 	movi	r2,1
   11e44:	18800005 	stb	r2,0(r3)
        return;
   11e48:	00002306 	br	11ed8 <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11e4c:	0005303a 	rdctl	r2,status
   11e50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11e54:	e0fffb17 	ldw	r3,-20(fp)
   11e58:	00bfff84 	movi	r2,-2
   11e5c:	1884703a 	and	r2,r3,r2
   11e60:	1001703a 	wrctl	status,r2
  
  return context;
   11e64:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   11e68:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
   11e6c:	e0bfff17 	ldw	r2,-4(fp)
   11e70:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   11e74:	e0bffd17 	ldw	r2,-12(fp)
   11e78:	1080020b 	ldhu	r2,8(r2)
   11e7c:	10bfffcc 	andi	r2,r2,65535
   11e80:	1005003a 	cmpeq	r2,r2,zero
   11e84:	1000041e 	bne	r2,zero,11e98 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   11e88:	e0fffd17 	ldw	r3,-12(fp)
   11e8c:	e0bffe0b 	ldhu	r2,-8(fp)
   11e90:	1880020d 	sth	r2,8(r3)
   11e94:	00000c06 	br	11ec8 <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   11e98:	e0bffd17 	ldw	r2,-12(fp)
   11e9c:	10800283 	ldbu	r2,10(r2)
   11ea0:	10803fcc 	andi	r2,r2,255
   11ea4:	1004c03a 	cmpne	r2,r2,zero
   11ea8:	1000041e 	bne	r2,zero,11ebc <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   11eac:	e0fffd17 	ldw	r3,-12(fp)
   11eb0:	e0bffe0b 	ldhu	r2,-8(fp)
   11eb4:	1880020d 	sth	r2,8(r3)
   11eb8:	00000306 	br	11ec8 <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   11ebc:	e0ffff17 	ldw	r3,-4(fp)
   11ec0:	00801244 	movi	r2,73
   11ec4:	18800005 	stb	r2,0(r3)
   11ec8:	e0bffc17 	ldw	r2,-16(fp)
   11ecc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11ed0:	e0bffa17 	ldw	r2,-24(fp)
   11ed4:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   11ed8:	e037883a 	mov	sp,fp
   11edc:	df000017 	ldw	fp,0(sp)
   11ee0:	dec00104 	addi	sp,sp,4
   11ee4:	f800283a 	ret

00011ee8 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   11ee8:	defff004 	addi	sp,sp,-64
   11eec:	dfc00f15 	stw	ra,60(sp)
   11ef0:	df000e15 	stw	fp,56(sp)
   11ef4:	df000e04 	addi	fp,sp,56
   11ef8:	e13ffd05 	stb	r4,-12(fp)
   11efc:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   11f00:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   11f04:	e0bffd03 	ldbu	r2,-12(fp)
   11f08:	10800530 	cmpltui	r2,r2,20
   11f0c:	1000061e 	bne	r2,zero,11f28 <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
   11f10:	e0bffd03 	ldbu	r2,-12(fp)
   11f14:	10803fe0 	cmpeqi	r2,r2,255
   11f18:	1000031e 	bne	r2,zero,11f28 <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
   11f1c:	00800a84 	movi	r2,42
   11f20:	e0bfff15 	stw	r2,-4(fp)
   11f24:	00014706 	br	12444 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   11f28:	e0bffe03 	ldbu	r2,-8(fp)
   11f2c:	10800530 	cmpltui	r2,r2,20
   11f30:	1000031e 	bne	r2,zero,11f40 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   11f34:	00800a84 	movi	r2,42
   11f38:	e0bfff15 	stw	r2,-4(fp)
   11f3c:	00014106 	br	12444 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11f40:	0005303a 	rdctl	r2,status
   11f44:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11f48:	e0fff617 	ldw	r3,-40(fp)
   11f4c:	00bfff84 	movi	r2,-2
   11f50:	1884703a 	and	r2,r3,r2
   11f54:	1001703a 	wrctl	status,r2
  
  return context;
   11f58:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11f5c:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   11f60:	e0bffe03 	ldbu	r2,-8(fp)
   11f64:	00c000b4 	movhi	r3,2
   11f68:	18ca7c04 	addi	r3,r3,10736
   11f6c:	1085883a 	add	r2,r2,r2
   11f70:	1085883a 	add	r2,r2,r2
   11f74:	10c5883a 	add	r2,r2,r3
   11f78:	10800017 	ldw	r2,0(r2)
   11f7c:	1005003a 	cmpeq	r2,r2,zero
   11f80:	1000071e 	bne	r2,zero,11fa0 <OSTaskChangePrio+0xb8>
   11f84:	e0bff717 	ldw	r2,-36(fp)
   11f88:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11f8c:	e0bff517 	ldw	r2,-44(fp)
   11f90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   11f94:	00800a04 	movi	r2,40
   11f98:	e0bfff15 	stw	r2,-4(fp)
   11f9c:	00012906 	br	12444 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   11fa0:	e0bffd03 	ldbu	r2,-12(fp)
   11fa4:	10803fd8 	cmpnei	r2,r2,255
   11fa8:	1000051e 	bne	r2,zero,11fc0 <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   11fac:	008000b4 	movhi	r2,2
   11fb0:	10addd04 	addi	r2,r2,-18572
   11fb4:	10800017 	ldw	r2,0(r2)
   11fb8:	10800c83 	ldbu	r2,50(r2)
   11fbc:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   11fc0:	e0bffd03 	ldbu	r2,-12(fp)
   11fc4:	00c000b4 	movhi	r3,2
   11fc8:	18ca7c04 	addi	r3,r3,10736
   11fcc:	1085883a 	add	r2,r2,r2
   11fd0:	1085883a 	add	r2,r2,r2
   11fd4:	10c5883a 	add	r2,r2,r3
   11fd8:	10800017 	ldw	r2,0(r2)
   11fdc:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   11fe0:	e0bffa17 	ldw	r2,-24(fp)
   11fe4:	1004c03a 	cmpne	r2,r2,zero
   11fe8:	1000071e 	bne	r2,zero,12008 <OSTaskChangePrio+0x120>
   11fec:	e0bff717 	ldw	r2,-36(fp)
   11ff0:	e0bff415 	stw	r2,-48(fp)
   11ff4:	e0bff417 	ldw	r2,-48(fp)
   11ff8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   11ffc:	00800a44 	movi	r2,41
   12000:	e0bfff15 	stw	r2,-4(fp)
   12004:	00010f06 	br	12444 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   12008:	e0bffa17 	ldw	r2,-24(fp)
   1200c:	10800058 	cmpnei	r2,r2,1
   12010:	1000071e 	bne	r2,zero,12030 <OSTaskChangePrio+0x148>
   12014:	e0bff717 	ldw	r2,-36(fp)
   12018:	e0bff315 	stw	r2,-52(fp)
   1201c:	e0bff317 	ldw	r2,-52(fp)
   12020:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   12024:	008010c4 	movi	r2,67
   12028:	e0bfff15 	stw	r2,-4(fp)
   1202c:	00010506 	br	12444 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   12030:	e0bffe03 	ldbu	r2,-8(fp)
   12034:	1004d0fa 	srli	r2,r2,3
   12038:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   1203c:	e0bffe03 	ldbu	r2,-8(fp)
   12040:	108001cc 	andi	r2,r2,7
   12044:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
   12048:	e0fff983 	ldbu	r3,-26(fp)
   1204c:	00800044 	movi	r2,1
   12050:	10c4983a 	sll	r2,r2,r3
   12054:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
   12058:	e0fff943 	ldbu	r3,-27(fp)
   1205c:	00800044 	movi	r2,1
   12060:	10c4983a 	sll	r2,r2,r3
   12064:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   12068:	e0bffd03 	ldbu	r2,-12(fp)
   1206c:	00c000b4 	movhi	r3,2
   12070:	18ca7c04 	addi	r3,r3,10736
   12074:	1085883a 	add	r2,r2,r2
   12078:	1085883a 	add	r2,r2,r2
   1207c:	10c5883a 	add	r2,r2,r3
   12080:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   12084:	e0bffe03 	ldbu	r2,-8(fp)
   12088:	00c000b4 	movhi	r3,2
   1208c:	18ca7c04 	addi	r3,r3,10736
   12090:	1085883a 	add	r2,r2,r2
   12094:	1085883a 	add	r2,r2,r2
   12098:	10c7883a 	add	r3,r2,r3
   1209c:	e0bffa17 	ldw	r2,-24(fp)
   120a0:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
   120a4:	e0bffa17 	ldw	r2,-24(fp)
   120a8:	10800d03 	ldbu	r2,52(r2)
   120ac:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
   120b0:	e0bffa17 	ldw	r2,-24(fp)
   120b4:	10800d83 	ldbu	r2,54(r2)
   120b8:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   120bc:	e0bffa17 	ldw	r2,-24(fp)
   120c0:	10800d43 	ldbu	r2,53(r2)
   120c4:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   120c8:	e0fff903 	ldbu	r3,-28(fp)
   120cc:	008000b4 	movhi	r2,2
   120d0:	10adda44 	addi	r2,r2,-18583
   120d4:	10c5883a 	add	r2,r2,r3
   120d8:	10c00003 	ldbu	r3,0(r2)
   120dc:	e0bff803 	ldbu	r2,-32(fp)
   120e0:	1884703a 	and	r2,r3,r2
   120e4:	10803fcc 	andi	r2,r2,255
   120e8:	1005003a 	cmpeq	r2,r2,zero
   120ec:	1000381e 	bne	r2,zero,121d0 <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
   120f0:	e13ff903 	ldbu	r4,-28(fp)
   120f4:	e0fff903 	ldbu	r3,-28(fp)
   120f8:	008000b4 	movhi	r2,2
   120fc:	10adda44 	addi	r2,r2,-18583
   12100:	10c5883a 	add	r2,r2,r3
   12104:	10800003 	ldbu	r2,0(r2)
   12108:	1007883a 	mov	r3,r2
   1210c:	e0bff803 	ldbu	r2,-32(fp)
   12110:	0084303a 	nor	r2,zero,r2
   12114:	1884703a 	and	r2,r3,r2
   12118:	1007883a 	mov	r3,r2
   1211c:	008000b4 	movhi	r2,2
   12120:	10adda44 	addi	r2,r2,-18583
   12124:	1105883a 	add	r2,r2,r4
   12128:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   1212c:	e0fff903 	ldbu	r3,-28(fp)
   12130:	008000b4 	movhi	r2,2
   12134:	10adda44 	addi	r2,r2,-18583
   12138:	10c5883a 	add	r2,r2,r3
   1213c:	10800003 	ldbu	r2,0(r2)
   12140:	10803fcc 	andi	r2,r2,255
   12144:	1004c03a 	cmpne	r2,r2,zero
   12148:	10000b1e 	bne	r2,zero,12178 <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
   1214c:	e0bff843 	ldbu	r2,-31(fp)
   12150:	0084303a 	nor	r2,zero,r2
   12154:	1007883a 	mov	r3,r2
   12158:	008000b4 	movhi	r2,2
   1215c:	10adda04 	addi	r2,r2,-18584
   12160:	10800003 	ldbu	r2,0(r2)
   12164:	1884703a 	and	r2,r3,r2
   12168:	1007883a 	mov	r3,r2
   1216c:	008000b4 	movhi	r2,2
   12170:	10adda04 	addi	r2,r2,-18584
   12174:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   12178:	008000b4 	movhi	r2,2
   1217c:	10adda04 	addi	r2,r2,-18584
   12180:	10c00003 	ldbu	r3,0(r2)
   12184:	e0bff8c3 	ldbu	r2,-29(fp)
   12188:	1884b03a 	or	r2,r3,r2
   1218c:	1007883a 	mov	r3,r2
   12190:	008000b4 	movhi	r2,2
   12194:	10adda04 	addi	r2,r2,-18584
   12198:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   1219c:	e13ff983 	ldbu	r4,-26(fp)
   121a0:	e0fff983 	ldbu	r3,-26(fp)
   121a4:	008000b4 	movhi	r2,2
   121a8:	10adda44 	addi	r2,r2,-18583
   121ac:	10c5883a 	add	r2,r2,r3
   121b0:	10c00003 	ldbu	r3,0(r2)
   121b4:	e0bff883 	ldbu	r2,-30(fp)
   121b8:	1884b03a 	or	r2,r3,r2
   121bc:	1007883a 	mov	r3,r2
   121c0:	008000b4 	movhi	r2,2
   121c4:	10adda44 	addi	r2,r2,-18583
   121c8:	1105883a 	add	r2,r2,r4
   121cc:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   121d0:	e0bffa17 	ldw	r2,-24(fp)
   121d4:	10800717 	ldw	r2,28(r2)
   121d8:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
   121dc:	e0bffc17 	ldw	r2,-16(fp)
   121e0:	1005003a 	cmpeq	r2,r2,zero
   121e4:	1000341e 	bne	r2,zero,122b8 <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   121e8:	e13ff903 	ldbu	r4,-28(fp)
   121ec:	e0fff903 	ldbu	r3,-28(fp)
   121f0:	e0bffc17 	ldw	r2,-16(fp)
   121f4:	1885883a 	add	r2,r3,r2
   121f8:	10800204 	addi	r2,r2,8
   121fc:	108000c3 	ldbu	r2,3(r2)
   12200:	1007883a 	mov	r3,r2
   12204:	e0bff803 	ldbu	r2,-32(fp)
   12208:	0084303a 	nor	r2,zero,r2
   1220c:	1884703a 	and	r2,r3,r2
   12210:	1007883a 	mov	r3,r2
   12214:	e0bffc17 	ldw	r2,-16(fp)
   12218:	2085883a 	add	r2,r4,r2
   1221c:	10800204 	addi	r2,r2,8
   12220:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   12224:	e0fff903 	ldbu	r3,-28(fp)
   12228:	e0bffc17 	ldw	r2,-16(fp)
   1222c:	1885883a 	add	r2,r3,r2
   12230:	10800204 	addi	r2,r2,8
   12234:	108000c3 	ldbu	r2,3(r2)
   12238:	10803fcc 	andi	r2,r2,255
   1223c:	1004c03a 	cmpne	r2,r2,zero
   12240:	1000091e 	bne	r2,zero,12268 <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
   12244:	e0bffc17 	ldw	r2,-16(fp)
   12248:	10800283 	ldbu	r2,10(r2)
   1224c:	1007883a 	mov	r3,r2
   12250:	e0bff843 	ldbu	r2,-31(fp)
   12254:	0084303a 	nor	r2,zero,r2
   12258:	1884703a 	and	r2,r3,r2
   1225c:	1007883a 	mov	r3,r2
   12260:	e0bffc17 	ldw	r2,-16(fp)
   12264:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   12268:	e0bffc17 	ldw	r2,-16(fp)
   1226c:	10c00283 	ldbu	r3,10(r2)
   12270:	e0bff8c3 	ldbu	r2,-29(fp)
   12274:	1884b03a 	or	r2,r3,r2
   12278:	1007883a 	mov	r3,r2
   1227c:	e0bffc17 	ldw	r2,-16(fp)
   12280:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   12284:	e13ff983 	ldbu	r4,-26(fp)
   12288:	e0fff983 	ldbu	r3,-26(fp)
   1228c:	e0bffc17 	ldw	r2,-16(fp)
   12290:	1885883a 	add	r2,r3,r2
   12294:	10800204 	addi	r2,r2,8
   12298:	10c000c3 	ldbu	r3,3(r2)
   1229c:	e0bff883 	ldbu	r2,-30(fp)
   122a0:	1884b03a 	or	r2,r3,r2
   122a4:	1007883a 	mov	r3,r2
   122a8:	e0bffc17 	ldw	r2,-16(fp)
   122ac:	2085883a 	add	r2,r4,r2
   122b0:	10800204 	addi	r2,r2,8
   122b4:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   122b8:	e0bffa17 	ldw	r2,-24(fp)
   122bc:	10800817 	ldw	r2,32(r2)
   122c0:	1005003a 	cmpeq	r2,r2,zero
   122c4:	1000441e 	bne	r2,zero,123d8 <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   122c8:	e0bffa17 	ldw	r2,-24(fp)
   122cc:	10800817 	ldw	r2,32(r2)
   122d0:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
   122d4:	e0bffb17 	ldw	r2,-20(fp)
   122d8:	10800017 	ldw	r2,0(r2)
   122dc:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
   122e0:	00003a06 	br	123cc <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   122e4:	e13ff903 	ldbu	r4,-28(fp)
   122e8:	e0fff903 	ldbu	r3,-28(fp)
   122ec:	e0bffc17 	ldw	r2,-16(fp)
   122f0:	1885883a 	add	r2,r3,r2
   122f4:	10800204 	addi	r2,r2,8
   122f8:	108000c3 	ldbu	r2,3(r2)
   122fc:	1007883a 	mov	r3,r2
   12300:	e0bff803 	ldbu	r2,-32(fp)
   12304:	0084303a 	nor	r2,zero,r2
   12308:	1884703a 	and	r2,r3,r2
   1230c:	1007883a 	mov	r3,r2
   12310:	e0bffc17 	ldw	r2,-16(fp)
   12314:	2085883a 	add	r2,r4,r2
   12318:	10800204 	addi	r2,r2,8
   1231c:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   12320:	e0fff903 	ldbu	r3,-28(fp)
   12324:	e0bffc17 	ldw	r2,-16(fp)
   12328:	1885883a 	add	r2,r3,r2
   1232c:	10800204 	addi	r2,r2,8
   12330:	108000c3 	ldbu	r2,3(r2)
   12334:	10803fcc 	andi	r2,r2,255
   12338:	1004c03a 	cmpne	r2,r2,zero
   1233c:	1000091e 	bne	r2,zero,12364 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
   12340:	e0bffc17 	ldw	r2,-16(fp)
   12344:	10800283 	ldbu	r2,10(r2)
   12348:	1007883a 	mov	r3,r2
   1234c:	e0bff843 	ldbu	r2,-31(fp)
   12350:	0084303a 	nor	r2,zero,r2
   12354:	1884703a 	and	r2,r3,r2
   12358:	1007883a 	mov	r3,r2
   1235c:	e0bffc17 	ldw	r2,-16(fp)
   12360:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   12364:	e0bffc17 	ldw	r2,-16(fp)
   12368:	10c00283 	ldbu	r3,10(r2)
   1236c:	e0bff8c3 	ldbu	r2,-29(fp)
   12370:	1884b03a 	or	r2,r3,r2
   12374:	1007883a 	mov	r3,r2
   12378:	e0bffc17 	ldw	r2,-16(fp)
   1237c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   12380:	e13ff983 	ldbu	r4,-26(fp)
   12384:	e0fff983 	ldbu	r3,-26(fp)
   12388:	e0bffc17 	ldw	r2,-16(fp)
   1238c:	1885883a 	add	r2,r3,r2
   12390:	10800204 	addi	r2,r2,8
   12394:	10c000c3 	ldbu	r3,3(r2)
   12398:	e0bff883 	ldbu	r2,-30(fp)
   1239c:	1884b03a 	or	r2,r3,r2
   123a0:	1007883a 	mov	r3,r2
   123a4:	e0bffc17 	ldw	r2,-16(fp)
   123a8:	2085883a 	add	r2,r4,r2
   123ac:	10800204 	addi	r2,r2,8
   123b0:	10c000c5 	stb	r3,3(r2)
            pevents++;
   123b4:	e0bffb17 	ldw	r2,-20(fp)
   123b8:	10800104 	addi	r2,r2,4
   123bc:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
   123c0:	e0bffb17 	ldw	r2,-20(fp)
   123c4:	10800017 	ldw	r2,0(r2)
   123c8:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   123cc:	e0bffc17 	ldw	r2,-16(fp)
   123d0:	1004c03a 	cmpne	r2,r2,zero
   123d4:	103fc31e 	bne	r2,zero,122e4 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   123d8:	e0fffa17 	ldw	r3,-24(fp)
   123dc:	e0bffe03 	ldbu	r2,-8(fp)
   123e0:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
   123e4:	e0fffa17 	ldw	r3,-24(fp)
   123e8:	e0bff983 	ldbu	r2,-26(fp)
   123ec:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
   123f0:	e0fffa17 	ldw	r3,-24(fp)
   123f4:	e0bff943 	ldbu	r2,-27(fp)
   123f8:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
   123fc:	e0fffa17 	ldw	r3,-24(fp)
   12400:	e0bff8c3 	ldbu	r2,-29(fp)
   12404:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
   12408:	e0fffa17 	ldw	r3,-24(fp)
   1240c:	e0bff883 	ldbu	r2,-30(fp)
   12410:	18800d45 	stb	r2,53(r3)
   12414:	e0bff717 	ldw	r2,-36(fp)
   12418:	e0bff215 	stw	r2,-56(fp)
   1241c:	e0bff217 	ldw	r2,-56(fp)
   12420:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   12424:	008000b4 	movhi	r2,2
   12428:	10adce44 	addi	r2,r2,-18631
   1242c:	10800003 	ldbu	r2,0(r2)
   12430:	10803fcc 	andi	r2,r2,255
   12434:	10800058 	cmpnei	r2,r2,1
   12438:	1000011e 	bne	r2,zero,12440 <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
   1243c:	000d6340 	call	d634 <OS_Sched>
    }
    return (OS_ERR_NONE);
   12440:	e03fff15 	stw	zero,-4(fp)
   12444:	e0bfff17 	ldw	r2,-4(fp)
}
   12448:	e037883a 	mov	sp,fp
   1244c:	dfc00117 	ldw	ra,4(sp)
   12450:	df000017 	ldw	fp,0(sp)
   12454:	dec00204 	addi	sp,sp,8
   12458:	f800283a 	ret

0001245c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   1245c:	deffed04 	addi	sp,sp,-76
   12460:	dfc01215 	stw	ra,72(sp)
   12464:	df001115 	stw	fp,68(sp)
   12468:	df001104 	addi	fp,sp,68
   1246c:	e13ffb15 	stw	r4,-20(fp)
   12470:	e17ffc15 	stw	r5,-16(fp)
   12474:	e1bffd15 	stw	r6,-12(fp)
   12478:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   1247c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   12480:	e0bffe03 	ldbu	r2,-8(fp)
   12484:	10800570 	cmpltui	r2,r2,21
   12488:	1000031e 	bne	r2,zero,12498 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   1248c:	00800a84 	movi	r2,42
   12490:	e0bfff15 	stw	r2,-4(fp)
   12494:	00006006 	br	12618 <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12498:	0005303a 	rdctl	r2,status
   1249c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   124a0:	e0fff717 	ldw	r3,-36(fp)
   124a4:	00bfff84 	movi	r2,-2
   124a8:	1884703a 	and	r2,r3,r2
   124ac:	1001703a 	wrctl	status,r2
  
  return context;
   124b0:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   124b4:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   124b8:	008000b4 	movhi	r2,2
   124bc:	10addc04 	addi	r2,r2,-18576
   124c0:	10800003 	ldbu	r2,0(r2)
   124c4:	10803fcc 	andi	r2,r2,255
   124c8:	1005003a 	cmpeq	r2,r2,zero
   124cc:	1000071e 	bne	r2,zero,124ec <OSTaskCreate+0x90>
   124d0:	e0bff817 	ldw	r2,-32(fp)
   124d4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   124d8:	e0bff617 	ldw	r2,-40(fp)
   124dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   124e0:	00800f04 	movi	r2,60
   124e4:	e0bfff15 	stw	r2,-4(fp)
   124e8:	00004b06 	br	12618 <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   124ec:	e0bffe03 	ldbu	r2,-8(fp)
   124f0:	00c000b4 	movhi	r3,2
   124f4:	18ca7c04 	addi	r3,r3,10736
   124f8:	1085883a 	add	r2,r2,r2
   124fc:	1085883a 	add	r2,r2,r2
   12500:	10c5883a 	add	r2,r2,r3
   12504:	10800017 	ldw	r2,0(r2)
   12508:	1004c03a 	cmpne	r2,r2,zero
   1250c:	10003c1e 	bne	r2,zero,12600 <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   12510:	e0bffe03 	ldbu	r2,-8(fp)
   12514:	00c000b4 	movhi	r3,2
   12518:	18ca7c04 	addi	r3,r3,10736
   1251c:	1085883a 	add	r2,r2,r2
   12520:	1085883a 	add	r2,r2,r2
   12524:	10c7883a 	add	r3,r2,r3
   12528:	00800044 	movi	r2,1
   1252c:	18800015 	stw	r2,0(r3)
   12530:	e0bff817 	ldw	r2,-32(fp)
   12534:	e0bff515 	stw	r2,-44(fp)
   12538:	e0bff517 	ldw	r2,-44(fp)
   1253c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   12540:	e13ffb17 	ldw	r4,-20(fp)
   12544:	e17ffc17 	ldw	r5,-16(fp)
   12548:	e1bffd17 	ldw	r6,-12(fp)
   1254c:	000f883a 	mov	r7,zero
   12550:	0016c7c0 	call	16c7c <OSTaskStkInit>
   12554:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   12558:	e13ffe03 	ldbu	r4,-8(fp)
   1255c:	d8000015 	stw	zero,0(sp)
   12560:	d8000115 	stw	zero,4(sp)
   12564:	d8000215 	stw	zero,8(sp)
   12568:	e17ffa17 	ldw	r5,-24(fp)
   1256c:	000d883a 	mov	r6,zero
   12570:	000f883a 	mov	r7,zero
   12574:	000da3c0 	call	da3c <OS_TCBInit>
   12578:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
   1257c:	e0bff903 	ldbu	r2,-28(fp)
   12580:	1004c03a 	cmpne	r2,r2,zero
   12584:	1000081e 	bne	r2,zero,125a8 <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   12588:	008000b4 	movhi	r2,2
   1258c:	10adce44 	addi	r2,r2,-18631
   12590:	10800003 	ldbu	r2,0(r2)
   12594:	10803fcc 	andi	r2,r2,255
   12598:	10800058 	cmpnei	r2,r2,1
   1259c:	1000151e 	bne	r2,zero,125f4 <OSTaskCreate+0x198>
                OS_Sched();
   125a0:	000d6340 	call	d634 <OS_Sched>
   125a4:	00001306 	br	125f4 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   125a8:	0005303a 	rdctl	r2,status
   125ac:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   125b0:	e0fff417 	ldw	r3,-48(fp)
   125b4:	00bfff84 	movi	r2,-2
   125b8:	1884703a 	and	r2,r3,r2
   125bc:	1001703a 	wrctl	status,r2
  
  return context;
   125c0:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   125c4:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   125c8:	e0bffe03 	ldbu	r2,-8(fp)
   125cc:	00c000b4 	movhi	r3,2
   125d0:	18ca7c04 	addi	r3,r3,10736
   125d4:	1085883a 	add	r2,r2,r2
   125d8:	1085883a 	add	r2,r2,r2
   125dc:	10c5883a 	add	r2,r2,r3
   125e0:	10000015 	stw	zero,0(r2)
   125e4:	e0bff817 	ldw	r2,-32(fp)
   125e8:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   125ec:	e0bff317 	ldw	r2,-52(fp)
   125f0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   125f4:	e0bff903 	ldbu	r2,-28(fp)
   125f8:	e0bfff15 	stw	r2,-4(fp)
   125fc:	00000606 	br	12618 <OSTaskCreate+0x1bc>
   12600:	e0bff817 	ldw	r2,-32(fp)
   12604:	e0bff215 	stw	r2,-56(fp)
   12608:	e0bff217 	ldw	r2,-56(fp)
   1260c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   12610:	00800a04 	movi	r2,40
   12614:	e0bfff15 	stw	r2,-4(fp)
   12618:	e0bfff17 	ldw	r2,-4(fp)
}
   1261c:	e037883a 	mov	sp,fp
   12620:	dfc00117 	ldw	ra,4(sp)
   12624:	df000017 	ldw	fp,0(sp)
   12628:	dec00204 	addi	sp,sp,8
   1262c:	f800283a 	ret

00012630 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   12630:	deffeb04 	addi	sp,sp,-84
   12634:	dfc01415 	stw	ra,80(sp)
   12638:	df001315 	stw	fp,76(sp)
   1263c:	df001304 	addi	fp,sp,76
   12640:	e13ff915 	stw	r4,-28(fp)
   12644:	e17ffa15 	stw	r5,-24(fp)
   12648:	e1bffb15 	stw	r6,-20(fp)
   1264c:	e0800217 	ldw	r2,8(fp)
   12650:	e0c00617 	ldw	r3,24(fp)
   12654:	e1fffc05 	stb	r7,-16(fp)
   12658:	e0bffd0d 	sth	r2,-12(fp)
   1265c:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   12660:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   12664:	e0bffc03 	ldbu	r2,-16(fp)
   12668:	10800570 	cmpltui	r2,r2,21
   1266c:	1000031e 	bne	r2,zero,1267c <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   12670:	00800a84 	movi	r2,42
   12674:	e0bfff15 	stw	r2,-4(fp)
   12678:	00006706 	br	12818 <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1267c:	0005303a 	rdctl	r2,status
   12680:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12684:	e0fff517 	ldw	r3,-44(fp)
   12688:	00bfff84 	movi	r2,-2
   1268c:	1884703a 	and	r2,r3,r2
   12690:	1001703a 	wrctl	status,r2
  
  return context;
   12694:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   12698:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   1269c:	008000b4 	movhi	r2,2
   126a0:	10addc04 	addi	r2,r2,-18576
   126a4:	10800003 	ldbu	r2,0(r2)
   126a8:	10803fcc 	andi	r2,r2,255
   126ac:	1005003a 	cmpeq	r2,r2,zero
   126b0:	1000071e 	bne	r2,zero,126d0 <OSTaskCreateExt+0xa0>
   126b4:	e0bff617 	ldw	r2,-40(fp)
   126b8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   126bc:	e0bff417 	ldw	r2,-48(fp)
   126c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   126c4:	00800f04 	movi	r2,60
   126c8:	e0bfff15 	stw	r2,-4(fp)
   126cc:	00005206 	br	12818 <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   126d0:	e0bffc03 	ldbu	r2,-16(fp)
   126d4:	00c000b4 	movhi	r3,2
   126d8:	18ca7c04 	addi	r3,r3,10736
   126dc:	1085883a 	add	r2,r2,r2
   126e0:	1085883a 	add	r2,r2,r2
   126e4:	10c5883a 	add	r2,r2,r3
   126e8:	10800017 	ldw	r2,0(r2)
   126ec:	1004c03a 	cmpne	r2,r2,zero
   126f0:	1000431e 	bne	r2,zero,12800 <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   126f4:	e0bffc03 	ldbu	r2,-16(fp)
   126f8:	00c000b4 	movhi	r3,2
   126fc:	18ca7c04 	addi	r3,r3,10736
   12700:	1085883a 	add	r2,r2,r2
   12704:	1085883a 	add	r2,r2,r2
   12708:	10c7883a 	add	r3,r2,r3
   1270c:	00800044 	movi	r2,1
   12710:	18800015 	stw	r2,0(r3)
   12714:	e0bff617 	ldw	r2,-40(fp)
   12718:	e0bff315 	stw	r2,-52(fp)
   1271c:	e0bff317 	ldw	r2,-52(fp)
   12720:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   12724:	e1bffe0b 	ldhu	r6,-8(fp)
   12728:	e1000317 	ldw	r4,12(fp)
   1272c:	e1400417 	ldw	r5,16(fp)
   12730:	00138ac0 	call	138ac <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   12734:	e1fffe0b 	ldhu	r7,-8(fp)
   12738:	e13ff917 	ldw	r4,-28(fp)
   1273c:	e17ffa17 	ldw	r5,-24(fp)
   12740:	e1bffb17 	ldw	r6,-20(fp)
   12744:	0016c7c0 	call	16c7c <OSTaskStkInit>
   12748:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   1274c:	e13ffc03 	ldbu	r4,-16(fp)
   12750:	e1fffd0b 	ldhu	r7,-12(fp)
   12754:	e0fffe0b 	ldhu	r3,-8(fp)
   12758:	e0800417 	ldw	r2,16(fp)
   1275c:	d8800015 	stw	r2,0(sp)
   12760:	e0800517 	ldw	r2,20(fp)
   12764:	d8800115 	stw	r2,4(sp)
   12768:	d8c00215 	stw	r3,8(sp)
   1276c:	e17ff817 	ldw	r5,-32(fp)
   12770:	e1800317 	ldw	r6,12(fp)
   12774:	000da3c0 	call	da3c <OS_TCBInit>
   12778:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
   1277c:	e0bff703 	ldbu	r2,-36(fp)
   12780:	1004c03a 	cmpne	r2,r2,zero
   12784:	1000081e 	bne	r2,zero,127a8 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   12788:	008000b4 	movhi	r2,2
   1278c:	10adce44 	addi	r2,r2,-18631
   12790:	10800003 	ldbu	r2,0(r2)
   12794:	10803fcc 	andi	r2,r2,255
   12798:	10800058 	cmpnei	r2,r2,1
   1279c:	1000151e 	bne	r2,zero,127f4 <OSTaskCreateExt+0x1c4>
                OS_Sched();
   127a0:	000d6340 	call	d634 <OS_Sched>
   127a4:	00001306 	br	127f4 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   127a8:	0005303a 	rdctl	r2,status
   127ac:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   127b0:	e0fff217 	ldw	r3,-56(fp)
   127b4:	00bfff84 	movi	r2,-2
   127b8:	1884703a 	and	r2,r3,r2
   127bc:	1001703a 	wrctl	status,r2
  
  return context;
   127c0:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   127c4:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   127c8:	e0bffc03 	ldbu	r2,-16(fp)
   127cc:	00c000b4 	movhi	r3,2
   127d0:	18ca7c04 	addi	r3,r3,10736
   127d4:	1085883a 	add	r2,r2,r2
   127d8:	1085883a 	add	r2,r2,r2
   127dc:	10c5883a 	add	r2,r2,r3
   127e0:	10000015 	stw	zero,0(r2)
   127e4:	e0bff617 	ldw	r2,-40(fp)
   127e8:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   127ec:	e0bff117 	ldw	r2,-60(fp)
   127f0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   127f4:	e0bff703 	ldbu	r2,-36(fp)
   127f8:	e0bfff15 	stw	r2,-4(fp)
   127fc:	00000606 	br	12818 <OSTaskCreateExt+0x1e8>
   12800:	e0bff617 	ldw	r2,-40(fp)
   12804:	e0bff015 	stw	r2,-64(fp)
   12808:	e0bff017 	ldw	r2,-64(fp)
   1280c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   12810:	00800a04 	movi	r2,40
   12814:	e0bfff15 	stw	r2,-4(fp)
   12818:	e0bfff17 	ldw	r2,-4(fp)
}
   1281c:	e037883a 	mov	sp,fp
   12820:	dfc00117 	ldw	ra,4(sp)
   12824:	df000017 	ldw	fp,0(sp)
   12828:	dec00204 	addi	sp,sp,8
   1282c:	f800283a 	ret

00012830 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   12830:	defff304 	addi	sp,sp,-52
   12834:	dfc00c15 	stw	ra,48(sp)
   12838:	df000b15 	stw	fp,44(sp)
   1283c:	df000b04 	addi	fp,sp,44
   12840:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   12844:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   12848:	008000b4 	movhi	r2,2
   1284c:	10addc04 	addi	r2,r2,-18576
   12850:	10800003 	ldbu	r2,0(r2)
   12854:	10803fcc 	andi	r2,r2,255
   12858:	1005003a 	cmpeq	r2,r2,zero
   1285c:	1000031e 	bne	r2,zero,1286c <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
   12860:	00801004 	movi	r2,64
   12864:	e0bfff15 	stw	r2,-4(fp)
   12868:	0000ee06 	br	12c24 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   1286c:	e0bffe03 	ldbu	r2,-8(fp)
   12870:	10800518 	cmpnei	r2,r2,20
   12874:	1000031e 	bne	r2,zero,12884 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
   12878:	00800f84 	movi	r2,62
   1287c:	e0bfff15 	stw	r2,-4(fp)
   12880:	0000e806 	br	12c24 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   12884:	e0bffe03 	ldbu	r2,-8(fp)
   12888:	10800530 	cmpltui	r2,r2,20
   1288c:	1000061e 	bne	r2,zero,128a8 <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
   12890:	e0bffe03 	ldbu	r2,-8(fp)
   12894:	10803fe0 	cmpeqi	r2,r2,255
   12898:	1000031e 	bne	r2,zero,128a8 <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
   1289c:	00800a84 	movi	r2,42
   128a0:	e0bfff15 	stw	r2,-4(fp)
   128a4:	0000df06 	br	12c24 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   128a8:	0005303a 	rdctl	r2,status
   128ac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   128b0:	e0fffa17 	ldw	r3,-24(fp)
   128b4:	00bfff84 	movi	r2,-2
   128b8:	1884703a 	and	r2,r3,r2
   128bc:	1001703a 	wrctl	status,r2
  
  return context;
   128c0:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   128c4:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   128c8:	e0bffe03 	ldbu	r2,-8(fp)
   128cc:	10803fd8 	cmpnei	r2,r2,255
   128d0:	1000051e 	bne	r2,zero,128e8 <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   128d4:	008000b4 	movhi	r2,2
   128d8:	10addd04 	addi	r2,r2,-18572
   128dc:	10800017 	ldw	r2,0(r2)
   128e0:	10800c83 	ldbu	r2,50(r2)
   128e4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   128e8:	e0bffe03 	ldbu	r2,-8(fp)
   128ec:	00c000b4 	movhi	r3,2
   128f0:	18ca7c04 	addi	r3,r3,10736
   128f4:	1085883a 	add	r2,r2,r2
   128f8:	1085883a 	add	r2,r2,r2
   128fc:	10c5883a 	add	r2,r2,r3
   12900:	10800017 	ldw	r2,0(r2)
   12904:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   12908:	e0bffc17 	ldw	r2,-16(fp)
   1290c:	1004c03a 	cmpne	r2,r2,zero
   12910:	1000071e 	bne	r2,zero,12930 <OSTaskDel+0x100>
   12914:	e0bffb17 	ldw	r2,-20(fp)
   12918:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1291c:	e0bff917 	ldw	r2,-28(fp)
   12920:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   12924:	008010c4 	movi	r2,67
   12928:	e0bfff15 	stw	r2,-4(fp)
   1292c:	0000bd06 	br	12c24 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   12930:	e0bffc17 	ldw	r2,-16(fp)
   12934:	10800058 	cmpnei	r2,r2,1
   12938:	1000071e 	bne	r2,zero,12958 <OSTaskDel+0x128>
   1293c:	e0bffb17 	ldw	r2,-20(fp)
   12940:	e0bff815 	stw	r2,-32(fp)
   12944:	e0bff817 	ldw	r2,-32(fp)
   12948:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   1294c:	00800f44 	movi	r2,61
   12950:	e0bfff15 	stw	r2,-4(fp)
   12954:	0000b306 	br	12c24 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   12958:	e0bffc17 	ldw	r2,-16(fp)
   1295c:	10800d03 	ldbu	r2,52(r2)
   12960:	11003fcc 	andi	r4,r2,255
   12964:	e0bffc17 	ldw	r2,-16(fp)
   12968:	10800d03 	ldbu	r2,52(r2)
   1296c:	10c03fcc 	andi	r3,r2,255
   12970:	008000b4 	movhi	r2,2
   12974:	10adda44 	addi	r2,r2,-18583
   12978:	10c5883a 	add	r2,r2,r3
   1297c:	10800003 	ldbu	r2,0(r2)
   12980:	1007883a 	mov	r3,r2
   12984:	e0bffc17 	ldw	r2,-16(fp)
   12988:	10800d43 	ldbu	r2,53(r2)
   1298c:	0084303a 	nor	r2,zero,r2
   12990:	1884703a 	and	r2,r3,r2
   12994:	1007883a 	mov	r3,r2
   12998:	008000b4 	movhi	r2,2
   1299c:	10adda44 	addi	r2,r2,-18583
   129a0:	1105883a 	add	r2,r2,r4
   129a4:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   129a8:	e0bffc17 	ldw	r2,-16(fp)
   129ac:	10800d03 	ldbu	r2,52(r2)
   129b0:	10c03fcc 	andi	r3,r2,255
   129b4:	008000b4 	movhi	r2,2
   129b8:	10adda44 	addi	r2,r2,-18583
   129bc:	10c5883a 	add	r2,r2,r3
   129c0:	10800003 	ldbu	r2,0(r2)
   129c4:	10803fcc 	andi	r2,r2,255
   129c8:	1004c03a 	cmpne	r2,r2,zero
   129cc:	10000c1e 	bne	r2,zero,12a00 <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   129d0:	e0bffc17 	ldw	r2,-16(fp)
   129d4:	10800d83 	ldbu	r2,54(r2)
   129d8:	0084303a 	nor	r2,zero,r2
   129dc:	1007883a 	mov	r3,r2
   129e0:	008000b4 	movhi	r2,2
   129e4:	10adda04 	addi	r2,r2,-18584
   129e8:	10800003 	ldbu	r2,0(r2)
   129ec:	1884703a 	and	r2,r3,r2
   129f0:	1007883a 	mov	r3,r2
   129f4:	008000b4 	movhi	r2,2
   129f8:	10adda04 	addi	r2,r2,-18584
   129fc:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   12a00:	e0bffc17 	ldw	r2,-16(fp)
   12a04:	10800717 	ldw	r2,28(r2)
   12a08:	1005003a 	cmpeq	r2,r2,zero
   12a0c:	1000041e 	bne	r2,zero,12a20 <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   12a10:	e0bffc17 	ldw	r2,-16(fp)
   12a14:	11400717 	ldw	r5,28(r2)
   12a18:	e13ffc17 	ldw	r4,-16(fp)
   12a1c:	000cfec0 	call	cfec <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   12a20:	e0bffc17 	ldw	r2,-16(fp)
   12a24:	10800817 	ldw	r2,32(r2)
   12a28:	1005003a 	cmpeq	r2,r2,zero
   12a2c:	1000041e 	bne	r2,zero,12a40 <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   12a30:	e0bffc17 	ldw	r2,-16(fp)
   12a34:	11400817 	ldw	r5,32(r2)
   12a38:	e13ffc17 	ldw	r4,-16(fp)
   12a3c:	000d0a40 	call	d0a4 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   12a40:	e0bffc17 	ldw	r2,-16(fp)
   12a44:	10800a17 	ldw	r2,40(r2)
   12a48:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   12a4c:	e0bffd17 	ldw	r2,-12(fp)
   12a50:	1005003a 	cmpeq	r2,r2,zero
   12a54:	1000021e 	bne	r2,zero,12a60 <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   12a58:	e13ffd17 	ldw	r4,-12(fp)
   12a5c:	000f7380 	call	f738 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   12a60:	e0bffc17 	ldw	r2,-16(fp)
   12a64:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   12a68:	e0bffc17 	ldw	r2,-16(fp)
   12a6c:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   12a70:	e0bffc17 	ldw	r2,-16(fp)
   12a74:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   12a78:	008000b4 	movhi	r2,2
   12a7c:	10adce04 	addi	r2,r2,-18632
   12a80:	10800003 	ldbu	r2,0(r2)
   12a84:	10803fcc 	andi	r2,r2,255
   12a88:	10803fe0 	cmpeqi	r2,r2,255
   12a8c:	1000081e 	bne	r2,zero,12ab0 <OSTaskDel+0x280>
        OSLockNesting++;
   12a90:	008000b4 	movhi	r2,2
   12a94:	10adce04 	addi	r2,r2,-18632
   12a98:	10800003 	ldbu	r2,0(r2)
   12a9c:	10800044 	addi	r2,r2,1
   12aa0:	1007883a 	mov	r3,r2
   12aa4:	008000b4 	movhi	r2,2
   12aa8:	10adce04 	addi	r2,r2,-18632
   12aac:	10c00005 	stb	r3,0(r2)
   12ab0:	e0bffb17 	ldw	r2,-20(fp)
   12ab4:	e0bff715 	stw	r2,-36(fp)
   12ab8:	e0bff717 	ldw	r2,-36(fp)
   12abc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   12ac0:	000cbd80 	call	cbd8 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12ac4:	0005303a 	rdctl	r2,status
   12ac8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12acc:	e0fff617 	ldw	r3,-40(fp)
   12ad0:	00bfff84 	movi	r2,-2
   12ad4:	1884703a 	and	r2,r3,r2
   12ad8:	1001703a 	wrctl	status,r2
  
  return context;
   12adc:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   12ae0:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   12ae4:	008000b4 	movhi	r2,2
   12ae8:	10adce04 	addi	r2,r2,-18632
   12aec:	10800003 	ldbu	r2,0(r2)
   12af0:	10803fcc 	andi	r2,r2,255
   12af4:	1005003a 	cmpeq	r2,r2,zero
   12af8:	1000081e 	bne	r2,zero,12b1c <OSTaskDel+0x2ec>
        OSLockNesting--;
   12afc:	008000b4 	movhi	r2,2
   12b00:	10adce04 	addi	r2,r2,-18632
   12b04:	10800003 	ldbu	r2,0(r2)
   12b08:	10bfffc4 	addi	r2,r2,-1
   12b0c:	1007883a 	mov	r3,r2
   12b10:	008000b4 	movhi	r2,2
   12b14:	10adce04 	addi	r2,r2,-18632
   12b18:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   12b1c:	e13ffc17 	ldw	r4,-16(fp)
   12b20:	0016fac0 	call	16fac <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   12b24:	008000b4 	movhi	r2,2
   12b28:	10add644 	addi	r2,r2,-18599
   12b2c:	10800003 	ldbu	r2,0(r2)
   12b30:	10bfffc4 	addi	r2,r2,-1
   12b34:	1007883a 	mov	r3,r2
   12b38:	008000b4 	movhi	r2,2
   12b3c:	10add644 	addi	r2,r2,-18599
   12b40:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   12b44:	e0bffe03 	ldbu	r2,-8(fp)
   12b48:	00c000b4 	movhi	r3,2
   12b4c:	18ca7c04 	addi	r3,r3,10736
   12b50:	1085883a 	add	r2,r2,r2
   12b54:	1085883a 	add	r2,r2,r2
   12b58:	10c5883a 	add	r2,r2,r3
   12b5c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   12b60:	e0bffc17 	ldw	r2,-16(fp)
   12b64:	10800617 	ldw	r2,24(r2)
   12b68:	1004c03a 	cmpne	r2,r2,zero
   12b6c:	1000091e 	bne	r2,zero,12b94 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   12b70:	e0bffc17 	ldw	r2,-16(fp)
   12b74:	10800517 	ldw	r2,20(r2)
   12b78:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   12b7c:	e0bffc17 	ldw	r2,-16(fp)
   12b80:	10c00517 	ldw	r3,20(r2)
   12b84:	008000b4 	movhi	r2,2
   12b88:	10add104 	addi	r2,r2,-18620
   12b8c:	10c00015 	stw	r3,0(r2)
   12b90:	00000a06 	br	12bbc <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   12b94:	e0bffc17 	ldw	r2,-16(fp)
   12b98:	10c00617 	ldw	r3,24(r2)
   12b9c:	e0bffc17 	ldw	r2,-16(fp)
   12ba0:	10800517 	ldw	r2,20(r2)
   12ba4:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   12ba8:	e0bffc17 	ldw	r2,-16(fp)
   12bac:	10c00517 	ldw	r3,20(r2)
   12bb0:	e0bffc17 	ldw	r2,-16(fp)
   12bb4:	10800617 	ldw	r2,24(r2)
   12bb8:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   12bbc:	008000b4 	movhi	r2,2
   12bc0:	10add504 	addi	r2,r2,-18604
   12bc4:	10c00017 	ldw	r3,0(r2)
   12bc8:	e0bffc17 	ldw	r2,-16(fp)
   12bcc:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   12bd0:	00c000b4 	movhi	r3,2
   12bd4:	18edd504 	addi	r3,r3,-18604
   12bd8:	e0bffc17 	ldw	r2,-16(fp)
   12bdc:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   12be0:	e0fffc17 	ldw	r3,-16(fp)
   12be4:	00800fc4 	movi	r2,63
   12be8:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   12bec:	e0bffc17 	ldw	r2,-16(fp)
   12bf0:	10001345 	stb	zero,77(r2)
   12bf4:	e0bffb17 	ldw	r2,-20(fp)
   12bf8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12bfc:	e0bff517 	ldw	r2,-44(fp)
   12c00:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   12c04:	008000b4 	movhi	r2,2
   12c08:	10adce44 	addi	r2,r2,-18631
   12c0c:	10800003 	ldbu	r2,0(r2)
   12c10:	10803fcc 	andi	r2,r2,255
   12c14:	10800058 	cmpnei	r2,r2,1
   12c18:	1000011e 	bne	r2,zero,12c20 <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
   12c1c:	000d6340 	call	d634 <OS_Sched>
    }
    return (OS_ERR_NONE);
   12c20:	e03fff15 	stw	zero,-4(fp)
   12c24:	e0bfff17 	ldw	r2,-4(fp)
}
   12c28:	e037883a 	mov	sp,fp
   12c2c:	dfc00117 	ldw	ra,4(sp)
   12c30:	df000017 	ldw	fp,0(sp)
   12c34:	dec00204 	addi	sp,sp,8
   12c38:	f800283a 	ret

00012c3c <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   12c3c:	defff404 	addi	sp,sp,-48
   12c40:	df000b15 	stw	fp,44(sp)
   12c44:	df000b04 	addi	fp,sp,44
   12c48:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12c4c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   12c50:	e0bffe03 	ldbu	r2,-8(fp)
   12c54:	10800518 	cmpnei	r2,r2,20
   12c58:	1000031e 	bne	r2,zero,12c68 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   12c5c:	00800f84 	movi	r2,62
   12c60:	e0bfff15 	stw	r2,-4(fp)
   12c64:	00004c06 	br	12d98 <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   12c68:	e0bffe03 	ldbu	r2,-8(fp)
   12c6c:	10800530 	cmpltui	r2,r2,20
   12c70:	1000061e 	bne	r2,zero,12c8c <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
   12c74:	e0bffe03 	ldbu	r2,-8(fp)
   12c78:	10803fe0 	cmpeqi	r2,r2,255
   12c7c:	1000031e 	bne	r2,zero,12c8c <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
   12c80:	00800a84 	movi	r2,42
   12c84:	e0bfff15 	stw	r2,-4(fp)
   12c88:	00004306 	br	12d98 <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   12c8c:	e0bffe03 	ldbu	r2,-8(fp)
   12c90:	10803fd8 	cmpnei	r2,r2,255
   12c94:	1000141e 	bne	r2,zero,12ce8 <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12c98:	0005303a 	rdctl	r2,status
   12c9c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12ca0:	e0fffa17 	ldw	r3,-24(fp)
   12ca4:	00bfff84 	movi	r2,-2
   12ca8:	1884703a 	and	r2,r3,r2
   12cac:	1001703a 	wrctl	status,r2
  
  return context;
   12cb0:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   12cb4:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   12cb8:	008000b4 	movhi	r2,2
   12cbc:	10addd04 	addi	r2,r2,-18572
   12cc0:	10800017 	ldw	r2,0(r2)
   12cc4:	10800dc3 	ldbu	r2,55(r2)
   12cc8:	e0bffd05 	stb	r2,-12(fp)
   12ccc:	e0bffb17 	ldw	r2,-20(fp)
   12cd0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12cd4:	e0bff917 	ldw	r2,-28(fp)
   12cd8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   12cdc:	e0bffd03 	ldbu	r2,-12(fp)
   12ce0:	e0bfff15 	stw	r2,-4(fp)
   12ce4:	00002c06 	br	12d98 <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12ce8:	0005303a 	rdctl	r2,status
   12cec:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12cf0:	e0fff817 	ldw	r3,-32(fp)
   12cf4:	00bfff84 	movi	r2,-2
   12cf8:	1884703a 	and	r2,r3,r2
   12cfc:	1001703a 	wrctl	status,r2
  
  return context;
   12d00:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   12d04:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
   12d08:	e0bffe03 	ldbu	r2,-8(fp)
   12d0c:	00c000b4 	movhi	r3,2
   12d10:	18ca7c04 	addi	r3,r3,10736
   12d14:	1085883a 	add	r2,r2,r2
   12d18:	1085883a 	add	r2,r2,r2
   12d1c:	10c5883a 	add	r2,r2,r3
   12d20:	10800017 	ldw	r2,0(r2)
   12d24:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   12d28:	e0bffc17 	ldw	r2,-16(fp)
   12d2c:	1004c03a 	cmpne	r2,r2,zero
   12d30:	1000071e 	bne	r2,zero,12d50 <OSTaskDelReq+0x114>
   12d34:	e0bffb17 	ldw	r2,-20(fp)
   12d38:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12d3c:	e0bff717 	ldw	r2,-36(fp)
   12d40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   12d44:	008010c4 	movi	r2,67
   12d48:	e0bfff15 	stw	r2,-4(fp)
   12d4c:	00001206 	br	12d98 <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   12d50:	e0bffc17 	ldw	r2,-16(fp)
   12d54:	10800058 	cmpnei	r2,r2,1
   12d58:	1000071e 	bne	r2,zero,12d78 <OSTaskDelReq+0x13c>
   12d5c:	e0bffb17 	ldw	r2,-20(fp)
   12d60:	e0bff615 	stw	r2,-40(fp)
   12d64:	e0bff617 	ldw	r2,-40(fp)
   12d68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   12d6c:	00800f44 	movi	r2,61
   12d70:	e0bfff15 	stw	r2,-4(fp)
   12d74:	00000806 	br	12d98 <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   12d78:	e0fffc17 	ldw	r3,-16(fp)
   12d7c:	00800fc4 	movi	r2,63
   12d80:	18800dc5 	stb	r2,55(r3)
   12d84:	e0bffb17 	ldw	r2,-20(fp)
   12d88:	e0bff515 	stw	r2,-44(fp)
   12d8c:	e0bff517 	ldw	r2,-44(fp)
   12d90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12d94:	e03fff15 	stw	zero,-4(fp)
   12d98:	e0bfff17 	ldw	r2,-4(fp)
}
   12d9c:	e037883a 	mov	sp,fp
   12da0:	df000017 	ldw	fp,0(sp)
   12da4:	dec00104 	addi	sp,sp,4
   12da8:	f800283a 	ret

00012dac <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   12dac:	defff304 	addi	sp,sp,-52
   12db0:	dfc00c15 	stw	ra,48(sp)
   12db4:	df000b15 	stw	fp,44(sp)
   12db8:	df000b04 	addi	fp,sp,44
   12dbc:	e17ffd15 	stw	r5,-12(fp)
   12dc0:	e1bffe15 	stw	r6,-8(fp)
   12dc4:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   12dc8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   12dcc:	e0bffe17 	ldw	r2,-8(fp)
   12dd0:	1004c03a 	cmpne	r2,r2,zero
   12dd4:	1000021e 	bne	r2,zero,12de0 <OSTaskNameGet+0x34>
        return (0);
   12dd8:	e03fff15 	stw	zero,-4(fp)
   12ddc:	00005b06 	br	12f4c <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   12de0:	e0bffc03 	ldbu	r2,-16(fp)
   12de4:	10800570 	cmpltui	r2,r2,21
   12de8:	1000081e 	bne	r2,zero,12e0c <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   12dec:	e0bffc03 	ldbu	r2,-16(fp)
   12df0:	10803fe0 	cmpeqi	r2,r2,255
   12df4:	1000051e 	bne	r2,zero,12e0c <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   12df8:	e0fffe17 	ldw	r3,-8(fp)
   12dfc:	00800a84 	movi	r2,42
   12e00:	18800005 	stb	r2,0(r3)
            return (0);
   12e04:	e03fff15 	stw	zero,-4(fp)
   12e08:	00005006 	br	12f4c <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   12e0c:	e0bffd17 	ldw	r2,-12(fp)
   12e10:	1004c03a 	cmpne	r2,r2,zero
   12e14:	1000051e 	bne	r2,zero,12e2c <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   12e18:	e0fffe17 	ldw	r3,-8(fp)
   12e1c:	00800304 	movi	r2,12
   12e20:	18800005 	stb	r2,0(r3)
        return (0);
   12e24:	e03fff15 	stw	zero,-4(fp)
   12e28:	00004806 	br	12f4c <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   12e2c:	008000b4 	movhi	r2,2
   12e30:	10addc04 	addi	r2,r2,-18576
   12e34:	10800003 	ldbu	r2,0(r2)
   12e38:	10803fcc 	andi	r2,r2,255
   12e3c:	1005003a 	cmpeq	r2,r2,zero
   12e40:	1000051e 	bne	r2,zero,12e58 <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
   12e44:	e0fffe17 	ldw	r3,-8(fp)
   12e48:	00800444 	movi	r2,17
   12e4c:	18800005 	stb	r2,0(r3)
        return (0);
   12e50:	e03fff15 	stw	zero,-4(fp)
   12e54:	00003d06 	br	12f4c <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12e58:	0005303a 	rdctl	r2,status
   12e5c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12e60:	e0fff817 	ldw	r3,-32(fp)
   12e64:	00bfff84 	movi	r2,-2
   12e68:	1884703a 	and	r2,r3,r2
   12e6c:	1001703a 	wrctl	status,r2
  
  return context;
   12e70:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   12e74:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   12e78:	e0bffc03 	ldbu	r2,-16(fp)
   12e7c:	10803fd8 	cmpnei	r2,r2,255
   12e80:	1000051e 	bne	r2,zero,12e98 <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
   12e84:	008000b4 	movhi	r2,2
   12e88:	10addd04 	addi	r2,r2,-18572
   12e8c:	10800017 	ldw	r2,0(r2)
   12e90:	10800c83 	ldbu	r2,50(r2)
   12e94:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   12e98:	e0bffc03 	ldbu	r2,-16(fp)
   12e9c:	00c000b4 	movhi	r3,2
   12ea0:	18ca7c04 	addi	r3,r3,10736
   12ea4:	1085883a 	add	r2,r2,r2
   12ea8:	1085883a 	add	r2,r2,r2
   12eac:	10c5883a 	add	r2,r2,r3
   12eb0:	10800017 	ldw	r2,0(r2)
   12eb4:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   12eb8:	e0bffb17 	ldw	r2,-20(fp)
   12ebc:	1004c03a 	cmpne	r2,r2,zero
   12ec0:	1000091e 	bne	r2,zero,12ee8 <OSTaskNameGet+0x13c>
   12ec4:	e0bff917 	ldw	r2,-28(fp)
   12ec8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12ecc:	e0bff717 	ldw	r2,-36(fp)
   12ed0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   12ed4:	e0fffe17 	ldw	r3,-8(fp)
   12ed8:	008010c4 	movi	r2,67
   12edc:	18800005 	stb	r2,0(r3)
        return (0);
   12ee0:	e03fff15 	stw	zero,-4(fp)
   12ee4:	00001906 	br	12f4c <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   12ee8:	e0bffb17 	ldw	r2,-20(fp)
   12eec:	10800058 	cmpnei	r2,r2,1
   12ef0:	1000091e 	bne	r2,zero,12f18 <OSTaskNameGet+0x16c>
   12ef4:	e0bff917 	ldw	r2,-28(fp)
   12ef8:	e0bff615 	stw	r2,-40(fp)
   12efc:	e0bff617 	ldw	r2,-40(fp)
   12f00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   12f04:	e0fffe17 	ldw	r3,-8(fp)
   12f08:	008010c4 	movi	r2,67
   12f0c:	18800005 	stb	r2,0(r3)
        return (0);
   12f10:	e03fff15 	stw	zero,-4(fp)
   12f14:	00000d06 	br	12f4c <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   12f18:	e0bffb17 	ldw	r2,-20(fp)
   12f1c:	11401304 	addi	r5,r2,76
   12f20:	e13ffd17 	ldw	r4,-12(fp)
   12f24:	000d7780 	call	d778 <OS_StrCopy>
   12f28:	e0bffa05 	stb	r2,-24(fp)
   12f2c:	e0bff917 	ldw	r2,-28(fp)
   12f30:	e0bff515 	stw	r2,-44(fp)
   12f34:	e0bff517 	ldw	r2,-44(fp)
   12f38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   12f3c:	e0bffe17 	ldw	r2,-8(fp)
   12f40:	10000005 	stb	zero,0(r2)
    return (len);
   12f44:	e0bffa03 	ldbu	r2,-24(fp)
   12f48:	e0bfff15 	stw	r2,-4(fp)
   12f4c:	e0bfff17 	ldw	r2,-4(fp)
}
   12f50:	e037883a 	mov	sp,fp
   12f54:	dfc00117 	ldw	ra,4(sp)
   12f58:	df000017 	ldw	fp,0(sp)
   12f5c:	dec00204 	addi	sp,sp,8
   12f60:	f800283a 	ret

00012f64 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   12f64:	defff304 	addi	sp,sp,-52
   12f68:	dfc00c15 	stw	ra,48(sp)
   12f6c:	df000b15 	stw	fp,44(sp)
   12f70:	df000b04 	addi	fp,sp,44
   12f74:	e17ffe15 	stw	r5,-8(fp)
   12f78:	e1bfff15 	stw	r6,-4(fp)
   12f7c:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   12f80:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   12f84:	e0bfff17 	ldw	r2,-4(fp)
   12f88:	1005003a 	cmpeq	r2,r2,zero
   12f8c:	1000611e 	bne	r2,zero,13114 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   12f90:	e0bffd03 	ldbu	r2,-12(fp)
   12f94:	10800570 	cmpltui	r2,r2,21
   12f98:	1000071e 	bne	r2,zero,12fb8 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   12f9c:	e0bffd03 	ldbu	r2,-12(fp)
   12fa0:	10803fe0 	cmpeqi	r2,r2,255
   12fa4:	1000041e 	bne	r2,zero,12fb8 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   12fa8:	e0ffff17 	ldw	r3,-4(fp)
   12fac:	00800a84 	movi	r2,42
   12fb0:	18800005 	stb	r2,0(r3)
            return;
   12fb4:	00005706 	br	13114 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   12fb8:	e0bffe17 	ldw	r2,-8(fp)
   12fbc:	1004c03a 	cmpne	r2,r2,zero
   12fc0:	1000041e 	bne	r2,zero,12fd4 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   12fc4:	e0ffff17 	ldw	r3,-4(fp)
   12fc8:	00800304 	movi	r2,12
   12fcc:	18800005 	stb	r2,0(r3)
        return;
   12fd0:	00005006 	br	13114 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   12fd4:	008000b4 	movhi	r2,2
   12fd8:	10addc04 	addi	r2,r2,-18576
   12fdc:	10800003 	ldbu	r2,0(r2)
   12fe0:	10803fcc 	andi	r2,r2,255
   12fe4:	1005003a 	cmpeq	r2,r2,zero
   12fe8:	1000041e 	bne	r2,zero,12ffc <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
   12fec:	e0ffff17 	ldw	r3,-4(fp)
   12ff0:	00800484 	movi	r2,18
   12ff4:	18800005 	stb	r2,0(r3)
        return;
   12ff8:	00004606 	br	13114 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12ffc:	0005303a 	rdctl	r2,status
   13000:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13004:	e0fff917 	ldw	r3,-28(fp)
   13008:	00bfff84 	movi	r2,-2
   1300c:	1884703a 	and	r2,r3,r2
   13010:	1001703a 	wrctl	status,r2
  
  return context;
   13014:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   13018:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   1301c:	e0bffd03 	ldbu	r2,-12(fp)
   13020:	10803fd8 	cmpnei	r2,r2,255
   13024:	1000051e 	bne	r2,zero,1303c <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
   13028:	008000b4 	movhi	r2,2
   1302c:	10addd04 	addi	r2,r2,-18572
   13030:	10800017 	ldw	r2,0(r2)
   13034:	10800c83 	ldbu	r2,50(r2)
   13038:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1303c:	e0bffd03 	ldbu	r2,-12(fp)
   13040:	00c000b4 	movhi	r3,2
   13044:	18ca7c04 	addi	r3,r3,10736
   13048:	1085883a 	add	r2,r2,r2
   1304c:	1085883a 	add	r2,r2,r2
   13050:	10c5883a 	add	r2,r2,r3
   13054:	10800017 	ldw	r2,0(r2)
   13058:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   1305c:	e0bffb17 	ldw	r2,-20(fp)
   13060:	1004c03a 	cmpne	r2,r2,zero
   13064:	1000081e 	bne	r2,zero,13088 <OSTaskNameSet+0x124>
   13068:	e0bffa17 	ldw	r2,-24(fp)
   1306c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13070:	e0bff817 	ldw	r2,-32(fp)
   13074:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   13078:	e0ffff17 	ldw	r3,-4(fp)
   1307c:	008010c4 	movi	r2,67
   13080:	18800005 	stb	r2,0(r3)
        return;
   13084:	00002306 	br	13114 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   13088:	e0bffb17 	ldw	r2,-20(fp)
   1308c:	10800058 	cmpnei	r2,r2,1
   13090:	1000081e 	bne	r2,zero,130b4 <OSTaskNameSet+0x150>
   13094:	e0bffa17 	ldw	r2,-24(fp)
   13098:	e0bff715 	stw	r2,-36(fp)
   1309c:	e0bff717 	ldw	r2,-36(fp)
   130a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   130a4:	e0ffff17 	ldw	r3,-4(fp)
   130a8:	008010c4 	movi	r2,67
   130ac:	18800005 	stb	r2,0(r3)
        return;
   130b0:	00001806 	br	13114 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   130b4:	e13ffe17 	ldw	r4,-8(fp)
   130b8:	000d7f80 	call	d7f8 <OS_StrLen>
   130bc:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   130c0:	e0bffc03 	ldbu	r2,-16(fp)
   130c4:	10800830 	cmpltui	r2,r2,32
   130c8:	1000081e 	bne	r2,zero,130ec <OSTaskNameSet+0x188>
   130cc:	e0bffa17 	ldw	r2,-24(fp)
   130d0:	e0bff615 	stw	r2,-40(fp)
   130d4:	e0bff617 	ldw	r2,-40(fp)
   130d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   130dc:	e0ffff17 	ldw	r3,-4(fp)
   130e0:	00801044 	movi	r2,65
   130e4:	18800005 	stb	r2,0(r3)
        return;
   130e8:	00000a06 	br	13114 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   130ec:	e0bffb17 	ldw	r2,-20(fp)
   130f0:	11001304 	addi	r4,r2,76
   130f4:	e17ffe17 	ldw	r5,-8(fp)
   130f8:	000d7780 	call	d778 <OS_StrCopy>
   130fc:	e0bffa17 	ldw	r2,-24(fp)
   13100:	e0bff515 	stw	r2,-44(fp)
   13104:	e0bff517 	ldw	r2,-44(fp)
   13108:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1310c:	e0bfff17 	ldw	r2,-4(fp)
   13110:	10000005 	stb	zero,0(r2)
}
   13114:	e037883a 	mov	sp,fp
   13118:	dfc00117 	ldw	ra,4(sp)
   1311c:	df000017 	ldw	fp,0(sp)
   13120:	dec00204 	addi	sp,sp,8
   13124:	f800283a 	ret

00013128 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   13128:	defff304 	addi	sp,sp,-52
   1312c:	dfc00c15 	stw	ra,48(sp)
   13130:	df000b15 	stw	fp,44(sp)
   13134:	df000b04 	addi	fp,sp,44
   13138:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   1313c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   13140:	e0bffe03 	ldbu	r2,-8(fp)
   13144:	10800530 	cmpltui	r2,r2,20
   13148:	1000031e 	bne	r2,zero,13158 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1314c:	00800a84 	movi	r2,42
   13150:	e0bfff15 	stw	r2,-4(fp)
   13154:	00007406 	br	13328 <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13158:	0005303a 	rdctl	r2,status
   1315c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13160:	e0fffb17 	ldw	r3,-20(fp)
   13164:	00bfff84 	movi	r2,-2
   13168:	1884703a 	and	r2,r3,r2
   1316c:	1001703a 	wrctl	status,r2
  
  return context;
   13170:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13174:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
   13178:	e0bffe03 	ldbu	r2,-8(fp)
   1317c:	00c000b4 	movhi	r3,2
   13180:	18ca7c04 	addi	r3,r3,10736
   13184:	1085883a 	add	r2,r2,r2
   13188:	1085883a 	add	r2,r2,r2
   1318c:	10c5883a 	add	r2,r2,r3
   13190:	10800017 	ldw	r2,0(r2)
   13194:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   13198:	e0bffd17 	ldw	r2,-12(fp)
   1319c:	1004c03a 	cmpne	r2,r2,zero
   131a0:	1000071e 	bne	r2,zero,131c0 <OSTaskResume+0x98>
   131a4:	e0bffc17 	ldw	r2,-16(fp)
   131a8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   131ac:	e0bffa17 	ldw	r2,-24(fp)
   131b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   131b4:	00801184 	movi	r2,70
   131b8:	e0bfff15 	stw	r2,-4(fp)
   131bc:	00005a06 	br	13328 <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   131c0:	e0bffd17 	ldw	r2,-12(fp)
   131c4:	10800058 	cmpnei	r2,r2,1
   131c8:	1000071e 	bne	r2,zero,131e8 <OSTaskResume+0xc0>
   131cc:	e0bffc17 	ldw	r2,-16(fp)
   131d0:	e0bff915 	stw	r2,-28(fp)
   131d4:	e0bff917 	ldw	r2,-28(fp)
   131d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   131dc:	008010c4 	movi	r2,67
   131e0:	e0bfff15 	stw	r2,-4(fp)
   131e4:	00005006 	br	13328 <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   131e8:	e0bffd17 	ldw	r2,-12(fp)
   131ec:	10800c03 	ldbu	r2,48(r2)
   131f0:	10803fcc 	andi	r2,r2,255
   131f4:	1080020c 	andi	r2,r2,8
   131f8:	1005003a 	cmpeq	r2,r2,zero
   131fc:	1000441e 	bne	r2,zero,13310 <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   13200:	e0bffd17 	ldw	r2,-12(fp)
   13204:	10c00c03 	ldbu	r3,48(r2)
   13208:	00bffdc4 	movi	r2,-9
   1320c:	1884703a 	and	r2,r3,r2
   13210:	1007883a 	mov	r3,r2
   13214:	e0bffd17 	ldw	r2,-12(fp)
   13218:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   1321c:	e0bffd17 	ldw	r2,-12(fp)
   13220:	10800c03 	ldbu	r2,48(r2)
   13224:	10803fcc 	andi	r2,r2,255
   13228:	1004c03a 	cmpne	r2,r2,zero
   1322c:	1000321e 	bne	r2,zero,132f8 <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
   13230:	e0bffd17 	ldw	r2,-12(fp)
   13234:	10800b8b 	ldhu	r2,46(r2)
   13238:	10bfffcc 	andi	r2,r2,65535
   1323c:	1004c03a 	cmpne	r2,r2,zero
   13240:	1000281e 	bne	r2,zero,132e4 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   13244:	e0bffd17 	ldw	r2,-12(fp)
   13248:	10c00d83 	ldbu	r3,54(r2)
   1324c:	008000b4 	movhi	r2,2
   13250:	10adda04 	addi	r2,r2,-18584
   13254:	10800003 	ldbu	r2,0(r2)
   13258:	1884b03a 	or	r2,r3,r2
   1325c:	1007883a 	mov	r3,r2
   13260:	008000b4 	movhi	r2,2
   13264:	10adda04 	addi	r2,r2,-18584
   13268:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1326c:	e0bffd17 	ldw	r2,-12(fp)
   13270:	10800d03 	ldbu	r2,52(r2)
   13274:	11003fcc 	andi	r4,r2,255
   13278:	e0bffd17 	ldw	r2,-12(fp)
   1327c:	10800d03 	ldbu	r2,52(r2)
   13280:	10c03fcc 	andi	r3,r2,255
   13284:	008000b4 	movhi	r2,2
   13288:	10adda44 	addi	r2,r2,-18583
   1328c:	10c5883a 	add	r2,r2,r3
   13290:	10c00003 	ldbu	r3,0(r2)
   13294:	e0bffd17 	ldw	r2,-12(fp)
   13298:	10800d43 	ldbu	r2,53(r2)
   1329c:	1884b03a 	or	r2,r3,r2
   132a0:	1007883a 	mov	r3,r2
   132a4:	008000b4 	movhi	r2,2
   132a8:	10adda44 	addi	r2,r2,-18583
   132ac:	1105883a 	add	r2,r2,r4
   132b0:	10c00005 	stb	r3,0(r2)
   132b4:	e0bffc17 	ldw	r2,-16(fp)
   132b8:	e0bff815 	stw	r2,-32(fp)
   132bc:	e0bff817 	ldw	r2,-32(fp)
   132c0:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   132c4:	008000b4 	movhi	r2,2
   132c8:	10adce44 	addi	r2,r2,-18631
   132cc:	10800003 	ldbu	r2,0(r2)
   132d0:	10803fcc 	andi	r2,r2,255
   132d4:	10800058 	cmpnei	r2,r2,1
   132d8:	10000b1e 	bne	r2,zero,13308 <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
   132dc:	000d6340 	call	d634 <OS_Sched>
   132e0:	00000906 	br	13308 <OSTaskResume+0x1e0>
   132e4:	e0bffc17 	ldw	r2,-16(fp)
   132e8:	e0bff715 	stw	r2,-36(fp)
   132ec:	e0bff717 	ldw	r2,-36(fp)
   132f0:	1001703a 	wrctl	status,r2
   132f4:	00000406 	br	13308 <OSTaskResume+0x1e0>
   132f8:	e0bffc17 	ldw	r2,-16(fp)
   132fc:	e0bff615 	stw	r2,-40(fp)
   13300:	e0bff617 	ldw	r2,-40(fp)
   13304:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   13308:	e03fff15 	stw	zero,-4(fp)
   1330c:	00000606 	br	13328 <OSTaskResume+0x200>
   13310:	e0bffc17 	ldw	r2,-16(fp)
   13314:	e0bff515 	stw	r2,-44(fp)
   13318:	e0bff517 	ldw	r2,-44(fp)
   1331c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   13320:	00801104 	movi	r2,68
   13324:	e0bfff15 	stw	r2,-4(fp)
   13328:	e0bfff17 	ldw	r2,-4(fp)
}
   1332c:	e037883a 	mov	sp,fp
   13330:	dfc00117 	ldw	ra,4(sp)
   13334:	df000017 	ldw	fp,0(sp)
   13338:	dec00204 	addi	sp,sp,8
   1333c:	f800283a 	ret

00013340 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   13340:	defff204 	addi	sp,sp,-56
   13344:	df000d15 	stw	fp,52(sp)
   13348:	df000d04 	addi	fp,sp,52
   1334c:	e17ffe15 	stw	r5,-8(fp)
   13350:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   13354:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   13358:	e0bffd03 	ldbu	r2,-12(fp)
   1335c:	10800570 	cmpltui	r2,r2,21
   13360:	1000061e 	bne	r2,zero,1337c <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   13364:	e0bffd03 	ldbu	r2,-12(fp)
   13368:	10803fe0 	cmpeqi	r2,r2,255
   1336c:	1000031e 	bne	r2,zero,1337c <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   13370:	00800a84 	movi	r2,42
   13374:	e0bfff15 	stw	r2,-4(fp)
   13378:	00006b06 	br	13528 <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   1337c:	e0bffe17 	ldw	r2,-8(fp)
   13380:	1004c03a 	cmpne	r2,r2,zero
   13384:	1000031e 	bne	r2,zero,13394 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
   13388:	00800244 	movi	r2,9
   1338c:	e0bfff15 	stw	r2,-4(fp)
   13390:	00006506 	br	13528 <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   13394:	e0bffe17 	ldw	r2,-8(fp)
   13398:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   1339c:	e0bffe17 	ldw	r2,-8(fp)
   133a0:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   133a4:	0005303a 	rdctl	r2,status
   133a8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   133ac:	e0fff717 	ldw	r3,-36(fp)
   133b0:	00bfff84 	movi	r2,-2
   133b4:	1884703a 	and	r2,r3,r2
   133b8:	1001703a 	wrctl	status,r2
  
  return context;
   133bc:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   133c0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   133c4:	e0bffd03 	ldbu	r2,-12(fp)
   133c8:	10803fd8 	cmpnei	r2,r2,255
   133cc:	1000051e 	bne	r2,zero,133e4 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
   133d0:	008000b4 	movhi	r2,2
   133d4:	10addd04 	addi	r2,r2,-18572
   133d8:	10800017 	ldw	r2,0(r2)
   133dc:	10800c83 	ldbu	r2,50(r2)
   133e0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   133e4:	e0bffd03 	ldbu	r2,-12(fp)
   133e8:	00c000b4 	movhi	r3,2
   133ec:	18ca7c04 	addi	r3,r3,10736
   133f0:	1085883a 	add	r2,r2,r2
   133f4:	1085883a 	add	r2,r2,r2
   133f8:	10c5883a 	add	r2,r2,r3
   133fc:	10800017 	ldw	r2,0(r2)
   13400:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   13404:	e0bffc17 	ldw	r2,-16(fp)
   13408:	1004c03a 	cmpne	r2,r2,zero
   1340c:	1000071e 	bne	r2,zero,1342c <OSTaskStkChk+0xec>
   13410:	e0bff817 	ldw	r2,-32(fp)
   13414:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13418:	e0bff617 	ldw	r2,-40(fp)
   1341c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   13420:	008010c4 	movi	r2,67
   13424:	e0bfff15 	stw	r2,-4(fp)
   13428:	00003f06 	br	13528 <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1342c:	e0bffc17 	ldw	r2,-16(fp)
   13430:	10800058 	cmpnei	r2,r2,1
   13434:	1000071e 	bne	r2,zero,13454 <OSTaskStkChk+0x114>
   13438:	e0bff817 	ldw	r2,-32(fp)
   1343c:	e0bff515 	stw	r2,-44(fp)
   13440:	e0bff517 	ldw	r2,-44(fp)
   13444:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   13448:	008010c4 	movi	r2,67
   1344c:	e0bfff15 	stw	r2,-4(fp)
   13450:	00003506 	br	13528 <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   13454:	e0bffc17 	ldw	r2,-16(fp)
   13458:	1080040b 	ldhu	r2,16(r2)
   1345c:	10bfffcc 	andi	r2,r2,65535
   13460:	1080004c 	andi	r2,r2,1
   13464:	1004c03a 	cmpne	r2,r2,zero
   13468:	1000071e 	bne	r2,zero,13488 <OSTaskStkChk+0x148>
   1346c:	e0bff817 	ldw	r2,-32(fp)
   13470:	e0bff415 	stw	r2,-48(fp)
   13474:	e0bff417 	ldw	r2,-48(fp)
   13478:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   1347c:	00801144 	movi	r2,69
   13480:	e0bfff15 	stw	r2,-4(fp)
   13484:	00002806 	br	13528 <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
   13488:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
   1348c:	e0bffc17 	ldw	r2,-16(fp)
   13490:	10800317 	ldw	r2,12(r2)
   13494:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
   13498:	e0bffc17 	ldw	r2,-16(fp)
   1349c:	10800217 	ldw	r2,8(r2)
   134a0:	e0bffb15 	stw	r2,-20(fp)
   134a4:	e0bff817 	ldw	r2,-32(fp)
   134a8:	e0bff315 	stw	r2,-52(fp)
   134ac:	e0bff317 	ldw	r2,-52(fp)
   134b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   134b4:	00000306 	br	134c4 <OSTaskStkChk+0x184>
        nfree++;
   134b8:	e0bffa17 	ldw	r2,-24(fp)
   134bc:	10800044 	addi	r2,r2,1
   134c0:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   134c4:	e0bffb17 	ldw	r2,-20(fp)
   134c8:	10800017 	ldw	r2,0(r2)
   134cc:	1005003a 	cmpeq	r2,r2,zero
   134d0:	1007883a 	mov	r3,r2
   134d4:	e0bffb17 	ldw	r2,-20(fp)
   134d8:	10800104 	addi	r2,r2,4
   134dc:	e0bffb15 	stw	r2,-20(fp)
   134e0:	18803fcc 	andi	r2,r3,255
   134e4:	1004c03a 	cmpne	r2,r2,zero
   134e8:	103ff31e 	bne	r2,zero,134b8 <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   134ec:	e0bffa17 	ldw	r2,-24(fp)
   134f0:	1085883a 	add	r2,r2,r2
   134f4:	1085883a 	add	r2,r2,r2
   134f8:	1007883a 	mov	r3,r2
   134fc:	e0bffe17 	ldw	r2,-8(fp)
   13500:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   13504:	e0fff917 	ldw	r3,-28(fp)
   13508:	e0bffa17 	ldw	r2,-24(fp)
   1350c:	1885c83a 	sub	r2,r3,r2
   13510:	1085883a 	add	r2,r2,r2
   13514:	1085883a 	add	r2,r2,r2
   13518:	1007883a 	mov	r3,r2
   1351c:	e0bffe17 	ldw	r2,-8(fp)
   13520:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   13524:	e03fff15 	stw	zero,-4(fp)
   13528:	e0bfff17 	ldw	r2,-4(fp)
}
   1352c:	e037883a 	mov	sp,fp
   13530:	df000017 	ldw	fp,0(sp)
   13534:	dec00104 	addi	sp,sp,4
   13538:	f800283a 	ret

0001353c <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   1353c:	defff404 	addi	sp,sp,-48
   13540:	dfc00b15 	stw	ra,44(sp)
   13544:	df000a15 	stw	fp,40(sp)
   13548:	df000a04 	addi	fp,sp,40
   1354c:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13550:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   13554:	e0bffe03 	ldbu	r2,-8(fp)
   13558:	10800518 	cmpnei	r2,r2,20
   1355c:	1000031e 	bne	r2,zero,1356c <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   13560:	008011c4 	movi	r2,71
   13564:	e0bfff15 	stw	r2,-4(fp)
   13568:	00007906 	br	13750 <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1356c:	e0bffe03 	ldbu	r2,-8(fp)
   13570:	10800530 	cmpltui	r2,r2,20
   13574:	1000061e 	bne	r2,zero,13590 <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
   13578:	e0bffe03 	ldbu	r2,-8(fp)
   1357c:	10803fe0 	cmpeqi	r2,r2,255
   13580:	1000031e 	bne	r2,zero,13590 <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
   13584:	00800a84 	movi	r2,42
   13588:	e0bfff15 	stw	r2,-4(fp)
   1358c:	00007006 	br	13750 <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13590:	0005303a 	rdctl	r2,status
   13594:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13598:	e0fff917 	ldw	r3,-28(fp)
   1359c:	00bfff84 	movi	r2,-2
   135a0:	1884703a 	and	r2,r3,r2
   135a4:	1001703a 	wrctl	status,r2
  
  return context;
   135a8:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   135ac:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   135b0:	e0bffe03 	ldbu	r2,-8(fp)
   135b4:	10803fd8 	cmpnei	r2,r2,255
   135b8:	1000081e 	bne	r2,zero,135dc <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
   135bc:	008000b4 	movhi	r2,2
   135c0:	10addd04 	addi	r2,r2,-18572
   135c4:	10800017 	ldw	r2,0(r2)
   135c8:	10800c83 	ldbu	r2,50(r2)
   135cc:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
   135d0:	00800044 	movi	r2,1
   135d4:	e0bffd05 	stb	r2,-12(fp)
   135d8:	00000b06 	br	13608 <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   135dc:	008000b4 	movhi	r2,2
   135e0:	10addd04 	addi	r2,r2,-18572
   135e4:	10800017 	ldw	r2,0(r2)
   135e8:	10800c83 	ldbu	r2,50(r2)
   135ec:	10c03fcc 	andi	r3,r2,255
   135f0:	e0bffe03 	ldbu	r2,-8(fp)
   135f4:	1880031e 	bne	r3,r2,13604 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
   135f8:	00800044 	movi	r2,1
   135fc:	e0bffd05 	stb	r2,-12(fp)
   13600:	00000106 	br	13608 <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   13604:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   13608:	e0bffe03 	ldbu	r2,-8(fp)
   1360c:	00c000b4 	movhi	r3,2
   13610:	18ca7c04 	addi	r3,r3,10736
   13614:	1085883a 	add	r2,r2,r2
   13618:	1085883a 	add	r2,r2,r2
   1361c:	10c5883a 	add	r2,r2,r3
   13620:	10800017 	ldw	r2,0(r2)
   13624:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   13628:	e0bffc17 	ldw	r2,-16(fp)
   1362c:	1004c03a 	cmpne	r2,r2,zero
   13630:	1000071e 	bne	r2,zero,13650 <OSTaskSuspend+0x114>
   13634:	e0bffa17 	ldw	r2,-24(fp)
   13638:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1363c:	e0bff817 	ldw	r2,-32(fp)
   13640:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   13644:	00801204 	movi	r2,72
   13648:	e0bfff15 	stw	r2,-4(fp)
   1364c:	00004006 	br	13750 <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   13650:	e0bffc17 	ldw	r2,-16(fp)
   13654:	10800058 	cmpnei	r2,r2,1
   13658:	1000071e 	bne	r2,zero,13678 <OSTaskSuspend+0x13c>
   1365c:	e0bffa17 	ldw	r2,-24(fp)
   13660:	e0bff715 	stw	r2,-36(fp)
   13664:	e0bff717 	ldw	r2,-36(fp)
   13668:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1366c:	008010c4 	movi	r2,67
   13670:	e0bfff15 	stw	r2,-4(fp)
   13674:	00003606 	br	13750 <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
   13678:	e0bffc17 	ldw	r2,-16(fp)
   1367c:	10800d03 	ldbu	r2,52(r2)
   13680:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   13684:	e13ffb03 	ldbu	r4,-20(fp)
   13688:	e0fffb03 	ldbu	r3,-20(fp)
   1368c:	008000b4 	movhi	r2,2
   13690:	10adda44 	addi	r2,r2,-18583
   13694:	10c5883a 	add	r2,r2,r3
   13698:	10800003 	ldbu	r2,0(r2)
   1369c:	1007883a 	mov	r3,r2
   136a0:	e0bffc17 	ldw	r2,-16(fp)
   136a4:	10800d43 	ldbu	r2,53(r2)
   136a8:	0084303a 	nor	r2,zero,r2
   136ac:	1884703a 	and	r2,r3,r2
   136b0:	1007883a 	mov	r3,r2
   136b4:	008000b4 	movhi	r2,2
   136b8:	10adda44 	addi	r2,r2,-18583
   136bc:	1105883a 	add	r2,r2,r4
   136c0:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
   136c4:	e0fffb03 	ldbu	r3,-20(fp)
   136c8:	008000b4 	movhi	r2,2
   136cc:	10adda44 	addi	r2,r2,-18583
   136d0:	10c5883a 	add	r2,r2,r3
   136d4:	10800003 	ldbu	r2,0(r2)
   136d8:	10803fcc 	andi	r2,r2,255
   136dc:	1004c03a 	cmpne	r2,r2,zero
   136e0:	10000c1e 	bne	r2,zero,13714 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   136e4:	e0bffc17 	ldw	r2,-16(fp)
   136e8:	10800d83 	ldbu	r2,54(r2)
   136ec:	0084303a 	nor	r2,zero,r2
   136f0:	1007883a 	mov	r3,r2
   136f4:	008000b4 	movhi	r2,2
   136f8:	10adda04 	addi	r2,r2,-18584
   136fc:	10800003 	ldbu	r2,0(r2)
   13700:	1884703a 	and	r2,r3,r2
   13704:	1007883a 	mov	r3,r2
   13708:	008000b4 	movhi	r2,2
   1370c:	10adda04 	addi	r2,r2,-18584
   13710:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   13714:	e0bffc17 	ldw	r2,-16(fp)
   13718:	10800c03 	ldbu	r2,48(r2)
   1371c:	10800214 	ori	r2,r2,8
   13720:	1007883a 	mov	r3,r2
   13724:	e0bffc17 	ldw	r2,-16(fp)
   13728:	10c00c05 	stb	r3,48(r2)
   1372c:	e0bffa17 	ldw	r2,-24(fp)
   13730:	e0bff615 	stw	r2,-40(fp)
   13734:	e0bff617 	ldw	r2,-40(fp)
   13738:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   1373c:	e0bffd03 	ldbu	r2,-12(fp)
   13740:	10800058 	cmpnei	r2,r2,1
   13744:	1000011e 	bne	r2,zero,1374c <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
   13748:	000d6340 	call	d634 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1374c:	e03fff15 	stw	zero,-4(fp)
   13750:	e0bfff17 	ldw	r2,-4(fp)
}
   13754:	e037883a 	mov	sp,fp
   13758:	dfc00117 	ldw	ra,4(sp)
   1375c:	df000017 	ldw	fp,0(sp)
   13760:	dec00204 	addi	sp,sp,8
   13764:	f800283a 	ret

00013768 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   13768:	defff504 	addi	sp,sp,-44
   1376c:	dfc00a15 	stw	ra,40(sp)
   13770:	df000915 	stw	fp,36(sp)
   13774:	df000904 	addi	fp,sp,36
   13778:	e17ffe15 	stw	r5,-8(fp)
   1377c:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13780:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   13784:	e0bffd03 	ldbu	r2,-12(fp)
   13788:	10800570 	cmpltui	r2,r2,21
   1378c:	1000061e 	bne	r2,zero,137a8 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   13790:	e0bffd03 	ldbu	r2,-12(fp)
   13794:	10803fe0 	cmpeqi	r2,r2,255
   13798:	1000031e 	bne	r2,zero,137a8 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   1379c:	00800a84 	movi	r2,42
   137a0:	e0bfff15 	stw	r2,-4(fp)
   137a4:	00003b06 	br	13894 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   137a8:	e0bffe17 	ldw	r2,-8(fp)
   137ac:	1004c03a 	cmpne	r2,r2,zero
   137b0:	1000031e 	bne	r2,zero,137c0 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
   137b4:	00800244 	movi	r2,9
   137b8:	e0bfff15 	stw	r2,-4(fp)
   137bc:	00003506 	br	13894 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   137c0:	0005303a 	rdctl	r2,status
   137c4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   137c8:	e0fffa17 	ldw	r3,-24(fp)
   137cc:	00bfff84 	movi	r2,-2
   137d0:	1884703a 	and	r2,r3,r2
   137d4:	1001703a 	wrctl	status,r2
  
  return context;
   137d8:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   137dc:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   137e0:	e0bffd03 	ldbu	r2,-12(fp)
   137e4:	10803fd8 	cmpnei	r2,r2,255
   137e8:	1000051e 	bne	r2,zero,13800 <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
   137ec:	008000b4 	movhi	r2,2
   137f0:	10addd04 	addi	r2,r2,-18572
   137f4:	10800017 	ldw	r2,0(r2)
   137f8:	10800c83 	ldbu	r2,50(r2)
   137fc:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   13800:	e0bffd03 	ldbu	r2,-12(fp)
   13804:	00c000b4 	movhi	r3,2
   13808:	18ca7c04 	addi	r3,r3,10736
   1380c:	1085883a 	add	r2,r2,r2
   13810:	1085883a 	add	r2,r2,r2
   13814:	10c5883a 	add	r2,r2,r3
   13818:	10800017 	ldw	r2,0(r2)
   1381c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   13820:	e0bffc17 	ldw	r2,-16(fp)
   13824:	1004c03a 	cmpne	r2,r2,zero
   13828:	1000071e 	bne	r2,zero,13848 <OSTaskQuery+0xe0>
   1382c:	e0bffb17 	ldw	r2,-20(fp)
   13830:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13834:	e0bff917 	ldw	r2,-28(fp)
   13838:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   1383c:	00800a44 	movi	r2,41
   13840:	e0bfff15 	stw	r2,-4(fp)
   13844:	00001306 	br	13894 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   13848:	e0bffc17 	ldw	r2,-16(fp)
   1384c:	10800058 	cmpnei	r2,r2,1
   13850:	1000071e 	bne	r2,zero,13870 <OSTaskQuery+0x108>
   13854:	e0bffb17 	ldw	r2,-20(fp)
   13858:	e0bff815 	stw	r2,-32(fp)
   1385c:	e0bff817 	ldw	r2,-32(fp)
   13860:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   13864:	008010c4 	movi	r2,67
   13868:	e0bfff15 	stw	r2,-4(fp)
   1386c:	00000906 	br	13894 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   13870:	e13ffe17 	ldw	r4,-8(fp)
   13874:	e17ffc17 	ldw	r5,-16(fp)
   13878:	01801b04 	movi	r6,108
   1387c:	000d5c80 	call	d5c8 <OS_MemCopy>
   13880:	e0bffb17 	ldw	r2,-20(fp)
   13884:	e0bff715 	stw	r2,-36(fp)
   13888:	e0bff717 	ldw	r2,-36(fp)
   1388c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   13890:	e03fff15 	stw	zero,-4(fp)
   13894:	e0bfff17 	ldw	r2,-4(fp)
}
   13898:	e037883a 	mov	sp,fp
   1389c:	dfc00117 	ldw	ra,4(sp)
   138a0:	df000017 	ldw	fp,0(sp)
   138a4:	dec00204 	addi	sp,sp,8
   138a8:	f800283a 	ret

000138ac <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   138ac:	defffc04 	addi	sp,sp,-16
   138b0:	df000315 	stw	fp,12(sp)
   138b4:	df000304 	addi	fp,sp,12
   138b8:	e13ffd15 	stw	r4,-12(fp)
   138bc:	e17ffe15 	stw	r5,-8(fp)
   138c0:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   138c4:	e0bfff0b 	ldhu	r2,-4(fp)
   138c8:	1080004c 	andi	r2,r2,1
   138cc:	10803fcc 	andi	r2,r2,255
   138d0:	1005003a 	cmpeq	r2,r2,zero
   138d4:	1000101e 	bne	r2,zero,13918 <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   138d8:	e0bfff0b 	ldhu	r2,-4(fp)
   138dc:	1080008c 	andi	r2,r2,2
   138e0:	1005003a 	cmpeq	r2,r2,zero
   138e4:	10000c1e 	bne	r2,zero,13918 <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   138e8:	00000806 	br	1390c <OS_TaskStkClr+0x60>
                size--;
   138ec:	e0bffe17 	ldw	r2,-8(fp)
   138f0:	10bfffc4 	addi	r2,r2,-1
   138f4:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   138f8:	e0bffd17 	ldw	r2,-12(fp)
   138fc:	10000015 	stw	zero,0(r2)
   13900:	e0bffd17 	ldw	r2,-12(fp)
   13904:	10800104 	addi	r2,r2,4
   13908:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1390c:	e0bffe17 	ldw	r2,-8(fp)
   13910:	1004c03a 	cmpne	r2,r2,zero
   13914:	103ff51e 	bne	r2,zero,138ec <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   13918:	e037883a 	mov	sp,fp
   1391c:	df000017 	ldw	fp,0(sp)
   13920:	dec00104 	addi	sp,sp,4
   13924:	f800283a 	ret

00013928 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   13928:	defff904 	addi	sp,sp,-28
   1392c:	dfc00615 	stw	ra,24(sp)
   13930:	df000515 	stw	fp,20(sp)
   13934:	df000504 	addi	fp,sp,20
   13938:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1393c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   13940:	008000b4 	movhi	r2,2
   13944:	10addc04 	addi	r2,r2,-18576
   13948:	10800003 	ldbu	r2,0(r2)
   1394c:	10803fcc 	andi	r2,r2,255
   13950:	1004c03a 	cmpne	r2,r2,zero
   13954:	1000421e 	bne	r2,zero,13a60 <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   13958:	e0bfff0b 	ldhu	r2,-4(fp)
   1395c:	1005003a 	cmpeq	r2,r2,zero
   13960:	10003f1e 	bne	r2,zero,13a60 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13964:	0005303a 	rdctl	r2,status
   13968:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1396c:	e0fffc17 	ldw	r3,-16(fp)
   13970:	00bfff84 	movi	r2,-2
   13974:	1884703a 	and	r2,r3,r2
   13978:	1001703a 	wrctl	status,r2
  
  return context;
   1397c:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
   13980:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   13984:	008000b4 	movhi	r2,2
   13988:	10addd04 	addi	r2,r2,-18572
   1398c:	10800017 	ldw	r2,0(r2)
   13990:	10800d03 	ldbu	r2,52(r2)
   13994:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   13998:	e13ffe03 	ldbu	r4,-8(fp)
   1399c:	e0fffe03 	ldbu	r3,-8(fp)
   139a0:	008000b4 	movhi	r2,2
   139a4:	10adda44 	addi	r2,r2,-18583
   139a8:	10c5883a 	add	r2,r2,r3
   139ac:	10800003 	ldbu	r2,0(r2)
   139b0:	1007883a 	mov	r3,r2
   139b4:	008000b4 	movhi	r2,2
   139b8:	10addd04 	addi	r2,r2,-18572
   139bc:	10800017 	ldw	r2,0(r2)
   139c0:	10800d43 	ldbu	r2,53(r2)
   139c4:	0084303a 	nor	r2,zero,r2
   139c8:	1884703a 	and	r2,r3,r2
   139cc:	1007883a 	mov	r3,r2
   139d0:	008000b4 	movhi	r2,2
   139d4:	10adda44 	addi	r2,r2,-18583
   139d8:	1105883a 	add	r2,r2,r4
   139dc:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
   139e0:	e0fffe03 	ldbu	r3,-8(fp)
   139e4:	008000b4 	movhi	r2,2
   139e8:	10adda44 	addi	r2,r2,-18583
   139ec:	10c5883a 	add	r2,r2,r3
   139f0:	10800003 	ldbu	r2,0(r2)
   139f4:	10803fcc 	andi	r2,r2,255
   139f8:	1004c03a 	cmpne	r2,r2,zero
   139fc:	10000e1e 	bne	r2,zero,13a38 <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   13a00:	008000b4 	movhi	r2,2
   13a04:	10addd04 	addi	r2,r2,-18572
   13a08:	10800017 	ldw	r2,0(r2)
   13a0c:	10800d83 	ldbu	r2,54(r2)
   13a10:	0084303a 	nor	r2,zero,r2
   13a14:	1007883a 	mov	r3,r2
   13a18:	008000b4 	movhi	r2,2
   13a1c:	10adda04 	addi	r2,r2,-18584
   13a20:	10800003 	ldbu	r2,0(r2)
   13a24:	1884703a 	and	r2,r3,r2
   13a28:	1007883a 	mov	r3,r2
   13a2c:	008000b4 	movhi	r2,2
   13a30:	10adda04 	addi	r2,r2,-18584
   13a34:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   13a38:	008000b4 	movhi	r2,2
   13a3c:	10addd04 	addi	r2,r2,-18572
   13a40:	10c00017 	ldw	r3,0(r2)
   13a44:	e0bfff0b 	ldhu	r2,-4(fp)
   13a48:	18800b8d 	sth	r2,46(r3)
   13a4c:	e0bffd17 	ldw	r2,-12(fp)
   13a50:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13a54:	e0bffb17 	ldw	r2,-20(fp)
   13a58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   13a5c:	000d6340 	call	d634 <OS_Sched>
    }
}
   13a60:	e037883a 	mov	sp,fp
   13a64:	dfc00117 	ldw	ra,4(sp)
   13a68:	df000017 	ldw	fp,0(sp)
   13a6c:	dec00204 	addi	sp,sp,8
   13a70:	f800283a 	ret

00013a74 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   13a74:	defff604 	addi	sp,sp,-40
   13a78:	dfc00915 	stw	ra,36(sp)
   13a7c:	df000815 	stw	fp,32(sp)
   13a80:	dc000715 	stw	r16,28(sp)
   13a84:	df000704 	addi	fp,sp,28
   13a88:	e13ffb05 	stb	r4,-20(fp)
   13a8c:	e17ffc05 	stb	r5,-16(fp)
   13a90:	e1bffd05 	stb	r6,-12(fp)
   13a94:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   13a98:	008000b4 	movhi	r2,2
   13a9c:	10addc04 	addi	r2,r2,-18576
   13aa0:	10800003 	ldbu	r2,0(r2)
   13aa4:	10803fcc 	andi	r2,r2,255
   13aa8:	1005003a 	cmpeq	r2,r2,zero
   13aac:	1000031e 	bne	r2,zero,13abc <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
   13ab0:	00801544 	movi	r2,85
   13ab4:	e0bfff15 	stw	r2,-4(fp)
   13ab8:	00004406 	br	13bcc <OSTimeDlyHMSM+0x158>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   13abc:	e0bffb03 	ldbu	r2,-20(fp)
   13ac0:	1004c03a 	cmpne	r2,r2,zero
   13ac4:	10000c1e 	bne	r2,zero,13af8 <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
   13ac8:	e0bffc03 	ldbu	r2,-16(fp)
   13acc:	1004c03a 	cmpne	r2,r2,zero
   13ad0:	1000091e 	bne	r2,zero,13af8 <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
   13ad4:	e0bffd03 	ldbu	r2,-12(fp)
   13ad8:	1004c03a 	cmpne	r2,r2,zero
   13adc:	1000061e 	bne	r2,zero,13af8 <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
   13ae0:	e0bffe0b 	ldhu	r2,-8(fp)
   13ae4:	1004c03a 	cmpne	r2,r2,zero
   13ae8:	1000031e 	bne	r2,zero,13af8 <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
   13aec:	00801504 	movi	r2,84
   13af0:	e0bfff15 	stw	r2,-4(fp)
   13af4:	00003506 	br	13bcc <OSTimeDlyHMSM+0x158>
                }
            }
        }
    }
    if (minutes > 59) {
   13af8:	e0bffc03 	ldbu	r2,-16(fp)
   13afc:	10800f30 	cmpltui	r2,r2,60
   13b00:	1000031e 	bne	r2,zero,13b10 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   13b04:	00801444 	movi	r2,81
   13b08:	e0bfff15 	stw	r2,-4(fp)
   13b0c:	00002f06 	br	13bcc <OSTimeDlyHMSM+0x158>
    }
    if (seconds > 59) {
   13b10:	e0bffd03 	ldbu	r2,-12(fp)
   13b14:	10800f30 	cmpltui	r2,r2,60
   13b18:	1000031e 	bne	r2,zero,13b28 <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
   13b1c:	00801484 	movi	r2,82
   13b20:	e0bfff15 	stw	r2,-4(fp)
   13b24:	00002906 	br	13bcc <OSTimeDlyHMSM+0x158>
    }
    if (ms > 999) {
   13b28:	e0bffe0b 	ldhu	r2,-8(fp)
   13b2c:	1080fa30 	cmpltui	r2,r2,1000
   13b30:	1000031e 	bne	r2,zero,13b40 <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
   13b34:	008014c4 	movi	r2,83
   13b38:	e0bfff15 	stw	r2,-4(fp)
   13b3c:	00002306 	br	13bcc <OSTimeDlyHMSM+0x158>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   13b40:	e0bffb03 	ldbu	r2,-20(fp)
   13b44:	10c38424 	muli	r3,r2,3600
   13b48:	e0bffc03 	ldbu	r2,-16(fp)
   13b4c:	10800f24 	muli	r2,r2,60
   13b50:	1887883a 	add	r3,r3,r2
   13b54:	e0bffd03 	ldbu	r2,-12(fp)
   13b58:	1885883a 	add	r2,r3,r2
   13b5c:	1400fa24 	muli	r16,r2,1000
   13b60:	e0bffe0b 	ldhu	r2,-8(fp)
   13b64:	1100fa24 	muli	r4,r2,1000
   13b68:	0140fa04 	movi	r5,1000
   13b6c:	0001a440 	call	1a44 <__udivsi3>
   13b70:	8085883a 	add	r2,r16,r2
   13b74:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   13b78:	e0bffa17 	ldw	r2,-24(fp)
   13b7c:	1004d43a 	srli	r2,r2,16
   13b80:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   13b84:	e0bffa17 	ldw	r2,-24(fp)
   13b88:	10bfffcc 	andi	r2,r2,65535
   13b8c:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
   13b90:	e0bffa17 	ldw	r2,-24(fp)
   13b94:	113fffcc 	andi	r4,r2,65535
   13b98:	00139280 	call	13928 <OSTimeDly>
    while (loops > 0) {
   13b9c:	00000706 	br	13bbc <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
   13ba0:	01200014 	movui	r4,32768
   13ba4:	00139280 	call	13928 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   13ba8:	01200014 	movui	r4,32768
   13bac:	00139280 	call	13928 <OSTimeDly>
        loops--;
   13bb0:	e0bff90b 	ldhu	r2,-28(fp)
   13bb4:	10bfffc4 	addi	r2,r2,-1
   13bb8:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   13bbc:	e0bff90b 	ldhu	r2,-28(fp)
   13bc0:	1004c03a 	cmpne	r2,r2,zero
   13bc4:	103ff61e 	bne	r2,zero,13ba0 <OSTimeDlyHMSM+0x12c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   13bc8:	e03fff15 	stw	zero,-4(fp)
   13bcc:	e0bfff17 	ldw	r2,-4(fp)
}
   13bd0:	e037883a 	mov	sp,fp
   13bd4:	dfc00217 	ldw	ra,8(sp)
   13bd8:	df000117 	ldw	fp,4(sp)
   13bdc:	dc000017 	ldw	r16,0(sp)
   13be0:	dec00304 	addi	sp,sp,12
   13be4:	f800283a 	ret

00013be8 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   13be8:	defff404 	addi	sp,sp,-48
   13bec:	dfc00b15 	stw	ra,44(sp)
   13bf0:	df000a15 	stw	fp,40(sp)
   13bf4:	df000a04 	addi	fp,sp,40
   13bf8:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13bfc:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   13c00:	e0bffe03 	ldbu	r2,-8(fp)
   13c04:	10800530 	cmpltui	r2,r2,20
   13c08:	1000031e 	bne	r2,zero,13c18 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   13c0c:	00800a84 	movi	r2,42
   13c10:	e0bfff15 	stw	r2,-4(fp)
   13c14:	00007206 	br	13de0 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13c18:	0005303a 	rdctl	r2,status
   13c1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13c20:	e0fffb17 	ldw	r3,-20(fp)
   13c24:	00bfff84 	movi	r2,-2
   13c28:	1884703a 	and	r2,r3,r2
   13c2c:	1001703a 	wrctl	status,r2
  
  return context;
   13c30:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   13c34:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   13c38:	e0bffe03 	ldbu	r2,-8(fp)
   13c3c:	00c000b4 	movhi	r3,2
   13c40:	18ca7c04 	addi	r3,r3,10736
   13c44:	1085883a 	add	r2,r2,r2
   13c48:	1085883a 	add	r2,r2,r2
   13c4c:	10c5883a 	add	r2,r2,r3
   13c50:	10800017 	ldw	r2,0(r2)
   13c54:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
   13c58:	e0bffd17 	ldw	r2,-12(fp)
   13c5c:	1004c03a 	cmpne	r2,r2,zero
   13c60:	1000071e 	bne	r2,zero,13c80 <OSTimeDlyResume+0x98>
   13c64:	e0bffc17 	ldw	r2,-16(fp)
   13c68:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13c6c:	e0bffa17 	ldw	r2,-24(fp)
   13c70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   13c74:	008010c4 	movi	r2,67
   13c78:	e0bfff15 	stw	r2,-4(fp)
   13c7c:	00005806 	br	13de0 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   13c80:	e0bffd17 	ldw	r2,-12(fp)
   13c84:	10800058 	cmpnei	r2,r2,1
   13c88:	1000071e 	bne	r2,zero,13ca8 <OSTimeDlyResume+0xc0>
   13c8c:	e0bffc17 	ldw	r2,-16(fp)
   13c90:	e0bff915 	stw	r2,-28(fp)
   13c94:	e0bff917 	ldw	r2,-28(fp)
   13c98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   13c9c:	008010c4 	movi	r2,67
   13ca0:	e0bfff15 	stw	r2,-4(fp)
   13ca4:	00004e06 	br	13de0 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   13ca8:	e0bffd17 	ldw	r2,-12(fp)
   13cac:	10800b8b 	ldhu	r2,46(r2)
   13cb0:	10bfffcc 	andi	r2,r2,65535
   13cb4:	1004c03a 	cmpne	r2,r2,zero
   13cb8:	1000071e 	bne	r2,zero,13cd8 <OSTimeDlyResume+0xf0>
   13cbc:	e0bffc17 	ldw	r2,-16(fp)
   13cc0:	e0bff815 	stw	r2,-32(fp)
   13cc4:	e0bff817 	ldw	r2,-32(fp)
   13cc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   13ccc:	00801404 	movi	r2,80
   13cd0:	e0bfff15 	stw	r2,-4(fp)
   13cd4:	00004206 	br	13de0 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   13cd8:	e0bffd17 	ldw	r2,-12(fp)
   13cdc:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   13ce0:	e0bffd17 	ldw	r2,-12(fp)
   13ce4:	10800c03 	ldbu	r2,48(r2)
   13ce8:	10803fcc 	andi	r2,r2,255
   13cec:	10800dcc 	andi	r2,r2,55
   13cf0:	1005003a 	cmpeq	r2,r2,zero
   13cf4:	10000b1e 	bne	r2,zero,13d24 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   13cf8:	e0bffd17 	ldw	r2,-12(fp)
   13cfc:	10c00c03 	ldbu	r3,48(r2)
   13d00:	00bff204 	movi	r2,-56
   13d04:	1884703a 	and	r2,r3,r2
   13d08:	1007883a 	mov	r3,r2
   13d0c:	e0bffd17 	ldw	r2,-12(fp)
   13d10:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   13d14:	e0fffd17 	ldw	r3,-12(fp)
   13d18:	00800044 	movi	r2,1
   13d1c:	18800c45 	stb	r2,49(r3)
   13d20:	00000206 	br	13d2c <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   13d24:	e0bffd17 	ldw	r2,-12(fp)
   13d28:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   13d2c:	e0bffd17 	ldw	r2,-12(fp)
   13d30:	10800c03 	ldbu	r2,48(r2)
   13d34:	10803fcc 	andi	r2,r2,255
   13d38:	1080020c 	andi	r2,r2,8
   13d3c:	1004c03a 	cmpne	r2,r2,zero
   13d40:	1000221e 	bne	r2,zero,13dcc <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   13d44:	e0bffd17 	ldw	r2,-12(fp)
   13d48:	10c00d83 	ldbu	r3,54(r2)
   13d4c:	008000b4 	movhi	r2,2
   13d50:	10adda04 	addi	r2,r2,-18584
   13d54:	10800003 	ldbu	r2,0(r2)
   13d58:	1884b03a 	or	r2,r3,r2
   13d5c:	1007883a 	mov	r3,r2
   13d60:	008000b4 	movhi	r2,2
   13d64:	10adda04 	addi	r2,r2,-18584
   13d68:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   13d6c:	e0bffd17 	ldw	r2,-12(fp)
   13d70:	10800d03 	ldbu	r2,52(r2)
   13d74:	11003fcc 	andi	r4,r2,255
   13d78:	e0bffd17 	ldw	r2,-12(fp)
   13d7c:	10800d03 	ldbu	r2,52(r2)
   13d80:	10c03fcc 	andi	r3,r2,255
   13d84:	008000b4 	movhi	r2,2
   13d88:	10adda44 	addi	r2,r2,-18583
   13d8c:	10c5883a 	add	r2,r2,r3
   13d90:	10c00003 	ldbu	r3,0(r2)
   13d94:	e0bffd17 	ldw	r2,-12(fp)
   13d98:	10800d43 	ldbu	r2,53(r2)
   13d9c:	1884b03a 	or	r2,r3,r2
   13da0:	1007883a 	mov	r3,r2
   13da4:	008000b4 	movhi	r2,2
   13da8:	10adda44 	addi	r2,r2,-18583
   13dac:	1105883a 	add	r2,r2,r4
   13db0:	10c00005 	stb	r3,0(r2)
   13db4:	e0bffc17 	ldw	r2,-16(fp)
   13db8:	e0bff715 	stw	r2,-36(fp)
   13dbc:	e0bff717 	ldw	r2,-36(fp)
   13dc0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   13dc4:	000d6340 	call	d634 <OS_Sched>
   13dc8:	00000406 	br	13ddc <OSTimeDlyResume+0x1f4>
   13dcc:	e0bffc17 	ldw	r2,-16(fp)
   13dd0:	e0bff615 	stw	r2,-40(fp)
   13dd4:	e0bff617 	ldw	r2,-40(fp)
   13dd8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   13ddc:	e03fff15 	stw	zero,-4(fp)
   13de0:	e0bfff17 	ldw	r2,-4(fp)
}
   13de4:	e037883a 	mov	sp,fp
   13de8:	dfc00117 	ldw	ra,4(sp)
   13dec:	df000017 	ldw	fp,0(sp)
   13df0:	dec00204 	addi	sp,sp,8
   13df4:	f800283a 	ret

00013df8 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   13df8:	defffb04 	addi	sp,sp,-20
   13dfc:	df000415 	stw	fp,16(sp)
   13e00:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13e04:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13e08:	0005303a 	rdctl	r2,status
   13e0c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13e10:	e0fffd17 	ldw	r3,-12(fp)
   13e14:	00bfff84 	movi	r2,-2
   13e18:	1884703a 	and	r2,r3,r2
   13e1c:	1001703a 	wrctl	status,r2
  
  return context;
   13e20:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   13e24:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
   13e28:	008000b4 	movhi	r2,2
   13e2c:	10adde04 	addi	r2,r2,-18568
   13e30:	10800017 	ldw	r2,0(r2)
   13e34:	e0bfff15 	stw	r2,-4(fp)
   13e38:	e0bffe17 	ldw	r2,-8(fp)
   13e3c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13e40:	e0bffc17 	ldw	r2,-16(fp)
   13e44:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   13e48:	e0bfff17 	ldw	r2,-4(fp)
}
   13e4c:	e037883a 	mov	sp,fp
   13e50:	df000017 	ldw	fp,0(sp)
   13e54:	dec00104 	addi	sp,sp,4
   13e58:	f800283a 	ret

00013e5c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   13e5c:	defffb04 	addi	sp,sp,-20
   13e60:	df000415 	stw	fp,16(sp)
   13e64:	df000404 	addi	fp,sp,16
   13e68:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13e6c:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13e70:	0005303a 	rdctl	r2,status
   13e74:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13e78:	e0fffd17 	ldw	r3,-12(fp)
   13e7c:	00bfff84 	movi	r2,-2
   13e80:	1884703a 	and	r2,r3,r2
   13e84:	1001703a 	wrctl	status,r2
  
  return context;
   13e88:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   13e8c:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
   13e90:	00c000b4 	movhi	r3,2
   13e94:	18edde04 	addi	r3,r3,-18568
   13e98:	e0bfff17 	ldw	r2,-4(fp)
   13e9c:	18800015 	stw	r2,0(r3)
   13ea0:	e0bffe17 	ldw	r2,-8(fp)
   13ea4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13ea8:	e0bffc17 	ldw	r2,-16(fp)
   13eac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   13eb0:	e037883a 	mov	sp,fp
   13eb4:	df000017 	ldw	fp,0(sp)
   13eb8:	dec00104 	addi	sp,sp,4
   13ebc:	f800283a 	ret

00013ec0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   13ec0:	defffd04 	addi	sp,sp,-12
   13ec4:	dfc00215 	stw	ra,8(sp)
   13ec8:	df000115 	stw	fp,4(sp)
   13ecc:	df000104 	addi	fp,sp,4
   13ed0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU, cpu);
   13ed4:	0016b8c0 	call	16b8c <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   13ed8:	00800044 	movi	r2,1
   13edc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   13ee0:	e037883a 	mov	sp,fp
   13ee4:	dfc00117 	ldw	ra,4(sp)
   13ee8:	df000017 	ldw	fp,0(sp)
   13eec:	dec00204 	addi	sp,sp,8
   13ef0:	f800283a 	ret

00013ef4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   13ef4:	defffe04 	addi	sp,sp,-8
   13ef8:	dfc00115 	stw	ra,4(sp)
   13efc:	df000015 	stw	fp,0(sp)
   13f00:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   13f04:	0100c034 	movhi	r4,768
   13f08:	000b883a 	mov	r5,zero
   13f0c:	01800144 	movi	r6,5
   13f10:	01c0fa04 	movi	r7,1000
   13f14:	00157400 	call	15740 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS, epcs);
   13f18:	010000b4 	movhi	r4,2
   13f1c:	21223d04 	addi	r4,r4,-30476
   13f20:	0013f900 	call	13f90 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   13f24:	010000b4 	movhi	r4,2
   13f28:	21227904 	addi	r4,r4,-30236
   13f2c:	000b883a 	mov	r5,zero
   13f30:	000d883a 	mov	r6,zero
   13f34:	0014abc0 	call	14abc <altera_avalon_jtag_uart_init>
   13f38:	010000b4 	movhi	r4,2
   13f3c:	21226f04 	addi	r4,r4,-30276
   13f40:	0013f580 	call	13f58 <alt_dev_reg>
}
   13f44:	e037883a 	mov	sp,fp
   13f48:	dfc00117 	ldw	ra,4(sp)
   13f4c:	df000017 	ldw	fp,0(sp)
   13f50:	dec00204 	addi	sp,sp,8
   13f54:	f800283a 	ret

00013f58 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   13f58:	defffd04 	addi	sp,sp,-12
   13f5c:	dfc00215 	stw	ra,8(sp)
   13f60:	df000115 	stw	fp,4(sp)
   13f64:	df000104 	addi	fp,sp,4
   13f68:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   13f6c:	e13fff17 	ldw	r4,-4(fp)
   13f70:	014000b4 	movhi	r5,2
   13f74:	29669204 	addi	r5,r5,-26040
   13f78:	001603c0 	call	1603c <alt_dev_llist_insert>
}
   13f7c:	e037883a 	mov	sp,fp
   13f80:	dfc00117 	ldw	ra,4(sp)
   13f84:	df000017 	ldw	fp,0(sp)
   13f88:	dec00204 	addi	sp,sp,8
   13f8c:	f800283a 	ret

00013f90 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
   13f90:	defffc04 	addi	sp,sp,-16
   13f94:	dfc00315 	stw	ra,12(sp)
   13f98:	df000215 	stw	fp,8(sp)
   13f9c:	df000204 	addi	fp,sp,8
   13fa0:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
   13fa4:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
   13fa8:	e13fff17 	ldw	r4,-4(fp)
   13fac:	001401c0 	call	1401c <alt_epcs_flash_query>
   13fb0:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
   13fb4:	e0bffe17 	ldw	r2,-8(fp)
   13fb8:	1004c03a 	cmpne	r2,r2,zero
   13fbc:	1000031e 	bne	r2,zero,13fcc <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
   13fc0:	e13fff17 	ldw	r4,-4(fp)
   13fc4:	0013fe40 	call	13fe4 <alt_flash_device_register>
   13fc8:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
   13fcc:	e0bffe17 	ldw	r2,-8(fp)
}
   13fd0:	e037883a 	mov	sp,fp
   13fd4:	dfc00117 	ldw	ra,4(sp)
   13fd8:	df000017 	ldw	fp,0(sp)
   13fdc:	dec00204 	addi	sp,sp,8
   13fe0:	f800283a 	ret

00013fe4 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
   13fe4:	defffd04 	addi	sp,sp,-12
   13fe8:	dfc00215 	stw	ra,8(sp)
   13fec:	df000115 	stw	fp,4(sp)
   13ff0:	df000104 	addi	fp,sp,4
   13ff4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
   13ff8:	e13fff17 	ldw	r4,-4(fp)
   13ffc:	014000b4 	movhi	r5,2
   14000:	2966b604 	addi	r5,r5,-25896
   14004:	001603c0 	call	1603c <alt_dev_llist_insert>
}
   14008:	e037883a 	mov	sp,fp
   1400c:	dfc00117 	ldw	ra,4(sp)
   14010:	df000017 	ldw	fp,0(sp)
   14014:	dec00204 	addi	sp,sp,8
   14018:	f800283a 	ret

0001401c <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
   1401c:	defffc04 	addi	sp,sp,-16
   14020:	dfc00315 	stw	ra,12(sp)
   14024:	df000215 	stw	fp,8(sp)
   14028:	df000204 	addi	fp,sp,8
   1402c:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
   14030:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
   14034:	e0bfff17 	ldw	r2,-4(fp)
   14038:	10003115 	stw	zero,196(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
   1403c:	e0bfff17 	ldw	r2,-4(fp)
   14040:	11002d17 	ldw	r4,180(r2)
   14044:	0015d080 	call	15d08 <epcs_read_electronic_signature>
   14048:	10c03fcc 	andi	r3,r2,255
   1404c:	e0bfff17 	ldw	r2,-4(fp)
   14050:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
   14054:	e0bfff17 	ldw	r2,-4(fp)
   14058:	10802f17 	ldw	r2,188(r2)
   1405c:	10800598 	cmpnei	r2,r2,22
   14060:	10000a1e 	bne	r2,zero,1408c <alt_epcs_flash_query+0x70>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
   14064:	e0ffff17 	ldw	r3,-4(fp)
   14068:	00802034 	movhi	r2,128
   1406c:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 128;
   14070:	e0ffff17 	ldw	r3,-4(fp)
   14074:	00802004 	movi	r2,128
   14078:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
   1407c:	e0ffff17 	ldw	r3,-4(fp)
   14080:	00800074 	movhi	r2,1
   14084:	18801015 	stw	r2,64(r3)
   14088:	00007306 	br	14258 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
   1408c:	e0bfff17 	ldw	r2,-4(fp)
   14090:	10802f17 	ldw	r2,188(r2)
   14094:	10800518 	cmpnei	r2,r2,20
   14098:	10000a1e 	bne	r2,zero,140c4 <alt_epcs_flash_query+0xa8>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
   1409c:	e0ffff17 	ldw	r3,-4(fp)
   140a0:	00800834 	movhi	r2,32
   140a4:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 32;
   140a8:	e0ffff17 	ldw	r3,-4(fp)
   140ac:	00800804 	movi	r2,32
   140b0:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
   140b4:	e0ffff17 	ldw	r3,-4(fp)
   140b8:	00800074 	movhi	r2,1
   140bc:	18801015 	stw	r2,64(r3)
   140c0:	00006506 	br	14258 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
   140c4:	e0bfff17 	ldw	r2,-4(fp)
   140c8:	10802f17 	ldw	r2,188(r2)
   140cc:	108004d8 	cmpnei	r2,r2,19
   140d0:	10000a1e 	bne	r2,zero,140fc <alt_epcs_flash_query+0xe0>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
   140d4:	e0ffff17 	ldw	r3,-4(fp)
   140d8:	00800434 	movhi	r2,16
   140dc:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 16;
   140e0:	e0ffff17 	ldw	r3,-4(fp)
   140e4:	00800404 	movi	r2,16
   140e8:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
   140ec:	e0ffff17 	ldw	r3,-4(fp)
   140f0:	00800074 	movhi	r2,1
   140f4:	18801015 	stw	r2,64(r3)
   140f8:	00005706 	br	14258 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
   140fc:	e0bfff17 	ldw	r2,-4(fp)
   14100:	10802f17 	ldw	r2,188(r2)
   14104:	10800498 	cmpnei	r2,r2,18
   14108:	10000a1e 	bne	r2,zero,14134 <alt_epcs_flash_query+0x118>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
   1410c:	e0ffff17 	ldw	r3,-4(fp)
   14110:	00800234 	movhi	r2,8
   14114:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 8;
   14118:	e0ffff17 	ldw	r3,-4(fp)
   1411c:	00800204 	movi	r2,8
   14120:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
   14124:	e0ffff17 	ldw	r3,-4(fp)
   14128:	00800074 	movhi	r2,1
   1412c:	18801015 	stw	r2,64(r3)
   14130:	00004906 	br	14258 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
   14134:	e0bfff17 	ldw	r2,-4(fp)
   14138:	10802f17 	ldw	r2,188(r2)
   1413c:	10800418 	cmpnei	r2,r2,16
   14140:	10000a1e 	bne	r2,zero,1416c <alt_epcs_flash_query+0x150>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
   14144:	e0ffff17 	ldw	r3,-4(fp)
   14148:	008000b4 	movhi	r2,2
   1414c:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 4;
   14150:	e0ffff17 	ldw	r3,-4(fp)
   14154:	00800104 	movi	r2,4
   14158:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 32768;
   1415c:	e0ffff17 	ldw	r3,-4(fp)
   14160:	00a00014 	movui	r2,32768
   14164:	18801015 	stw	r2,64(r3)
   14168:	00003b06 	br	14258 <alt_epcs_flash_query+0x23c>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
   1416c:	e0bfff17 	ldw	r2,-4(fp)
   14170:	11002d17 	ldw	r4,180(r2)
   14174:	0015d740 	call	15d74 <epcs_read_device_id>
   14178:	1007883a 	mov	r3,r2
   1417c:	e0bfff17 	ldw	r2,-4(fp)
   14180:	10c02f15 	stw	r3,188(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
   14184:	e0bfff17 	ldw	r2,-4(fp)
   14188:	10c02f17 	ldw	r3,188(r2)
   1418c:	00804034 	movhi	r2,256
   14190:	10bfffc4 	addi	r2,r2,-1
   14194:	1886703a 	and	r3,r3,r2
   14198:	00800874 	movhi	r2,33
   1419c:	10ae8604 	addi	r2,r2,-17896
   141a0:	18800a1e 	bne	r3,r2,141cc <alt_epcs_flash_query+0x1b0>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
   141a4:	e0ffff17 	ldw	r3,-4(fp)
   141a8:	00804034 	movhi	r2,256
   141ac:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
   141b0:	e0ffff17 	ldw	r3,-4(fp)
   141b4:	00804004 	movi	r2,256
   141b8:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   141bc:	e0ffff17 	ldw	r3,-4(fp)
   141c0:	00800074 	movhi	r2,1
   141c4:	18801015 	stw	r2,64(r3)
   141c8:	00002306 	br	14258 <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
   141cc:	e0bfff17 	ldw	r2,-4(fp)
   141d0:	10802f17 	ldw	r2,188(r2)
   141d4:	10803fcc 	andi	r2,r2,255
   141d8:	10800618 	cmpnei	r2,r2,24
   141dc:	10000a1e 	bne	r2,zero,14208 <alt_epcs_flash_query+0x1ec>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
   141e0:	e0ffff17 	ldw	r3,-4(fp)
   141e4:	00804034 	movhi	r2,256
   141e8:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 64;
   141ec:	e0ffff17 	ldw	r3,-4(fp)
   141f0:	00801004 	movi	r2,64
   141f4:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 262144;
   141f8:	e0ffff17 	ldw	r3,-4(fp)
   141fc:	00800134 	movhi	r2,4
   14200:	18801015 	stw	r2,64(r3)
   14204:	00001406 	br	14258 <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
   14208:	e0bfff17 	ldw	r2,-4(fp)
   1420c:	10802f17 	ldw	r2,188(r2)
   14210:	10803fcc 	andi	r2,r2,255
   14214:	10800658 	cmpnei	r2,r2,25
   14218:	10000d1e 	bne	r2,zero,14250 <alt_epcs_flash_query+0x234>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
   1421c:	e0ffff17 	ldw	r3,-4(fp)
   14220:	00808034 	movhi	r2,512
   14224:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
   14228:	e0ffff17 	ldw	r3,-4(fp)
   1422c:	00808004 	movi	r2,512
   14230:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   14234:	e0ffff17 	ldw	r3,-4(fp)
   14238:	00800074 	movhi	r2,1
   1423c:	18801015 	stw	r2,64(r3)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
   14240:	e0ffff17 	ldw	r3,-4(fp)
   14244:	00800044 	movi	r2,1
   14248:	18803115 	stw	r2,196(r3)
   1424c:	00000206 	br	14258 <alt_epcs_flash_query+0x23c>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
   14250:	00bffb44 	movi	r2,-19
   14254:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
   14258:	e0bfff17 	ldw	r2,-4(fp)
   1425c:	10800e17 	ldw	r2,56(r2)
   14260:	1007883a 	mov	r3,r2
   14264:	e0bfff17 	ldw	r2,-4(fp)
   14268:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
   1426c:	e0ffff17 	ldw	r3,-4(fp)
   14270:	00800044 	movi	r2,1
   14274:	18800c15 	stw	r2,48(r3)
  flash->dev.region_info[0].offset = 0;
   14278:	e0bfff17 	ldw	r2,-4(fp)
   1427c:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
   14280:	e0ffff17 	ldw	r3,-4(fp)
   14284:	00804004 	movi	r2,256
   14288:	18803015 	stw	r2,192(r3)

  /* Consider clearing all BP bits here. */
  return ret_code;
   1428c:	e0bffe17 	ldw	r2,-8(fp)
}
   14290:	e037883a 	mov	sp,fp
   14294:	dfc00117 	ldw	ra,4(sp)
   14298:	df000017 	ldw	fp,0(sp)
   1429c:	dec00204 	addi	sp,sp,8
   142a0:	f800283a 	ret

000142a4 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
   142a4:	deffeb04 	addi	sp,sp,-84
   142a8:	dfc01415 	stw	ra,80(sp)
   142ac:	df001315 	stw	fp,76(sp)
   142b0:	df001304 	addi	fp,sp,76
   142b4:	e13ff915 	stw	r4,-28(fp)
   142b8:	e17ffa15 	stw	r5,-24(fp)
   142bc:	e1bffb15 	stw	r6,-20(fp)
   142c0:	e1fffc15 	stw	r7,-16(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
   142c4:	00800804 	movi	r2,32
   142c8:	e0bff015 	stw	r2,-64(fp)
  int current_offset = 0;
   142cc:	e03fef15 	stw	zero,-68(fp)

  while (n > 0)
   142d0:	00002c06 	br	14384 <alt_epcs_flash_memcmp+0xe0>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
   142d4:	e0bff017 	ldw	r2,-64(fp)
   142d8:	e0bfff15 	stw	r2,-4(fp)
   142dc:	e0fffc17 	ldw	r3,-16(fp)
   142e0:	e0fffe15 	stw	r3,-8(fp)
   142e4:	e0bfff17 	ldw	r2,-4(fp)
   142e8:	e0fffe17 	ldw	r3,-8(fp)
   142ec:	10c0022e 	bgeu	r2,r3,142f8 <alt_epcs_flash_memcmp+0x54>
   142f0:	e0bfff17 	ldw	r2,-4(fp)
   142f4:	e0bffe15 	stw	r2,-8(fp)
   142f8:	e0fffe17 	ldw	r3,-8(fp)
   142fc:	e0ffee15 	stw	r3,-72(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
   14300:	e0fffb17 	ldw	r3,-20(fp)
   14304:	e0bfef17 	ldw	r2,-68(fp)
   14308:	188b883a 	add	r5,r3,r2
   1430c:	e1bff104 	addi	r6,fp,-60
   14310:	e13ff917 	ldw	r4,-28(fp)
   14314:	e1ffee17 	ldw	r7,-72(fp)
   14318:	00148dc0 	call	148dc <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
   1431c:	1004403a 	cmpge	r2,r2,zero
   14320:	1000031e 	bne	r2,zero,14330 <alt_epcs_flash_memcmp+0x8c>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
   14324:	00bfffc4 	movi	r2,-1
   14328:	e0bffd15 	stw	r2,-12(fp)
   1432c:	00001906 	br	14394 <alt_epcs_flash_memcmp+0xf0>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
   14330:	e0fffa17 	ldw	r3,-24(fp)
   14334:	e0bfef17 	ldw	r2,-68(fp)
   14338:	1889883a 	add	r4,r3,r2
   1433c:	e1bfee17 	ldw	r6,-72(fp)
   14340:	e17ff104 	addi	r5,fp,-60
   14344:	00176500 	call	17650 <memcmp>
   14348:	e0bfed15 	stw	r2,-76(fp)
    if (this_chunk_cmp)
   1434c:	e0bfed17 	ldw	r2,-76(fp)
   14350:	1005003a 	cmpeq	r2,r2,zero
   14354:	1000031e 	bne	r2,zero,14364 <alt_epcs_flash_memcmp+0xc0>
    {
      return this_chunk_cmp;
   14358:	e0ffed17 	ldw	r3,-76(fp)
   1435c:	e0fffd15 	stw	r3,-12(fp)
   14360:	00000c06 	br	14394 <alt_epcs_flash_memcmp+0xf0>
    }

    n -= this_chunk_size;
   14364:	e0ffee17 	ldw	r3,-72(fp)
   14368:	e0bffc17 	ldw	r2,-16(fp)
   1436c:	10c5c83a 	sub	r2,r2,r3
   14370:	e0bffc15 	stw	r2,-16(fp)
    current_offset += this_chunk_size;
   14374:	e0ffef17 	ldw	r3,-68(fp)
   14378:	e0bfee17 	ldw	r2,-72(fp)
   1437c:	1885883a 	add	r2,r3,r2
   14380:	e0bfef15 	stw	r2,-68(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
   14384:	e0bffc17 	ldw	r2,-16(fp)
   14388:	1004c03a 	cmpne	r2,r2,zero
   1438c:	103fd11e 	bne	r2,zero,142d4 <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
   14390:	e03ffd15 	stw	zero,-12(fp)
   14394:	e0bffd17 	ldw	r2,-12(fp)
}
   14398:	e037883a 	mov	sp,fp
   1439c:	dfc00117 	ldw	ra,4(sp)
   143a0:	df000017 	ldw	fp,0(sp)
   143a4:	dec00204 	addi	sp,sp,8
   143a8:	f800283a 	ret

000143ac <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
   143ac:	defff204 	addi	sp,sp,-56
   143b0:	dfc00d15 	stw	ra,52(sp)
   143b4:	df000c15 	stw	fp,48(sp)
   143b8:	df000c04 	addi	fp,sp,48
   143bc:	e13ffa15 	stw	r4,-24(fp)
   143c0:	e17ffb15 	stw	r5,-20(fp)
   143c4:	e1bffc15 	stw	r6,-16(fp)
   143c8:	e1fffd15 	stw	r7,-12(fp)
  int         ret_code = 0;
   143cc:	e03ff915 	stw	zero,-28(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
   143d0:	e03ff815 	stw	zero,-32(fp)
   143d4:	00008b06 	br	14604 <alt_epcs_flash_write+0x258>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
   143d8:	e0bff817 	ldw	r2,-32(fp)
   143dc:	e0fffa17 	ldw	r3,-24(fp)
   143e0:	1004913a 	slli	r2,r2,4
   143e4:	10c5883a 	add	r2,r2,r3
   143e8:	10800d04 	addi	r2,r2,52
   143ec:	10c00017 	ldw	r3,0(r2)
   143f0:	e0bffb17 	ldw	r2,-20(fp)
   143f4:	10c08016 	blt	r2,r3,145f8 <alt_epcs_flash_write+0x24c>
   143f8:	e0bff817 	ldw	r2,-32(fp)
   143fc:	e0fffa17 	ldw	r3,-24(fp)
   14400:	1004913a 	slli	r2,r2,4
   14404:	10c5883a 	add	r2,r2,r3
   14408:	10800d04 	addi	r2,r2,52
   1440c:	11000017 	ldw	r4,0(r2)
   14410:	e0bff817 	ldw	r2,-32(fp)
   14414:	e0fffa17 	ldw	r3,-24(fp)
   14418:	1004913a 	slli	r2,r2,4
   1441c:	10c5883a 	add	r2,r2,r3
   14420:	10800e04 	addi	r2,r2,56
   14424:	10800017 	ldw	r2,0(r2)
   14428:	2087883a 	add	r3,r4,r2
   1442c:	e0bffb17 	ldw	r2,-20(fp)
   14430:	10c0710e 	bge	r2,r3,145f8 <alt_epcs_flash_write+0x24c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
   14434:	e0bff817 	ldw	r2,-32(fp)
   14438:	e0fffa17 	ldw	r3,-24(fp)
   1443c:	1004913a 	slli	r2,r2,4
   14440:	10c5883a 	add	r2,r2,r3
   14444:	10800d04 	addi	r2,r2,52
   14448:	10800017 	ldw	r2,0(r2)
   1444c:	e0bff515 	stw	r2,-44(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
   14450:	e03ff715 	stw	zero,-36(fp)
   14454:	00006006 	br	145d8 <alt_epcs_flash_write+0x22c>
      {
        if ((offset >= current_offset ) &&
   14458:	e0fffb17 	ldw	r3,-20(fp)
   1445c:	e0bff517 	ldw	r2,-44(fp)
   14460:	18805116 	blt	r3,r2,145a8 <alt_epcs_flash_write+0x1fc>
   14464:	e0bff817 	ldw	r2,-32(fp)
   14468:	e0fffa17 	ldw	r3,-24(fp)
   1446c:	1004913a 	slli	r2,r2,4
   14470:	10c5883a 	add	r2,r2,r3
   14474:	10801004 	addi	r2,r2,64
   14478:	10c00017 	ldw	r3,0(r2)
   1447c:	e0bff517 	ldw	r2,-44(fp)
   14480:	1887883a 	add	r3,r3,r2
   14484:	e0bffb17 	ldw	r2,-20(fp)
   14488:	10c0470e 	bge	r2,r3,145a8 <alt_epcs_flash_write+0x1fc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
   1448c:	e0bff817 	ldw	r2,-32(fp)
   14490:	e0fffa17 	ldw	r3,-24(fp)
   14494:	1004913a 	slli	r2,r2,4
   14498:	10c5883a 	add	r2,r2,r3
   1449c:	10801004 	addi	r2,r2,64
   144a0:	10c00017 	ldw	r3,0(r2)
   144a4:	e0bff517 	ldw	r2,-44(fp)
   144a8:	1887883a 	add	r3,r3,r2
   144ac:	e0bffb17 	ldw	r2,-20(fp)
   144b0:	1885c83a 	sub	r2,r3,r2
   144b4:	e0bff615 	stw	r2,-40(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
   144b8:	e0bff617 	ldw	r2,-40(fp)
   144bc:	e0bfff15 	stw	r2,-4(fp)
   144c0:	e0fffd17 	ldw	r3,-12(fp)
   144c4:	e0fffe15 	stw	r3,-8(fp)
   144c8:	e0bfff17 	ldw	r2,-4(fp)
   144cc:	e0fffe17 	ldw	r3,-8(fp)
   144d0:	10c0020e 	bge	r2,r3,144dc <alt_epcs_flash_write+0x130>
   144d4:	e0bfff17 	ldw	r2,-4(fp)
   144d8:	e0bffe15 	stw	r2,-8(fp)
   144dc:	e0fffe17 	ldw	r3,-8(fp)
   144e0:	e0fff615 	stw	r3,-40(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
   144e4:	e1fff617 	ldw	r7,-40(fp)
   144e8:	e13ffa17 	ldw	r4,-24(fp)
   144ec:	e17ffc17 	ldw	r5,-16(fp)
   144f0:	e1bffb17 	ldw	r6,-20(fp)
   144f4:	00142a40 	call	142a4 <alt_epcs_flash_memcmp>
   144f8:	1005003a 	cmpeq	r2,r2,zero
   144fc:	1000131e 	bne	r2,zero,1454c <alt_epcs_flash_write+0x1a0>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
   14500:	e0bffa17 	ldw	r2,-24(fp)
   14504:	10800817 	ldw	r2,32(r2)
   14508:	e13ffa17 	ldw	r4,-24(fp)
   1450c:	e17ff517 	ldw	r5,-44(fp)
   14510:	103ee83a 	callr	r2
   14514:	e0bff915 	stw	r2,-28(fp)

            if (!ret_code)
   14518:	e0bff917 	ldw	r2,-28(fp)
   1451c:	1004c03a 	cmpne	r2,r2,zero
   14520:	10000a1e 	bne	r2,zero,1454c <alt_epcs_flash_write+0x1a0>
            {
              ret_code = (*flash_info->write_block)(
   14524:	e0bffa17 	ldw	r2,-24(fp)
   14528:	10c00917 	ldw	r3,36(r2)
   1452c:	e0bff617 	ldw	r2,-40(fp)
   14530:	d8800015 	stw	r2,0(sp)
   14534:	e13ffa17 	ldw	r4,-24(fp)
   14538:	e17ff517 	ldw	r5,-44(fp)
   1453c:	e1bffb17 	ldw	r6,-20(fp)
   14540:	e1fffc17 	ldw	r7,-16(fp)
   14544:	183ee83a 	callr	r3
   14548:	e0bff915 	stw	r2,-28(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
   1454c:	e0fffd17 	ldw	r3,-12(fp)
   14550:	e0bff617 	ldw	r2,-40(fp)
   14554:	18802f26 	beq	r3,r2,14614 <alt_epcs_flash_write+0x268>
   14558:	e0bff917 	ldw	r2,-28(fp)
   1455c:	1004c03a 	cmpne	r2,r2,zero
   14560:	10002c1e 	bne	r2,zero,14614 <alt_epcs_flash_write+0x268>
          {
            goto finished;
          }

          length -= data_to_write;
   14564:	e0fffd17 	ldw	r3,-12(fp)
   14568:	e0bff617 	ldw	r2,-40(fp)
   1456c:	1885c83a 	sub	r2,r3,r2
   14570:	e0bffd15 	stw	r2,-12(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
   14574:	e0bff817 	ldw	r2,-32(fp)
   14578:	e0fffa17 	ldw	r3,-24(fp)
   1457c:	1004913a 	slli	r2,r2,4
   14580:	10c5883a 	add	r2,r2,r3
   14584:	10801004 	addi	r2,r2,64
   14588:	10c00017 	ldw	r3,0(r2)
   1458c:	e0bff517 	ldw	r2,-44(fp)
   14590:	1885883a 	add	r2,r3,r2
   14594:	e0bffb15 	stw	r2,-20(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
   14598:	e0fffc17 	ldw	r3,-16(fp)
   1459c:	e0bff617 	ldw	r2,-40(fp)
   145a0:	1885883a 	add	r2,r3,r2
   145a4:	e0bffc15 	stw	r2,-16(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
   145a8:	e0bff817 	ldw	r2,-32(fp)
   145ac:	e0fffa17 	ldw	r3,-24(fp)
   145b0:	1004913a 	slli	r2,r2,4
   145b4:	10c5883a 	add	r2,r2,r3
   145b8:	10801004 	addi	r2,r2,64
   145bc:	10c00017 	ldw	r3,0(r2)
   145c0:	e0bff517 	ldw	r2,-44(fp)
   145c4:	10c5883a 	add	r2,r2,r3
   145c8:	e0bff515 	stw	r2,-44(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
   145cc:	e0bff717 	ldw	r2,-36(fp)
   145d0:	10800044 	addi	r2,r2,1
   145d4:	e0bff715 	stw	r2,-36(fp)
   145d8:	e0bff817 	ldw	r2,-32(fp)
   145dc:	e0fffa17 	ldw	r3,-24(fp)
   145e0:	1004913a 	slli	r2,r2,4
   145e4:	10c5883a 	add	r2,r2,r3
   145e8:	10800f04 	addi	r2,r2,60
   145ec:	10c00017 	ldw	r3,0(r2)
   145f0:	e0bff717 	ldw	r2,-36(fp)
   145f4:	10ff9816 	blt	r2,r3,14458 <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
   145f8:	e0bff817 	ldw	r2,-32(fp)
   145fc:	10800044 	addi	r2,r2,1
   14600:	e0bff815 	stw	r2,-32(fp)
   14604:	e0bffa17 	ldw	r2,-24(fp)
   14608:	10c00c17 	ldw	r3,48(r2)
   1460c:	e0bff817 	ldw	r2,-32(fp)
   14610:	10ff7116 	blt	r2,r3,143d8 <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
   14614:	e0bff917 	ldw	r2,-28(fp)
}
   14618:	e037883a 	mov	sp,fp
   1461c:	dfc00117 	ldw	ra,4(sp)
   14620:	df000017 	ldw	fp,0(sp)
   14624:	dec00204 	addi	sp,sp,8
   14628:	f800283a 	ret

0001462c <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
   1462c:	defffa04 	addi	sp,sp,-24
   14630:	df000515 	stw	fp,20(sp)
   14634:	df000504 	addi	fp,sp,20
   14638:	e13ffd15 	stw	r4,-12(fp)
   1463c:	e17ffe15 	stw	r5,-8(fp)
   14640:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
   14644:	e03ffc15 	stw	zero,-16(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
   14648:	e0bffd17 	ldw	r2,-12(fp)
   1464c:	e0bffb15 	stw	r2,-20(fp)

  *number_of_regions = flash->number_of_regions;
   14650:	e0bffb17 	ldw	r2,-20(fp)
   14654:	10c00c17 	ldw	r3,48(r2)
   14658:	e0bfff17 	ldw	r2,-4(fp)
   1465c:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
   14660:	e0bffb17 	ldw	r2,-20(fp)
   14664:	10800c17 	ldw	r2,48(r2)
   14668:	1004c03a 	cmpne	r2,r2,zero
   1466c:	1000031e 	bne	r2,zero,1467c <alt_epcs_flash_get_info+0x50>
  {
    ret_code = -EIO;
   14670:	00bffec4 	movi	r2,-5
   14674:	e0bffc15 	stw	r2,-16(fp)
   14678:	00000b06 	br	146a8 <alt_epcs_flash_get_info+0x7c>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
   1467c:	e0bffb17 	ldw	r2,-20(fp)
   14680:	10800c17 	ldw	r2,48(r2)
   14684:	10800250 	cmplti	r2,r2,9
   14688:	1000031e 	bne	r2,zero,14698 <alt_epcs_flash_get_info+0x6c>
  {
    ret_code = -ENOMEM;
   1468c:	00bffd04 	movi	r2,-12
   14690:	e0bffc15 	stw	r2,-16(fp)
   14694:	00000406 	br	146a8 <alt_epcs_flash_get_info+0x7c>
  }
  else
  {
    *info = &flash->region_info[0];
   14698:	e0bffb17 	ldw	r2,-20(fp)
   1469c:	10c00d04 	addi	r3,r2,52
   146a0:	e0bffe17 	ldw	r2,-8(fp)
   146a4:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
   146a8:	e0bffc17 	ldw	r2,-16(fp)
}
   146ac:	e037883a 	mov	sp,fp
   146b0:	df000017 	ldw	fp,0(sp)
   146b4:	dec00104 	addi	sp,sp,4
   146b8:	f800283a 	ret

000146bc <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
   146bc:	defffa04 	addi	sp,sp,-24
   146c0:	dfc00515 	stw	ra,20(sp)
   146c4:	df000415 	stw	fp,16(sp)
   146c8:	df000404 	addi	fp,sp,16
   146cc:	e13ffe15 	stw	r4,-8(fp)
   146d0:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
   146d4:	e03ffd15 	stw	zero,-12(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
   146d8:	e0bffe17 	ldw	r2,-8(fp)
   146dc:	e0bffc15 	stw	r2,-16(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
   146e0:	e13ffe17 	ldw	r4,-8(fp)
   146e4:	e17fff17 	ldw	r5,-4(fp)
   146e8:	001472c0 	call	1472c <alt_epcs_test_address>
   146ec:	e0bffd15 	stw	r2,-12(fp)

  if (ret_code >= 0)
   146f0:	e0bffd17 	ldw	r2,-12(fp)
   146f4:	1004803a 	cmplt	r2,r2,zero
   146f8:	1000061e 	bne	r2,zero,14714 <alt_epcs_flash_erase_block+0x58>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
   146fc:	e0bffc17 	ldw	r2,-16(fp)
   14700:	11002d17 	ldw	r4,180(r2)
   14704:	e17fff17 	ldw	r5,-4(fp)
   14708:	e0bffc17 	ldw	r2,-16(fp)
   1470c:	11803117 	ldw	r6,196(r2)
   14710:	00158300 	call	15830 <epcs_sector_erase>
  }
  return ret_code;
   14714:	e0bffd17 	ldw	r2,-12(fp)
}
   14718:	e037883a 	mov	sp,fp
   1471c:	dfc00117 	ldw	ra,4(sp)
   14720:	df000017 	ldw	fp,0(sp)
   14724:	dec00204 	addi	sp,sp,8
   14728:	f800283a 	ret

0001472c <alt_epcs_test_address>:
}


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
   1472c:	defff904 	addi	sp,sp,-28
   14730:	df000615 	stw	fp,24(sp)
   14734:	df000604 	addi	fp,sp,24
   14738:	e13ffe15 	stw	r4,-8(fp)
   1473c:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
   14740:	e03ffd15 	stw	zero,-12(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
   14744:	e0bffe17 	ldw	r2,-8(fp)
   14748:	e0bffc15 	stw	r2,-16(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
   1474c:	e0bffc17 	ldw	r2,-16(fp)
   14750:	10800c17 	ldw	r2,48(r2)
   14754:	10bfffc4 	addi	r2,r2,-1
   14758:	e0bffb15 	stw	r2,-20(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
   1475c:	e0bffb17 	ldw	r2,-20(fp)
   14760:	e0fffc17 	ldw	r3,-16(fp)
   14764:	1004913a 	slli	r2,r2,4
   14768:	10c5883a 	add	r2,r2,r3
   1476c:	10800d04 	addi	r2,r2,52
   14770:	11000017 	ldw	r4,0(r2)
   14774:	e0bffb17 	ldw	r2,-20(fp)
   14778:	e0fffc17 	ldw	r3,-16(fp)
   1477c:	1004913a 	slli	r2,r2,4
   14780:	10c5883a 	add	r2,r2,r3
   14784:	10800e04 	addi	r2,r2,56
   14788:	10800017 	ldw	r2,0(r2)
   1478c:	2085883a 	add	r2,r4,r2
   14790:	10bfffc4 	addi	r2,r2,-1
   14794:	e0bffa15 	stw	r2,-24(fp)

  if (offset > last_device_address)
   14798:	e0ffff17 	ldw	r3,-4(fp)
   1479c:	e0bffa17 	ldw	r2,-24(fp)
   147a0:	10c0022e 	bgeu	r2,r3,147ac <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
   147a4:	00bffec4 	movi	r2,-5
   147a8:	e0bffd15 	stw	r2,-12(fp)
  }
  return ret_code;
   147ac:	e0bffd17 	ldw	r2,-12(fp)
}
   147b0:	e037883a 	mov	sp,fp
   147b4:	df000017 	ldw	fp,0(sp)
   147b8:	dec00104 	addi	sp,sp,4
   147bc:	f800283a 	ret

000147c0 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
   147c0:	defff204 	addi	sp,sp,-56
   147c4:	dfc00d15 	stw	ra,52(sp)
   147c8:	df000c15 	stw	fp,48(sp)
   147cc:	df000c04 	addi	fp,sp,48
   147d0:	e13ffa15 	stw	r4,-24(fp)
   147d4:	e17ffb15 	stw	r5,-20(fp)
   147d8:	e1bffc15 	stw	r6,-16(fp)
   147dc:	e1fffd15 	stw	r7,-12(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
   147e0:	e0bffa17 	ldw	r2,-24(fp)
   147e4:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
   147e8:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
   147ec:	e13ffa17 	ldw	r4,-24(fp)
   147f0:	e17ffc17 	ldw	r5,-16(fp)
   147f4:	001472c0 	call	1472c <alt_epcs_test_address>
   147f8:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
   147fc:	e0bff917 	ldw	r2,-28(fp)
   14800:	1004803a 	cmplt	r2,r2,zero
   14804:	10002f1e 	bne	r2,zero,148c4 <alt_epcs_flash_write_block+0x104>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
   14808:	00002b06 	br	148b8 <alt_epcs_flash_write_block+0xf8>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
   1480c:	e0bff817 	ldw	r2,-32(fp)
   14810:	10c03017 	ldw	r3,192(r2)
   14814:	e0bffc17 	ldw	r2,-16(fp)
   14818:	1887883a 	add	r3,r3,r2
   1481c:	e0bff817 	ldw	r2,-32(fp)
   14820:	10803017 	ldw	r2,192(r2)
   14824:	0085c83a 	sub	r2,zero,r2
   14828:	1884703a 	and	r2,r3,r2
   1482c:	e0bff515 	stw	r2,-44(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
   14830:	e0fff517 	ldw	r3,-44(fp)
   14834:	e0bffc17 	ldw	r2,-16(fp)
   14838:	1885c83a 	sub	r2,r3,r2
   1483c:	e0c00217 	ldw	r3,8(fp)
   14840:	e0ffff15 	stw	r3,-4(fp)
   14844:	e0bffe15 	stw	r2,-8(fp)
   14848:	e0bfff17 	ldw	r2,-4(fp)
   1484c:	e0fffe17 	ldw	r3,-8(fp)
   14850:	10c0020e 	bge	r2,r3,1485c <alt_epcs_flash_write_block+0x9c>
   14854:	e0bfff17 	ldw	r2,-4(fp)
   14858:	e0bffe15 	stw	r2,-8(fp)
   1485c:	e0fffe17 	ldw	r3,-8(fp)
   14860:	e0fff615 	stw	r3,-40(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
   14864:	e0bff817 	ldw	r2,-32(fp)
   14868:	11002d17 	ldw	r4,180(r2)
   1486c:	e0fffd17 	ldw	r3,-12(fp)
   14870:	e0bff717 	ldw	r2,-36(fp)
   14874:	188d883a 	add	r6,r3,r2
   14878:	e0bff817 	ldw	r2,-32(fp)
   1487c:	10803117 	ldw	r2,196(r2)
   14880:	d8800015 	stw	r2,0(sp)
   14884:	e17ffc17 	ldw	r5,-16(fp)
   14888:	e1fff617 	ldw	r7,-40(fp)
   1488c:	0015b980 	call	15b98 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
   14890:	e0c00217 	ldw	r3,8(fp)
   14894:	e0bff617 	ldw	r2,-40(fp)
   14898:	1885c83a 	sub	r2,r3,r2
   1489c:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
   148a0:	e0fff717 	ldw	r3,-36(fp)
   148a4:	e0bff617 	ldw	r2,-40(fp)
   148a8:	1885883a 	add	r2,r3,r2
   148ac:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
   148b0:	e0bff517 	ldw	r2,-44(fp)
   148b4:	e0bffc15 	stw	r2,-16(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
   148b8:	e0800217 	ldw	r2,8(fp)
   148bc:	1004c03a 	cmpne	r2,r2,zero
   148c0:	103fd21e 	bne	r2,zero,1480c <alt_epcs_flash_write_block+0x4c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
   148c4:	e0bff917 	ldw	r2,-28(fp)
}
   148c8:	e037883a 	mov	sp,fp
   148cc:	dfc00117 	ldw	ra,4(sp)
   148d0:	df000017 	ldw	fp,0(sp)
   148d4:	dec00204 	addi	sp,sp,8
   148d8:	f800283a 	ret

000148dc <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
   148dc:	defff704 	addi	sp,sp,-36
   148e0:	dfc00815 	stw	ra,32(sp)
   148e4:	df000715 	stw	fp,28(sp)
   148e8:	df000704 	addi	fp,sp,28
   148ec:	e13ffc15 	stw	r4,-16(fp)
   148f0:	e17ffd15 	stw	r5,-12(fp)
   148f4:	e1bffe15 	stw	r6,-8(fp)
   148f8:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
   148fc:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
   14900:	e0bffc17 	ldw	r2,-16(fp)
   14904:	e0bffa15 	stw	r2,-24(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
   14908:	e13ffc17 	ldw	r4,-16(fp)
   1490c:	e17ffd17 	ldw	r5,-12(fp)
   14910:	001472c0 	call	1472c <alt_epcs_test_address>
   14914:	e0bffb15 	stw	r2,-20(fp)

  if (ret_code >= 0)
   14918:	e0bffb17 	ldw	r2,-20(fp)
   1491c:	1004803a 	cmplt	r2,r2,zero
   14920:	10000e1e 	bne	r2,zero,1495c <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
   14924:	e0bffa17 	ldw	r2,-24(fp)
   14928:	11002d17 	ldw	r4,180(r2)
   1492c:	e1bffe17 	ldw	r6,-8(fp)
   14930:	e0bffa17 	ldw	r2,-24(fp)
   14934:	10803117 	ldw	r2,196(r2)
   14938:	d8800015 	stw	r2,0(sp)
   1493c:	e17ffd17 	ldw	r5,-12(fp)
   14940:	e1ffff17 	ldw	r7,-4(fp)
   14944:	00159980 	call	15998 <epcs_read_buffer>
   14948:	e0bffb15 	stw	r2,-20(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
   1494c:	e0fffb17 	ldw	r3,-20(fp)
   14950:	e0bfff17 	ldw	r2,-4(fp)
   14954:	1880011e 	bne	r3,r2,1495c <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
   14958:	e03ffb15 	stw	zero,-20(fp)
    }
  }
  return ret_code;
   1495c:	e0bffb17 	ldw	r2,-20(fp)
}
   14960:	e037883a 	mov	sp,fp
   14964:	dfc00117 	ldw	ra,4(sp)
   14968:	df000017 	ldw	fp,0(sp)
   1496c:	dec00204 	addi	sp,sp,8
   14970:	f800283a 	ret

00014974 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   14974:	defffa04 	addi	sp,sp,-24
   14978:	dfc00515 	stw	ra,20(sp)
   1497c:	df000415 	stw	fp,16(sp)
   14980:	df000404 	addi	fp,sp,16
   14984:	e13ffd15 	stw	r4,-12(fp)
   14988:	e17ffe15 	stw	r5,-8(fp)
   1498c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14990:	e0bffd17 	ldw	r2,-12(fp)
   14994:	10800017 	ldw	r2,0(r2)
   14998:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1499c:	e0bffc17 	ldw	r2,-16(fp)
   149a0:	11000a04 	addi	r4,r2,40
   149a4:	e0bffd17 	ldw	r2,-12(fp)
   149a8:	11c00217 	ldw	r7,8(r2)
   149ac:	e17ffe17 	ldw	r5,-8(fp)
   149b0:	e1bfff17 	ldw	r6,-4(fp)
   149b4:	00151340 	call	15134 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   149b8:	e037883a 	mov	sp,fp
   149bc:	dfc00117 	ldw	ra,4(sp)
   149c0:	df000017 	ldw	fp,0(sp)
   149c4:	dec00204 	addi	sp,sp,8
   149c8:	f800283a 	ret

000149cc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   149cc:	defffa04 	addi	sp,sp,-24
   149d0:	dfc00515 	stw	ra,20(sp)
   149d4:	df000415 	stw	fp,16(sp)
   149d8:	df000404 	addi	fp,sp,16
   149dc:	e13ffd15 	stw	r4,-12(fp)
   149e0:	e17ffe15 	stw	r5,-8(fp)
   149e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   149e8:	e0bffd17 	ldw	r2,-12(fp)
   149ec:	10800017 	ldw	r2,0(r2)
   149f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   149f4:	e0bffc17 	ldw	r2,-16(fp)
   149f8:	11000a04 	addi	r4,r2,40
   149fc:	e0bffd17 	ldw	r2,-12(fp)
   14a00:	11c00217 	ldw	r7,8(r2)
   14a04:	e17ffe17 	ldw	r5,-8(fp)
   14a08:	e1bfff17 	ldw	r6,-4(fp)
   14a0c:	00153f40 	call	153f4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   14a10:	e037883a 	mov	sp,fp
   14a14:	dfc00117 	ldw	ra,4(sp)
   14a18:	df000017 	ldw	fp,0(sp)
   14a1c:	dec00204 	addi	sp,sp,8
   14a20:	f800283a 	ret

00014a24 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   14a24:	defffc04 	addi	sp,sp,-16
   14a28:	dfc00315 	stw	ra,12(sp)
   14a2c:	df000215 	stw	fp,8(sp)
   14a30:	df000204 	addi	fp,sp,8
   14a34:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14a38:	e0bfff17 	ldw	r2,-4(fp)
   14a3c:	10800017 	ldw	r2,0(r2)
   14a40:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   14a44:	e0bffe17 	ldw	r2,-8(fp)
   14a48:	11000a04 	addi	r4,r2,40
   14a4c:	e0bfff17 	ldw	r2,-4(fp)
   14a50:	11400217 	ldw	r5,8(r2)
   14a54:	0014fcc0 	call	14fcc <altera_avalon_jtag_uart_close>
}
   14a58:	e037883a 	mov	sp,fp
   14a5c:	dfc00117 	ldw	ra,4(sp)
   14a60:	df000017 	ldw	fp,0(sp)
   14a64:	dec00204 	addi	sp,sp,8
   14a68:	f800283a 	ret

00014a6c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   14a6c:	defffa04 	addi	sp,sp,-24
   14a70:	dfc00515 	stw	ra,20(sp)
   14a74:	df000415 	stw	fp,16(sp)
   14a78:	df000404 	addi	fp,sp,16
   14a7c:	e13ffd15 	stw	r4,-12(fp)
   14a80:	e17ffe15 	stw	r5,-8(fp)
   14a84:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   14a88:	e0bffd17 	ldw	r2,-12(fp)
   14a8c:	10800017 	ldw	r2,0(r2)
   14a90:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   14a94:	e0bffc17 	ldw	r2,-16(fp)
   14a98:	11000a04 	addi	r4,r2,40
   14a9c:	e17ffe17 	ldw	r5,-8(fp)
   14aa0:	e1bfff17 	ldw	r6,-4(fp)
   14aa4:	00150400 	call	15040 <altera_avalon_jtag_uart_ioctl>
}
   14aa8:	e037883a 	mov	sp,fp
   14aac:	dfc00117 	ldw	ra,4(sp)
   14ab0:	df000017 	ldw	fp,0(sp)
   14ab4:	dec00204 	addi	sp,sp,8
   14ab8:	f800283a 	ret

00014abc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   14abc:	defff404 	addi	sp,sp,-48
   14ac0:	dfc00b15 	stw	ra,44(sp)
   14ac4:	df000a15 	stw	fp,40(sp)
   14ac8:	df000a04 	addi	fp,sp,40
   14acc:	e13ffd15 	stw	r4,-12(fp)
   14ad0:	e17ffe15 	stw	r5,-8(fp)
   14ad4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   14ad8:	e0bffd17 	ldw	r2,-12(fp)
   14adc:	10800c04 	addi	r2,r2,48
   14ae0:	e0bffb15 	stw	r2,-20(fp)
   14ae4:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   14ae8:	e13ffc0b 	ldhu	r4,-16(fp)
   14aec:	e17ffc84 	addi	r5,fp,-14
   14af0:	000e1dc0 	call	e1dc <OSFlagCreate>
   14af4:	1007883a 	mov	r3,r2
   14af8:	e0bffb17 	ldw	r2,-20(fp)
   14afc:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   14b00:	e0bffd17 	ldw	r2,-12(fp)
   14b04:	10800a04 	addi	r2,r2,40
   14b08:	e0bff915 	stw	r2,-28(fp)
   14b0c:	00800044 	movi	r2,1
   14b10:	e0bffa0d 	sth	r2,-24(fp)
   14b14:	e13ffa0b 	ldhu	r4,-24(fp)
   14b18:	00113e00 	call	113e0 <OSSemCreate>
   14b1c:	1007883a 	mov	r3,r2
   14b20:	e0bff917 	ldw	r2,-28(fp)
   14b24:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   14b28:	e0bffd17 	ldw	r2,-12(fp)
   14b2c:	10800b04 	addi	r2,r2,44
   14b30:	e0bff715 	stw	r2,-36(fp)
   14b34:	00800044 	movi	r2,1
   14b38:	e0bff80d 	sth	r2,-32(fp)
   14b3c:	e13ff80b 	ldhu	r4,-32(fp)
   14b40:	00113e00 	call	113e0 <OSSemCreate>
   14b44:	1007883a 	mov	r3,r2
   14b48:	e0bff717 	ldw	r2,-36(fp)
   14b4c:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14b50:	e0fffd17 	ldw	r3,-12(fp)
   14b54:	00800044 	movi	r2,1
   14b58:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   14b5c:	e0bffd17 	ldw	r2,-12(fp)
   14b60:	10800017 	ldw	r2,0(r2)
   14b64:	11000104 	addi	r4,r2,4
   14b68:	e0bffd17 	ldw	r2,-12(fp)
   14b6c:	10800817 	ldw	r2,32(r2)
   14b70:	1007883a 	mov	r3,r2
   14b74:	2005883a 	mov	r2,r4
   14b78:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   14b7c:	e13ffe17 	ldw	r4,-8(fp)
   14b80:	e17fff17 	ldw	r5,-4(fp)
   14b84:	d8000015 	stw	zero,0(sp)
   14b88:	01800074 	movhi	r6,1
   14b8c:	3192fd04 	addi	r6,r6,19444
   14b90:	e1fffd17 	ldw	r7,-12(fp)
   14b94:	00163180 	call	16318 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   14b98:	e0bffd17 	ldw	r2,-12(fp)
   14b9c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   14ba0:	e0bffd17 	ldw	r2,-12(fp)
   14ba4:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   14ba8:	008000b4 	movhi	r2,2
   14bac:	10ade304 	addi	r2,r2,-18548
   14bb0:	10800017 	ldw	r2,0(r2)
   14bb4:	100b883a 	mov	r5,r2
   14bb8:	01800074 	movhi	r6,1
   14bbc:	3193ae04 	addi	r6,r6,20152
   14bc0:	e1fffd17 	ldw	r7,-12(fp)
   14bc4:	0015ea40 	call	15ea4 <alt_alarm_start>
   14bc8:	1004403a 	cmpge	r2,r2,zero
   14bcc:	1000041e 	bne	r2,zero,14be0 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   14bd0:	e0fffd17 	ldw	r3,-12(fp)
   14bd4:	00a00034 	movhi	r2,32768
   14bd8:	10bfffc4 	addi	r2,r2,-1
   14bdc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   14be0:	e037883a 	mov	sp,fp
   14be4:	dfc00117 	ldw	ra,4(sp)
   14be8:	df000017 	ldw	fp,0(sp)
   14bec:	dec00204 	addi	sp,sp,8
   14bf0:	f800283a 	ret

00014bf4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   14bf4:	defff204 	addi	sp,sp,-56
   14bf8:	dfc00d15 	stw	ra,52(sp)
   14bfc:	df000c15 	stw	fp,48(sp)
   14c00:	df000c04 	addi	fp,sp,48
   14c04:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   14c08:	e0bfff17 	ldw	r2,-4(fp)
   14c0c:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
   14c10:	e0bffd17 	ldw	r2,-12(fp)
   14c14:	10800017 	ldw	r2,0(r2)
   14c18:	e0bffc15 	stw	r2,-16(fp)
   14c1c:	00000006 	br	14c20 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14c20:	e0bffc17 	ldw	r2,-16(fp)
   14c24:	10800104 	addi	r2,r2,4
   14c28:	10800037 	ldwio	r2,0(r2)
   14c2c:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   14c30:	e0bffb17 	ldw	r2,-20(fp)
   14c34:	1080c00c 	andi	r2,r2,768
   14c38:	1005003a 	cmpeq	r2,r2,zero
   14c3c:	1000991e 	bne	r2,zero,14ea4 <altera_avalon_jtag_uart_irq+0x2b0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   14c40:	e0bffb17 	ldw	r2,-20(fp)
   14c44:	1080400c 	andi	r2,r2,256
   14c48:	1005003a 	cmpeq	r2,r2,zero
   14c4c:	1000481e 	bne	r2,zero,14d70 <altera_avalon_jtag_uart_irq+0x17c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   14c50:	00800074 	movhi	r2,1
   14c54:	e0bffa15 	stw	r2,-24(fp)
   14c58:	00000006 	br	14c5c <altera_avalon_jtag_uart_irq+0x68>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14c5c:	e0bffd17 	ldw	r2,-12(fp)
   14c60:	10800d17 	ldw	r2,52(r2)
   14c64:	10800044 	addi	r2,r2,1
   14c68:	1081ffcc 	andi	r2,r2,2047
   14c6c:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   14c70:	e0bffd17 	ldw	r2,-12(fp)
   14c74:	10c00e17 	ldw	r3,56(r2)
   14c78:	e0bff917 	ldw	r2,-28(fp)
   14c7c:	18802826 	beq	r3,r2,14d20 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   14c80:	e0bffc17 	ldw	r2,-16(fp)
   14c84:	10800037 	ldwio	r2,0(r2)
   14c88:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   14c8c:	e0bffa17 	ldw	r2,-24(fp)
   14c90:	10a0000c 	andi	r2,r2,32768
   14c94:	1005003a 	cmpeq	r2,r2,zero
   14c98:	1000211e 	bne	r2,zero,14d20 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   14c9c:	e0bffd17 	ldw	r2,-12(fp)
   14ca0:	10c00d17 	ldw	r3,52(r2)
   14ca4:	e0bffa17 	ldw	r2,-24(fp)
   14ca8:	1009883a 	mov	r4,r2
   14cac:	e0bffd17 	ldw	r2,-12(fp)
   14cb0:	1885883a 	add	r2,r3,r2
   14cb4:	10801104 	addi	r2,r2,68
   14cb8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14cbc:	e0bffd17 	ldw	r2,-12(fp)
   14cc0:	10800d17 	ldw	r2,52(r2)
   14cc4:	10800044 	addi	r2,r2,1
   14cc8:	10c1ffcc 	andi	r3,r2,2047
   14ccc:	e0bffd17 	ldw	r2,-12(fp)
   14cd0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   14cd4:	e0bffd17 	ldw	r2,-12(fp)
   14cd8:	10800c17 	ldw	r2,48(r2)
   14cdc:	e0bff615 	stw	r2,-40(fp)
   14ce0:	00800044 	movi	r2,1
   14ce4:	e0bff70d 	sth	r2,-36(fp)
   14ce8:	00800044 	movi	r2,1
   14cec:	e0bff785 	stb	r2,-34(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   14cf0:	008000b4 	movhi	r2,2
   14cf4:	10adce44 	addi	r2,r2,-18631
   14cf8:	10800003 	ldbu	r2,0(r2)
   14cfc:	10803fcc 	andi	r2,r2,255
   14d00:	1005003a 	cmpeq	r2,r2,zero
   14d04:	103fd51e 	bne	r2,zero,14c5c <altera_avalon_jtag_uart_irq+0x68>
  {
    OSFlagPost (group, flags, opt, &err);
   14d08:	e17ff70b 	ldhu	r5,-36(fp)
   14d0c:	e1bff783 	ldbu	r6,-34(fp)
   14d10:	e1fffe04 	addi	r7,fp,-8
   14d14:	e13ff617 	ldw	r4,-40(fp)
   14d18:	000ef040 	call	ef04 <OSFlagPost>
    return err;
   14d1c:	003fcf06 	br	14c5c <altera_avalon_jtag_uart_irq+0x68>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   14d20:	e0bffa17 	ldw	r2,-24(fp)
   14d24:	10bfffec 	andhi	r2,r2,65535
   14d28:	1005003a 	cmpeq	r2,r2,zero
   14d2c:	1000101e 	bne	r2,zero,14d70 <altera_avalon_jtag_uart_irq+0x17c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14d30:	e0bffd17 	ldw	r2,-12(fp)
   14d34:	10c00817 	ldw	r3,32(r2)
   14d38:	00bfff84 	movi	r2,-2
   14d3c:	1886703a 	and	r3,r3,r2
   14d40:	e0bffd17 	ldw	r2,-12(fp)
   14d44:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   14d48:	e0bffc17 	ldw	r2,-16(fp)
   14d4c:	11000104 	addi	r4,r2,4
   14d50:	e0bffd17 	ldw	r2,-12(fp)
   14d54:	10800817 	ldw	r2,32(r2)
   14d58:	1007883a 	mov	r3,r2
   14d5c:	2005883a 	mov	r2,r4
   14d60:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14d64:	e0bffc17 	ldw	r2,-16(fp)
   14d68:	10800104 	addi	r2,r2,4
   14d6c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   14d70:	e0bffb17 	ldw	r2,-20(fp)
   14d74:	1080800c 	andi	r2,r2,512
   14d78:	1005003a 	cmpeq	r2,r2,zero
   14d7c:	103fa81e 	bne	r2,zero,14c20 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   14d80:	e0bffb17 	ldw	r2,-20(fp)
   14d84:	10bfffec 	andhi	r2,r2,65535
   14d88:	1004d43a 	srli	r2,r2,16
   14d8c:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   14d90:	00002706 	br	14e30 <altera_avalon_jtag_uart_irq+0x23c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   14d94:	e13ffc17 	ldw	r4,-16(fp)
   14d98:	e0bffd17 	ldw	r2,-12(fp)
   14d9c:	10c01017 	ldw	r3,64(r2)
   14da0:	e0bffd17 	ldw	r2,-12(fp)
   14da4:	1885883a 	add	r2,r3,r2
   14da8:	10821104 	addi	r2,r2,2116
   14dac:	10800003 	ldbu	r2,0(r2)
   14db0:	10c03fcc 	andi	r3,r2,255
   14db4:	18c0201c 	xori	r3,r3,128
   14db8:	18ffe004 	addi	r3,r3,-128
   14dbc:	2005883a 	mov	r2,r4
   14dc0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14dc4:	e0bffd17 	ldw	r2,-12(fp)
   14dc8:	10801017 	ldw	r2,64(r2)
   14dcc:	10800044 	addi	r2,r2,1
   14dd0:	10c1ffcc 	andi	r3,r2,2047
   14dd4:	e0bffd17 	ldw	r2,-12(fp)
   14dd8:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   14ddc:	e0bffd17 	ldw	r2,-12(fp)
   14de0:	10800c17 	ldw	r2,48(r2)
   14de4:	e0bff415 	stw	r2,-48(fp)
   14de8:	00800084 	movi	r2,2
   14dec:	e0bff50d 	sth	r2,-44(fp)
   14df0:	00800044 	movi	r2,1
   14df4:	e0bff585 	stb	r2,-42(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   14df8:	008000b4 	movhi	r2,2
   14dfc:	10adce44 	addi	r2,r2,-18631
   14e00:	10800003 	ldbu	r2,0(r2)
   14e04:	10803fcc 	andi	r2,r2,255
   14e08:	1005003a 	cmpeq	r2,r2,zero
   14e0c:	1000051e 	bne	r2,zero,14e24 <altera_avalon_jtag_uart_irq+0x230>
  {
    OSFlagPost (group, flags, opt, &err);
   14e10:	e17ff50b 	ldhu	r5,-44(fp)
   14e14:	e1bff583 	ldbu	r6,-42(fp)
   14e18:	e1fffe44 	addi	r7,fp,-7
   14e1c:	e13ff417 	ldw	r4,-48(fp)
   14e20:	000ef040 	call	ef04 <OSFlagPost>

        space--;
   14e24:	e0bff817 	ldw	r2,-32(fp)
   14e28:	10bfffc4 	addi	r2,r2,-1
   14e2c:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   14e30:	e0bff817 	ldw	r2,-32(fp)
   14e34:	1005003a 	cmpeq	r2,r2,zero
   14e38:	1000051e 	bne	r2,zero,14e50 <altera_avalon_jtag_uart_irq+0x25c>
   14e3c:	e0bffd17 	ldw	r2,-12(fp)
   14e40:	10c01017 	ldw	r3,64(r2)
   14e44:	e0bffd17 	ldw	r2,-12(fp)
   14e48:	10800f17 	ldw	r2,60(r2)
   14e4c:	18bfd11e 	bne	r3,r2,14d94 <altera_avalon_jtag_uart_irq+0x1a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   14e50:	e0bff817 	ldw	r2,-32(fp)
   14e54:	1005003a 	cmpeq	r2,r2,zero
   14e58:	103f711e 	bne	r2,zero,14c20 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14e5c:	e0bffd17 	ldw	r2,-12(fp)
   14e60:	10c00817 	ldw	r3,32(r2)
   14e64:	00bfff44 	movi	r2,-3
   14e68:	1886703a 	and	r3,r3,r2
   14e6c:	e0bffd17 	ldw	r2,-12(fp)
   14e70:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14e74:	e0bffd17 	ldw	r2,-12(fp)
   14e78:	10800017 	ldw	r2,0(r2)
   14e7c:	11000104 	addi	r4,r2,4
   14e80:	e0bffd17 	ldw	r2,-12(fp)
   14e84:	10800817 	ldw	r2,32(r2)
   14e88:	1007883a 	mov	r3,r2
   14e8c:	2005883a 	mov	r2,r4
   14e90:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14e94:	e0bffc17 	ldw	r2,-16(fp)
   14e98:	10800104 	addi	r2,r2,4
   14e9c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   14ea0:	003f5f06 	br	14c20 <altera_avalon_jtag_uart_irq+0x2c>
}
   14ea4:	e037883a 	mov	sp,fp
   14ea8:	dfc00117 	ldw	ra,4(sp)
   14eac:	df000017 	ldw	fp,0(sp)
   14eb0:	dec00204 	addi	sp,sp,8
   14eb4:	f800283a 	ret

00014eb8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   14eb8:	defff804 	addi	sp,sp,-32
   14ebc:	dfc00715 	stw	ra,28(sp)
   14ec0:	df000615 	stw	fp,24(sp)
   14ec4:	df000604 	addi	fp,sp,24
   14ec8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   14ecc:	e0bfff17 	ldw	r2,-4(fp)
   14ed0:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   14ed4:	e0bffd17 	ldw	r2,-12(fp)
   14ed8:	10800017 	ldw	r2,0(r2)
   14edc:	10800104 	addi	r2,r2,4
   14ee0:	10800037 	ldwio	r2,0(r2)
   14ee4:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   14ee8:	e0bffc17 	ldw	r2,-16(fp)
   14eec:	1081000c 	andi	r2,r2,1024
   14ef0:	1005003a 	cmpeq	r2,r2,zero
   14ef4:	10000c1e 	bne	r2,zero,14f28 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   14ef8:	e0bffd17 	ldw	r2,-12(fp)
   14efc:	10800017 	ldw	r2,0(r2)
   14f00:	11000104 	addi	r4,r2,4
   14f04:	e0bffd17 	ldw	r2,-12(fp)
   14f08:	10800817 	ldw	r2,32(r2)
   14f0c:	10810014 	ori	r2,r2,1024
   14f10:	1007883a 	mov	r3,r2
   14f14:	2005883a 	mov	r2,r4
   14f18:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   14f1c:	e0bffd17 	ldw	r2,-12(fp)
   14f20:	10000915 	stw	zero,36(r2)
   14f24:	00002106 	br	14fac <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   14f28:	e0bffd17 	ldw	r2,-12(fp)
   14f2c:	10c00917 	ldw	r3,36(r2)
   14f30:	00a00034 	movhi	r2,32768
   14f34:	10bfff04 	addi	r2,r2,-4
   14f38:	10c01c36 	bltu	r2,r3,14fac <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
   14f3c:	e0bffd17 	ldw	r2,-12(fp)
   14f40:	10800917 	ldw	r2,36(r2)
   14f44:	10c00044 	addi	r3,r2,1
   14f48:	e0bffd17 	ldw	r2,-12(fp)
   14f4c:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   14f50:	e0bffd17 	ldw	r2,-12(fp)
   14f54:	10c00917 	ldw	r3,36(r2)
   14f58:	e0bffd17 	ldw	r2,-12(fp)
   14f5c:	10800117 	ldw	r2,4(r2)
   14f60:	18801236 	bltu	r3,r2,14fac <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   14f64:	e0bffd17 	ldw	r2,-12(fp)
   14f68:	10800c17 	ldw	r2,48(r2)
   14f6c:	e0bffa15 	stw	r2,-24(fp)
   14f70:	00800104 	movi	r2,4
   14f74:	e0bffb0d 	sth	r2,-20(fp)
   14f78:	00800044 	movi	r2,1
   14f7c:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   14f80:	008000b4 	movhi	r2,2
   14f84:	10adce44 	addi	r2,r2,-18631
   14f88:	10800003 	ldbu	r2,0(r2)
   14f8c:	10803fcc 	andi	r2,r2,255
   14f90:	1005003a 	cmpeq	r2,r2,zero
   14f94:	1000051e 	bne	r2,zero,14fac <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
   14f98:	e17ffb0b 	ldhu	r5,-20(fp)
   14f9c:	e1bffb83 	ldbu	r6,-18(fp)
   14fa0:	e1fffe04 	addi	r7,fp,-8
   14fa4:	e13ffa17 	ldw	r4,-24(fp)
   14fa8:	000ef040 	call	ef04 <OSFlagPost>
   14fac:	008000b4 	movhi	r2,2
   14fb0:	10ade304 	addi	r2,r2,-18548
   14fb4:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   14fb8:	e037883a 	mov	sp,fp
   14fbc:	dfc00117 	ldw	ra,4(sp)
   14fc0:	df000017 	ldw	fp,0(sp)
   14fc4:	dec00204 	addi	sp,sp,8
   14fc8:	f800283a 	ret

00014fcc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   14fcc:	defffc04 	addi	sp,sp,-16
   14fd0:	df000315 	stw	fp,12(sp)
   14fd4:	df000304 	addi	fp,sp,12
   14fd8:	e13ffd15 	stw	r4,-12(fp)
   14fdc:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14fe0:	00000706 	br	15000 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   14fe4:	e0bffe17 	ldw	r2,-8(fp)
   14fe8:	1090000c 	andi	r2,r2,16384
   14fec:	1005003a 	cmpeq	r2,r2,zero
   14ff0:	1000031e 	bne	r2,zero,15000 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   14ff4:	00bffd44 	movi	r2,-11
   14ff8:	e0bfff15 	stw	r2,-4(fp)
   14ffc:	00000b06 	br	1502c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   15000:	e0bffd17 	ldw	r2,-12(fp)
   15004:	10c01017 	ldw	r3,64(r2)
   15008:	e0bffd17 	ldw	r2,-12(fp)
   1500c:	10800f17 	ldw	r2,60(r2)
   15010:	18800526 	beq	r3,r2,15028 <altera_avalon_jtag_uart_close+0x5c>
   15014:	e0bffd17 	ldw	r2,-12(fp)
   15018:	10c00917 	ldw	r3,36(r2)
   1501c:	e0bffd17 	ldw	r2,-12(fp)
   15020:	10800117 	ldw	r2,4(r2)
   15024:	18bfef36 	bltu	r3,r2,14fe4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   15028:	e03fff15 	stw	zero,-4(fp)
   1502c:	e0bfff17 	ldw	r2,-4(fp)
}
   15030:	e037883a 	mov	sp,fp
   15034:	df000017 	ldw	fp,0(sp)
   15038:	dec00104 	addi	sp,sp,4
   1503c:	f800283a 	ret

00015040 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   15040:	defff804 	addi	sp,sp,-32
   15044:	df000715 	stw	fp,28(sp)
   15048:	df000704 	addi	fp,sp,28
   1504c:	e13ffb15 	stw	r4,-20(fp)
   15050:	e17ffc15 	stw	r5,-16(fp)
   15054:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   15058:	00bff9c4 	movi	r2,-25
   1505c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   15060:	e0bffc17 	ldw	r2,-16(fp)
   15064:	e0bfff15 	stw	r2,-4(fp)
   15068:	e0ffff17 	ldw	r3,-4(fp)
   1506c:	189a8060 	cmpeqi	r2,r3,27137
   15070:	1000041e 	bne	r2,zero,15084 <altera_avalon_jtag_uart_ioctl+0x44>
   15074:	e0ffff17 	ldw	r3,-4(fp)
   15078:	189a80a0 	cmpeqi	r2,r3,27138
   1507c:	10001b1e 	bne	r2,zero,150ec <altera_avalon_jtag_uart_ioctl+0xac>
   15080:	00002706 	br	15120 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   15084:	e0bffb17 	ldw	r2,-20(fp)
   15088:	10c00117 	ldw	r3,4(r2)
   1508c:	00a00034 	movhi	r2,32768
   15090:	10bfffc4 	addi	r2,r2,-1
   15094:	18802226 	beq	r3,r2,15120 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   15098:	e0bffd17 	ldw	r2,-12(fp)
   1509c:	10800017 	ldw	r2,0(r2)
   150a0:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   150a4:	e0bff917 	ldw	r2,-28(fp)
   150a8:	10800090 	cmplti	r2,r2,2
   150ac:	1000071e 	bne	r2,zero,150cc <altera_avalon_jtag_uart_ioctl+0x8c>
   150b0:	e0fff917 	ldw	r3,-28(fp)
   150b4:	00a00034 	movhi	r2,32768
   150b8:	10bfffc4 	addi	r2,r2,-1
   150bc:	18800326 	beq	r3,r2,150cc <altera_avalon_jtag_uart_ioctl+0x8c>
   150c0:	e0bff917 	ldw	r2,-28(fp)
   150c4:	e0bffe15 	stw	r2,-8(fp)
   150c8:	00000306 	br	150d8 <altera_avalon_jtag_uart_ioctl+0x98>
   150cc:	00e00034 	movhi	r3,32768
   150d0:	18ffff84 	addi	r3,r3,-2
   150d4:	e0fffe15 	stw	r3,-8(fp)
   150d8:	e0bffb17 	ldw	r2,-20(fp)
   150dc:	e0fffe17 	ldw	r3,-8(fp)
   150e0:	10c00115 	stw	r3,4(r2)
      rc = 0;
   150e4:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   150e8:	00000d06 	br	15120 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   150ec:	e0bffb17 	ldw	r2,-20(fp)
   150f0:	10c00117 	ldw	r3,4(r2)
   150f4:	00a00034 	movhi	r2,32768
   150f8:	10bfffc4 	addi	r2,r2,-1
   150fc:	18800826 	beq	r3,r2,15120 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   15100:	e13ffd17 	ldw	r4,-12(fp)
   15104:	e0bffb17 	ldw	r2,-20(fp)
   15108:	10c00917 	ldw	r3,36(r2)
   1510c:	e0bffb17 	ldw	r2,-20(fp)
   15110:	10800117 	ldw	r2,4(r2)
   15114:	1885803a 	cmpltu	r2,r3,r2
   15118:	20800015 	stw	r2,0(r4)
      rc = 0;
   1511c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   15120:	e0bffa17 	ldw	r2,-24(fp)
}
   15124:	e037883a 	mov	sp,fp
   15128:	df000017 	ldw	fp,0(sp)
   1512c:	dec00104 	addi	sp,sp,4
   15130:	f800283a 	ret

00015134 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   15134:	deffeb04 	addi	sp,sp,-84
   15138:	dfc01415 	stw	ra,80(sp)
   1513c:	df001315 	stw	fp,76(sp)
   15140:	df001304 	addi	fp,sp,76
   15144:	e13ffb15 	stw	r4,-20(fp)
   15148:	e17ffc15 	stw	r5,-16(fp)
   1514c:	e1bffd15 	stw	r6,-12(fp)
   15150:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   15154:	e0bffc17 	ldw	r2,-16(fp)
   15158:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   1515c:	e0bffb17 	ldw	r2,-20(fp)
   15160:	10800a17 	ldw	r2,40(r2)
   15164:	e0bff315 	stw	r2,-52(fp)
   15168:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   1516c:	e17ff40b 	ldhu	r5,-48(fp)
   15170:	e1bffa44 	addi	r6,fp,-23
   15174:	e13ff317 	ldw	r4,-52(fp)
   15178:	00117940 	call	11794 <OSSemPend>

  while (space > 0)
   1517c:	00006406 	br	15310 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   15180:	e0bffb17 	ldw	r2,-20(fp)
   15184:	10800d17 	ldw	r2,52(r2)
   15188:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
   1518c:	e0bffb17 	ldw	r2,-20(fp)
   15190:	10800e17 	ldw	r2,56(r2)
   15194:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
   15198:	e0fff617 	ldw	r3,-40(fp)
   1519c:	e0bff517 	ldw	r2,-44(fp)
   151a0:	18800536 	bltu	r3,r2,151b8 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
   151a4:	e0bff617 	ldw	r2,-40(fp)
   151a8:	e0fff517 	ldw	r3,-44(fp)
   151ac:	10c5c83a 	sub	r2,r2,r3
   151b0:	e0bff715 	stw	r2,-36(fp)
   151b4:	00000406 	br	151c8 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   151b8:	00820004 	movi	r2,2048
   151bc:	e0fff517 	ldw	r3,-44(fp)
   151c0:	10c5c83a 	sub	r2,r2,r3
   151c4:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
   151c8:	e0bff717 	ldw	r2,-36(fp)
   151cc:	1005003a 	cmpeq	r2,r2,zero
   151d0:	10001f1e 	bne	r2,zero,15250 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   151d4:	e0fffd17 	ldw	r3,-12(fp)
   151d8:	e0bff717 	ldw	r2,-36(fp)
   151dc:	1880022e 	bgeu	r3,r2,151e8 <altera_avalon_jtag_uart_read+0xb4>
        n = space;
   151e0:	e0bffd17 	ldw	r2,-12(fp)
   151e4:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   151e8:	e0bffb17 	ldw	r2,-20(fp)
   151ec:	10c01104 	addi	r3,r2,68
   151f0:	e0bff517 	ldw	r2,-44(fp)
   151f4:	1887883a 	add	r3,r3,r2
   151f8:	e0bff917 	ldw	r2,-28(fp)
   151fc:	1009883a 	mov	r4,r2
   15200:	180b883a 	mov	r5,r3
   15204:	e1bff717 	ldw	r6,-36(fp)
   15208:	00076200 	call	7620 <memcpy>
      ptr   += n;
   1520c:	e0fff717 	ldw	r3,-36(fp)
   15210:	e0bff917 	ldw	r2,-28(fp)
   15214:	10c5883a 	add	r2,r2,r3
   15218:	e0bff915 	stw	r2,-28(fp)
      space -= n;
   1521c:	e0fffd17 	ldw	r3,-12(fp)
   15220:	e0bff717 	ldw	r2,-36(fp)
   15224:	1885c83a 	sub	r2,r3,r2
   15228:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1522c:	e0fff517 	ldw	r3,-44(fp)
   15230:	e0bff717 	ldw	r2,-36(fp)
   15234:	1885883a 	add	r2,r3,r2
   15238:	10c1ffcc 	andi	r3,r2,2047
   1523c:	e0bffb17 	ldw	r2,-20(fp)
   15240:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   15244:	e0bffd17 	ldw	r2,-12(fp)
   15248:	10800048 	cmpgei	r2,r2,1
   1524c:	103fcc1e 	bne	r2,zero,15180 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
   15250:	e0fff917 	ldw	r3,-28(fp)
   15254:	e0bffc17 	ldw	r2,-16(fp)
   15258:	1880301e 	bne	r3,r2,1531c <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1525c:	e0bffe17 	ldw	r2,-8(fp)
   15260:	1090000c 	andi	r2,r2,16384
   15264:	1004c03a 	cmpne	r2,r2,zero
   15268:	10002c1e 	bne	r2,zero,1531c <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   1526c:	008000b4 	movhi	r2,2
   15270:	10adce44 	addi	r2,r2,-18631
   15274:	10800003 	ldbu	r2,0(r2)
   15278:	10803fcc 	andi	r2,r2,255
   1527c:	10800058 	cmpnei	r2,r2,1
   15280:	1000161e 	bne	r2,zero,152dc <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   15284:	e0bffb17 	ldw	r2,-20(fp)
   15288:	10800c17 	ldw	r2,48(r2)
   1528c:	e0bff015 	stw	r2,-64(fp)
   15290:	00800144 	movi	r2,5
   15294:	e0bff10d 	sth	r2,-60(fp)
   15298:	00bfe0c4 	movi	r2,-125
   1529c:	e0bff185 	stb	r2,-58(fp)
   152a0:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   152a4:	008000b4 	movhi	r2,2
   152a8:	10adce44 	addi	r2,r2,-18631
   152ac:	10800003 	ldbu	r2,0(r2)
   152b0:	10803fcc 	andi	r2,r2,255
   152b4:	1005003a 	cmpeq	r2,r2,zero
   152b8:	1000111e 	bne	r2,zero,15300 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   152bc:	e17ff10b 	ldhu	r5,-60(fp)
   152c0:	e1bff183 	ldbu	r6,-58(fp)
   152c4:	e1fff20b 	ldhu	r7,-56(fp)
   152c8:	e0bffa04 	addi	r2,fp,-24
   152cc:	d8800015 	stw	r2,0(sp)
   152d0:	e13ff017 	ldw	r4,-64(fp)
   152d4:	000e8580 	call	e858 <OSFlagPend>
    return err;
   152d8:	00000906 	br	15300 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   152dc:	e0bffb17 	ldw	r2,-20(fp)
   152e0:	10c00d17 	ldw	r3,52(r2)
   152e4:	e0bff617 	ldw	r2,-40(fp)
   152e8:	1880051e 	bne	r3,r2,15300 <altera_avalon_jtag_uart_read+0x1cc>
   152ec:	e0bffb17 	ldw	r2,-20(fp)
   152f0:	10c00917 	ldw	r3,36(r2)
   152f4:	e0bffb17 	ldw	r2,-20(fp)
   152f8:	10800117 	ldw	r2,4(r2)
   152fc:	18bff736 	bltu	r3,r2,152dc <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   15300:	e0bffb17 	ldw	r2,-20(fp)
   15304:	10c00d17 	ldw	r3,52(r2)
   15308:	e0bff617 	ldw	r2,-40(fp)
   1530c:	18800326 	beq	r3,r2,1531c <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   15310:	e0bffd17 	ldw	r2,-12(fp)
   15314:	10800048 	cmpgei	r2,r2,1
   15318:	103f991e 	bne	r2,zero,15180 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   1531c:	e0bffb17 	ldw	r2,-20(fp)
   15320:	11000a17 	ldw	r4,40(r2)
   15324:	0011b8c0 	call	11b8c <OSSemPost>

  if (ptr != buffer)
   15328:	e0fff917 	ldw	r3,-28(fp)
   1532c:	e0bffc17 	ldw	r2,-16(fp)
   15330:	18801926 	beq	r3,r2,15398 <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15334:	0005303a 	rdctl	r2,status
   15338:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1533c:	e0ffef17 	ldw	r3,-68(fp)
   15340:	00bfff84 	movi	r2,-2
   15344:	1884703a 	and	r2,r3,r2
   15348:	1001703a 	wrctl	status,r2
  
  return context;
   1534c:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   15350:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   15354:	e0bffb17 	ldw	r2,-20(fp)
   15358:	10800817 	ldw	r2,32(r2)
   1535c:	10c00054 	ori	r3,r2,1
   15360:	e0bffb17 	ldw	r2,-20(fp)
   15364:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   15368:	e0bffb17 	ldw	r2,-20(fp)
   1536c:	10800017 	ldw	r2,0(r2)
   15370:	11000104 	addi	r4,r2,4
   15374:	e0bffb17 	ldw	r2,-20(fp)
   15378:	10800817 	ldw	r2,32(r2)
   1537c:	1007883a 	mov	r3,r2
   15380:	2005883a 	mov	r2,r4
   15384:	10c00035 	stwio	r3,0(r2)
   15388:	e0bff817 	ldw	r2,-32(fp)
   1538c:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15390:	e0bfee17 	ldw	r2,-72(fp)
   15394:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   15398:	e0fff917 	ldw	r3,-28(fp)
   1539c:	e0bffc17 	ldw	r2,-16(fp)
   153a0:	18800526 	beq	r3,r2,153b8 <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
   153a4:	e0fff917 	ldw	r3,-28(fp)
   153a8:	e0bffc17 	ldw	r2,-16(fp)
   153ac:	1887c83a 	sub	r3,r3,r2
   153b0:	e0ffff15 	stw	r3,-4(fp)
   153b4:	00000906 	br	153dc <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   153b8:	e0bffe17 	ldw	r2,-8(fp)
   153bc:	1090000c 	andi	r2,r2,16384
   153c0:	1005003a 	cmpeq	r2,r2,zero
   153c4:	1000031e 	bne	r2,zero,153d4 <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
   153c8:	00bffd44 	movi	r2,-11
   153cc:	e0bfff15 	stw	r2,-4(fp)
   153d0:	00000206 	br	153dc <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   153d4:	00bffec4 	movi	r2,-5
   153d8:	e0bfff15 	stw	r2,-4(fp)
   153dc:	e0bfff17 	ldw	r2,-4(fp)
}
   153e0:	e037883a 	mov	sp,fp
   153e4:	dfc00117 	ldw	ra,4(sp)
   153e8:	df000017 	ldw	fp,0(sp)
   153ec:	dec00204 	addi	sp,sp,8
   153f0:	f800283a 	ret

000153f4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   153f4:	deffeb04 	addi	sp,sp,-84
   153f8:	dfc01415 	stw	ra,80(sp)
   153fc:	df001315 	stw	fp,76(sp)
   15400:	df001304 	addi	fp,sp,76
   15404:	e13ffb15 	stw	r4,-20(fp)
   15408:	e17ffc15 	stw	r5,-16(fp)
   1540c:	e1bffd15 	stw	r6,-12(fp)
   15410:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   15414:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   15418:	e0bffc17 	ldw	r2,-16(fp)
   1541c:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   15420:	e0bffb17 	ldw	r2,-20(fp)
   15424:	10800b17 	ldw	r2,44(r2)
   15428:	e0bff315 	stw	r2,-52(fp)
   1542c:	e03ff40d 	sth	zero,-48(fp)
   15430:	e17ff40b 	ldhu	r5,-48(fp)
   15434:	e1bffa04 	addi	r6,fp,-24
   15438:	e13ff317 	ldw	r4,-52(fp)
   1543c:	00117940 	call	11794 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   15440:	00003a06 	br	1552c <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   15444:	e0bffb17 	ldw	r2,-20(fp)
   15448:	10800f17 	ldw	r2,60(r2)
   1544c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   15450:	e0bffb17 	ldw	r2,-20(fp)
   15454:	10801017 	ldw	r2,64(r2)
   15458:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
   1545c:	e0fff917 	ldw	r3,-28(fp)
   15460:	e0bff817 	ldw	r2,-32(fp)
   15464:	1880062e 	bgeu	r3,r2,15480 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
   15468:	e0fff817 	ldw	r3,-32(fp)
   1546c:	e0bff917 	ldw	r2,-28(fp)
   15470:	1885c83a 	sub	r2,r3,r2
   15474:	10bfffc4 	addi	r2,r2,-1
   15478:	e0bff715 	stw	r2,-36(fp)
   1547c:	00000c06 	br	154b0 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
   15480:	e0bff817 	ldw	r2,-32(fp)
   15484:	1005003a 	cmpeq	r2,r2,zero
   15488:	1000051e 	bne	r2,zero,154a0 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1548c:	00820004 	movi	r2,2048
   15490:	e0fff917 	ldw	r3,-28(fp)
   15494:	10c5c83a 	sub	r2,r2,r3
   15498:	e0bff715 	stw	r2,-36(fp)
   1549c:	00000406 	br	154b0 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   154a0:	0081ffc4 	movi	r2,2047
   154a4:	e0fff917 	ldw	r3,-28(fp)
   154a8:	10c5c83a 	sub	r2,r2,r3
   154ac:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
   154b0:	e0bff717 	ldw	r2,-36(fp)
   154b4:	1005003a 	cmpeq	r2,r2,zero
   154b8:	10001f1e 	bne	r2,zero,15538 <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
   154bc:	e0fffd17 	ldw	r3,-12(fp)
   154c0:	e0bff717 	ldw	r2,-36(fp)
   154c4:	1880022e 	bgeu	r3,r2,154d0 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   154c8:	e0bffd17 	ldw	r2,-12(fp)
   154cc:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   154d0:	e0bffb17 	ldw	r2,-20(fp)
   154d4:	10c21104 	addi	r3,r2,2116
   154d8:	e0bff917 	ldw	r2,-28(fp)
   154dc:	1885883a 	add	r2,r3,r2
   154e0:	e0fffc17 	ldw	r3,-16(fp)
   154e4:	1009883a 	mov	r4,r2
   154e8:	180b883a 	mov	r5,r3
   154ec:	e1bff717 	ldw	r6,-36(fp)
   154f0:	00076200 	call	7620 <memcpy>
      ptr   += n;
   154f4:	e0fff717 	ldw	r3,-36(fp)
   154f8:	e0bffc17 	ldw	r2,-16(fp)
   154fc:	10c5883a 	add	r2,r2,r3
   15500:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   15504:	e0fffd17 	ldw	r3,-12(fp)
   15508:	e0bff717 	ldw	r2,-36(fp)
   1550c:	1885c83a 	sub	r2,r3,r2
   15510:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15514:	e0fff917 	ldw	r3,-28(fp)
   15518:	e0bff717 	ldw	r2,-36(fp)
   1551c:	1885883a 	add	r2,r3,r2
   15520:	10c1ffcc 	andi	r3,r2,2047
   15524:	e0bffb17 	ldw	r2,-20(fp)
   15528:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1552c:	e0bffd17 	ldw	r2,-12(fp)
   15530:	10800048 	cmpgei	r2,r2,1
   15534:	103fc31e 	bne	r2,zero,15444 <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15538:	0005303a 	rdctl	r2,status
   1553c:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15540:	e0fff217 	ldw	r3,-56(fp)
   15544:	00bfff84 	movi	r2,-2
   15548:	1884703a 	and	r2,r3,r2
   1554c:	1001703a 	wrctl	status,r2
  
  return context;
   15550:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   15554:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   15558:	e0bffb17 	ldw	r2,-20(fp)
   1555c:	10800817 	ldw	r2,32(r2)
   15560:	10c00094 	ori	r3,r2,2
   15564:	e0bffb17 	ldw	r2,-20(fp)
   15568:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1556c:	e0bffb17 	ldw	r2,-20(fp)
   15570:	10800017 	ldw	r2,0(r2)
   15574:	11000104 	addi	r4,r2,4
   15578:	e0bffb17 	ldw	r2,-20(fp)
   1557c:	10800817 	ldw	r2,32(r2)
   15580:	1007883a 	mov	r3,r2
   15584:	2005883a 	mov	r2,r4
   15588:	10c00035 	stwio	r3,0(r2)
   1558c:	e0bff617 	ldw	r2,-40(fp)
   15590:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15594:	e0bff117 	ldw	r2,-60(fp)
   15598:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1559c:	e0bffd17 	ldw	r2,-12(fp)
   155a0:	10800050 	cmplti	r2,r2,1
   155a4:	10002d1e 	bne	r2,zero,1565c <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
   155a8:	e0bffe17 	ldw	r2,-8(fp)
   155ac:	1090000c 	andi	r2,r2,16384
   155b0:	1004c03a 	cmpne	r2,r2,zero
   155b4:	10002c1e 	bne	r2,zero,15668 <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   155b8:	008000b4 	movhi	r2,2
   155bc:	10adce44 	addi	r2,r2,-18631
   155c0:	10800003 	ldbu	r2,0(r2)
   155c4:	10803fcc 	andi	r2,r2,255
   155c8:	10800058 	cmpnei	r2,r2,1
   155cc:	1000161e 	bne	r2,zero,15628 <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
   155d0:	e0bffb17 	ldw	r2,-20(fp)
   155d4:	10800c17 	ldw	r2,48(r2)
   155d8:	e0bfee15 	stw	r2,-72(fp)
   155dc:	00800184 	movi	r2,6
   155e0:	e0bfef0d 	sth	r2,-68(fp)
   155e4:	00bfe0c4 	movi	r2,-125
   155e8:	e0bfef85 	stb	r2,-66(fp)
   155ec:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   155f0:	008000b4 	movhi	r2,2
   155f4:	10adce44 	addi	r2,r2,-18631
   155f8:	10800003 	ldbu	r2,0(r2)
   155fc:	10803fcc 	andi	r2,r2,255
   15600:	1005003a 	cmpeq	r2,r2,zero
   15604:	1000111e 	bne	r2,zero,1564c <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   15608:	e17fef0b 	ldhu	r5,-68(fp)
   1560c:	e1bfef83 	ldbu	r6,-66(fp)
   15610:	e1fff00b 	ldhu	r7,-64(fp)
   15614:	e0bffa44 	addi	r2,fp,-23
   15618:	d8800015 	stw	r2,0(sp)
   1561c:	e13fee17 	ldw	r4,-72(fp)
   15620:	000e8580 	call	e858 <OSFlagPend>
    return err;
   15624:	00000906 	br	1564c <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   15628:	e0bffb17 	ldw	r2,-20(fp)
   1562c:	10c01017 	ldw	r3,64(r2)
   15630:	e0bff817 	ldw	r2,-32(fp)
   15634:	1880051e 	bne	r3,r2,1564c <altera_avalon_jtag_uart_write+0x258>
   15638:	e0bffb17 	ldw	r2,-20(fp)
   1563c:	10c00917 	ldw	r3,36(r2)
   15640:	e0bffb17 	ldw	r2,-20(fp)
   15644:	10800117 	ldw	r2,4(r2)
   15648:	18bff736 	bltu	r3,r2,15628 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   1564c:	e0bffb17 	ldw	r2,-20(fp)
   15650:	10c01017 	ldw	r3,64(r2)
   15654:	e0bff817 	ldw	r2,-32(fp)
   15658:	18800326 	beq	r3,r2,15668 <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
   1565c:	e0bffd17 	ldw	r2,-12(fp)
   15660:	10800048 	cmpgei	r2,r2,1
   15664:	103fb11e 	bne	r2,zero,1552c <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   15668:	e0bffb17 	ldw	r2,-20(fp)
   1566c:	11000b17 	ldw	r4,44(r2)
   15670:	0011b8c0 	call	11b8c <OSSemPost>

  if (ptr != start)
   15674:	e0fffc17 	ldw	r3,-16(fp)
   15678:	e0bff517 	ldw	r2,-44(fp)
   1567c:	18800526 	beq	r3,r2,15694 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
   15680:	e0fffc17 	ldw	r3,-16(fp)
   15684:	e0bff517 	ldw	r2,-44(fp)
   15688:	1887c83a 	sub	r3,r3,r2
   1568c:	e0ffff15 	stw	r3,-4(fp)
   15690:	00000906 	br	156b8 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
   15694:	e0bffe17 	ldw	r2,-8(fp)
   15698:	1090000c 	andi	r2,r2,16384
   1569c:	1005003a 	cmpeq	r2,r2,zero
   156a0:	1000031e 	bne	r2,zero,156b0 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
   156a4:	00bffd44 	movi	r2,-11
   156a8:	e0bfff15 	stw	r2,-4(fp)
   156ac:	00000206 	br	156b8 <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
   156b0:	00bffec4 	movi	r2,-5
   156b4:	e0bfff15 	stw	r2,-4(fp)
   156b8:	e0bfff17 	ldw	r2,-4(fp)
}
   156bc:	e037883a 	mov	sp,fp
   156c0:	dfc00117 	ldw	ra,4(sp)
   156c4:	df000017 	ldw	fp,0(sp)
   156c8:	dec00204 	addi	sp,sp,8
   156cc:	f800283a 	ret

000156d0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   156d0:	defffa04 	addi	sp,sp,-24
   156d4:	dfc00515 	stw	ra,20(sp)
   156d8:	df000415 	stw	fp,16(sp)
   156dc:	df000404 	addi	fp,sp,16
   156e0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   156e4:	e0bfff17 	ldw	r2,-4(fp)
   156e8:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   156ec:	e0bfff17 	ldw	r2,-4(fp)
   156f0:	10800104 	addi	r2,r2,4
   156f4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   156f8:	0005303a 	rdctl	r2,status
   156fc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15700:	e0fffd17 	ldw	r3,-12(fp)
   15704:	00bfff84 	movi	r2,-2
   15708:	1884703a 	and	r2,r3,r2
   1570c:	1001703a 	wrctl	status,r2
  
  return context;
   15710:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   15714:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   15718:	0016a7c0 	call	16a7c <alt_tick>
   1571c:	e0bffe17 	ldw	r2,-8(fp)
   15720:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15724:	e0bffc17 	ldw	r2,-16(fp)
   15728:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1572c:	e037883a 	mov	sp,fp
   15730:	dfc00117 	ldw	ra,4(sp)
   15734:	df000017 	ldw	fp,0(sp)
   15738:	dec00204 	addi	sp,sp,8
   1573c:	f800283a 	ret

00015740 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   15740:	defff804 	addi	sp,sp,-32
   15744:	dfc00715 	stw	ra,28(sp)
   15748:	df000615 	stw	fp,24(sp)
   1574c:	df000604 	addi	fp,sp,24
   15750:	e13ffc15 	stw	r4,-16(fp)
   15754:	e17ffd15 	stw	r5,-12(fp)
   15758:	e1bffe15 	stw	r6,-8(fp)
   1575c:	e1ffff15 	stw	r7,-4(fp)
   15760:	e0bfff17 	ldw	r2,-4(fp)
   15764:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   15768:	008000b4 	movhi	r2,2
   1576c:	10ade304 	addi	r2,r2,-18548
   15770:	10800017 	ldw	r2,0(r2)
   15774:	1004c03a 	cmpne	r2,r2,zero
   15778:	1000041e 	bne	r2,zero,1578c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   1577c:	00c000b4 	movhi	r3,2
   15780:	18ede304 	addi	r3,r3,-18548
   15784:	e0bffb17 	ldw	r2,-20(fp)
   15788:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1578c:	e0bffc17 	ldw	r2,-16(fp)
   15790:	10800104 	addi	r2,r2,4
   15794:	1007883a 	mov	r3,r2
   15798:	008001c4 	movi	r2,7
   1579c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   157a0:	d8000015 	stw	zero,0(sp)
   157a4:	e13ffd17 	ldw	r4,-12(fp)
   157a8:	e17ffe17 	ldw	r5,-8(fp)
   157ac:	01800074 	movhi	r6,1
   157b0:	3195b404 	addi	r6,r6,22224
   157b4:	e1fffc17 	ldw	r7,-16(fp)
   157b8:	00163180 	call	16318 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   157bc:	e037883a 	mov	sp,fp
   157c0:	dfc00117 	ldw	ra,4(sp)
   157c4:	df000017 	ldw	fp,0(sp)
   157c8:	dec00204 	addi	sp,sp,8
   157cc:	f800283a 	ret

000157d0 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
   157d0:	defff904 	addi	sp,sp,-28
   157d4:	dfc00615 	stw	ra,24(sp)
   157d8:	df000515 	stw	fp,20(sp)
   157dc:	df000504 	addi	fp,sp,20
   157e0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
   157e4:	00800144 	movi	r2,5
   157e8:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
   157ec:	00800044 	movi	r2,1
   157f0:	d8800015 	stw	r2,0(sp)
   157f4:	e0bffe44 	addi	r2,fp,-7
   157f8:	d8800115 	stw	r2,4(sp)
   157fc:	d8000215 	stw	zero,8(sp)
   15800:	e13fff17 	ldw	r4,-4(fp)
   15804:	000b883a 	mov	r5,zero
   15808:	01800044 	movi	r6,1
   1580c:	e1fffe04 	addi	r7,fp,-8
   15810:	00170940 	call	17094 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
   15814:	e0bffe43 	ldbu	r2,-7(fp)
   15818:	10803fcc 	andi	r2,r2,255
}
   1581c:	e037883a 	mov	sp,fp
   15820:	dfc00117 	ldw	ra,4(sp)
   15824:	df000017 	ldw	fp,0(sp)
   15828:	dec00204 	addi	sp,sp,8
   1582c:	f800283a 	ret

00015830 <epcs_sector_erase>:
  {
  }
}

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
   15830:	defff604 	addi	sp,sp,-40
   15834:	dfc00915 	stw	ra,36(sp)
   15838:	df000815 	stw	fp,32(sp)
   1583c:	df000804 	addi	fp,sp,32
   15840:	e13ffd15 	stw	r4,-12(fp)
   15844:	e17ffe15 	stw	r5,-8(fp)
   15848:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
   1584c:	e0bfff17 	ldw	r2,-4(fp)
   15850:	1005003a 	cmpeq	r2,r2,zero
   15854:	1000121e 	bne	r2,zero,158a0 <epcs_sector_erase+0x70>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
   15858:	00bff604 	movi	r2,-40
   1585c:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
   15860:	e0bffe17 	ldw	r2,-8(fp)
   15864:	1004d63a 	srli	r2,r2,24
   15868:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
   1586c:	e0bffe17 	ldw	r2,-8(fp)
   15870:	1004d43a 	srli	r2,r2,16
   15874:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
   15878:	e0bffe17 	ldw	r2,-8(fp)
   1587c:	1004d23a 	srli	r2,r2,8
   15880:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
   15884:	e0bffe17 	ldw	r2,-8(fp)
   15888:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
   1588c:	00800144 	movi	r2,5
   15890:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
   15894:	e13ffd17 	ldw	r4,-12(fp)
   15898:	0015df40 	call	15df4 <epcs_enter_4_bytes_mode>
   1589c:	00000c06 	br	158d0 <epcs_sector_erase+0xa0>
  }
  else
  {
      se[0] = epcs_se;
   158a0:	00bff604 	movi	r2,-40
   158a4:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
   158a8:	e0bffe17 	ldw	r2,-8(fp)
   158ac:	1004d43a 	srli	r2,r2,16
   158b0:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
   158b4:	e0bffe17 	ldw	r2,-8(fp)
   158b8:	1004d23a 	srli	r2,r2,8
   158bc:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
   158c0:	e0bffe17 	ldw	r2,-8(fp)
   158c4:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
   158c8:	00800104 	movi	r2,4
   158cc:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
   158d0:	e13ffd17 	ldw	r4,-12(fp)
   158d4:	0015ae40 	call	15ae4 <epcs_write_enable>

  alt_avalon_spi_command(
   158d8:	e1bffb03 	ldbu	r6,-20(fp)
   158dc:	e1fffb44 	addi	r7,fp,-19
   158e0:	d8000015 	stw	zero,0(sp)
   158e4:	d8000115 	stw	zero,4(sp)
   158e8:	d8000215 	stw	zero,8(sp)
   158ec:	e13ffd17 	ldw	r4,-12(fp)
   158f0:	000b883a 	mov	r5,zero
   158f4:	00170940 	call	17094 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
   158f8:	e13ffd17 	ldw	r4,-12(fp)
   158fc:	00159280 	call	15928 <epcs_await_wip_released>

  if(four_bytes_mode)
   15900:	e0bfff17 	ldw	r2,-4(fp)
   15904:	1005003a 	cmpeq	r2,r2,zero
   15908:	1000021e 	bne	r2,zero,15914 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
   1590c:	e13ffd17 	ldw	r4,-12(fp)
   15910:	0015e4c0 	call	15e4c <epcs_exit_4_bytes_mode>
  }
}
   15914:	e037883a 	mov	sp,fp
   15918:	dfc00117 	ldw	ra,4(sp)
   1591c:	df000017 	ldw	fp,0(sp)
   15920:	dec00204 	addi	sp,sp,8
   15924:	f800283a 	ret

00015928 <epcs_await_wip_released>:
{
  return epcs_read_status_register(base) & 1;
}

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
   15928:	defffd04 	addi	sp,sp,-12
   1592c:	dfc00215 	stw	ra,8(sp)
   15930:	df000115 	stw	fp,4(sp)
   15934:	df000104 	addi	fp,sp,4
   15938:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
   1593c:	e13fff17 	ldw	r4,-4(fp)
   15940:	00159600 	call	15960 <epcs_test_wip>
   15944:	1004c03a 	cmpne	r2,r2,zero
   15948:	103ffc1e 	bne	r2,zero,1593c <epcs_await_wip_released+0x14>
  {
  }
}
   1594c:	e037883a 	mov	sp,fp
   15950:	dfc00117 	ldw	ra,4(sp)
   15954:	df000017 	ldw	fp,0(sp)
   15958:	dec00204 	addi	sp,sp,8
   1595c:	f800283a 	ret

00015960 <epcs_test_wip>:

  return status;
}

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
   15960:	defffd04 	addi	sp,sp,-12
   15964:	dfc00215 	stw	ra,8(sp)
   15968:	df000115 	stw	fp,4(sp)
   1596c:	df000104 	addi	fp,sp,4
   15970:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
   15974:	e13fff17 	ldw	r4,-4(fp)
   15978:	00157d00 	call	157d0 <epcs_read_status_register>
   1597c:	10803fcc 	andi	r2,r2,255
   15980:	1080004c 	andi	r2,r2,1
}
   15984:	e037883a 	mov	sp,fp
   15988:	dfc00117 	ldw	ra,4(sp)
   1598c:	df000017 	ldw	fp,0(sp)
   15990:	dec00204 	addi	sp,sp,8
   15994:	f800283a 	ret

00015998 <epcs_read_buffer>:
  }
}

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
   15998:	defff404 	addi	sp,sp,-48
   1599c:	dfc00b15 	stw	ra,44(sp)
   159a0:	df000a15 	stw	fp,40(sp)
   159a4:	df000a04 	addi	fp,sp,40
   159a8:	e13ffc15 	stw	r4,-16(fp)
   159ac:	e17ffd15 	stw	r5,-12(fp)
   159b0:	e1bffe15 	stw	r6,-8(fp)
   159b4:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
   159b8:	008000c4 	movi	r2,3
   159bc:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
   159c0:	e0800217 	ldw	r2,8(fp)
   159c4:	1005003a 	cmpeq	r2,r2,zero
   159c8:	10001c1e 	bne	r2,zero,15a3c <epcs_read_buffer+0xa4>
  {
        read_command[1] = (offset >> 24) & 0xFF;
   159cc:	e0bffd17 	ldw	r2,-12(fp)
   159d0:	1005d63a 	srai	r2,r2,24
   159d4:	1007883a 	mov	r3,r2
   159d8:	00bfffc4 	movi	r2,-1
   159dc:	1884703a 	and	r2,r3,r2
   159e0:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
   159e4:	e0bffd17 	ldw	r2,-12(fp)
   159e8:	1005d43a 	srai	r2,r2,16
   159ec:	1007883a 	mov	r3,r2
   159f0:	00bfffc4 	movi	r2,-1
   159f4:	1884703a 	and	r2,r3,r2
   159f8:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
   159fc:	e0bffd17 	ldw	r2,-12(fp)
   15a00:	1005d23a 	srai	r2,r2,8
   15a04:	1007883a 	mov	r3,r2
   15a08:	00bfffc4 	movi	r2,-1
   15a0c:	1884703a 	and	r2,r3,r2
   15a10:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
   15a14:	e0bffd17 	ldw	r2,-12(fp)
   15a18:	1007883a 	mov	r3,r2
   15a1c:	00bfffc4 	movi	r2,-1
   15a20:	1884703a 	and	r2,r3,r2
   15a24:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
   15a28:	00800144 	movi	r2,5
   15a2c:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
   15a30:	e13ffc17 	ldw	r4,-16(fp)
   15a34:	0015df40 	call	15df4 <epcs_enter_4_bytes_mode>
   15a38:	00001306 	br	15a88 <epcs_read_buffer+0xf0>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
   15a3c:	e0bffd17 	ldw	r2,-12(fp)
   15a40:	1005d43a 	srai	r2,r2,16
   15a44:	1007883a 	mov	r3,r2
   15a48:	00bfffc4 	movi	r2,-1
   15a4c:	1884703a 	and	r2,r3,r2
   15a50:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
   15a54:	e0bffd17 	ldw	r2,-12(fp)
   15a58:	1005d23a 	srai	r2,r2,8
   15a5c:	1007883a 	mov	r3,r2
   15a60:	00bfffc4 	movi	r2,-1
   15a64:	1884703a 	and	r2,r3,r2
   15a68:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
   15a6c:	e0bffd17 	ldw	r2,-12(fp)
   15a70:	1007883a 	mov	r3,r2
   15a74:	00bfffc4 	movi	r2,-1
   15a78:	1884703a 	and	r2,r3,r2
   15a7c:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
   15a80:	00800104 	movi	r2,4
   15a84:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
   15a88:	e13ffc17 	ldw	r4,-16(fp)
   15a8c:	00159280 	call	15928 <epcs_await_wip_released>

  alt_avalon_spi_command(
   15a90:	e0bfff17 	ldw	r2,-4(fp)
   15a94:	e1fffa04 	addi	r7,fp,-24
   15a98:	d8800015 	stw	r2,0(sp)
   15a9c:	e0bffe17 	ldw	r2,-8(fp)
   15aa0:	d8800115 	stw	r2,4(sp)
   15aa4:	d8000215 	stw	zero,8(sp)
   15aa8:	e13ffc17 	ldw	r4,-16(fp)
   15aac:	000b883a 	mov	r5,zero
   15ab0:	e1bff917 	ldw	r6,-28(fp)
   15ab4:	00170940 	call	17094 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
   15ab8:	e0800217 	ldw	r2,8(fp)
   15abc:	1005003a 	cmpeq	r2,r2,zero
   15ac0:	1000021e 	bne	r2,zero,15acc <epcs_read_buffer+0x134>
  {
    epcs_exit_4_bytes_mode(base);
   15ac4:	e13ffc17 	ldw	r4,-16(fp)
   15ac8:	0015e4c0 	call	15e4c <epcs_exit_4_bytes_mode>
  }

  return length;
   15acc:	e0bfff17 	ldw	r2,-4(fp)
}
   15ad0:	e037883a 	mov	sp,fp
   15ad4:	dfc00117 	ldw	ra,4(sp)
   15ad8:	df000017 	ldw	fp,0(sp)
   15adc:	dec00204 	addi	sp,sp,8
   15ae0:	f800283a 	ret

00015ae4 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
   15ae4:	defff904 	addi	sp,sp,-28
   15ae8:	dfc00615 	stw	ra,24(sp)
   15aec:	df000515 	stw	fp,20(sp)
   15af0:	df000504 	addi	fp,sp,20
   15af4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
   15af8:	00800184 	movi	r2,6
   15afc:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
   15b00:	d8000015 	stw	zero,0(sp)
   15b04:	d8000115 	stw	zero,4(sp)
   15b08:	d8000215 	stw	zero,8(sp)
   15b0c:	e13fff17 	ldw	r4,-4(fp)
   15b10:	000b883a 	mov	r5,zero
   15b14:	01800044 	movi	r6,1
   15b18:	e1fffe04 	addi	r7,fp,-8
   15b1c:	00170940 	call	17094 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
   15b20:	e037883a 	mov	sp,fp
   15b24:	dfc00117 	ldw	ra,4(sp)
   15b28:	df000017 	ldw	fp,0(sp)
   15b2c:	dec00204 	addi	sp,sp,8
   15b30:	f800283a 	ret

00015b34 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
   15b34:	defff804 	addi	sp,sp,-32
   15b38:	dfc00715 	stw	ra,28(sp)
   15b3c:	df000615 	stw	fp,24(sp)
   15b40:	df000604 	addi	fp,sp,24
   15b44:	e13ffe15 	stw	r4,-8(fp)
   15b48:	e17fff05 	stb	r5,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
   15b4c:	00800044 	movi	r2,1
   15b50:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
   15b54:	e0bfff03 	ldbu	r2,-4(fp)
   15b58:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
   15b5c:	d8000015 	stw	zero,0(sp)
   15b60:	d8000115 	stw	zero,4(sp)
   15b64:	d8000215 	stw	zero,8(sp)
   15b68:	e13ffe17 	ldw	r4,-8(fp)
   15b6c:	000b883a 	mov	r5,zero
   15b70:	01800084 	movi	r6,2
   15b74:	e1fffd04 	addi	r7,fp,-12
   15b78:	00170940 	call	17094 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
   15b7c:	e13ffe17 	ldw	r4,-8(fp)
   15b80:	00159280 	call	15928 <epcs_await_wip_released>
}
   15b84:	e037883a 	mov	sp,fp
   15b88:	dfc00117 	ldw	ra,4(sp)
   15b8c:	df000017 	ldw	fp,0(sp)
   15b90:	dec00204 	addi	sp,sp,8
   15b94:	f800283a 	ret

00015b98 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
   15b98:	defff404 	addi	sp,sp,-48
   15b9c:	dfc00b15 	stw	ra,44(sp)
   15ba0:	df000a15 	stw	fp,40(sp)
   15ba4:	df000a04 	addi	fp,sp,40
   15ba8:	e13ffc15 	stw	r4,-16(fp)
   15bac:	e17ffd15 	stw	r5,-12(fp)
   15bb0:	e1bffe15 	stw	r6,-8(fp)
   15bb4:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
   15bb8:	00800084 	movi	r2,2
   15bbc:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
   15bc0:	e0800217 	ldw	r2,8(fp)
   15bc4:	1005003a 	cmpeq	r2,r2,zero
   15bc8:	10001c1e 	bne	r2,zero,15c3c <epcs_write_buffer+0xa4>
  {
      pp[1] = (offset >> 24) & 0xFF;
   15bcc:	e0bffd17 	ldw	r2,-12(fp)
   15bd0:	1005d63a 	srai	r2,r2,24
   15bd4:	1007883a 	mov	r3,r2
   15bd8:	00bfffc4 	movi	r2,-1
   15bdc:	1884703a 	and	r2,r3,r2
   15be0:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
   15be4:	e0bffd17 	ldw	r2,-12(fp)
   15be8:	1005d43a 	srai	r2,r2,16
   15bec:	1007883a 	mov	r3,r2
   15bf0:	00bfffc4 	movi	r2,-1
   15bf4:	1884703a 	and	r2,r3,r2
   15bf8:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
   15bfc:	e0bffd17 	ldw	r2,-12(fp)
   15c00:	1005d23a 	srai	r2,r2,8
   15c04:	1007883a 	mov	r3,r2
   15c08:	00bfffc4 	movi	r2,-1
   15c0c:	1884703a 	and	r2,r3,r2
   15c10:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
   15c14:	e0bffd17 	ldw	r2,-12(fp)
   15c18:	1007883a 	mov	r3,r2
   15c1c:	00bfffc4 	movi	r2,-1
   15c20:	1884703a 	and	r2,r3,r2
   15c24:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
   15c28:	00800144 	movi	r2,5
   15c2c:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
   15c30:	e13ffc17 	ldw	r4,-16(fp)
   15c34:	0015df40 	call	15df4 <epcs_enter_4_bytes_mode>
   15c38:	00001306 	br	15c88 <epcs_write_buffer+0xf0>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
   15c3c:	e0bffd17 	ldw	r2,-12(fp)
   15c40:	1005d43a 	srai	r2,r2,16
   15c44:	1007883a 	mov	r3,r2
   15c48:	00bfffc4 	movi	r2,-1
   15c4c:	1884703a 	and	r2,r3,r2
   15c50:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
   15c54:	e0bffd17 	ldw	r2,-12(fp)
   15c58:	1005d23a 	srai	r2,r2,8
   15c5c:	1007883a 	mov	r3,r2
   15c60:	00bfffc4 	movi	r2,-1
   15c64:	1884703a 	and	r2,r3,r2
   15c68:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
   15c6c:	e0bffd17 	ldw	r2,-12(fp)
   15c70:	1007883a 	mov	r3,r2
   15c74:	00bfffc4 	movi	r2,-1
   15c78:	1884703a 	and	r2,r3,r2
   15c7c:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
   15c80:	00800104 	movi	r2,4
   15c84:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
   15c88:	e13ffc17 	ldw	r4,-16(fp)
   15c8c:	0015ae40 	call	15ae4 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
   15c90:	e1fffa04 	addi	r7,fp,-24
   15c94:	d8000015 	stw	zero,0(sp)
   15c98:	d8000115 	stw	zero,4(sp)
   15c9c:	00800044 	movi	r2,1
   15ca0:	d8800215 	stw	r2,8(sp)
   15ca4:	e13ffc17 	ldw	r4,-16(fp)
   15ca8:	000b883a 	mov	r5,zero
   15cac:	e1bff917 	ldw	r6,-28(fp)
   15cb0:	00170940 	call	17094 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
   15cb4:	e1bfff17 	ldw	r6,-4(fp)
   15cb8:	d8000015 	stw	zero,0(sp)
   15cbc:	d8000115 	stw	zero,4(sp)
   15cc0:	d8000215 	stw	zero,8(sp)
   15cc4:	e13ffc17 	ldw	r4,-16(fp)
   15cc8:	000b883a 	mov	r5,zero
   15ccc:	e1fffe17 	ldw	r7,-8(fp)
   15cd0:	00170940 	call	17094 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
   15cd4:	e13ffc17 	ldw	r4,-16(fp)
   15cd8:	00159280 	call	15928 <epcs_await_wip_released>

  if(four_bytes_mode)
   15cdc:	e0800217 	ldw	r2,8(fp)
   15ce0:	1005003a 	cmpeq	r2,r2,zero
   15ce4:	1000021e 	bne	r2,zero,15cf0 <epcs_write_buffer+0x158>
  {
    epcs_exit_4_bytes_mode(base);
   15ce8:	e13ffc17 	ldw	r4,-16(fp)
   15cec:	0015e4c0 	call	15e4c <epcs_exit_4_bytes_mode>
  }

  return length;
   15cf0:	e0bfff17 	ldw	r2,-4(fp)
}
   15cf4:	e037883a 	mov	sp,fp
   15cf8:	dfc00117 	ldw	ra,4(sp)
   15cfc:	df000017 	ldw	fp,0(sp)
   15d00:	dec00204 	addi	sp,sp,8
   15d04:	f800283a 	ret

00015d08 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
   15d08:	defff804 	addi	sp,sp,-32
   15d0c:	dfc00715 	stw	ra,28(sp)
   15d10:	df000615 	stw	fp,24(sp)
   15d14:	df000604 	addi	fp,sp,24
   15d18:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
   15d1c:	00bfeac4 	movi	r2,-85
   15d20:	e0bffd05 	stb	r2,-12(fp)
   15d24:	e03ffd45 	stb	zero,-11(fp)
   15d28:	e03ffd85 	stb	zero,-10(fp)
   15d2c:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
   15d30:	00800044 	movi	r2,1
   15d34:	d8800015 	stw	r2,0(sp)
   15d38:	e0bffe04 	addi	r2,fp,-8
   15d3c:	d8800115 	stw	r2,4(sp)
   15d40:	d8000215 	stw	zero,8(sp)
   15d44:	e13fff17 	ldw	r4,-4(fp)
   15d48:	000b883a 	mov	r5,zero
   15d4c:	01800104 	movi	r6,4
   15d50:	e1fffd04 	addi	r7,fp,-12
   15d54:	00170940 	call	17094 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
   15d58:	e0bffe03 	ldbu	r2,-8(fp)
   15d5c:	10803fcc 	andi	r2,r2,255
}
   15d60:	e037883a 	mov	sp,fp
   15d64:	dfc00117 	ldw	ra,4(sp)
   15d68:	df000017 	ldw	fp,0(sp)
   15d6c:	dec00204 	addi	sp,sp,8
   15d70:	f800283a 	ret

00015d74 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
   15d74:	defff904 	addi	sp,sp,-28
   15d78:	dfc00615 	stw	ra,24(sp)
   15d7c:	df000515 	stw	fp,20(sp)
   15d80:	df000504 	addi	fp,sp,20
   15d84:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
   15d88:	00bfe7c4 	movi	r2,-97
   15d8c:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
   15d90:	008000c4 	movi	r2,3
   15d94:	d8800015 	stw	r2,0(sp)
   15d98:	e0bffe44 	addi	r2,fp,-7
   15d9c:	d8800115 	stw	r2,4(sp)
   15da0:	d8000215 	stw	zero,8(sp)
   15da4:	e13fff17 	ldw	r4,-4(fp)
   15da8:	000b883a 	mov	r5,zero
   15dac:	01800044 	movi	r6,1
   15db0:	e1fffe04 	addi	r7,fp,-8
   15db4:	00170940 	call	17094 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
   15db8:	e0bffe43 	ldbu	r2,-7(fp)
   15dbc:	10803fcc 	andi	r2,r2,255
   15dc0:	1006943a 	slli	r3,r2,16
   15dc4:	e0bffe83 	ldbu	r2,-6(fp)
   15dc8:	10803fcc 	andi	r2,r2,255
   15dcc:	1004923a 	slli	r2,r2,8
   15dd0:	1886b03a 	or	r3,r3,r2
   15dd4:	e0bffec3 	ldbu	r2,-5(fp)
   15dd8:	10803fcc 	andi	r2,r2,255
   15ddc:	1884b03a 	or	r2,r3,r2
}
   15de0:	e037883a 	mov	sp,fp
   15de4:	dfc00117 	ldw	ra,4(sp)
   15de8:	df000017 	ldw	fp,0(sp)
   15dec:	dec00204 	addi	sp,sp,8
   15df0:	f800283a 	ret

00015df4 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
   15df4:	defff904 	addi	sp,sp,-28
   15df8:	dfc00615 	stw	ra,24(sp)
   15dfc:	df000515 	stw	fp,20(sp)
   15e00:	df000504 	addi	fp,sp,20
   15e04:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
   15e08:	00bfedc4 	movi	r2,-73
   15e0c:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
   15e10:	e13fff17 	ldw	r4,-4(fp)
   15e14:	0015ae40 	call	15ae4 <epcs_write_enable>

  alt_avalon_spi_command(
   15e18:	d8000015 	stw	zero,0(sp)
   15e1c:	d8000115 	stw	zero,4(sp)
   15e20:	d8000215 	stw	zero,8(sp)
   15e24:	e13fff17 	ldw	r4,-4(fp)
   15e28:	000b883a 	mov	r5,zero
   15e2c:	01800044 	movi	r6,1
   15e30:	e1fffe04 	addi	r7,fp,-8
   15e34:	00170940 	call	17094 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
   15e38:	e037883a 	mov	sp,fp
   15e3c:	dfc00117 	ldw	ra,4(sp)
   15e40:	df000017 	ldw	fp,0(sp)
   15e44:	dec00204 	addi	sp,sp,8
   15e48:	f800283a 	ret

00015e4c <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
   15e4c:	defff904 	addi	sp,sp,-28
   15e50:	dfc00615 	stw	ra,24(sp)
   15e54:	df000515 	stw	fp,20(sp)
   15e58:	df000504 	addi	fp,sp,20
   15e5c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
   15e60:	00bffa44 	movi	r2,-23
   15e64:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
   15e68:	e13fff17 	ldw	r4,-4(fp)
   15e6c:	0015ae40 	call	15ae4 <epcs_write_enable>

  alt_avalon_spi_command(
   15e70:	d8000015 	stw	zero,0(sp)
   15e74:	d8000115 	stw	zero,4(sp)
   15e78:	d8000215 	stw	zero,8(sp)
   15e7c:	e13fff17 	ldw	r4,-4(fp)
   15e80:	000b883a 	mov	r5,zero
   15e84:	01800044 	movi	r6,1
   15e88:	e1fffe04 	addi	r7,fp,-8
   15e8c:	00170940 	call	17094 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
   15e90:	e037883a 	mov	sp,fp
   15e94:	dfc00117 	ldw	ra,4(sp)
   15e98:	df000017 	ldw	fp,0(sp)
   15e9c:	dec00204 	addi	sp,sp,8
   15ea0:	f800283a 	ret

00015ea4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   15ea4:	defff404 	addi	sp,sp,-48
   15ea8:	df000b15 	stw	fp,44(sp)
   15eac:	df000b04 	addi	fp,sp,44
   15eb0:	e13ffb15 	stw	r4,-20(fp)
   15eb4:	e17ffc15 	stw	r5,-16(fp)
   15eb8:	e1bffd15 	stw	r6,-12(fp)
   15ebc:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   15ec0:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   15ec4:	008000b4 	movhi	r2,2
   15ec8:	10ade304 	addi	r2,r2,-18548
   15ecc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   15ed0:	1005003a 	cmpeq	r2,r2,zero
   15ed4:	1000411e 	bne	r2,zero,15fdc <alt_alarm_start+0x138>
  {
    if (alarm)
   15ed8:	e0bffb17 	ldw	r2,-20(fp)
   15edc:	1005003a 	cmpeq	r2,r2,zero
   15ee0:	10003b1e 	bne	r2,zero,15fd0 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   15ee4:	e0fffb17 	ldw	r3,-20(fp)
   15ee8:	e0bffd17 	ldw	r2,-12(fp)
   15eec:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   15ef0:	e0fffb17 	ldw	r3,-20(fp)
   15ef4:	e0bffe17 	ldw	r2,-8(fp)
   15ef8:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15efc:	0005303a 	rdctl	r2,status
   15f00:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15f04:	e0fff817 	ldw	r3,-32(fp)
   15f08:	00bfff84 	movi	r2,-2
   15f0c:	1884703a 	and	r2,r3,r2
   15f10:	1001703a 	wrctl	status,r2
  
  return context;
   15f14:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   15f18:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   15f1c:	008000b4 	movhi	r2,2
   15f20:	10ade404 	addi	r2,r2,-18544
   15f24:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   15f28:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   15f2c:	e0fffc17 	ldw	r3,-16(fp)
   15f30:	e0bff917 	ldw	r2,-28(fp)
   15f34:	1885883a 	add	r2,r3,r2
   15f38:	10c00044 	addi	r3,r2,1
   15f3c:	e0bffb17 	ldw	r2,-20(fp)
   15f40:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   15f44:	e0bffb17 	ldw	r2,-20(fp)
   15f48:	10c00217 	ldw	r3,8(r2)
   15f4c:	e0bff917 	ldw	r2,-28(fp)
   15f50:	1880042e 	bgeu	r3,r2,15f64 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   15f54:	e0fffb17 	ldw	r3,-20(fp)
   15f58:	00800044 	movi	r2,1
   15f5c:	18800405 	stb	r2,16(r3)
   15f60:	00000206 	br	15f6c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   15f64:	e0bffb17 	ldw	r2,-20(fp)
   15f68:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   15f6c:	e0fffb17 	ldw	r3,-20(fp)
   15f70:	008000b4 	movhi	r2,2
   15f74:	10a6b904 	addi	r2,r2,-25884
   15f78:	e0bff615 	stw	r2,-40(fp)
   15f7c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   15f80:	e0fff717 	ldw	r3,-36(fp)
   15f84:	e0bff617 	ldw	r2,-40(fp)
   15f88:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   15f8c:	e0bff617 	ldw	r2,-40(fp)
   15f90:	10c00017 	ldw	r3,0(r2)
   15f94:	e0bff717 	ldw	r2,-36(fp)
   15f98:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   15f9c:	e0bff617 	ldw	r2,-40(fp)
   15fa0:	10c00017 	ldw	r3,0(r2)
   15fa4:	e0bff717 	ldw	r2,-36(fp)
   15fa8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   15fac:	e0fff617 	ldw	r3,-40(fp)
   15fb0:	e0bff717 	ldw	r2,-36(fp)
   15fb4:	18800015 	stw	r2,0(r3)
   15fb8:	e0bffa17 	ldw	r2,-24(fp)
   15fbc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15fc0:	e0bff517 	ldw	r2,-44(fp)
   15fc4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   15fc8:	e03fff15 	stw	zero,-4(fp)
   15fcc:	00000506 	br	15fe4 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   15fd0:	00bffa84 	movi	r2,-22
   15fd4:	e0bfff15 	stw	r2,-4(fp)
   15fd8:	00000206 	br	15fe4 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   15fdc:	00bfde84 	movi	r2,-134
   15fe0:	e0bfff15 	stw	r2,-4(fp)
   15fe4:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   15fe8:	e037883a 	mov	sp,fp
   15fec:	df000017 	ldw	fp,0(sp)
   15ff0:	dec00104 	addi	sp,sp,4
   15ff4:	f800283a 	ret

00015ff8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   15ff8:	defffe04 	addi	sp,sp,-8
   15ffc:	df000115 	stw	fp,4(sp)
   16000:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   16004:	e03fff15 	stw	zero,-4(fp)
   16008:	00000506 	br	16020 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   1600c:	e0bfff17 	ldw	r2,-4(fp)
   16010:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   16014:	e0bfff17 	ldw	r2,-4(fp)
   16018:	10800804 	addi	r2,r2,32
   1601c:	e0bfff15 	stw	r2,-4(fp)
   16020:	e0bfff17 	ldw	r2,-4(fp)
   16024:	10810030 	cmpltui	r2,r2,1024
   16028:	103ff81e 	bne	r2,zero,1600c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1602c:	e037883a 	mov	sp,fp
   16030:	df000017 	ldw	fp,0(sp)
   16034:	dec00104 	addi	sp,sp,4
   16038:	f800283a 	ret

0001603c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1603c:	defff904 	addi	sp,sp,-28
   16040:	dfc00615 	stw	ra,24(sp)
   16044:	df000515 	stw	fp,20(sp)
   16048:	df000504 	addi	fp,sp,20
   1604c:	e13ffd15 	stw	r4,-12(fp)
   16050:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   16054:	e0bffd17 	ldw	r2,-12(fp)
   16058:	1005003a 	cmpeq	r2,r2,zero
   1605c:	1000041e 	bne	r2,zero,16070 <alt_dev_llist_insert+0x34>
   16060:	e0bffd17 	ldw	r2,-12(fp)
   16064:	10800217 	ldw	r2,8(r2)
   16068:	1004c03a 	cmpne	r2,r2,zero
   1606c:	1000071e 	bne	r2,zero,1608c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   16070:	00160f00 	call	160f0 <alt_get_errno>
   16074:	1007883a 	mov	r3,r2
   16078:	00800584 	movi	r2,22
   1607c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   16080:	00bffa84 	movi	r2,-22
   16084:	e0bfff15 	stw	r2,-4(fp)
   16088:	00001306 	br	160d8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1608c:	e0fffd17 	ldw	r3,-12(fp)
   16090:	e0bffe17 	ldw	r2,-8(fp)
   16094:	e0bffb15 	stw	r2,-20(fp)
   16098:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1609c:	e0fffc17 	ldw	r3,-16(fp)
   160a0:	e0bffb17 	ldw	r2,-20(fp)
   160a4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   160a8:	e0bffb17 	ldw	r2,-20(fp)
   160ac:	10c00017 	ldw	r3,0(r2)
   160b0:	e0bffc17 	ldw	r2,-16(fp)
   160b4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   160b8:	e0bffb17 	ldw	r2,-20(fp)
   160bc:	10c00017 	ldw	r3,0(r2)
   160c0:	e0bffc17 	ldw	r2,-16(fp)
   160c4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   160c8:	e0fffb17 	ldw	r3,-20(fp)
   160cc:	e0bffc17 	ldw	r2,-16(fp)
   160d0:	18800015 	stw	r2,0(r3)

  return 0;  
   160d4:	e03fff15 	stw	zero,-4(fp)
   160d8:	e0bfff17 	ldw	r2,-4(fp)
}
   160dc:	e037883a 	mov	sp,fp
   160e0:	dfc00117 	ldw	ra,4(sp)
   160e4:	df000017 	ldw	fp,0(sp)
   160e8:	dec00204 	addi	sp,sp,8
   160ec:	f800283a 	ret

000160f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   160f0:	defffd04 	addi	sp,sp,-12
   160f4:	dfc00215 	stw	ra,8(sp)
   160f8:	df000115 	stw	fp,4(sp)
   160fc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   16100:	008000b4 	movhi	r2,2
   16104:	10a69504 	addi	r2,r2,-26028
   16108:	10800017 	ldw	r2,0(r2)
   1610c:	1005003a 	cmpeq	r2,r2,zero
   16110:	1000061e 	bne	r2,zero,1612c <alt_get_errno+0x3c>
   16114:	008000b4 	movhi	r2,2
   16118:	10a69504 	addi	r2,r2,-26028
   1611c:	10800017 	ldw	r2,0(r2)
   16120:	103ee83a 	callr	r2
   16124:	e0bfff15 	stw	r2,-4(fp)
   16128:	00000306 	br	16138 <alt_get_errno+0x48>
   1612c:	008000b4 	movhi	r2,2
   16130:	10adc504 	addi	r2,r2,-18668
   16134:	e0bfff15 	stw	r2,-4(fp)
   16138:	e0bfff17 	ldw	r2,-4(fp)
}
   1613c:	e037883a 	mov	sp,fp
   16140:	dfc00117 	ldw	ra,4(sp)
   16144:	df000017 	ldw	fp,0(sp)
   16148:	dec00204 	addi	sp,sp,8
   1614c:	f800283a 	ret

00016150 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   16150:	defffd04 	addi	sp,sp,-12
   16154:	dfc00215 	stw	ra,8(sp)
   16158:	df000115 	stw	fp,4(sp)
   1615c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   16160:	00bfff04 	movi	r2,-4
   16164:	00c00074 	movhi	r3,1
   16168:	18de8704 	addi	r3,r3,31260
   1616c:	1885883a 	add	r2,r3,r2
   16170:	e0bfff15 	stw	r2,-4(fp)
   16174:	00000606 	br	16190 <_do_ctors+0x40>
        (*ctor) (); 
   16178:	e0bfff17 	ldw	r2,-4(fp)
   1617c:	10800017 	ldw	r2,0(r2)
   16180:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   16184:	e0bfff17 	ldw	r2,-4(fp)
   16188:	10bfff04 	addi	r2,r2,-4
   1618c:	e0bfff15 	stw	r2,-4(fp)
   16190:	e0ffff17 	ldw	r3,-4(fp)
   16194:	00800074 	movhi	r2,1
   16198:	109e8604 	addi	r2,r2,31256
   1619c:	18bff62e 	bgeu	r3,r2,16178 <_do_ctors+0x28>
        (*ctor) (); 
}
   161a0:	e037883a 	mov	sp,fp
   161a4:	dfc00117 	ldw	ra,4(sp)
   161a8:	df000017 	ldw	fp,0(sp)
   161ac:	dec00204 	addi	sp,sp,8
   161b0:	f800283a 	ret

000161b4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   161b4:	defffd04 	addi	sp,sp,-12
   161b8:	dfc00215 	stw	ra,8(sp)
   161bc:	df000115 	stw	fp,4(sp)
   161c0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   161c4:	00bfff04 	movi	r2,-4
   161c8:	00c00074 	movhi	r3,1
   161cc:	18de8704 	addi	r3,r3,31260
   161d0:	1885883a 	add	r2,r3,r2
   161d4:	e0bfff15 	stw	r2,-4(fp)
   161d8:	00000606 	br	161f4 <_do_dtors+0x40>
        (*dtor) (); 
   161dc:	e0bfff17 	ldw	r2,-4(fp)
   161e0:	10800017 	ldw	r2,0(r2)
   161e4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   161e8:	e0bfff17 	ldw	r2,-4(fp)
   161ec:	10bfff04 	addi	r2,r2,-4
   161f0:	e0bfff15 	stw	r2,-4(fp)
   161f4:	e0ffff17 	ldw	r3,-4(fp)
   161f8:	00800074 	movhi	r2,1
   161fc:	109e8704 	addi	r2,r2,31260
   16200:	18bff62e 	bgeu	r3,r2,161dc <_do_dtors+0x28>
        (*dtor) (); 
}
   16204:	e037883a 	mov	sp,fp
   16208:	dfc00117 	ldw	ra,4(sp)
   1620c:	df000017 	ldw	fp,0(sp)
   16210:	dec00204 	addi	sp,sp,8
   16214:	f800283a 	ret

00016218 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
   16218:	defffb04 	addi	sp,sp,-20
   1621c:	dfc00415 	stw	ra,16(sp)
   16220:	df000315 	stw	fp,12(sp)
   16224:	df000304 	addi	fp,sp,12
   16228:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
   1622c:	e13ffe17 	ldw	r4,-8(fp)
   16230:	d1602c04 	addi	r5,gp,-32592
   16234:	00172cc0 	call	172cc <alt_find_dev>
   16238:	e0bffd15 	stw	r2,-12(fp)

  if ((dev) && dev->open)
   1623c:	e0bffd17 	ldw	r2,-12(fp)
   16240:	1005003a 	cmpeq	r2,r2,zero
   16244:	10000b1e 	bne	r2,zero,16274 <alt_flash_open_dev+0x5c>
   16248:	e0bffd17 	ldw	r2,-12(fp)
   1624c:	10800317 	ldw	r2,12(r2)
   16250:	1005003a 	cmpeq	r2,r2,zero
   16254:	1000071e 	bne	r2,zero,16274 <alt_flash_open_dev+0x5c>
  {
    return dev->open(dev, name);
   16258:	e0bffd17 	ldw	r2,-12(fp)
   1625c:	10800317 	ldw	r2,12(r2)
   16260:	e13ffd17 	ldw	r4,-12(fp)
   16264:	e17ffe17 	ldw	r5,-8(fp)
   16268:	103ee83a 	callr	r2
   1626c:	e0bfff15 	stw	r2,-4(fp)
   16270:	00000206 	br	1627c <alt_flash_open_dev+0x64>
  }

  return dev;
   16274:	e0bffd17 	ldw	r2,-12(fp)
   16278:	e0bfff15 	stw	r2,-4(fp)
   1627c:	e0bfff17 	ldw	r2,-4(fp)
}
   16280:	e037883a 	mov	sp,fp
   16284:	dfc00117 	ldw	ra,4(sp)
   16288:	df000017 	ldw	fp,0(sp)
   1628c:	dec00204 	addi	sp,sp,8
   16290:	f800283a 	ret

00016294 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
   16294:	defffd04 	addi	sp,sp,-12
   16298:	dfc00215 	stw	ra,8(sp)
   1629c:	df000115 	stw	fp,4(sp)
   162a0:	df000104 	addi	fp,sp,4
   162a4:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
   162a8:	e0bfff17 	ldw	r2,-4(fp)
   162ac:	1005003a 	cmpeq	r2,r2,zero
   162b0:	1000081e 	bne	r2,zero,162d4 <alt_flash_close_dev+0x40>
   162b4:	e0bfff17 	ldw	r2,-4(fp)
   162b8:	10800417 	ldw	r2,16(r2)
   162bc:	1005003a 	cmpeq	r2,r2,zero
   162c0:	1000041e 	bne	r2,zero,162d4 <alt_flash_close_dev+0x40>
  {
    fd->close(fd);
   162c4:	e0bfff17 	ldw	r2,-4(fp)
   162c8:	10800417 	ldw	r2,16(r2)
   162cc:	e13fff17 	ldw	r4,-4(fp)
   162d0:	103ee83a 	callr	r2
  }
  return;
}
   162d4:	e037883a 	mov	sp,fp
   162d8:	dfc00117 	ldw	ra,4(sp)
   162dc:	df000017 	ldw	fp,0(sp)
   162e0:	dec00204 	addi	sp,sp,8
   162e4:	f800283a 	ret

000162e8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   162e8:	defffe04 	addi	sp,sp,-8
   162ec:	dfc00115 	stw	ra,4(sp)
   162f0:	df000015 	stw	fp,0(sp)
   162f4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   162f8:	0009883a 	mov	r4,zero
   162fc:	01410004 	movi	r5,1024
   16300:	00175740 	call	17574 <alt_icache_flush>
#endif
}
   16304:	e037883a 	mov	sp,fp
   16308:	dfc00117 	ldw	ra,4(sp)
   1630c:	df000017 	ldw	fp,0(sp)
   16310:	dec00204 	addi	sp,sp,8
   16314:	f800283a 	ret

00016318 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   16318:	defff904 	addi	sp,sp,-28
   1631c:	dfc00615 	stw	ra,24(sp)
   16320:	df000515 	stw	fp,20(sp)
   16324:	df000504 	addi	fp,sp,20
   16328:	e13ffc15 	stw	r4,-16(fp)
   1632c:	e17ffd15 	stw	r5,-12(fp)
   16330:	e1bffe15 	stw	r6,-8(fp)
   16334:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   16338:	e0800217 	ldw	r2,8(fp)
   1633c:	d8800015 	stw	r2,0(sp)
   16340:	e13ffc17 	ldw	r4,-16(fp)
   16344:	e17ffd17 	ldw	r5,-12(fp)
   16348:	e1bffe17 	ldw	r6,-8(fp)
   1634c:	e1ffff17 	ldw	r7,-4(fp)
   16350:	00164ec0 	call	164ec <alt_iic_isr_register>
}  
   16354:	e037883a 	mov	sp,fp
   16358:	dfc00117 	ldw	ra,4(sp)
   1635c:	df000017 	ldw	fp,0(sp)
   16360:	dec00204 	addi	sp,sp,8
   16364:	f800283a 	ret

00016368 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   16368:	defff904 	addi	sp,sp,-28
   1636c:	df000615 	stw	fp,24(sp)
   16370:	df000604 	addi	fp,sp,24
   16374:	e13ffe15 	stw	r4,-8(fp)
   16378:	e17fff15 	stw	r5,-4(fp)
   1637c:	e0bfff17 	ldw	r2,-4(fp)
   16380:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16384:	0005303a 	rdctl	r2,status
   16388:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1638c:	e0fffb17 	ldw	r3,-20(fp)
   16390:	00bfff84 	movi	r2,-2
   16394:	1884703a 	and	r2,r3,r2
   16398:	1001703a 	wrctl	status,r2
  
  return context;
   1639c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   163a0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   163a4:	e0fffc17 	ldw	r3,-16(fp)
   163a8:	00800044 	movi	r2,1
   163ac:	10c4983a 	sll	r2,r2,r3
   163b0:	1007883a 	mov	r3,r2
   163b4:	008000b4 	movhi	r2,2
   163b8:	10ade204 	addi	r2,r2,-18552
   163bc:	10800017 	ldw	r2,0(r2)
   163c0:	1886b03a 	or	r3,r3,r2
   163c4:	008000b4 	movhi	r2,2
   163c8:	10ade204 	addi	r2,r2,-18552
   163cc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   163d0:	008000b4 	movhi	r2,2
   163d4:	10ade204 	addi	r2,r2,-18552
   163d8:	10800017 	ldw	r2,0(r2)
   163dc:	100170fa 	wrctl	ienable,r2
   163e0:	e0bffd17 	ldw	r2,-12(fp)
   163e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   163e8:	e0bffa17 	ldw	r2,-24(fp)
   163ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   163f0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   163f4:	e037883a 	mov	sp,fp
   163f8:	df000017 	ldw	fp,0(sp)
   163fc:	dec00104 	addi	sp,sp,4
   16400:	f800283a 	ret

00016404 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   16404:	defff904 	addi	sp,sp,-28
   16408:	df000615 	stw	fp,24(sp)
   1640c:	df000604 	addi	fp,sp,24
   16410:	e13ffe15 	stw	r4,-8(fp)
   16414:	e17fff15 	stw	r5,-4(fp)
   16418:	e0bfff17 	ldw	r2,-4(fp)
   1641c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16420:	0005303a 	rdctl	r2,status
   16424:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16428:	e0fffb17 	ldw	r3,-20(fp)
   1642c:	00bfff84 	movi	r2,-2
   16430:	1884703a 	and	r2,r3,r2
   16434:	1001703a 	wrctl	status,r2
  
  return context;
   16438:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1643c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   16440:	e0fffc17 	ldw	r3,-16(fp)
   16444:	00800044 	movi	r2,1
   16448:	10c4983a 	sll	r2,r2,r3
   1644c:	0084303a 	nor	r2,zero,r2
   16450:	1007883a 	mov	r3,r2
   16454:	008000b4 	movhi	r2,2
   16458:	10ade204 	addi	r2,r2,-18552
   1645c:	10800017 	ldw	r2,0(r2)
   16460:	1886703a 	and	r3,r3,r2
   16464:	008000b4 	movhi	r2,2
   16468:	10ade204 	addi	r2,r2,-18552
   1646c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   16470:	008000b4 	movhi	r2,2
   16474:	10ade204 	addi	r2,r2,-18552
   16478:	10800017 	ldw	r2,0(r2)
   1647c:	100170fa 	wrctl	ienable,r2
   16480:	e0bffd17 	ldw	r2,-12(fp)
   16484:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16488:	e0bffa17 	ldw	r2,-24(fp)
   1648c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   16490:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   16494:	e037883a 	mov	sp,fp
   16498:	df000017 	ldw	fp,0(sp)
   1649c:	dec00104 	addi	sp,sp,4
   164a0:	f800283a 	ret

000164a4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   164a4:	defffc04 	addi	sp,sp,-16
   164a8:	df000315 	stw	fp,12(sp)
   164ac:	df000304 	addi	fp,sp,12
   164b0:	e13ffe15 	stw	r4,-8(fp)
   164b4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   164b8:	000530fa 	rdctl	r2,ienable
   164bc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   164c0:	e0ffff17 	ldw	r3,-4(fp)
   164c4:	00800044 	movi	r2,1
   164c8:	10c4983a 	sll	r2,r2,r3
   164cc:	1007883a 	mov	r3,r2
   164d0:	e0bffd17 	ldw	r2,-12(fp)
   164d4:	1884703a 	and	r2,r3,r2
   164d8:	1004c03a 	cmpne	r2,r2,zero
}
   164dc:	e037883a 	mov	sp,fp
   164e0:	df000017 	ldw	fp,0(sp)
   164e4:	dec00104 	addi	sp,sp,4
   164e8:	f800283a 	ret

000164ec <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   164ec:	defff404 	addi	sp,sp,-48
   164f0:	dfc00b15 	stw	ra,44(sp)
   164f4:	df000a15 	stw	fp,40(sp)
   164f8:	df000a04 	addi	fp,sp,40
   164fc:	e13ffb15 	stw	r4,-20(fp)
   16500:	e17ffc15 	stw	r5,-16(fp)
   16504:	e1bffd15 	stw	r6,-12(fp)
   16508:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   1650c:	00bffa84 	movi	r2,-22
   16510:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   16514:	e0bffc17 	ldw	r2,-16(fp)
   16518:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1651c:	e0bff917 	ldw	r2,-28(fp)
   16520:	10800808 	cmpgei	r2,r2,32
   16524:	1000291e 	bne	r2,zero,165cc <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16528:	0005303a 	rdctl	r2,status
   1652c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16530:	e0fff717 	ldw	r3,-36(fp)
   16534:	00bfff84 	movi	r2,-2
   16538:	1884703a 	and	r2,r3,r2
   1653c:	1001703a 	wrctl	status,r2
  
  return context;
   16540:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   16544:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   16548:	e0bff917 	ldw	r2,-28(fp)
   1654c:	00c000b4 	movhi	r3,2
   16550:	18ca9104 	addi	r3,r3,10820
   16554:	100490fa 	slli	r2,r2,3
   16558:	10c7883a 	add	r3,r2,r3
   1655c:	e0bffd17 	ldw	r2,-12(fp)
   16560:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   16564:	e0bff917 	ldw	r2,-28(fp)
   16568:	00c000b4 	movhi	r3,2
   1656c:	18ca9104 	addi	r3,r3,10820
   16570:	100490fa 	slli	r2,r2,3
   16574:	10c5883a 	add	r2,r2,r3
   16578:	10c00104 	addi	r3,r2,4
   1657c:	e0bffe17 	ldw	r2,-8(fp)
   16580:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   16584:	e0bffd17 	ldw	r2,-12(fp)
   16588:	1005003a 	cmpeq	r2,r2,zero
   1658c:	1000051e 	bne	r2,zero,165a4 <alt_iic_isr_register+0xb8>
   16590:	e17ff917 	ldw	r5,-28(fp)
   16594:	e13ffb17 	ldw	r4,-20(fp)
   16598:	00163680 	call	16368 <alt_ic_irq_enable>
   1659c:	e0bfff15 	stw	r2,-4(fp)
   165a0:	00000406 	br	165b4 <alt_iic_isr_register+0xc8>
   165a4:	e17ff917 	ldw	r5,-28(fp)
   165a8:	e13ffb17 	ldw	r4,-20(fp)
   165ac:	00164040 	call	16404 <alt_ic_irq_disable>
   165b0:	e0bfff15 	stw	r2,-4(fp)
   165b4:	e0bfff17 	ldw	r2,-4(fp)
   165b8:	e0bffa15 	stw	r2,-24(fp)
   165bc:	e0bff817 	ldw	r2,-32(fp)
   165c0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   165c4:	e0bff617 	ldw	r2,-40(fp)
   165c8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   165cc:	e0bffa17 	ldw	r2,-24(fp)
}
   165d0:	e037883a 	mov	sp,fp
   165d4:	dfc00117 	ldw	ra,4(sp)
   165d8:	df000017 	ldw	fp,0(sp)
   165dc:	dec00204 	addi	sp,sp,8
   165e0:	f800283a 	ret

000165e4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   165e4:	defff904 	addi	sp,sp,-28
   165e8:	dfc00615 	stw	ra,24(sp)
   165ec:	df000515 	stw	fp,20(sp)
   165f0:	df000504 	addi	fp,sp,20
   165f4:	e13ffc15 	stw	r4,-16(fp)
   165f8:	e17ffd15 	stw	r5,-12(fp)
   165fc:	e1bffe15 	stw	r6,-8(fp)
   16600:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   16604:	e13ffd17 	ldw	r4,-12(fp)
   16608:	e17ffe17 	ldw	r5,-8(fp)
   1660c:	e1bfff17 	ldw	r6,-4(fp)
   16610:	00167fc0 	call	167fc <open>
   16614:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   16618:	e0bffb17 	ldw	r2,-20(fp)
   1661c:	1004803a 	cmplt	r2,r2,zero
   16620:	10001c1e 	bne	r2,zero,16694 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   16624:	e0bffb17 	ldw	r2,-20(fp)
   16628:	00c000b4 	movhi	r3,2
   1662c:	18e1dd04 	addi	r3,r3,-30860
   16630:	10800324 	muli	r2,r2,12
   16634:	10c5883a 	add	r2,r2,r3
   16638:	10c00017 	ldw	r3,0(r2)
   1663c:	e0bffc17 	ldw	r2,-16(fp)
   16640:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   16644:	e0bffb17 	ldw	r2,-20(fp)
   16648:	00c000b4 	movhi	r3,2
   1664c:	18e1dd04 	addi	r3,r3,-30860
   16650:	10800324 	muli	r2,r2,12
   16654:	10c5883a 	add	r2,r2,r3
   16658:	10800104 	addi	r2,r2,4
   1665c:	10c00017 	ldw	r3,0(r2)
   16660:	e0bffc17 	ldw	r2,-16(fp)
   16664:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   16668:	e0bffb17 	ldw	r2,-20(fp)
   1666c:	00c000b4 	movhi	r3,2
   16670:	18e1dd04 	addi	r3,r3,-30860
   16674:	10800324 	muli	r2,r2,12
   16678:	10c5883a 	add	r2,r2,r3
   1667c:	10800204 	addi	r2,r2,8
   16680:	10c00017 	ldw	r3,0(r2)
   16684:	e0bffc17 	ldw	r2,-16(fp)
   16688:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1668c:	e13ffb17 	ldw	r4,-20(fp)
   16690:	000b6780 	call	b678 <alt_release_fd>
  }
} 
   16694:	e037883a 	mov	sp,fp
   16698:	dfc00117 	ldw	ra,4(sp)
   1669c:	df000017 	ldw	fp,0(sp)
   166a0:	dec00204 	addi	sp,sp,8
   166a4:	f800283a 	ret

000166a8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   166a8:	defffb04 	addi	sp,sp,-20
   166ac:	dfc00415 	stw	ra,16(sp)
   166b0:	df000315 	stw	fp,12(sp)
   166b4:	df000304 	addi	fp,sp,12
   166b8:	e13ffd15 	stw	r4,-12(fp)
   166bc:	e17ffe15 	stw	r5,-8(fp)
   166c0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   166c4:	010000b4 	movhi	r4,2
   166c8:	2121e004 	addi	r4,r4,-30848
   166cc:	e17ffd17 	ldw	r5,-12(fp)
   166d0:	01800044 	movi	r6,1
   166d4:	01c07fc4 	movi	r7,511
   166d8:	00165e40 	call	165e4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   166dc:	010000b4 	movhi	r4,2
   166e0:	2121dd04 	addi	r4,r4,-30860
   166e4:	e17ffe17 	ldw	r5,-8(fp)
   166e8:	000d883a 	mov	r6,zero
   166ec:	01c07fc4 	movi	r7,511
   166f0:	00165e40 	call	165e4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   166f4:	010000b4 	movhi	r4,2
   166f8:	2121e304 	addi	r4,r4,-30836
   166fc:	e17fff17 	ldw	r5,-4(fp)
   16700:	01800044 	movi	r6,1
   16704:	01c07fc4 	movi	r7,511
   16708:	00165e40 	call	165e4 <alt_open_fd>
}  
   1670c:	e037883a 	mov	sp,fp
   16710:	dfc00117 	ldw	ra,4(sp)
   16714:	df000017 	ldw	fp,0(sp)
   16718:	dec00204 	addi	sp,sp,8
   1671c:	f800283a 	ret

00016720 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   16720:	defffc04 	addi	sp,sp,-16
   16724:	df000315 	stw	fp,12(sp)
   16728:	df000304 	addi	fp,sp,12
   1672c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   16730:	e0bffe17 	ldw	r2,-8(fp)
   16734:	10800217 	ldw	r2,8(r2)
   16738:	10d00034 	orhi	r3,r2,16384
   1673c:	e0bffe17 	ldw	r2,-8(fp)
   16740:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   16744:	e03ffd15 	stw	zero,-12(fp)
   16748:	00002006 	br	167cc <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1674c:	e0bffd17 	ldw	r2,-12(fp)
   16750:	00c000b4 	movhi	r3,2
   16754:	18e1dd04 	addi	r3,r3,-30860
   16758:	10800324 	muli	r2,r2,12
   1675c:	10c5883a 	add	r2,r2,r3
   16760:	10c00017 	ldw	r3,0(r2)
   16764:	e0bffe17 	ldw	r2,-8(fp)
   16768:	10800017 	ldw	r2,0(r2)
   1676c:	1880141e 	bne	r3,r2,167c0 <alt_file_locked+0xa0>
   16770:	e0bffd17 	ldw	r2,-12(fp)
   16774:	00c000b4 	movhi	r3,2
   16778:	18e1dd04 	addi	r3,r3,-30860
   1677c:	10800324 	muli	r2,r2,12
   16780:	10c5883a 	add	r2,r2,r3
   16784:	10800204 	addi	r2,r2,8
   16788:	10800017 	ldw	r2,0(r2)
   1678c:	1004403a 	cmpge	r2,r2,zero
   16790:	10000b1e 	bne	r2,zero,167c0 <alt_file_locked+0xa0>
   16794:	e0bffd17 	ldw	r2,-12(fp)
   16798:	10800324 	muli	r2,r2,12
   1679c:	1007883a 	mov	r3,r2
   167a0:	008000b4 	movhi	r2,2
   167a4:	10a1dd04 	addi	r2,r2,-30860
   167a8:	1887883a 	add	r3,r3,r2
   167ac:	e0bffe17 	ldw	r2,-8(fp)
   167b0:	18800326 	beq	r3,r2,167c0 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   167b4:	00bffcc4 	movi	r2,-13
   167b8:	e0bfff15 	stw	r2,-4(fp)
   167bc:	00000a06 	br	167e8 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   167c0:	e0bffd17 	ldw	r2,-12(fp)
   167c4:	10800044 	addi	r2,r2,1
   167c8:	e0bffd15 	stw	r2,-12(fp)
   167cc:	008000b4 	movhi	r2,2
   167d0:	10a69404 	addi	r2,r2,-26032
   167d4:	10800017 	ldw	r2,0(r2)
   167d8:	1007883a 	mov	r3,r2
   167dc:	e0bffd17 	ldw	r2,-12(fp)
   167e0:	18bfda2e 	bgeu	r3,r2,1674c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   167e4:	e03fff15 	stw	zero,-4(fp)
   167e8:	e0bfff17 	ldw	r2,-4(fp)
}
   167ec:	e037883a 	mov	sp,fp
   167f0:	df000017 	ldw	fp,0(sp)
   167f4:	dec00104 	addi	sp,sp,4
   167f8:	f800283a 	ret

000167fc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   167fc:	defff404 	addi	sp,sp,-48
   16800:	dfc00b15 	stw	ra,44(sp)
   16804:	df000a15 	stw	fp,40(sp)
   16808:	df000a04 	addi	fp,sp,40
   1680c:	e13ffb15 	stw	r4,-20(fp)
   16810:	e17ffc15 	stw	r5,-16(fp)
   16814:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   16818:	00bfffc4 	movi	r2,-1
   1681c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   16820:	00bffb44 	movi	r2,-19
   16824:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   16828:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1682c:	e13ffb17 	ldw	r4,-20(fp)
   16830:	014000b4 	movhi	r5,2
   16834:	29669204 	addi	r5,r5,-26040
   16838:	00172cc0 	call	172cc <alt_find_dev>
   1683c:	e0bffa15 	stw	r2,-24(fp)
   16840:	e0bffa17 	ldw	r2,-24(fp)
   16844:	1004c03a 	cmpne	r2,r2,zero
   16848:	1000051e 	bne	r2,zero,16860 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1684c:	e13ffb17 	ldw	r4,-20(fp)
   16850:	00173600 	call	17360 <alt_find_file>
   16854:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   16858:	00800044 	movi	r2,1
   1685c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   16860:	e0bffa17 	ldw	r2,-24(fp)
   16864:	1005003a 	cmpeq	r2,r2,zero
   16868:	1000301e 	bne	r2,zero,1692c <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1686c:	e13ffa17 	ldw	r4,-24(fp)
   16870:	00174800 	call	17480 <alt_get_fd>
   16874:	e0bff815 	stw	r2,-32(fp)
   16878:	e0bff817 	ldw	r2,-32(fp)
   1687c:	1004403a 	cmpge	r2,r2,zero
   16880:	1000031e 	bne	r2,zero,16890 <open+0x94>
    {
      status = index;
   16884:	e0bff817 	ldw	r2,-32(fp)
   16888:	e0bff715 	stw	r2,-36(fp)
   1688c:	00002906 	br	16934 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   16890:	e0bff817 	ldw	r2,-32(fp)
   16894:	10800324 	muli	r2,r2,12
   16898:	1007883a 	mov	r3,r2
   1689c:	008000b4 	movhi	r2,2
   168a0:	10a1dd04 	addi	r2,r2,-30860
   168a4:	1885883a 	add	r2,r3,r2
   168a8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   168ac:	e0fffc17 	ldw	r3,-16(fp)
   168b0:	00900034 	movhi	r2,16384
   168b4:	10bfffc4 	addi	r2,r2,-1
   168b8:	1886703a 	and	r3,r3,r2
   168bc:	e0bff917 	ldw	r2,-28(fp)
   168c0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   168c4:	e0bff617 	ldw	r2,-40(fp)
   168c8:	1004c03a 	cmpne	r2,r2,zero
   168cc:	1000061e 	bne	r2,zero,168e8 <open+0xec>
   168d0:	e13ff917 	ldw	r4,-28(fp)
   168d4:	00167200 	call	16720 <alt_file_locked>
   168d8:	e0bff715 	stw	r2,-36(fp)
   168dc:	e0bff717 	ldw	r2,-36(fp)
   168e0:	1004803a 	cmplt	r2,r2,zero
   168e4:	1000131e 	bne	r2,zero,16934 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   168e8:	e0bffa17 	ldw	r2,-24(fp)
   168ec:	10800317 	ldw	r2,12(r2)
   168f0:	1005003a 	cmpeq	r2,r2,zero
   168f4:	1000091e 	bne	r2,zero,1691c <open+0x120>
   168f8:	e0bffa17 	ldw	r2,-24(fp)
   168fc:	10800317 	ldw	r2,12(r2)
   16900:	e13ff917 	ldw	r4,-28(fp)
   16904:	e17ffb17 	ldw	r5,-20(fp)
   16908:	e1bffc17 	ldw	r6,-16(fp)
   1690c:	e1fffd17 	ldw	r7,-12(fp)
   16910:	103ee83a 	callr	r2
   16914:	e0bfff15 	stw	r2,-4(fp)
   16918:	00000106 	br	16920 <open+0x124>
   1691c:	e03fff15 	stw	zero,-4(fp)
   16920:	e0bfff17 	ldw	r2,-4(fp)
   16924:	e0bff715 	stw	r2,-36(fp)
   16928:	00000206 	br	16934 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1692c:	00bffb44 	movi	r2,-19
   16930:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   16934:	e0bff717 	ldw	r2,-36(fp)
   16938:	1004403a 	cmpge	r2,r2,zero
   1693c:	1000091e 	bne	r2,zero,16964 <open+0x168>
  {
    alt_release_fd (index);  
   16940:	e13ff817 	ldw	r4,-32(fp)
   16944:	000b6780 	call	b678 <alt_release_fd>
    ALT_ERRNO = -status;
   16948:	00169840 	call	16984 <alt_get_errno>
   1694c:	e0fff717 	ldw	r3,-36(fp)
   16950:	00c7c83a 	sub	r3,zero,r3
   16954:	10c00015 	stw	r3,0(r2)
    return -1;
   16958:	00bfffc4 	movi	r2,-1
   1695c:	e0bffe15 	stw	r2,-8(fp)
   16960:	00000206 	br	1696c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   16964:	e0bff817 	ldw	r2,-32(fp)
   16968:	e0bffe15 	stw	r2,-8(fp)
   1696c:	e0bffe17 	ldw	r2,-8(fp)
}
   16970:	e037883a 	mov	sp,fp
   16974:	dfc00117 	ldw	ra,4(sp)
   16978:	df000017 	ldw	fp,0(sp)
   1697c:	dec00204 	addi	sp,sp,8
   16980:	f800283a 	ret

00016984 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   16984:	defffd04 	addi	sp,sp,-12
   16988:	dfc00215 	stw	ra,8(sp)
   1698c:	df000115 	stw	fp,4(sp)
   16990:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   16994:	008000b4 	movhi	r2,2
   16998:	10a69504 	addi	r2,r2,-26028
   1699c:	10800017 	ldw	r2,0(r2)
   169a0:	1005003a 	cmpeq	r2,r2,zero
   169a4:	1000061e 	bne	r2,zero,169c0 <alt_get_errno+0x3c>
   169a8:	008000b4 	movhi	r2,2
   169ac:	10a69504 	addi	r2,r2,-26028
   169b0:	10800017 	ldw	r2,0(r2)
   169b4:	103ee83a 	callr	r2
   169b8:	e0bfff15 	stw	r2,-4(fp)
   169bc:	00000306 	br	169cc <alt_get_errno+0x48>
   169c0:	008000b4 	movhi	r2,2
   169c4:	10adc504 	addi	r2,r2,-18668
   169c8:	e0bfff15 	stw	r2,-4(fp)
   169cc:	e0bfff17 	ldw	r2,-4(fp)
}
   169d0:	e037883a 	mov	sp,fp
   169d4:	dfc00117 	ldw	ra,4(sp)
   169d8:	df000017 	ldw	fp,0(sp)
   169dc:	dec00204 	addi	sp,sp,8
   169e0:	f800283a 	ret

000169e4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   169e4:	defffa04 	addi	sp,sp,-24
   169e8:	df000515 	stw	fp,20(sp)
   169ec:	df000504 	addi	fp,sp,20
   169f0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   169f4:	0005303a 	rdctl	r2,status
   169f8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   169fc:	e0fffd17 	ldw	r3,-12(fp)
   16a00:	00bfff84 	movi	r2,-2
   16a04:	1884703a 	and	r2,r3,r2
   16a08:	1001703a 	wrctl	status,r2
  
  return context;
   16a0c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   16a10:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   16a14:	e0bfff17 	ldw	r2,-4(fp)
   16a18:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   16a1c:	e0bffc17 	ldw	r2,-16(fp)
   16a20:	10c00017 	ldw	r3,0(r2)
   16a24:	e0bffc17 	ldw	r2,-16(fp)
   16a28:	10800117 	ldw	r2,4(r2)
   16a2c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   16a30:	e0bffc17 	ldw	r2,-16(fp)
   16a34:	10c00117 	ldw	r3,4(r2)
   16a38:	e0bffc17 	ldw	r2,-16(fp)
   16a3c:	10800017 	ldw	r2,0(r2)
   16a40:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   16a44:	e0fffc17 	ldw	r3,-16(fp)
   16a48:	e0bffc17 	ldw	r2,-16(fp)
   16a4c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   16a50:	e0fffc17 	ldw	r3,-16(fp)
   16a54:	e0bffc17 	ldw	r2,-16(fp)
   16a58:	18800015 	stw	r2,0(r3)
   16a5c:	e0bffe17 	ldw	r2,-8(fp)
   16a60:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16a64:	e0bffb17 	ldw	r2,-20(fp)
   16a68:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   16a6c:	e037883a 	mov	sp,fp
   16a70:	df000017 	ldw	fp,0(sp)
   16a74:	dec00104 	addi	sp,sp,4
   16a78:	f800283a 	ret

00016a7c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   16a7c:	defffb04 	addi	sp,sp,-20
   16a80:	dfc00415 	stw	ra,16(sp)
   16a84:	df000315 	stw	fp,12(sp)
   16a88:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   16a8c:	d0a02f17 	ldw	r2,-32580(gp)
   16a90:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   16a94:	d0a75a17 	ldw	r2,-25240(gp)
   16a98:	10800044 	addi	r2,r2,1
   16a9c:	d0a75a15 	stw	r2,-25240(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   16aa0:	00003106 	br	16b68 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   16aa4:	e0bffe17 	ldw	r2,-8(fp)
   16aa8:	10800017 	ldw	r2,0(r2)
   16aac:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   16ab0:	e0bffe17 	ldw	r2,-8(fp)
   16ab4:	10800403 	ldbu	r2,16(r2)
   16ab8:	10803fcc 	andi	r2,r2,255
   16abc:	1005003a 	cmpeq	r2,r2,zero
   16ac0:	1000051e 	bne	r2,zero,16ad8 <alt_tick+0x5c>
   16ac4:	d0a75a17 	ldw	r2,-25240(gp)
   16ac8:	1004c03a 	cmpne	r2,r2,zero
   16acc:	1000021e 	bne	r2,zero,16ad8 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   16ad0:	e0bffe17 	ldw	r2,-8(fp)
   16ad4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   16ad8:	e0bffe17 	ldw	r2,-8(fp)
   16adc:	10c00217 	ldw	r3,8(r2)
   16ae0:	d0a75a17 	ldw	r2,-25240(gp)
   16ae4:	10c01e36 	bltu	r2,r3,16b60 <alt_tick+0xe4>
   16ae8:	e0bffe17 	ldw	r2,-8(fp)
   16aec:	10800403 	ldbu	r2,16(r2)
   16af0:	10803fcc 	andi	r2,r2,255
   16af4:	1004c03a 	cmpne	r2,r2,zero
   16af8:	1000191e 	bne	r2,zero,16b60 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   16afc:	e0bffe17 	ldw	r2,-8(fp)
   16b00:	10c00317 	ldw	r3,12(r2)
   16b04:	e0bffe17 	ldw	r2,-8(fp)
   16b08:	11000517 	ldw	r4,20(r2)
   16b0c:	183ee83a 	callr	r3
   16b10:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   16b14:	e0bffd17 	ldw	r2,-12(fp)
   16b18:	1004c03a 	cmpne	r2,r2,zero
   16b1c:	1000031e 	bne	r2,zero,16b2c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   16b20:	e13ffe17 	ldw	r4,-8(fp)
   16b24:	00169e40 	call	169e4 <alt_alarm_stop>
   16b28:	00000d06 	br	16b60 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   16b2c:	e0bffe17 	ldw	r2,-8(fp)
   16b30:	10c00217 	ldw	r3,8(r2)
   16b34:	e0bffd17 	ldw	r2,-12(fp)
   16b38:	1887883a 	add	r3,r3,r2
   16b3c:	e0bffe17 	ldw	r2,-8(fp)
   16b40:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   16b44:	e0bffe17 	ldw	r2,-8(fp)
   16b48:	10c00217 	ldw	r3,8(r2)
   16b4c:	d0a75a17 	ldw	r2,-25240(gp)
   16b50:	1880032e 	bgeu	r3,r2,16b60 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   16b54:	e0fffe17 	ldw	r3,-8(fp)
   16b58:	00800044 	movi	r2,1
   16b5c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   16b60:	e0bfff17 	ldw	r2,-4(fp)
   16b64:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   16b68:	d0e02f04 	addi	r3,gp,-32580
   16b6c:	e0bffe17 	ldw	r2,-8(fp)
   16b70:	10ffcc1e 	bne	r2,r3,16aa4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   16b74:	000c9780 	call	c978 <OSTimeTick>
}
   16b78:	e037883a 	mov	sp,fp
   16b7c:	dfc00117 	ldw	ra,4(sp)
   16b80:	df000017 	ldw	fp,0(sp)
   16b84:	dec00204 	addi	sp,sp,8
   16b88:	f800283a 	ret

00016b8c <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
   16b8c:	deffff04 	addi	sp,sp,-4
   16b90:	df000015 	stw	fp,0(sp)
   16b94:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   16b98:	000170fa 	wrctl	ienable,zero
}
   16b9c:	e037883a 	mov	sp,fp
   16ba0:	df000017 	ldw	fp,0(sp)
   16ba4:	dec00104 	addi	sp,sp,4
   16ba8:	f800283a 	ret

00016bac <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   16bac:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   16bb0:	d0e00017 	ldw	r3,-32768(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   16bb4:	d1275317 	ldw	r4,-25268(gp)

      stw ra,  0(sp)
   16bb8:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   16bbc:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   16bc0:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   16bc4:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   16bc8:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   16bcc:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   16bd0:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   16bd4:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   16bd8:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   16bdc:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   16be0:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   16be4:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   16be8:	0016fcc0 	call	16fcc <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   16bec:	d1274e17 	ldw	r4,-25288(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   16bf0:	d1674607 	ldb	r5,-25320(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   16bf4:	d1275315 	stw	r4,-25268(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   16bf8:	d1674645 	stb	r5,-25319(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   16bfc:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   16c00:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   16c04:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   16c08:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   16c0c:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   16c10:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   16c14:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   16c18:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   16c1c:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   16c20:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   16c24:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   16c28:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   16c2c:	d0e00015 	stw	r3,-32768(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   16c30:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   16c34:	f800283a 	ret

00016c38 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   16c38:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   16c3c:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   16c40:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   16c44:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   16c48:	0016fcc0 	call	16fcc <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   16c4c:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   16c50:	d4a74445 	stb	r18,-25327(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   16c54:	003fe506 	br	16bec <OSCtxSw+0x40>

00016c58 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   16c58:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   16c5c:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   16c60:	10800054 	ori	r2,r2,1
      wrctl status, r2
   16c64:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   16c68:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   16c6c:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   16c70:	dec00204 	addi	sp,sp,8

      callr r2
   16c74:	103ee83a 	callr	r2

      nop
   16c78:	0001883a 	nop

00016c7c <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   16c7c:	defff704 	addi	sp,sp,-36
   16c80:	dfc00815 	stw	ra,32(sp)
   16c84:	df000715 	stw	fp,28(sp)
   16c88:	df000704 	addi	fp,sp,28
   16c8c:	e13ffc15 	stw	r4,-16(fp)
   16c90:	e17ffd15 	stw	r5,-12(fp)
   16c94:	e1bffe15 	stw	r6,-8(fp)
   16c98:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   16c9c:	e0bffe17 	ldw	r2,-8(fp)
   16ca0:	1007883a 	mov	r3,r2
   16ca4:	00bfff04 	movi	r2,-4
   16ca8:	1884703a 	and	r2,r3,r2
   16cac:	10bf0004 	addi	r2,r2,-1024
   16cb0:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   16cb4:	e0bff917 	ldw	r2,-28(fp)
   16cb8:	10000015 	stw	zero,0(r2)
   16cbc:	e0bff917 	ldw	r2,-28(fp)
   16cc0:	10c0bb04 	addi	r3,r2,748
   16cc4:	e0bff917 	ldw	r2,-28(fp)
   16cc8:	10c00115 	stw	r3,4(r2)
   16ccc:	e0bff917 	ldw	r2,-28(fp)
   16cd0:	1080bb04 	addi	r2,r2,748
   16cd4:	10c01704 	addi	r3,r2,92
   16cd8:	e0bff917 	ldw	r2,-28(fp)
   16cdc:	10c00215 	stw	r3,8(r2)
   16ce0:	e0bff917 	ldw	r2,-28(fp)
   16ce4:	1080bb04 	addi	r2,r2,748
   16ce8:	10c02e04 	addi	r3,r2,184
   16cec:	e0bff917 	ldw	r2,-28(fp)
   16cf0:	10c00315 	stw	r3,12(r2)
   16cf4:	e0bff917 	ldw	r2,-28(fp)
   16cf8:	10000415 	stw	zero,16(r2)
   16cfc:	e0bff917 	ldw	r2,-28(fp)
   16d00:	10800504 	addi	r2,r2,20
   16d04:	1009883a 	mov	r4,r2
   16d08:	01800644 	movi	r6,25
   16d0c:	000b883a 	mov	r5,zero
   16d10:	00077a00 	call	77a0 <memset>
   16d14:	e0bff917 	ldw	r2,-28(fp)
   16d18:	10000c15 	stw	zero,48(r2)
   16d1c:	e0fff917 	ldw	r3,-28(fp)
   16d20:	00800074 	movhi	r2,1
   16d24:	109fcd04 	addi	r2,r2,32564
   16d28:	18800d15 	stw	r2,52(r3)
   16d2c:	e0bff917 	ldw	r2,-28(fp)
   16d30:	10000e15 	stw	zero,56(r2)
   16d34:	e0bff917 	ldw	r2,-28(fp)
   16d38:	10000f15 	stw	zero,60(r2)
   16d3c:	e0bff917 	ldw	r2,-28(fp)
   16d40:	10001015 	stw	zero,64(r2)
   16d44:	e0bff917 	ldw	r2,-28(fp)
   16d48:	10001115 	stw	zero,68(r2)
   16d4c:	e0bff917 	ldw	r2,-28(fp)
   16d50:	10001215 	stw	zero,72(r2)
   16d54:	e0bff917 	ldw	r2,-28(fp)
   16d58:	10001315 	stw	zero,76(r2)
   16d5c:	e0bff917 	ldw	r2,-28(fp)
   16d60:	10001415 	stw	zero,80(r2)
   16d64:	e0bff917 	ldw	r2,-28(fp)
   16d68:	10001515 	stw	zero,84(r2)
   16d6c:	e0bff917 	ldw	r2,-28(fp)
   16d70:	10001615 	stw	zero,88(r2)
   16d74:	e0bff917 	ldw	r2,-28(fp)
   16d78:	10001715 	stw	zero,92(r2)
   16d7c:	e0bff917 	ldw	r2,-28(fp)
   16d80:	10001805 	stb	zero,96(r2)
   16d84:	e0bff917 	ldw	r2,-28(fp)
   16d88:	10801f04 	addi	r2,r2,124
   16d8c:	10000015 	stw	zero,0(r2)
   16d90:	10000115 	stw	zero,4(r2)
   16d94:	10000215 	stw	zero,8(r2)
   16d98:	10000315 	stw	zero,12(r2)
   16d9c:	10000415 	stw	zero,16(r2)
   16da0:	10000515 	stw	zero,20(r2)
   16da4:	10000615 	stw	zero,24(r2)
   16da8:	10000715 	stw	zero,28(r2)
   16dac:	10000815 	stw	zero,32(r2)
   16db0:	e0bff917 	ldw	r2,-28(fp)
   16db4:	10002815 	stw	zero,160(r2)
   16db8:	e0fff917 	ldw	r3,-28(fp)
   16dbc:	00800044 	movi	r2,1
   16dc0:	18802915 	stw	r2,164(r3)
   16dc4:	18002a15 	stw	zero,168(r3)
   16dc8:	e0fff917 	ldw	r3,-28(fp)
   16dcc:	008cc384 	movi	r2,13070
   16dd0:	18802b0d 	sth	r2,172(r3)
   16dd4:	e0fff917 	ldw	r3,-28(fp)
   16dd8:	00aaf344 	movi	r2,-21555
   16ddc:	18802b8d 	sth	r2,174(r3)
   16de0:	e0fff917 	ldw	r3,-28(fp)
   16de4:	00848d04 	movi	r2,4660
   16de8:	18802c0d 	sth	r2,176(r3)
   16dec:	e0fff917 	ldw	r3,-28(fp)
   16df0:	00b99b44 	movi	r2,-6547
   16df4:	18802c8d 	sth	r2,178(r3)
   16df8:	e0fff917 	ldw	r3,-28(fp)
   16dfc:	00b7bb04 	movi	r2,-8468
   16e00:	18802d0d 	sth	r2,180(r3)
   16e04:	e0fff917 	ldw	r3,-28(fp)
   16e08:	00800144 	movi	r2,5
   16e0c:	18802d8d 	sth	r2,182(r3)
   16e10:	e0fff917 	ldw	r3,-28(fp)
   16e14:	008002c4 	movi	r2,11
   16e18:	18802e0d 	sth	r2,184(r3)
   16e1c:	e0bff917 	ldw	r2,-28(fp)
   16e20:	10002f15 	stw	zero,188(r2)
   16e24:	e0bff917 	ldw	r2,-28(fp)
   16e28:	10003015 	stw	zero,192(r2)
   16e2c:	e0bff917 	ldw	r2,-28(fp)
   16e30:	10003115 	stw	zero,196(r2)
   16e34:	e0bff917 	ldw	r2,-28(fp)
   16e38:	10003215 	stw	zero,200(r2)
   16e3c:	e0bff917 	ldw	r2,-28(fp)
   16e40:	10003315 	stw	zero,204(r2)
   16e44:	e0bff917 	ldw	r2,-28(fp)
   16e48:	10003415 	stw	zero,208(r2)
   16e4c:	e0bff917 	ldw	r2,-28(fp)
   16e50:	10003e15 	stw	zero,248(r2)
   16e54:	e0bff917 	ldw	r2,-28(fp)
   16e58:	10003f15 	stw	zero,252(r2)
   16e5c:	e0bff917 	ldw	r2,-28(fp)
   16e60:	10004015 	stw	zero,256(r2)
   16e64:	e0bff917 	ldw	r2,-28(fp)
   16e68:	10004115 	stw	zero,260(r2)
   16e6c:	e0bff917 	ldw	r2,-28(fp)
   16e70:	10004215 	stw	zero,264(r2)
   16e74:	e0bff917 	ldw	r2,-28(fp)
   16e78:	10004315 	stw	zero,268(r2)
   16e7c:	e0bff917 	ldw	r2,-28(fp)
   16e80:	10004415 	stw	zero,272(r2)
   16e84:	e0bff917 	ldw	r2,-28(fp)
   16e88:	10004515 	stw	zero,276(r2)
   16e8c:	e0bff917 	ldw	r2,-28(fp)
   16e90:	10004615 	stw	zero,280(r2)
   16e94:	e0bff917 	ldw	r2,-28(fp)
   16e98:	10004715 	stw	zero,284(r2)
   16e9c:	e0bff917 	ldw	r2,-28(fp)
   16ea0:	10003505 	stb	zero,212(r2)
   16ea4:	e0bff917 	ldw	r2,-28(fp)
   16ea8:	10003705 	stb	zero,220(r2)
   16eac:	e0bff917 	ldw	r2,-28(fp)
   16eb0:	10003d15 	stw	zero,244(r2)
   16eb4:	e0bff917 	ldw	r2,-28(fp)
   16eb8:	10005215 	stw	zero,328(r2)
   16ebc:	e0bff917 	ldw	r2,-28(fp)
   16ec0:	10005315 	stw	zero,332(r2)
   16ec4:	e0bff917 	ldw	r2,-28(fp)
   16ec8:	10005415 	stw	zero,336(r2)
   16ecc:	e0bff917 	ldw	r2,-28(fp)
   16ed0:	10005515 	stw	zero,340(r2)
   16ed4:	e0bff917 	ldw	r2,-28(fp)
   16ed8:	1000b515 	stw	zero,724(r2)
   16edc:	e0bff917 	ldw	r2,-28(fp)
   16ee0:	10007515 	stw	zero,468(r2)
   16ee4:	e0bff917 	ldw	r2,-28(fp)
   16ee8:	1000b715 	stw	zero,732(r2)
   16eec:	e0bff917 	ldw	r2,-28(fp)
   16ef0:	1000b815 	stw	zero,736(r2)
   16ef4:	e0bff917 	ldw	r2,-28(fp)
   16ef8:	1000b915 	stw	zero,740(r2)
   16efc:	e0bff917 	ldw	r2,-28(fp)
   16f00:	1000ba15 	stw	zero,744(r2)
   16f04:	e0bff917 	ldw	r2,-28(fp)
   16f08:	1080bb04 	addi	r2,r2,748
   16f0c:	1009883a 	mov	r4,r2
   16f10:	01804504 	movi	r6,276
   16f14:	000b883a 	mov	r5,zero
   16f18:	00077a00 	call	77a0 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   16f1c:	e0bff917 	ldw	r2,-28(fp)
   16f20:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   16f24:	e0bffb17 	ldw	r2,-20(fp)
   16f28:	10bff304 	addi	r2,r2,-52
   16f2c:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   16f30:	e0bffa17 	ldw	r2,-24(fp)
   16f34:	10c00c04 	addi	r3,r2,48
   16f38:	e0bffc17 	ldw	r2,-16(fp)
   16f3c:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   16f40:	e0bffa17 	ldw	r2,-24(fp)
   16f44:	10c00b04 	addi	r3,r2,44
   16f48:	e0bffd17 	ldw	r2,-12(fp)
   16f4c:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   16f50:	e0bffa17 	ldw	r2,-24(fp)
   16f54:	10c00a04 	addi	r3,r2,40
   16f58:	e0bff917 	ldw	r2,-28(fp)
   16f5c:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   16f60:	00800074 	movhi	r2,1
   16f64:	109b1604 	addi	r2,r2,27736
   16f68:	10c00104 	addi	r3,r2,4
   16f6c:	e0bffa17 	ldw	r2,-24(fp)
   16f70:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   16f74:	e0bffa17 	ldw	r2,-24(fp)
}
   16f78:	e037883a 	mov	sp,fp
   16f7c:	dfc00117 	ldw	ra,4(sp)
   16f80:	df000017 	ldw	fp,0(sp)
   16f84:	dec00204 	addi	sp,sp,8
   16f88:	f800283a 	ret

00016f8c <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   16f8c:	defffe04 	addi	sp,sp,-8
   16f90:	df000115 	stw	fp,4(sp)
   16f94:	df000104 	addi	fp,sp,4
   16f98:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   16f9c:	e037883a 	mov	sp,fp
   16fa0:	df000017 	ldw	fp,0(sp)
   16fa4:	dec00104 	addi	sp,sp,4
   16fa8:	f800283a 	ret

00016fac <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   16fac:	defffe04 	addi	sp,sp,-8
   16fb0:	df000115 	stw	fp,4(sp)
   16fb4:	df000104 	addi	fp,sp,4
   16fb8:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   16fbc:	e037883a 	mov	sp,fp
   16fc0:	df000017 	ldw	fp,0(sp)
   16fc4:	dec00104 	addi	sp,sp,4
   16fc8:	f800283a 	ret

00016fcc <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   16fcc:	deffff04 	addi	sp,sp,-4
   16fd0:	df000015 	stw	fp,0(sp)
   16fd4:	d839883a 	mov	fp,sp
}
   16fd8:	e037883a 	mov	sp,fp
   16fdc:	df000017 	ldw	fp,0(sp)
   16fe0:	dec00104 	addi	sp,sp,4
   16fe4:	f800283a 	ret

00016fe8 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   16fe8:	deffff04 	addi	sp,sp,-4
   16fec:	df000015 	stw	fp,0(sp)
   16ff0:	d839883a 	mov	fp,sp
}
   16ff4:	e037883a 	mov	sp,fp
   16ff8:	df000017 	ldw	fp,0(sp)
   16ffc:	dec00104 	addi	sp,sp,4
   17000:	f800283a 	ret

00017004 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   17004:	deffff04 	addi	sp,sp,-4
   17008:	df000015 	stw	fp,0(sp)
   1700c:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   17010:	e037883a 	mov	sp,fp
   17014:	df000017 	ldw	fp,0(sp)
   17018:	dec00104 	addi	sp,sp,4
   1701c:	f800283a 	ret

00017020 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   17020:	deffff04 	addi	sp,sp,-4
   17024:	df000015 	stw	fp,0(sp)
   17028:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   1702c:	e037883a 	mov	sp,fp
   17030:	df000017 	ldw	fp,0(sp)
   17034:	dec00104 	addi	sp,sp,4
   17038:	f800283a 	ret

0001703c <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   1703c:	deffff04 	addi	sp,sp,-4
   17040:	df000015 	stw	fp,0(sp)
   17044:	d839883a 	mov	fp,sp
}
   17048:	e037883a 	mov	sp,fp
   1704c:	df000017 	ldw	fp,0(sp)
   17050:	dec00104 	addi	sp,sp,4
   17054:	f800283a 	ret

00017058 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   17058:	deffff04 	addi	sp,sp,-4
   1705c:	df000015 	stw	fp,0(sp)
   17060:	d839883a 	mov	fp,sp
}
   17064:	e037883a 	mov	sp,fp
   17068:	df000017 	ldw	fp,0(sp)
   1706c:	dec00104 	addi	sp,sp,4
   17070:	f800283a 	ret

00017074 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   17074:	defffe04 	addi	sp,sp,-8
   17078:	df000115 	stw	fp,4(sp)
   1707c:	df000104 	addi	fp,sp,4
   17080:	e13fff15 	stw	r4,-4(fp)
}
   17084:	e037883a 	mov	sp,fp
   17088:	df000017 	ldw	fp,0(sp)
   1708c:	dec00104 	addi	sp,sp,4
   17090:	f800283a 	ret

00017094 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   17094:	defff404 	addi	sp,sp,-48
   17098:	df000b15 	stw	fp,44(sp)
   1709c:	df000b04 	addi	fp,sp,44
   170a0:	e13ffc15 	stw	r4,-16(fp)
   170a4:	e17ffd15 	stw	r5,-12(fp)
   170a8:	e1bffe15 	stw	r6,-8(fp)
   170ac:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   170b0:	e0fffe17 	ldw	r3,-8(fp)
   170b4:	e0bfff17 	ldw	r2,-4(fp)
   170b8:	10c5883a 	add	r2,r2,r3
   170bc:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
   170c0:	e0c00117 	ldw	r3,4(fp)
   170c4:	e0800217 	ldw	r2,8(fp)
   170c8:	10c5883a 	add	r2,r2,r3
   170cc:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
   170d0:	e0800117 	ldw	r2,4(fp)
   170d4:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
   170d8:	e0bffe17 	ldw	r2,-8(fp)
   170dc:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   170e0:	00800044 	movi	r2,1
   170e4:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   170e8:	e0bffc17 	ldw	r2,-16(fp)
   170ec:	11000504 	addi	r4,r2,20
   170f0:	e0fffd17 	ldw	r3,-12(fp)
   170f4:	00800044 	movi	r2,1
   170f8:	10c6983a 	sll	r3,r2,r3
   170fc:	2005883a 	mov	r2,r4
   17100:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   17104:	e0800317 	ldw	r2,12(fp)
   17108:	1080008c 	andi	r2,r2,2
   1710c:	1004c03a 	cmpne	r2,r2,zero
   17110:	1000051e 	bne	r2,zero,17128 <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   17114:	e0bffc17 	ldw	r2,-16(fp)
   17118:	10800304 	addi	r2,r2,12
   1711c:	1007883a 	mov	r3,r2
   17120:	00810004 	movi	r2,1024
   17124:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   17128:	e0bffc17 	ldw	r2,-16(fp)
   1712c:	10800037 	ldwio	r2,0(r2)
   17130:	00000006 	br	17134 <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   17134:	e0bffc17 	ldw	r2,-16(fp)
   17138:	10800204 	addi	r2,r2,8
   1713c:	10800037 	ldwio	r2,0(r2)
   17140:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   17144:	e0bff717 	ldw	r2,-36(fp)
   17148:	1080100c 	andi	r2,r2,64
   1714c:	1005003a 	cmpeq	r2,r2,zero
   17150:	1000031e 	bne	r2,zero,17160 <alt_avalon_spi_command+0xcc>
   17154:	e0bff617 	ldw	r2,-40(fp)
   17158:	1004c03a 	cmpne	r2,r2,zero
   1715c:	1000041e 	bne	r2,zero,17170 <alt_avalon_spi_command+0xdc>
   17160:	e0bff717 	ldw	r2,-36(fp)
   17164:	1080200c 	andi	r2,r2,128
   17168:	1005003a 	cmpeq	r2,r2,zero
   1716c:	103ff11e 	bne	r2,zero,17134 <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   17170:	e0bff717 	ldw	r2,-36(fp)
   17174:	1080100c 	andi	r2,r2,64
   17178:	1005003a 	cmpeq	r2,r2,zero
   1717c:	1000201e 	bne	r2,zero,17200 <alt_avalon_spi_command+0x16c>
   17180:	e0bff617 	ldw	r2,-40(fp)
   17184:	10800050 	cmplti	r2,r2,1
   17188:	10001d1e 	bne	r2,zero,17200 <alt_avalon_spi_command+0x16c>
    {
      credits--;
   1718c:	e0bff617 	ldw	r2,-40(fp)
   17190:	10bfffc4 	addi	r2,r2,-1
   17194:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
   17198:	e0ffff17 	ldw	r3,-4(fp)
   1719c:	e0bffb17 	ldw	r2,-20(fp)
   171a0:	18800b2e 	bgeu	r3,r2,171d0 <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   171a4:	e0bffc17 	ldw	r2,-16(fp)
   171a8:	11000104 	addi	r4,r2,4
   171ac:	e0bfff17 	ldw	r2,-4(fp)
   171b0:	10800003 	ldbu	r2,0(r2)
   171b4:	10c03fcc 	andi	r3,r2,255
   171b8:	e0bfff17 	ldw	r2,-4(fp)
   171bc:	10800044 	addi	r2,r2,1
   171c0:	e0bfff15 	stw	r2,-4(fp)
   171c4:	2005883a 	mov	r2,r4
   171c8:	10c00035 	stwio	r3,0(r2)
   171cc:	00000c06 	br	17200 <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
   171d0:	e0bff917 	ldw	r2,-28(fp)
   171d4:	1005003a 	cmpeq	r2,r2,zero
   171d8:	1000071e 	bne	r2,zero,171f8 <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
   171dc:	e0bff917 	ldw	r2,-28(fp)
   171e0:	10bfffc4 	addi	r2,r2,-1
   171e4:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   171e8:	e0bffc17 	ldw	r2,-16(fp)
   171ec:	10800104 	addi	r2,r2,4
   171f0:	10000035 	stwio	zero,0(r2)
   171f4:	00000206 	br	17200 <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
   171f8:	00bf0004 	movi	r2,-1024
   171fc:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   17200:	e0bff717 	ldw	r2,-36(fp)
   17204:	1080200c 	andi	r2,r2,128
   17208:	1005003a 	cmpeq	r2,r2,zero
   1720c:	103fc91e 	bne	r2,zero,17134 <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   17210:	e0bffc17 	ldw	r2,-16(fp)
   17214:	10800037 	ldwio	r2,0(r2)
   17218:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
   1721c:	e0bff817 	ldw	r2,-32(fp)
   17220:	1005003a 	cmpeq	r2,r2,zero
   17224:	1000041e 	bne	r2,zero,17238 <alt_avalon_spi_command+0x1a4>
        read_ignore--;
   17228:	e0bff817 	ldw	r2,-32(fp)
   1722c:	10bfffc4 	addi	r2,r2,-1
   17230:	e0bff815 	stw	r2,-32(fp)
   17234:	00000706 	br	17254 <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
   17238:	e0bff517 	ldw	r2,-44(fp)
   1723c:	1007883a 	mov	r3,r2
   17240:	e0800217 	ldw	r2,8(fp)
   17244:	10c00005 	stb	r3,0(r2)
   17248:	e0800217 	ldw	r2,8(fp)
   1724c:	10800044 	addi	r2,r2,1
   17250:	e0800215 	stw	r2,8(fp)
      credits++;
   17254:	e0bff617 	ldw	r2,-40(fp)
   17258:	10800044 	addi	r2,r2,1
   1725c:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
   17260:	e0bff817 	ldw	r2,-32(fp)
   17264:	1004c03a 	cmpne	r2,r2,zero
   17268:	103fb21e 	bne	r2,zero,17134 <alt_avalon_spi_command+0xa0>
   1726c:	e0c00217 	ldw	r3,8(fp)
   17270:	e0bffa17 	ldw	r2,-24(fp)
   17274:	18800126 	beq	r3,r2,1727c <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
   17278:	003fae06 	br	17134 <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   1727c:	e0bffc17 	ldw	r2,-16(fp)
   17280:	10800204 	addi	r2,r2,8
   17284:	10800037 	ldwio	r2,0(r2)
   17288:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   1728c:	e0bff717 	ldw	r2,-36(fp)
   17290:	1080080c 	andi	r2,r2,32
   17294:	1005003a 	cmpeq	r2,r2,zero
   17298:	103ff81e 	bne	r2,zero,1727c <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   1729c:	e0800317 	ldw	r2,12(fp)
   172a0:	1080004c 	andi	r2,r2,1
   172a4:	1004c03a 	cmpne	r2,r2,zero
   172a8:	1000031e 	bne	r2,zero,172b8 <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   172ac:	e0bffc17 	ldw	r2,-16(fp)
   172b0:	10800304 	addi	r2,r2,12
   172b4:	10000035 	stwio	zero,0(r2)

  return read_length;
   172b8:	e0800117 	ldw	r2,4(fp)
}
   172bc:	e037883a 	mov	sp,fp
   172c0:	df000017 	ldw	fp,0(sp)
   172c4:	dec00104 	addi	sp,sp,4
   172c8:	f800283a 	ret

000172cc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   172cc:	defff904 	addi	sp,sp,-28
   172d0:	dfc00615 	stw	ra,24(sp)
   172d4:	df000515 	stw	fp,20(sp)
   172d8:	df000504 	addi	fp,sp,20
   172dc:	e13ffd15 	stw	r4,-12(fp)
   172e0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   172e4:	e0bffe17 	ldw	r2,-8(fp)
   172e8:	10800017 	ldw	r2,0(r2)
   172ec:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   172f0:	e13ffd17 	ldw	r4,-12(fp)
   172f4:	00023b40 	call	23b4 <strlen>
   172f8:	10800044 	addi	r2,r2,1
   172fc:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   17300:	00000d06 	br	17338 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   17304:	e0bffc17 	ldw	r2,-16(fp)
   17308:	11000217 	ldw	r4,8(r2)
   1730c:	e1bffb17 	ldw	r6,-20(fp)
   17310:	e17ffd17 	ldw	r5,-12(fp)
   17314:	00176500 	call	17650 <memcmp>
   17318:	1004c03a 	cmpne	r2,r2,zero
   1731c:	1000031e 	bne	r2,zero,1732c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   17320:	e0bffc17 	ldw	r2,-16(fp)
   17324:	e0bfff15 	stw	r2,-4(fp)
   17328:	00000706 	br	17348 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1732c:	e0bffc17 	ldw	r2,-16(fp)
   17330:	10800017 	ldw	r2,0(r2)
   17334:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   17338:	e0fffe17 	ldw	r3,-8(fp)
   1733c:	e0bffc17 	ldw	r2,-16(fp)
   17340:	10fff01e 	bne	r2,r3,17304 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   17344:	e03fff15 	stw	zero,-4(fp)
   17348:	e0bfff17 	ldw	r2,-4(fp)
}
   1734c:	e037883a 	mov	sp,fp
   17350:	dfc00117 	ldw	ra,4(sp)
   17354:	df000017 	ldw	fp,0(sp)
   17358:	dec00204 	addi	sp,sp,8
   1735c:	f800283a 	ret

00017360 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   17360:	defffa04 	addi	sp,sp,-24
   17364:	dfc00515 	stw	ra,20(sp)
   17368:	df000415 	stw	fp,16(sp)
   1736c:	df000404 	addi	fp,sp,16
   17370:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   17374:	008000b4 	movhi	r2,2
   17378:	10a69004 	addi	r2,r2,-26048
   1737c:	10800017 	ldw	r2,0(r2)
   17380:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   17384:	00003306 	br	17454 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   17388:	e0bffd17 	ldw	r2,-12(fp)
   1738c:	11000217 	ldw	r4,8(r2)
   17390:	00023b40 	call	23b4 <strlen>
   17394:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   17398:	e0bffd17 	ldw	r2,-12(fp)
   1739c:	10c00217 	ldw	r3,8(r2)
   173a0:	e0bffc17 	ldw	r2,-16(fp)
   173a4:	1885883a 	add	r2,r3,r2
   173a8:	10bfffc4 	addi	r2,r2,-1
   173ac:	10800003 	ldbu	r2,0(r2)
   173b0:	10803fcc 	andi	r2,r2,255
   173b4:	1080201c 	xori	r2,r2,128
   173b8:	10bfe004 	addi	r2,r2,-128
   173bc:	10800bd8 	cmpnei	r2,r2,47
   173c0:	1000031e 	bne	r2,zero,173d0 <alt_find_file+0x70>
    {
      len -= 1;
   173c4:	e0bffc17 	ldw	r2,-16(fp)
   173c8:	10bfffc4 	addi	r2,r2,-1
   173cc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   173d0:	e0bffc17 	ldw	r2,-16(fp)
   173d4:	1007883a 	mov	r3,r2
   173d8:	e0bffe17 	ldw	r2,-8(fp)
   173dc:	1885883a 	add	r2,r3,r2
   173e0:	10800003 	ldbu	r2,0(r2)
   173e4:	10803fcc 	andi	r2,r2,255
   173e8:	1080201c 	xori	r2,r2,128
   173ec:	10bfe004 	addi	r2,r2,-128
   173f0:	10800be0 	cmpeqi	r2,r2,47
   173f4:	10000a1e 	bne	r2,zero,17420 <alt_find_file+0xc0>
   173f8:	e0bffc17 	ldw	r2,-16(fp)
   173fc:	1007883a 	mov	r3,r2
   17400:	e0bffe17 	ldw	r2,-8(fp)
   17404:	1885883a 	add	r2,r3,r2
   17408:	10800003 	ldbu	r2,0(r2)
   1740c:	10803fcc 	andi	r2,r2,255
   17410:	1080201c 	xori	r2,r2,128
   17414:	10bfe004 	addi	r2,r2,-128
   17418:	1004c03a 	cmpne	r2,r2,zero
   1741c:	10000a1e 	bne	r2,zero,17448 <alt_find_file+0xe8>
   17420:	e0bffd17 	ldw	r2,-12(fp)
   17424:	11000217 	ldw	r4,8(r2)
   17428:	e1bffc17 	ldw	r6,-16(fp)
   1742c:	e17ffe17 	ldw	r5,-8(fp)
   17430:	00176500 	call	17650 <memcmp>
   17434:	1004c03a 	cmpne	r2,r2,zero
   17438:	1000031e 	bne	r2,zero,17448 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1743c:	e0bffd17 	ldw	r2,-12(fp)
   17440:	e0bfff15 	stw	r2,-4(fp)
   17444:	00000806 	br	17468 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   17448:	e0bffd17 	ldw	r2,-12(fp)
   1744c:	10800017 	ldw	r2,0(r2)
   17450:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   17454:	00c000b4 	movhi	r3,2
   17458:	18e69004 	addi	r3,r3,-26048
   1745c:	e0bffd17 	ldw	r2,-12(fp)
   17460:	10ffc91e 	bne	r2,r3,17388 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   17464:	e03fff15 	stw	zero,-4(fp)
   17468:	e0bfff17 	ldw	r2,-4(fp)
}
   1746c:	e037883a 	mov	sp,fp
   17470:	dfc00117 	ldw	ra,4(sp)
   17474:	df000017 	ldw	fp,0(sp)
   17478:	dec00204 	addi	sp,sp,8
   1747c:	f800283a 	ret

00017480 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   17480:	defff804 	addi	sp,sp,-32
   17484:	dfc00715 	stw	ra,28(sp)
   17488:	df000615 	stw	fp,24(sp)
   1748c:	df000604 	addi	fp,sp,24
   17490:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   17494:	00bffa04 	movi	r2,-24
   17498:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   1749c:	008000b4 	movhi	r2,2
   174a0:	10adc604 	addi	r2,r2,-18664
   174a4:	10800017 	ldw	r2,0(r2)
   174a8:	e0bffa15 	stw	r2,-24(fp)
   174ac:	e03ffb0d 	sth	zero,-20(fp)
   174b0:	e17ffb0b 	ldhu	r5,-20(fp)
   174b4:	e1bffe04 	addi	r6,fp,-8
   174b8:	e13ffa17 	ldw	r4,-24(fp)
   174bc:	00117940 	call	11794 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   174c0:	e03ffd15 	stw	zero,-12(fp)
   174c4:	00001e06 	br	17540 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
   174c8:	e0bffd17 	ldw	r2,-12(fp)
   174cc:	00c000b4 	movhi	r3,2
   174d0:	18e1dd04 	addi	r3,r3,-30860
   174d4:	10800324 	muli	r2,r2,12
   174d8:	10c5883a 	add	r2,r2,r3
   174dc:	10800017 	ldw	r2,0(r2)
   174e0:	1004c03a 	cmpne	r2,r2,zero
   174e4:	1000131e 	bne	r2,zero,17534 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
   174e8:	e0bffd17 	ldw	r2,-12(fp)
   174ec:	00c000b4 	movhi	r3,2
   174f0:	18e1dd04 	addi	r3,r3,-30860
   174f4:	10800324 	muli	r2,r2,12
   174f8:	10c7883a 	add	r3,r2,r3
   174fc:	e0bfff17 	ldw	r2,-4(fp)
   17500:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   17504:	008000b4 	movhi	r2,2
   17508:	10a69404 	addi	r2,r2,-26032
   1750c:	10c00017 	ldw	r3,0(r2)
   17510:	e0bffd17 	ldw	r2,-12(fp)
   17514:	1880040e 	bge	r3,r2,17528 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
   17518:	00c000b4 	movhi	r3,2
   1751c:	18e69404 	addi	r3,r3,-26032
   17520:	e0bffd17 	ldw	r2,-12(fp)
   17524:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   17528:	e0bffd17 	ldw	r2,-12(fp)
   1752c:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   17530:	00000606 	br	1754c <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   17534:	e0bffd17 	ldw	r2,-12(fp)
   17538:	10800044 	addi	r2,r2,1
   1753c:	e0bffd15 	stw	r2,-12(fp)
   17540:	e0bffd17 	ldw	r2,-12(fp)
   17544:	10800810 	cmplti	r2,r2,32
   17548:	103fdf1e 	bne	r2,zero,174c8 <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   1754c:	008000b4 	movhi	r2,2
   17550:	10adc604 	addi	r2,r2,-18664
   17554:	11000017 	ldw	r4,0(r2)
   17558:	0011b8c0 	call	11b8c <OSSemPost>

  return rc;
   1755c:	e0bffc17 	ldw	r2,-16(fp)
}
   17560:	e037883a 	mov	sp,fp
   17564:	dfc00117 	ldw	ra,4(sp)
   17568:	df000017 	ldw	fp,0(sp)
   1756c:	dec00204 	addi	sp,sp,8
   17570:	f800283a 	ret

00017574 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   17574:	defffb04 	addi	sp,sp,-20
   17578:	df000415 	stw	fp,16(sp)
   1757c:	df000404 	addi	fp,sp,16
   17580:	e13ffe15 	stw	r4,-8(fp)
   17584:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   17588:	e0bfff17 	ldw	r2,-4(fp)
   1758c:	10810070 	cmpltui	r2,r2,1025
   17590:	1000021e 	bne	r2,zero,1759c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   17594:	00810004 	movi	r2,1024
   17598:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1759c:	e0fffe17 	ldw	r3,-8(fp)
   175a0:	e0bfff17 	ldw	r2,-4(fp)
   175a4:	1885883a 	add	r2,r3,r2
   175a8:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   175ac:	e0bffe17 	ldw	r2,-8(fp)
   175b0:	e0bffd15 	stw	r2,-12(fp)
   175b4:	00000506 	br	175cc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   175b8:	e0bffd17 	ldw	r2,-12(fp)
   175bc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   175c0:	e0bffd17 	ldw	r2,-12(fp)
   175c4:	10800804 	addi	r2,r2,32
   175c8:	e0bffd15 	stw	r2,-12(fp)
   175cc:	e0fffd17 	ldw	r3,-12(fp)
   175d0:	e0bffc17 	ldw	r2,-16(fp)
   175d4:	18bff836 	bltu	r3,r2,175b8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   175d8:	e0bffe17 	ldw	r2,-8(fp)
   175dc:	108007cc 	andi	r2,r2,31
   175e0:	1005003a 	cmpeq	r2,r2,zero
   175e4:	1000021e 	bne	r2,zero,175f0 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   175e8:	e0bffd17 	ldw	r2,-12(fp)
   175ec:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   175f0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   175f4:	e037883a 	mov	sp,fp
   175f8:	df000017 	ldw	fp,0(sp)
   175fc:	dec00104 	addi	sp,sp,4
   17600:	f800283a 	ret

00017604 <atexit>:
   17604:	200b883a 	mov	r5,r4
   17608:	000d883a 	mov	r6,zero
   1760c:	0009883a 	mov	r4,zero
   17610:	000f883a 	mov	r7,zero
   17614:	00176c41 	jmpi	176c4 <__register_exitproc>

00017618 <exit>:
   17618:	defffe04 	addi	sp,sp,-8
   1761c:	000b883a 	mov	r5,zero
   17620:	dc000015 	stw	r16,0(sp)
   17624:	dfc00115 	stw	ra,4(sp)
   17628:	2021883a 	mov	r16,r4
   1762c:	00177fc0 	call	177fc <__call_exitprocs>
   17630:	008000b4 	movhi	r2,2
   17634:	10a68b04 	addi	r2,r2,-26068
   17638:	11000017 	ldw	r4,0(r2)
   1763c:	20800f17 	ldw	r2,60(r4)
   17640:	10000126 	beq	r2,zero,17648 <exit+0x30>
   17644:	103ee83a 	callr	r2
   17648:	8009883a 	mov	r4,r16
   1764c:	00179ec0 	call	179ec <_exit>

00017650 <memcmp>:
   17650:	00c000c4 	movi	r3,3
   17654:	1980032e 	bgeu	r3,r6,17664 <memcmp+0x14>
   17658:	2144b03a 	or	r2,r4,r5
   1765c:	10c4703a 	and	r2,r2,r3
   17660:	10000f26 	beq	r2,zero,176a0 <memcmp+0x50>
   17664:	31ffffc4 	addi	r7,r6,-1
   17668:	3000061e 	bne	r6,zero,17684 <memcmp+0x34>
   1766c:	00000a06 	br	17698 <memcmp+0x48>
   17670:	39ffffc4 	addi	r7,r7,-1
   17674:	00bfffc4 	movi	r2,-1
   17678:	21000044 	addi	r4,r4,1
   1767c:	29400044 	addi	r5,r5,1
   17680:	38800526 	beq	r7,r2,17698 <memcmp+0x48>
   17684:	20c00003 	ldbu	r3,0(r4)
   17688:	28800003 	ldbu	r2,0(r5)
   1768c:	18bff826 	beq	r3,r2,17670 <memcmp+0x20>
   17690:	1885c83a 	sub	r2,r3,r2
   17694:	f800283a 	ret
   17698:	0005883a 	mov	r2,zero
   1769c:	f800283a 	ret
   176a0:	180f883a 	mov	r7,r3
   176a4:	20c00017 	ldw	r3,0(r4)
   176a8:	28800017 	ldw	r2,0(r5)
   176ac:	18bfed1e 	bne	r3,r2,17664 <memcmp+0x14>
   176b0:	31bfff04 	addi	r6,r6,-4
   176b4:	21000104 	addi	r4,r4,4
   176b8:	29400104 	addi	r5,r5,4
   176bc:	39bff936 	bltu	r7,r6,176a4 <memcmp+0x54>
   176c0:	003fe806 	br	17664 <memcmp+0x14>

000176c4 <__register_exitproc>:
   176c4:	defffa04 	addi	sp,sp,-24
   176c8:	008000b4 	movhi	r2,2
   176cc:	10a68b04 	addi	r2,r2,-26068
   176d0:	dc000015 	stw	r16,0(sp)
   176d4:	14000017 	ldw	r16,0(r2)
   176d8:	dd000415 	stw	r20,16(sp)
   176dc:	2829883a 	mov	r20,r5
   176e0:	81405217 	ldw	r5,328(r16)
   176e4:	dcc00315 	stw	r19,12(sp)
   176e8:	dc800215 	stw	r18,8(sp)
   176ec:	dc400115 	stw	r17,4(sp)
   176f0:	dfc00515 	stw	ra,20(sp)
   176f4:	2023883a 	mov	r17,r4
   176f8:	3027883a 	mov	r19,r6
   176fc:	3825883a 	mov	r18,r7
   17700:	28002526 	beq	r5,zero,17798 <__register_exitproc+0xd4>
   17704:	29000117 	ldw	r4,4(r5)
   17708:	008007c4 	movi	r2,31
   1770c:	11002716 	blt	r2,r4,177ac <__register_exitproc+0xe8>
   17710:	8800101e 	bne	r17,zero,17754 <__register_exitproc+0x90>
   17714:	2105883a 	add	r2,r4,r4
   17718:	1085883a 	add	r2,r2,r2
   1771c:	20c00044 	addi	r3,r4,1
   17720:	1145883a 	add	r2,r2,r5
   17724:	0009883a 	mov	r4,zero
   17728:	15000215 	stw	r20,8(r2)
   1772c:	28c00115 	stw	r3,4(r5)
   17730:	2005883a 	mov	r2,r4
   17734:	dfc00517 	ldw	ra,20(sp)
   17738:	dd000417 	ldw	r20,16(sp)
   1773c:	dcc00317 	ldw	r19,12(sp)
   17740:	dc800217 	ldw	r18,8(sp)
   17744:	dc400117 	ldw	r17,4(sp)
   17748:	dc000017 	ldw	r16,0(sp)
   1774c:	dec00604 	addi	sp,sp,24
   17750:	f800283a 	ret
   17754:	29802204 	addi	r6,r5,136
   17758:	00800044 	movi	r2,1
   1775c:	110e983a 	sll	r7,r2,r4
   17760:	30c04017 	ldw	r3,256(r6)
   17764:	2105883a 	add	r2,r4,r4
   17768:	1085883a 	add	r2,r2,r2
   1776c:	1185883a 	add	r2,r2,r6
   17770:	19c6b03a 	or	r3,r3,r7
   17774:	14802015 	stw	r18,128(r2)
   17778:	14c00015 	stw	r19,0(r2)
   1777c:	00800084 	movi	r2,2
   17780:	30c04015 	stw	r3,256(r6)
   17784:	88bfe31e 	bne	r17,r2,17714 <__register_exitproc+0x50>
   17788:	30804117 	ldw	r2,260(r6)
   1778c:	11c4b03a 	or	r2,r2,r7
   17790:	30804115 	stw	r2,260(r6)
   17794:	003fdf06 	br	17714 <__register_exitproc+0x50>
   17798:	008000b4 	movhi	r2,2
   1779c:	108ad104 	addi	r2,r2,11076
   177a0:	100b883a 	mov	r5,r2
   177a4:	80805215 	stw	r2,328(r16)
   177a8:	003fd606 	br	17704 <__register_exitproc+0x40>
   177ac:	00800034 	movhi	r2,0
   177b0:	10800004 	addi	r2,r2,0
   177b4:	1000021e 	bne	r2,zero,177c0 <__register_exitproc+0xfc>
   177b8:	013fffc4 	movi	r4,-1
   177bc:	003fdc06 	br	17730 <__register_exitproc+0x6c>
   177c0:	01006404 	movi	r4,400
   177c4:	103ee83a 	callr	r2
   177c8:	1007883a 	mov	r3,r2
   177cc:	103ffa26 	beq	r2,zero,177b8 <__register_exitproc+0xf4>
   177d0:	80805217 	ldw	r2,328(r16)
   177d4:	180b883a 	mov	r5,r3
   177d8:	18000115 	stw	zero,4(r3)
   177dc:	18800015 	stw	r2,0(r3)
   177e0:	80c05215 	stw	r3,328(r16)
   177e4:	18006215 	stw	zero,392(r3)
   177e8:	18006315 	stw	zero,396(r3)
   177ec:	0009883a 	mov	r4,zero
   177f0:	883fc826 	beq	r17,zero,17714 <__register_exitproc+0x50>
   177f4:	003fd706 	br	17754 <__register_exitproc+0x90>

000177f8 <register_fini>:
   177f8:	f800283a 	ret

000177fc <__call_exitprocs>:
   177fc:	008000b4 	movhi	r2,2
   17800:	10a68b04 	addi	r2,r2,-26068
   17804:	10800017 	ldw	r2,0(r2)
   17808:	defff304 	addi	sp,sp,-52
   1780c:	df000b15 	stw	fp,44(sp)
   17810:	d8800115 	stw	r2,4(sp)
   17814:	00800034 	movhi	r2,0
   17818:	10800004 	addi	r2,r2,0
   1781c:	1005003a 	cmpeq	r2,r2,zero
   17820:	d8800215 	stw	r2,8(sp)
   17824:	d8800117 	ldw	r2,4(sp)
   17828:	dd400815 	stw	r21,32(sp)
   1782c:	dd000715 	stw	r20,28(sp)
   17830:	10805204 	addi	r2,r2,328
   17834:	dfc00c15 	stw	ra,48(sp)
   17838:	ddc00a15 	stw	r23,40(sp)
   1783c:	dd800915 	stw	r22,36(sp)
   17840:	dcc00615 	stw	r19,24(sp)
   17844:	dc800515 	stw	r18,20(sp)
   17848:	dc400415 	stw	r17,16(sp)
   1784c:	dc000315 	stw	r16,12(sp)
   17850:	282b883a 	mov	r21,r5
   17854:	2039883a 	mov	fp,r4
   17858:	d8800015 	stw	r2,0(sp)
   1785c:	2829003a 	cmpeq	r20,r5,zero
   17860:	d8800117 	ldw	r2,4(sp)
   17864:	14405217 	ldw	r17,328(r2)
   17868:	88001026 	beq	r17,zero,178ac <__call_exitprocs+0xb0>
   1786c:	ddc00017 	ldw	r23,0(sp)
   17870:	88800117 	ldw	r2,4(r17)
   17874:	8c802204 	addi	r18,r17,136
   17878:	143fffc4 	addi	r16,r2,-1
   1787c:	80000916 	blt	r16,zero,178a4 <__call_exitprocs+0xa8>
   17880:	05bfffc4 	movi	r22,-1
   17884:	a000151e 	bne	r20,zero,178dc <__call_exitprocs+0xe0>
   17888:	8409883a 	add	r4,r16,r16
   1788c:	2105883a 	add	r2,r4,r4
   17890:	1485883a 	add	r2,r2,r18
   17894:	10c02017 	ldw	r3,128(r2)
   17898:	a8c01126 	beq	r21,r3,178e0 <__call_exitprocs+0xe4>
   1789c:	843fffc4 	addi	r16,r16,-1
   178a0:	85bff81e 	bne	r16,r22,17884 <__call_exitprocs+0x88>
   178a4:	d8800217 	ldw	r2,8(sp)
   178a8:	10003126 	beq	r2,zero,17970 <__call_exitprocs+0x174>
   178ac:	dfc00c17 	ldw	ra,48(sp)
   178b0:	df000b17 	ldw	fp,44(sp)
   178b4:	ddc00a17 	ldw	r23,40(sp)
   178b8:	dd800917 	ldw	r22,36(sp)
   178bc:	dd400817 	ldw	r21,32(sp)
   178c0:	dd000717 	ldw	r20,28(sp)
   178c4:	dcc00617 	ldw	r19,24(sp)
   178c8:	dc800517 	ldw	r18,20(sp)
   178cc:	dc400417 	ldw	r17,16(sp)
   178d0:	dc000317 	ldw	r16,12(sp)
   178d4:	dec00d04 	addi	sp,sp,52
   178d8:	f800283a 	ret
   178dc:	8409883a 	add	r4,r16,r16
   178e0:	88c00117 	ldw	r3,4(r17)
   178e4:	2105883a 	add	r2,r4,r4
   178e8:	1445883a 	add	r2,r2,r17
   178ec:	18ffffc4 	addi	r3,r3,-1
   178f0:	11800217 	ldw	r6,8(r2)
   178f4:	1c001526 	beq	r3,r16,1794c <__call_exitprocs+0x150>
   178f8:	10000215 	stw	zero,8(r2)
   178fc:	303fe726 	beq	r6,zero,1789c <__call_exitprocs+0xa0>
   17900:	00c00044 	movi	r3,1
   17904:	1c06983a 	sll	r3,r3,r16
   17908:	90804017 	ldw	r2,256(r18)
   1790c:	8cc00117 	ldw	r19,4(r17)
   17910:	1884703a 	and	r2,r3,r2
   17914:	10001426 	beq	r2,zero,17968 <__call_exitprocs+0x16c>
   17918:	90804117 	ldw	r2,260(r18)
   1791c:	1884703a 	and	r2,r3,r2
   17920:	10000c1e 	bne	r2,zero,17954 <__call_exitprocs+0x158>
   17924:	2105883a 	add	r2,r4,r4
   17928:	1485883a 	add	r2,r2,r18
   1792c:	11400017 	ldw	r5,0(r2)
   17930:	e009883a 	mov	r4,fp
   17934:	303ee83a 	callr	r6
   17938:	88800117 	ldw	r2,4(r17)
   1793c:	98bfc81e 	bne	r19,r2,17860 <__call_exitprocs+0x64>
   17940:	b8800017 	ldw	r2,0(r23)
   17944:	147fd526 	beq	r2,r17,1789c <__call_exitprocs+0xa0>
   17948:	003fc506 	br	17860 <__call_exitprocs+0x64>
   1794c:	8c000115 	stw	r16,4(r17)
   17950:	003fea06 	br	178fc <__call_exitprocs+0x100>
   17954:	2105883a 	add	r2,r4,r4
   17958:	1485883a 	add	r2,r2,r18
   1795c:	11000017 	ldw	r4,0(r2)
   17960:	303ee83a 	callr	r6
   17964:	003ff406 	br	17938 <__call_exitprocs+0x13c>
   17968:	303ee83a 	callr	r6
   1796c:	003ff206 	br	17938 <__call_exitprocs+0x13c>
   17970:	88800117 	ldw	r2,4(r17)
   17974:	1000081e 	bne	r2,zero,17998 <__call_exitprocs+0x19c>
   17978:	89000017 	ldw	r4,0(r17)
   1797c:	20000726 	beq	r4,zero,1799c <__call_exitprocs+0x1a0>
   17980:	b9000015 	stw	r4,0(r23)
   17984:	8809883a 	mov	r4,r17
   17988:	00000000 	call	0 <__reset>
   1798c:	bc400017 	ldw	r17,0(r23)
   17990:	883fb71e 	bne	r17,zero,17870 <__call_exitprocs+0x74>
   17994:	003fc506 	br	178ac <__call_exitprocs+0xb0>
   17998:	89000017 	ldw	r4,0(r17)
   1799c:	882f883a 	mov	r23,r17
   179a0:	2023883a 	mov	r17,r4
   179a4:	883fb21e 	bne	r17,zero,17870 <__call_exitprocs+0x74>
   179a8:	003fc006 	br	178ac <__call_exitprocs+0xb0>

000179ac <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   179ac:	defffd04 	addi	sp,sp,-12
   179b0:	df000215 	stw	fp,8(sp)
   179b4:	df000204 	addi	fp,sp,8
   179b8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   179bc:	e0bfff17 	ldw	r2,-4(fp)
   179c0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   179c4:	e0bffe17 	ldw	r2,-8(fp)
   179c8:	1005003a 	cmpeq	r2,r2,zero
   179cc:	1000021e 	bne	r2,zero,179d8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   179d0:	002af070 	cmpltui	zero,zero,43969
   179d4:	00000106 	br	179dc <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   179d8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   179dc:	e037883a 	mov	sp,fp
   179e0:	df000017 	ldw	fp,0(sp)
   179e4:	dec00104 	addi	sp,sp,4
   179e8:	f800283a 	ret

000179ec <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   179ec:	defffd04 	addi	sp,sp,-12
   179f0:	dfc00215 	stw	ra,8(sp)
   179f4:	df000115 	stw	fp,4(sp)
   179f8:	df000104 	addi	fp,sp,4
   179fc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   17a00:	008000b4 	movhi	r2,2
   17a04:	10adce44 	addi	r2,r2,-18631
   17a08:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   17a0c:	e13fff17 	ldw	r4,-4(fp)
   17a10:	00179ac0 	call	179ac <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   17a14:	003fff06 	br	17a14 <_exit+0x28>
   17a18:	000177f8 	rdprs	zero,zero,1503
